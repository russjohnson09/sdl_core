/**
 * @file HMI_API.cc
 * @brief Generated class HMI_API source file.
 *
 * This class is a part of SmartObjects solution. It provides
 * factory functionallity which allows client to use SmartSchemas
 * in accordance with definitions from HMI_API.xml file
 */
// Copyright (c) 2013, Ford Motor Company
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
//
// Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following
// disclaimer in the documentation and/or other materials provided with the
// distribution.
//
// Neither the name of the Ford Motor Company nor the names of its contributors
// may be used to endorse or promote products derived from this software
// without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 'A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

#include <map>
#include <set>

#include "HMI_API_schema.h"
#include "smart_objects/always_true_schema_item.h"
#include "smart_objects/always_false_schema_item.h"
#include "smart_objects/array_schema_item.h"
#include "smart_objects/bool_schema_item.h"
#include "smart_objects/object_schema_item.h"
#include "smart_objects/string_schema_item.h"
#include "smart_objects/enum_schema_item.h"
#include "smart_objects/number_schema_item.h"
#include "smart_objects/schema_item_parameter.h"

using namespace ns_smart_device_link::ns_smart_objects;

hmi_apis::HMI_API::HMI_API()
 : ns_smart_device_link::ns_json_handler::CSmartFactory<FunctionID::eType, messageType::eType, StructIdentifiers::eType>() {
  TStructsSchemaItems struct_schema_items;
  InitStructSchemes(struct_schema_items);

  std::set<FunctionID::eType> function_id_items;
  function_id_items.insert(FunctionID::Buttons_GetCapabilities);
  function_id_items.insert(FunctionID::Buttons_ButtonPress);
  function_id_items.insert(FunctionID::Buttons_OnButtonEvent);
  function_id_items.insert(FunctionID::Buttons_OnButtonPress);
  function_id_items.insert(FunctionID::Buttons_OnButtonSubscription);
  function_id_items.insert(FunctionID::BasicCommunication_GetSystemTime);
  function_id_items.insert(FunctionID::BasicCommunication_OnSystemTimeReady);
  function_id_items.insert(FunctionID::BasicCommunication_OnReady);
  function_id_items.insert(FunctionID::BasicCommunication_OnStartDeviceDiscovery);
  function_id_items.insert(FunctionID::BasicCommunication_OnUpdateDeviceList);
  function_id_items.insert(FunctionID::BasicCommunication_OnResumeAudioSource);
  function_id_items.insert(FunctionID::BasicCommunication_OnSDLPersistenceComplete);
  function_id_items.insert(FunctionID::BasicCommunication_UpdateAppList);
  function_id_items.insert(FunctionID::BasicCommunication_UpdateDeviceList);
  function_id_items.insert(FunctionID::BasicCommunication_OnFileRemoved);
  function_id_items.insert(FunctionID::BasicCommunication_OnDeviceChosen);
  function_id_items.insert(FunctionID::BasicCommunication_OnFindApplications);
  function_id_items.insert(FunctionID::BasicCommunication_ActivateApp);
  function_id_items.insert(FunctionID::BasicCommunication_CloseApplication);
  function_id_items.insert(FunctionID::BasicCommunication_OnAppActivated);
  function_id_items.insert(FunctionID::BasicCommunication_OnAppDeactivated);
  function_id_items.insert(FunctionID::BasicCommunication_OnAppRegistered);
  function_id_items.insert(FunctionID::BasicCommunication_OnAppUnregistered);
  function_id_items.insert(FunctionID::BasicCommunication_OnExitApplication);
  function_id_items.insert(FunctionID::BasicCommunication_OnExitAllApplications);
  function_id_items.insert(FunctionID::BasicCommunication_OnAwakeSDL);
  function_id_items.insert(FunctionID::BasicCommunication_MixingAudioSupported);
  function_id_items.insert(FunctionID::BasicCommunication_DialNumber);
  function_id_items.insert(FunctionID::BasicCommunication_OnSystemRequest);
  function_id_items.insert(FunctionID::BasicCommunication_SystemRequest);
  function_id_items.insert(FunctionID::BasicCommunication_PolicyUpdate);
  function_id_items.insert(FunctionID::BasicCommunication_OnSDLClose);
  function_id_items.insert(FunctionID::BasicCommunication_OnPutFile);
  function_id_items.insert(FunctionID::BasicCommunication_GetFilePath);
  function_id_items.insert(FunctionID::BasicCommunication_GetSystemInfo);
  function_id_items.insert(FunctionID::BasicCommunication_OnSystemInfoChanged);
  function_id_items.insert(FunctionID::BasicCommunication_OnIgnitionCycleOver);
  function_id_items.insert(FunctionID::BasicCommunication_DecryptCertificate);
  function_id_items.insert(FunctionID::BasicCommunication_OnEventChanged);
  function_id_items.insert(FunctionID::BasicCommunication_OnSystemCapabilityUpdated);
  function_id_items.insert(FunctionID::VR_IsReady);
  function_id_items.insert(FunctionID::VR_Started);
  function_id_items.insert(FunctionID::VR_Stopped);
  function_id_items.insert(FunctionID::VR_AddCommand);
  function_id_items.insert(FunctionID::VR_DeleteCommand);
  function_id_items.insert(FunctionID::VR_PerformInteraction);
  function_id_items.insert(FunctionID::VR_OnCommand);
  function_id_items.insert(FunctionID::VR_ChangeRegistration);
  function_id_items.insert(FunctionID::VR_OnLanguageChange);
  function_id_items.insert(FunctionID::VR_GetSupportedLanguages);
  function_id_items.insert(FunctionID::VR_GetLanguage);
  function_id_items.insert(FunctionID::VR_GetCapabilities);
  function_id_items.insert(FunctionID::TTS_GetCapabilities);
  function_id_items.insert(FunctionID::TTS_Started);
  function_id_items.insert(FunctionID::TTS_Stopped);
  function_id_items.insert(FunctionID::TTS_IsReady);
  function_id_items.insert(FunctionID::TTS_Speak);
  function_id_items.insert(FunctionID::TTS_StopSpeaking);
  function_id_items.insert(FunctionID::TTS_ChangeRegistration);
  function_id_items.insert(FunctionID::TTS_OnLanguageChange);
  function_id_items.insert(FunctionID::TTS_GetSupportedLanguages);
  function_id_items.insert(FunctionID::TTS_GetLanguage);
  function_id_items.insert(FunctionID::TTS_SetGlobalProperties);
  function_id_items.insert(FunctionID::TTS_OnResetTimeout);
  function_id_items.insert(FunctionID::UI_Alert);
  function_id_items.insert(FunctionID::UI_Show);
  function_id_items.insert(FunctionID::UI_AddCommand);
  function_id_items.insert(FunctionID::UI_DeleteCommand);
  function_id_items.insert(FunctionID::UI_AddSubMenu);
  function_id_items.insert(FunctionID::UI_DeleteSubMenu);
  function_id_items.insert(FunctionID::UI_PerformInteraction);
  function_id_items.insert(FunctionID::UI_SetMediaClockTimer);
  function_id_items.insert(FunctionID::UI_SetGlobalProperties);
  function_id_items.insert(FunctionID::UI_OnCommand);
  function_id_items.insert(FunctionID::UI_OnSystemContext);
  function_id_items.insert(FunctionID::UI_GetCapabilities);
  function_id_items.insert(FunctionID::UI_ChangeRegistration);
  function_id_items.insert(FunctionID::UI_OnLanguageChange);
  function_id_items.insert(FunctionID::UI_GetSupportedLanguages);
  function_id_items.insert(FunctionID::UI_GetLanguage);
  function_id_items.insert(FunctionID::UI_OnDriverDistraction);
  function_id_items.insert(FunctionID::UI_SetAppIcon);
  function_id_items.insert(FunctionID::UI_SetDisplayLayout);
  function_id_items.insert(FunctionID::UI_ShowCustomForm);
  function_id_items.insert(FunctionID::UI_OnKeyboardInput);
  function_id_items.insert(FunctionID::UI_OnTouchEvent);
  function_id_items.insert(FunctionID::UI_Slider);
  function_id_items.insert(FunctionID::UI_ScrollableMessage);
  function_id_items.insert(FunctionID::UI_PerformAudioPassThru);
  function_id_items.insert(FunctionID::UI_EndAudioPassThru);
  function_id_items.insert(FunctionID::UI_IsReady);
  function_id_items.insert(FunctionID::UI_ClosePopUp);
  function_id_items.insert(FunctionID::UI_OnResetTimeout);
  function_id_items.insert(FunctionID::UI_OnRecordStart);
  function_id_items.insert(FunctionID::UI_SendHapticData);
  function_id_items.insert(FunctionID::Navigation_IsReady);
  function_id_items.insert(FunctionID::Navigation_SendLocation);
  function_id_items.insert(FunctionID::Navigation_ShowConstantTBT);
  function_id_items.insert(FunctionID::Navigation_AlertManeuver);
  function_id_items.insert(FunctionID::Navigation_UpdateTurnList);
  function_id_items.insert(FunctionID::Navigation_OnTBTClientState);
  function_id_items.insert(FunctionID::Navigation_SetVideoConfig);
  function_id_items.insert(FunctionID::Navigation_StartStream);
  function_id_items.insert(FunctionID::Navigation_StopStream);
  function_id_items.insert(FunctionID::Navigation_StartAudioStream);
  function_id_items.insert(FunctionID::Navigation_StopAudioStream);
  function_id_items.insert(FunctionID::Navigation_OnAudioDataStreaming);
  function_id_items.insert(FunctionID::Navigation_OnVideoDataStreaming);
  function_id_items.insert(FunctionID::Navigation_GetWayPoints);
  function_id_items.insert(FunctionID::Navigation_OnWayPointChange);
  function_id_items.insert(FunctionID::Navigation_SubscribeWayPoints);
  function_id_items.insert(FunctionID::Navigation_UnsubscribeWayPoints);
  function_id_items.insert(FunctionID::VehicleInfo_IsReady);
  function_id_items.insert(FunctionID::VehicleInfo_GetVehicleType);
  function_id_items.insert(FunctionID::VehicleInfo_ReadDID);
  function_id_items.insert(FunctionID::VehicleInfo_GetDTCs);
  function_id_items.insert(FunctionID::VehicleInfo_DiagnosticMessage);
  function_id_items.insert(FunctionID::VehicleInfo_SubscribeVehicleData);
  function_id_items.insert(FunctionID::VehicleInfo_UnsubscribeVehicleData);
  function_id_items.insert(FunctionID::VehicleInfo_GetVehicleData);
  function_id_items.insert(FunctionID::VehicleInfo_OnVehicleData);
  function_id_items.insert(FunctionID::SDL_ActivateApp);
  function_id_items.insert(FunctionID::SDL_GetUserFriendlyMessage);
  function_id_items.insert(FunctionID::SDL_OnAllowSDLFunctionality);
  function_id_items.insert(FunctionID::SDL_OnReceivedPolicyUpdate);
  function_id_items.insert(FunctionID::SDL_OnPolicyUpdate);
  function_id_items.insert(FunctionID::SDL_GetListOfPermissions);
  function_id_items.insert(FunctionID::SDL_OnAppPermissionConsent);
  function_id_items.insert(FunctionID::SDL_OnAppPermissionChanged);
  function_id_items.insert(FunctionID::SDL_OnSDLConsentNeeded);
  function_id_items.insert(FunctionID::SDL_UpdateSDL);
  function_id_items.insert(FunctionID::SDL_GetStatusUpdate);
  function_id_items.insert(FunctionID::SDL_OnStatusUpdate);
  function_id_items.insert(FunctionID::SDL_OnSystemError);
  function_id_items.insert(FunctionID::SDL_AddStatisticsInfo);
  function_id_items.insert(FunctionID::SDL_GetURLS);
  function_id_items.insert(FunctionID::SDL_OnDeviceStateChanged);
  function_id_items.insert(FunctionID::RC_IsReady);
  function_id_items.insert(FunctionID::RC_GetCapabilities);
  function_id_items.insert(FunctionID::RC_SetInteriorVehicleData);
  function_id_items.insert(FunctionID::RC_GetInteriorVehicleData);
  function_id_items.insert(FunctionID::RC_GetInteriorVehicleDataConsent);
  function_id_items.insert(FunctionID::RC_OnInteriorVehicleData);
  function_id_items.insert(FunctionID::RC_OnRemoteControlSettings);
  function_id_items.insert(FunctionID::RC_OnRCStatus);
  function_id_items.insert(FunctionID::AppService_PublishAppService);
  function_id_items.insert(FunctionID::AppService_OnAppServiceData);
  function_id_items.insert(FunctionID::AppService_GetAppServiceData);
  function_id_items.insert(FunctionID::AppService_PerformAppServiceInteraction);
  function_id_items.insert(FunctionID::AppService_GetAppServiceRecords);
  function_id_items.insert(FunctionID::AppService_AppServiceActivation);
  function_id_items.insert(FunctionID::AppService_GetActiveServiceConsent);

  std::set<messageType::eType> message_type_items;
  message_type_items.insert(messageType::request);
  message_type_items.insert(messageType::response);
  message_type_items.insert(messageType::notification);
  message_type_items.insert(messageType::error_response);

  InitFunctionSchemes(struct_schema_items, function_id_items, message_type_items);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::ProvideObjectSchemaItemForStruct(
    const TStructsSchemaItems &struct_schema_items,
    const StructIdentifiers::eType struct_id) {
  const TStructsSchemaItems::const_iterator it = struct_schema_items.find(struct_id);
  if (it != struct_schema_items.end()) {
    return it->second;
  }

  return ns_smart_device_link::ns_smart_objects::CAlwaysFalseSchemaItem::create();
}

void hmi_apis::HMI_API::InitStructSchemes(
    TStructsSchemaItems &struct_schema_items) {
  std::shared_ptr<ISchemaItem> struct_schema_item_Common_Coordinate = InitStructSchemaItem_Common_Coordinate(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_Coordinate, struct_schema_item_Common_Coordinate));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_Coordinate, CSmartSchema(struct_schema_item_Common_Coordinate)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_FuelRange = InitStructSchemaItem_Common_FuelRange(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_FuelRange, struct_schema_item_Common_FuelRange));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_FuelRange, CSmartSchema(struct_schema_item_Common_FuelRange)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_UserFriendlyMessage = InitStructSchemaItem_Common_UserFriendlyMessage(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_UserFriendlyMessage, struct_schema_item_Common_UserFriendlyMessage));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_UserFriendlyMessage, CSmartSchema(struct_schema_item_Common_UserFriendlyMessage)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_PermissionItem = InitStructSchemaItem_Common_PermissionItem(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_PermissionItem, struct_schema_item_Common_PermissionItem));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_PermissionItem, CSmartSchema(struct_schema_item_Common_PermissionItem)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_ServiceInfo = InitStructSchemaItem_Common_ServiceInfo(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_ServiceInfo, struct_schema_item_Common_ServiceInfo));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_ServiceInfo, CSmartSchema(struct_schema_item_Common_ServiceInfo)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_ExternalConsentStatus = InitStructSchemaItem_Common_ExternalConsentStatus(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_ExternalConsentStatus, struct_schema_item_Common_ExternalConsentStatus));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_ExternalConsentStatus, CSmartSchema(struct_schema_item_Common_ExternalConsentStatus)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_MassageModeData = InitStructSchemaItem_Common_MassageModeData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_MassageModeData, struct_schema_item_Common_MassageModeData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_MassageModeData, CSmartSchema(struct_schema_item_Common_MassageModeData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_MassageCushionFirmness = InitStructSchemaItem_Common_MassageCushionFirmness(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_MassageCushionFirmness, struct_schema_item_Common_MassageCushionFirmness));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_MassageCushionFirmness, CSmartSchema(struct_schema_item_Common_MassageCushionFirmness)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_SeatMemoryAction = InitStructSchemaItem_Common_SeatMemoryAction(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_SeatMemoryAction, struct_schema_item_Common_SeatMemoryAction));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_SeatMemoryAction, CSmartSchema(struct_schema_item_Common_SeatMemoryAction)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_SeatControlData = InitStructSchemaItem_Common_SeatControlData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_SeatControlData, struct_schema_item_Common_SeatControlData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_SeatControlData, CSmartSchema(struct_schema_item_Common_SeatControlData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_SeatControlCapabilities = InitStructSchemaItem_Common_SeatControlCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_SeatControlCapabilities, struct_schema_item_Common_SeatControlCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_SeatControlCapabilities, CSmartSchema(struct_schema_item_Common_SeatControlCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_RdsData = InitStructSchemaItem_Common_RdsData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_RdsData, struct_schema_item_Common_RdsData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_RdsData, CSmartSchema(struct_schema_item_Common_RdsData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_StationIDNumber = InitStructSchemaItem_Common_StationIDNumber(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_StationIDNumber, struct_schema_item_Common_StationIDNumber));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_StationIDNumber, CSmartSchema(struct_schema_item_Common_StationIDNumber)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_GPSData = InitStructSchemaItem_Common_GPSData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_GPSData, struct_schema_item_Common_GPSData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_GPSData, CSmartSchema(struct_schema_item_Common_GPSData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_SisData = InitStructSchemaItem_Common_SisData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_SisData, struct_schema_item_Common_SisData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_SisData, CSmartSchema(struct_schema_item_Common_SisData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_RadioControlData = InitStructSchemaItem_Common_RadioControlData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_RadioControlData, struct_schema_item_Common_RadioControlData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_RadioControlData, CSmartSchema(struct_schema_item_Common_RadioControlData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_RadioControlCapabilities = InitStructSchemaItem_Common_RadioControlCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_RadioControlCapabilities, struct_schema_item_Common_RadioControlCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_RadioControlCapabilities, CSmartSchema(struct_schema_item_Common_RadioControlCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_Temperature = InitStructSchemaItem_Common_Temperature(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_Temperature, struct_schema_item_Common_Temperature));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_Temperature, CSmartSchema(struct_schema_item_Common_Temperature)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_ClimateControlData = InitStructSchemaItem_Common_ClimateControlData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_ClimateControlData, struct_schema_item_Common_ClimateControlData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_ClimateControlData, CSmartSchema(struct_schema_item_Common_ClimateControlData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_ClimateControlCapabilities = InitStructSchemaItem_Common_ClimateControlCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_ClimateControlCapabilities, struct_schema_item_Common_ClimateControlCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_ClimateControlCapabilities, CSmartSchema(struct_schema_item_Common_ClimateControlCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_EqualizerSettings = InitStructSchemaItem_Common_EqualizerSettings(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_EqualizerSettings, struct_schema_item_Common_EqualizerSettings));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_EqualizerSettings, CSmartSchema(struct_schema_item_Common_EqualizerSettings)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_AudioControlData = InitStructSchemaItem_Common_AudioControlData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_AudioControlData, struct_schema_item_Common_AudioControlData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_AudioControlData, CSmartSchema(struct_schema_item_Common_AudioControlData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_AudioControlCapabilities = InitStructSchemaItem_Common_AudioControlCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_AudioControlCapabilities, struct_schema_item_Common_AudioControlCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_AudioControlCapabilities, CSmartSchema(struct_schema_item_Common_AudioControlCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_RGBColor = InitStructSchemaItem_Common_RGBColor(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_RGBColor, struct_schema_item_Common_RGBColor));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_RGBColor, CSmartSchema(struct_schema_item_Common_RGBColor)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_LightCapabilities = InitStructSchemaItem_Common_LightCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_LightCapabilities, struct_schema_item_Common_LightCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_LightCapabilities, CSmartSchema(struct_schema_item_Common_LightCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_LightControlCapabilities = InitStructSchemaItem_Common_LightControlCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_LightControlCapabilities, struct_schema_item_Common_LightControlCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_LightControlCapabilities, CSmartSchema(struct_schema_item_Common_LightControlCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_LightState = InitStructSchemaItem_Common_LightState(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_LightState, struct_schema_item_Common_LightState));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_LightState, CSmartSchema(struct_schema_item_Common_LightState)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_LightControlData = InitStructSchemaItem_Common_LightControlData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_LightControlData, struct_schema_item_Common_LightControlData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_LightControlData, CSmartSchema(struct_schema_item_Common_LightControlData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_HMISettingsControlData = InitStructSchemaItem_Common_HMISettingsControlData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_HMISettingsControlData, struct_schema_item_Common_HMISettingsControlData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_HMISettingsControlData, CSmartSchema(struct_schema_item_Common_HMISettingsControlData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_HMISettingsControlCapabilities = InitStructSchemaItem_Common_HMISettingsControlCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_HMISettingsControlCapabilities, struct_schema_item_Common_HMISettingsControlCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_HMISettingsControlCapabilities, CSmartSchema(struct_schema_item_Common_HMISettingsControlCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_ModuleData = InitStructSchemaItem_Common_ModuleData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_ModuleData, struct_schema_item_Common_ModuleData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_ModuleData, CSmartSchema(struct_schema_item_Common_ModuleData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_TextField = InitStructSchemaItem_Common_TextField(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_TextField, struct_schema_item_Common_TextField));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_TextField, CSmartSchema(struct_schema_item_Common_TextField)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_ButtonCapabilities = InitStructSchemaItem_Common_ButtonCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_ButtonCapabilities, struct_schema_item_Common_ButtonCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_ButtonCapabilities, CSmartSchema(struct_schema_item_Common_ButtonCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_VehicleDataResult = InitStructSchemaItem_Common_VehicleDataResult(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_VehicleDataResult, struct_schema_item_Common_VehicleDataResult));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_VehicleDataResult, CSmartSchema(struct_schema_item_Common_VehicleDataResult)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_TouchCoord = InitStructSchemaItem_Common_TouchCoord(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_TouchCoord, struct_schema_item_Common_TouchCoord));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_TouchCoord, CSmartSchema(struct_schema_item_Common_TouchCoord)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_TouchEvent = InitStructSchemaItem_Common_TouchEvent(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_TouchEvent, struct_schema_item_Common_TouchEvent));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_TouchEvent, CSmartSchema(struct_schema_item_Common_TouchEvent)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_PresetBankCapabilities = InitStructSchemaItem_Common_PresetBankCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_PresetBankCapabilities, struct_schema_item_Common_PresetBankCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_PresetBankCapabilities, CSmartSchema(struct_schema_item_Common_PresetBankCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_Image = InitStructSchemaItem_Common_Image(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_Image, struct_schema_item_Common_Image));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_Image, CSmartSchema(struct_schema_item_Common_Image)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_DeviceInfo = InitStructSchemaItem_Common_DeviceInfo(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_DeviceInfo, struct_schema_item_Common_DeviceInfo));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_DeviceInfo, CSmartSchema(struct_schema_item_Common_DeviceInfo)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_SoftButton = InitStructSchemaItem_Common_SoftButton(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_SoftButton, struct_schema_item_Common_SoftButton));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_SoftButton, CSmartSchema(struct_schema_item_Common_SoftButton)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_TTSChunk = InitStructSchemaItem_Common_TTSChunk(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_TTSChunk, struct_schema_item_Common_TTSChunk));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_TTSChunk, CSmartSchema(struct_schema_item_Common_TTSChunk)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_TemplateColorScheme = InitStructSchemaItem_Common_TemplateColorScheme(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_TemplateColorScheme, struct_schema_item_Common_TemplateColorScheme));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_TemplateColorScheme, CSmartSchema(struct_schema_item_Common_TemplateColorScheme)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_HMIApplication = InitStructSchemaItem_Common_HMIApplication(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_HMIApplication, struct_schema_item_Common_HMIApplication));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_HMIApplication, CSmartSchema(struct_schema_item_Common_HMIApplication)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_MenuParams = InitStructSchemaItem_Common_MenuParams(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_MenuParams, struct_schema_item_Common_MenuParams));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_MenuParams, CSmartSchema(struct_schema_item_Common_MenuParams)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_Choice = InitStructSchemaItem_Common_Choice(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_Choice, struct_schema_item_Common_Choice));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_Choice, CSmartSchema(struct_schema_item_Common_Choice)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_VrHelpItem = InitStructSchemaItem_Common_VrHelpItem(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_VrHelpItem, struct_schema_item_Common_VrHelpItem));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_VrHelpItem, CSmartSchema(struct_schema_item_Common_VrHelpItem)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_TimeFormat = InitStructSchemaItem_Common_TimeFormat(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_TimeFormat, struct_schema_item_Common_TimeFormat));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_TimeFormat, CSmartSchema(struct_schema_item_Common_TimeFormat)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_TouchEventCapabilities = InitStructSchemaItem_Common_TouchEventCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_TouchEventCapabilities, struct_schema_item_Common_TouchEventCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_TouchEventCapabilities, CSmartSchema(struct_schema_item_Common_TouchEventCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_ImageResolution = InitStructSchemaItem_Common_ImageResolution(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_ImageResolution, struct_schema_item_Common_ImageResolution));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_ImageResolution, CSmartSchema(struct_schema_item_Common_ImageResolution)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_ScreenParams = InitStructSchemaItem_Common_ScreenParams(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_ScreenParams, struct_schema_item_Common_ScreenParams));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_ScreenParams, CSmartSchema(struct_schema_item_Common_ScreenParams)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_ImageField = InitStructSchemaItem_Common_ImageField(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_ImageField, struct_schema_item_Common_ImageField));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_ImageField, CSmartSchema(struct_schema_item_Common_ImageField)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_VideoStreamingFormat = InitStructSchemaItem_Common_VideoStreamingFormat(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_VideoStreamingFormat, struct_schema_item_Common_VideoStreamingFormat));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_VideoStreamingFormat, CSmartSchema(struct_schema_item_Common_VideoStreamingFormat)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_VideoConfig = InitStructSchemaItem_Common_VideoConfig(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_VideoConfig, struct_schema_item_Common_VideoConfig));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_VideoConfig, CSmartSchema(struct_schema_item_Common_VideoConfig)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_DisplayCapabilities = InitStructSchemaItem_Common_DisplayCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_DisplayCapabilities, struct_schema_item_Common_DisplayCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_DisplayCapabilities, CSmartSchema(struct_schema_item_Common_DisplayCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_SoftButtonCapabilities = InitStructSchemaItem_Common_SoftButtonCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_SoftButtonCapabilities, struct_schema_item_Common_SoftButtonCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_SoftButtonCapabilities, CSmartSchema(struct_schema_item_Common_SoftButtonCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_HMICapabilities = InitStructSchemaItem_Common_HMICapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_HMICapabilities, struct_schema_item_Common_HMICapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_HMICapabilities, CSmartSchema(struct_schema_item_Common_HMICapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_AudioPassThruCapabilities = InitStructSchemaItem_Common_AudioPassThruCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_AudioPassThruCapabilities, struct_schema_item_Common_AudioPassThruCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_AudioPassThruCapabilities, CSmartSchema(struct_schema_item_Common_AudioPassThruCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_TextFieldStruct = InitStructSchemaItem_Common_TextFieldStruct(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_TextFieldStruct, struct_schema_item_Common_TextFieldStruct));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_TextFieldStruct, CSmartSchema(struct_schema_item_Common_TextFieldStruct)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_KeyboardProperties = InitStructSchemaItem_Common_KeyboardProperties(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_KeyboardProperties, struct_schema_item_Common_KeyboardProperties));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_KeyboardProperties, CSmartSchema(struct_schema_item_Common_KeyboardProperties)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_Turn = InitStructSchemaItem_Common_Turn(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_Turn, struct_schema_item_Common_Turn));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_Turn, CSmartSchema(struct_schema_item_Common_Turn)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_VehicleType = InitStructSchemaItem_Common_VehicleType(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_VehicleType, struct_schema_item_Common_VehicleType));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_VehicleType, CSmartSchema(struct_schema_item_Common_VehicleType)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_SingleTireStatus = InitStructSchemaItem_Common_SingleTireStatus(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_SingleTireStatus, struct_schema_item_Common_SingleTireStatus));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_SingleTireStatus, CSmartSchema(struct_schema_item_Common_SingleTireStatus)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_DIDResult = InitStructSchemaItem_Common_DIDResult(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_DIDResult, struct_schema_item_Common_DIDResult));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_DIDResult, CSmartSchema(struct_schema_item_Common_DIDResult)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_HeadLampStatus = InitStructSchemaItem_Common_HeadLampStatus(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_HeadLampStatus, struct_schema_item_Common_HeadLampStatus));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_HeadLampStatus, CSmartSchema(struct_schema_item_Common_HeadLampStatus)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_TireStatus = InitStructSchemaItem_Common_TireStatus(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_TireStatus, struct_schema_item_Common_TireStatus));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_TireStatus, CSmartSchema(struct_schema_item_Common_TireStatus)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_BeltStatus = InitStructSchemaItem_Common_BeltStatus(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_BeltStatus, struct_schema_item_Common_BeltStatus));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_BeltStatus, CSmartSchema(struct_schema_item_Common_BeltStatus)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_BodyInformation = InitStructSchemaItem_Common_BodyInformation(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_BodyInformation, struct_schema_item_Common_BodyInformation));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_BodyInformation, CSmartSchema(struct_schema_item_Common_BodyInformation)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_DeviceStatus = InitStructSchemaItem_Common_DeviceStatus(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_DeviceStatus, struct_schema_item_Common_DeviceStatus));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_DeviceStatus, CSmartSchema(struct_schema_item_Common_DeviceStatus)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_ECallInfo = InitStructSchemaItem_Common_ECallInfo(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_ECallInfo, struct_schema_item_Common_ECallInfo));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_ECallInfo, CSmartSchema(struct_schema_item_Common_ECallInfo)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_AirbagStatus = InitStructSchemaItem_Common_AirbagStatus(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_AirbagStatus, struct_schema_item_Common_AirbagStatus));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_AirbagStatus, CSmartSchema(struct_schema_item_Common_AirbagStatus)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_EmergencyEvent = InitStructSchemaItem_Common_EmergencyEvent(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_EmergencyEvent, struct_schema_item_Common_EmergencyEvent));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_EmergencyEvent, CSmartSchema(struct_schema_item_Common_EmergencyEvent)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_ClusterModeStatus = InitStructSchemaItem_Common_ClusterModeStatus(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_ClusterModeStatus, struct_schema_item_Common_ClusterModeStatus));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_ClusterModeStatus, CSmartSchema(struct_schema_item_Common_ClusterModeStatus)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_MyKey = InitStructSchemaItem_Common_MyKey(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_MyKey, struct_schema_item_Common_MyKey));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_MyKey, CSmartSchema(struct_schema_item_Common_MyKey)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_DateTime = InitStructSchemaItem_Common_DateTime(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_DateTime, struct_schema_item_Common_DateTime));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_DateTime, CSmartSchema(struct_schema_item_Common_DateTime)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_OASISAddress = InitStructSchemaItem_Common_OASISAddress(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_OASISAddress, struct_schema_item_Common_OASISAddress));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_OASISAddress, CSmartSchema(struct_schema_item_Common_OASISAddress)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_LocationDetails = InitStructSchemaItem_Common_LocationDetails(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_LocationDetails, struct_schema_item_Common_LocationDetails));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_LocationDetails, CSmartSchema(struct_schema_item_Common_LocationDetails)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_NavigationCapability = InitStructSchemaItem_Common_NavigationCapability(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_NavigationCapability, struct_schema_item_Common_NavigationCapability));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_NavigationCapability, CSmartSchema(struct_schema_item_Common_NavigationCapability)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_PhoneCapability = InitStructSchemaItem_Common_PhoneCapability(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_PhoneCapability, struct_schema_item_Common_PhoneCapability));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_PhoneCapability, CSmartSchema(struct_schema_item_Common_PhoneCapability)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_VideoStreamingCapability = InitStructSchemaItem_Common_VideoStreamingCapability(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_VideoStreamingCapability, struct_schema_item_Common_VideoStreamingCapability));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_VideoStreamingCapability, CSmartSchema(struct_schema_item_Common_VideoStreamingCapability)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_SystemCapabilities = InitStructSchemaItem_Common_SystemCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_SystemCapabilities, struct_schema_item_Common_SystemCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_SystemCapabilities, CSmartSchema(struct_schema_item_Common_SystemCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_RemoteControlCapabilities = InitStructSchemaItem_Common_RemoteControlCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_RemoteControlCapabilities, struct_schema_item_Common_RemoteControlCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_RemoteControlCapabilities, CSmartSchema(struct_schema_item_Common_RemoteControlCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_Rectangle = InitStructSchemaItem_Common_Rectangle(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_Rectangle, struct_schema_item_Common_Rectangle));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_Rectangle, CSmartSchema(struct_schema_item_Common_Rectangle)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_HapticRect = InitStructSchemaItem_Common_HapticRect(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_HapticRect, struct_schema_item_Common_HapticRect));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_HapticRect, CSmartSchema(struct_schema_item_Common_HapticRect)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_SyncMsgVersion = InitStructSchemaItem_Common_SyncMsgVersion(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_SyncMsgVersion, struct_schema_item_Common_SyncMsgVersion));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_SyncMsgVersion, CSmartSchema(struct_schema_item_Common_SyncMsgVersion)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_MediaServiceManifest = InitStructSchemaItem_Common_MediaServiceManifest(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_MediaServiceManifest, struct_schema_item_Common_MediaServiceManifest));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_MediaServiceManifest, CSmartSchema(struct_schema_item_Common_MediaServiceManifest)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_MediaServiceData = InitStructSchemaItem_Common_MediaServiceData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_MediaServiceData, struct_schema_item_Common_MediaServiceData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_MediaServiceData, CSmartSchema(struct_schema_item_Common_MediaServiceData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_WeatherServiceManifest = InitStructSchemaItem_Common_WeatherServiceManifest(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_WeatherServiceManifest, struct_schema_item_Common_WeatherServiceManifest));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_WeatherServiceManifest, CSmartSchema(struct_schema_item_Common_WeatherServiceManifest)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_WeatherAlert = InitStructSchemaItem_Common_WeatherAlert(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_WeatherAlert, struct_schema_item_Common_WeatherAlert));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_WeatherAlert, CSmartSchema(struct_schema_item_Common_WeatherAlert)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_WeatherData = InitStructSchemaItem_Common_WeatherData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_WeatherData, struct_schema_item_Common_WeatherData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_WeatherData, CSmartSchema(struct_schema_item_Common_WeatherData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_WeatherServiceData = InitStructSchemaItem_Common_WeatherServiceData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_WeatherServiceData, struct_schema_item_Common_WeatherServiceData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_WeatherServiceData, CSmartSchema(struct_schema_item_Common_WeatherServiceData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_NavigationServiceManifest = InitStructSchemaItem_Common_NavigationServiceManifest(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_NavigationServiceManifest, struct_schema_item_Common_NavigationServiceManifest));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_NavigationServiceManifest, CSmartSchema(struct_schema_item_Common_NavigationServiceManifest)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_NavigationInstruction = InitStructSchemaItem_Common_NavigationInstruction(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_NavigationInstruction, struct_schema_item_Common_NavigationInstruction));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_NavigationInstruction, CSmartSchema(struct_schema_item_Common_NavigationInstruction)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_NavigationServiceData = InitStructSchemaItem_Common_NavigationServiceData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_NavigationServiceData, struct_schema_item_Common_NavigationServiceData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_NavigationServiceData, CSmartSchema(struct_schema_item_Common_NavigationServiceData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_AppServiceManifest = InitStructSchemaItem_Common_AppServiceManifest(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_AppServiceManifest, struct_schema_item_Common_AppServiceManifest));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_AppServiceManifest, CSmartSchema(struct_schema_item_Common_AppServiceManifest)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_AppServiceRecord = InitStructSchemaItem_Common_AppServiceRecord(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_AppServiceRecord, struct_schema_item_Common_AppServiceRecord));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_AppServiceRecord, CSmartSchema(struct_schema_item_Common_AppServiceRecord)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_AppServiceData = InitStructSchemaItem_Common_AppServiceData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_AppServiceData, struct_schema_item_Common_AppServiceData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_AppServiceData, CSmartSchema(struct_schema_item_Common_AppServiceData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_AppServiceCapability = InitStructSchemaItem_Common_AppServiceCapability(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_AppServiceCapability, struct_schema_item_Common_AppServiceCapability));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_AppServiceCapability, CSmartSchema(struct_schema_item_Common_AppServiceCapability)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_AppServicesCapabilities = InitStructSchemaItem_Common_AppServicesCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_AppServicesCapabilities, struct_schema_item_Common_AppServicesCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_AppServicesCapabilities, CSmartSchema(struct_schema_item_Common_AppServicesCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Common_SystemCapability = InitStructSchemaItem_Common_SystemCapability(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Common_SystemCapability, struct_schema_item_Common_SystemCapability));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Common_SystemCapability, CSmartSchema(struct_schema_item_Common_SystemCapability)));
}

void hmi_apis::HMI_API::InitFunctionSchemes(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kMessage] = CObjectSchemaItem::SMember(CStringSchemaItem::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  CSmartSchema error_response_schema(CObjectSchemaItem::create(root_members_map));

  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Buttons_GetCapabilities, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Buttons_ButtonPress, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_GetSystemTime, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_UpdateAppList, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_UpdateDeviceList, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_ActivateApp, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_CloseApplication, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_MixingAudioSupported, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_DialNumber, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_SystemRequest, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_PolicyUpdate, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_GetFilePath, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_GetSystemInfo, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_DecryptCertificate, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_IsReady, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_AddCommand, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_DeleteCommand, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_PerformInteraction, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_ChangeRegistration, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_GetSupportedLanguages, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_GetLanguage, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_GetCapabilities, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_GetCapabilities, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_IsReady, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_Speak, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_StopSpeaking, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_ChangeRegistration, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_GetSupportedLanguages, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_GetLanguage, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_SetGlobalProperties, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_Alert, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_Show, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_AddCommand, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_DeleteCommand, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_AddSubMenu, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_DeleteSubMenu, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_PerformInteraction, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_SetMediaClockTimer, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_SetGlobalProperties, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_GetCapabilities, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_ChangeRegistration, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_GetSupportedLanguages, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_GetLanguage, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_SetAppIcon, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_SetDisplayLayout, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_ShowCustomForm, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_Slider, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_ScrollableMessage, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_PerformAudioPassThru, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_EndAudioPassThru, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_IsReady, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_ClosePopUp, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_SendHapticData, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_IsReady, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_SendLocation, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_ShowConstantTBT, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_AlertManeuver, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_UpdateTurnList, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_SetVideoConfig, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_StartStream, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_StopStream, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_StartAudioStream, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_StopAudioStream, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_GetWayPoints, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_SubscribeWayPoints, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_UnsubscribeWayPoints, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_IsReady, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_GetVehicleType, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_ReadDID, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_GetDTCs, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_DiagnosticMessage, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_SubscribeVehicleData, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_UnsubscribeVehicleData, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_GetVehicleData, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_ActivateApp, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_GetUserFriendlyMessage, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_GetListOfPermissions, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_UpdateSDL, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_GetStatusUpdate, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_GetURLS, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::RC_IsReady, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::RC_GetCapabilities, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::RC_SetInteriorVehicleData, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::RC_GetInteriorVehicleData, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::RC_GetInteriorVehicleDataConsent, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AppService_PublishAppService, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AppService_GetAppServiceData, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AppService_PerformAppServiceInteraction, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AppService_GetAppServiceRecords, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AppService_AppServiceActivation, messageType::error_response), error_response_schema));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AppService_GetActiveServiceConsent, messageType::error_response), error_response_schema));

  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Buttons_GetCapabilities, messageType::request), InitFunction_Buttons_GetCapabilities_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Buttons_GetCapabilities, messageType::response), InitFunction_Buttons_GetCapabilities_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Buttons_ButtonPress, messageType::request), InitFunction_Buttons_ButtonPress_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Buttons_ButtonPress, messageType::response), InitFunction_Buttons_ButtonPress_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Buttons_OnButtonEvent, messageType::notification), InitFunction_Buttons_OnButtonEvent_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Buttons_OnButtonPress, messageType::notification), InitFunction_Buttons_OnButtonPress_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Buttons_OnButtonSubscription, messageType::notification), InitFunction_Buttons_OnButtonSubscription_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_GetSystemTime, messageType::request), InitFunction_BasicCommunication_GetSystemTime_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_GetSystemTime, messageType::response), InitFunction_BasicCommunication_GetSystemTime_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnSystemTimeReady, messageType::notification), InitFunction_BasicCommunication_OnSystemTimeReady_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnReady, messageType::notification), InitFunction_BasicCommunication_OnReady_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnStartDeviceDiscovery, messageType::notification), InitFunction_BasicCommunication_OnStartDeviceDiscovery_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnUpdateDeviceList, messageType::notification), InitFunction_BasicCommunication_OnUpdateDeviceList_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnResumeAudioSource, messageType::notification), InitFunction_BasicCommunication_OnResumeAudioSource_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnSDLPersistenceComplete, messageType::notification), InitFunction_BasicCommunication_OnSDLPersistenceComplete_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_UpdateAppList, messageType::request), InitFunction_BasicCommunication_UpdateAppList_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_UpdateAppList, messageType::response), InitFunction_BasicCommunication_UpdateAppList_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_UpdateDeviceList, messageType::request), InitFunction_BasicCommunication_UpdateDeviceList_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_UpdateDeviceList, messageType::response), InitFunction_BasicCommunication_UpdateDeviceList_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnFileRemoved, messageType::notification), InitFunction_BasicCommunication_OnFileRemoved_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnDeviceChosen, messageType::notification), InitFunction_BasicCommunication_OnDeviceChosen_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnFindApplications, messageType::notification), InitFunction_BasicCommunication_OnFindApplications_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_ActivateApp, messageType::request), InitFunction_BasicCommunication_ActivateApp_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_ActivateApp, messageType::response), InitFunction_BasicCommunication_ActivateApp_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_CloseApplication, messageType::request), InitFunction_BasicCommunication_CloseApplication_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_CloseApplication, messageType::response), InitFunction_BasicCommunication_CloseApplication_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnAppActivated, messageType::notification), InitFunction_BasicCommunication_OnAppActivated_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnAppDeactivated, messageType::notification), InitFunction_BasicCommunication_OnAppDeactivated_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnAppRegistered, messageType::notification), InitFunction_BasicCommunication_OnAppRegistered_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnAppUnregistered, messageType::notification), InitFunction_BasicCommunication_OnAppUnregistered_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnExitApplication, messageType::notification), InitFunction_BasicCommunication_OnExitApplication_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnExitAllApplications, messageType::notification), InitFunction_BasicCommunication_OnExitAllApplications_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnAwakeSDL, messageType::notification), InitFunction_BasicCommunication_OnAwakeSDL_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_MixingAudioSupported, messageType::request), InitFunction_BasicCommunication_MixingAudioSupported_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_MixingAudioSupported, messageType::response), InitFunction_BasicCommunication_MixingAudioSupported_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_DialNumber, messageType::request), InitFunction_BasicCommunication_DialNumber_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_DialNumber, messageType::response), InitFunction_BasicCommunication_DialNumber_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnSystemRequest, messageType::notification), InitFunction_BasicCommunication_OnSystemRequest_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_SystemRequest, messageType::request), InitFunction_BasicCommunication_SystemRequest_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_SystemRequest, messageType::response), InitFunction_BasicCommunication_SystemRequest_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_PolicyUpdate, messageType::request), InitFunction_BasicCommunication_PolicyUpdate_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_PolicyUpdate, messageType::response), InitFunction_BasicCommunication_PolicyUpdate_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnSDLClose, messageType::notification), InitFunction_BasicCommunication_OnSDLClose_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnPutFile, messageType::notification), InitFunction_BasicCommunication_OnPutFile_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_GetFilePath, messageType::request), InitFunction_BasicCommunication_GetFilePath_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_GetFilePath, messageType::response), InitFunction_BasicCommunication_GetFilePath_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_GetSystemInfo, messageType::request), InitFunction_BasicCommunication_GetSystemInfo_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_GetSystemInfo, messageType::response), InitFunction_BasicCommunication_GetSystemInfo_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnSystemInfoChanged, messageType::notification), InitFunction_BasicCommunication_OnSystemInfoChanged_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnIgnitionCycleOver, messageType::notification), InitFunction_BasicCommunication_OnIgnitionCycleOver_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_DecryptCertificate, messageType::request), InitFunction_BasicCommunication_DecryptCertificate_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_DecryptCertificate, messageType::response), InitFunction_BasicCommunication_DecryptCertificate_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnEventChanged, messageType::notification), InitFunction_BasicCommunication_OnEventChanged_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::BasicCommunication_OnSystemCapabilityUpdated, messageType::notification), InitFunction_BasicCommunication_OnSystemCapabilityUpdated_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_IsReady, messageType::request), InitFunction_VR_IsReady_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_IsReady, messageType::response), InitFunction_VR_IsReady_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_Started, messageType::notification), InitFunction_VR_Started_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_Stopped, messageType::notification), InitFunction_VR_Stopped_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_AddCommand, messageType::request), InitFunction_VR_AddCommand_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_AddCommand, messageType::response), InitFunction_VR_AddCommand_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_DeleteCommand, messageType::request), InitFunction_VR_DeleteCommand_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_DeleteCommand, messageType::response), InitFunction_VR_DeleteCommand_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_PerformInteraction, messageType::request), InitFunction_VR_PerformInteraction_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_PerformInteraction, messageType::response), InitFunction_VR_PerformInteraction_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_OnCommand, messageType::notification), InitFunction_VR_OnCommand_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_ChangeRegistration, messageType::request), InitFunction_VR_ChangeRegistration_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_ChangeRegistration, messageType::response), InitFunction_VR_ChangeRegistration_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_OnLanguageChange, messageType::notification), InitFunction_VR_OnLanguageChange_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_GetSupportedLanguages, messageType::request), InitFunction_VR_GetSupportedLanguages_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_GetSupportedLanguages, messageType::response), InitFunction_VR_GetSupportedLanguages_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_GetLanguage, messageType::request), InitFunction_VR_GetLanguage_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_GetLanguage, messageType::response), InitFunction_VR_GetLanguage_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_GetCapabilities, messageType::request), InitFunction_VR_GetCapabilities_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VR_GetCapabilities, messageType::response), InitFunction_VR_GetCapabilities_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_GetCapabilities, messageType::request), InitFunction_TTS_GetCapabilities_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_GetCapabilities, messageType::response), InitFunction_TTS_GetCapabilities_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_Started, messageType::notification), InitFunction_TTS_Started_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_Stopped, messageType::notification), InitFunction_TTS_Stopped_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_IsReady, messageType::request), InitFunction_TTS_IsReady_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_IsReady, messageType::response), InitFunction_TTS_IsReady_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_Speak, messageType::request), InitFunction_TTS_Speak_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_Speak, messageType::response), InitFunction_TTS_Speak_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_StopSpeaking, messageType::request), InitFunction_TTS_StopSpeaking_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_StopSpeaking, messageType::response), InitFunction_TTS_StopSpeaking_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_ChangeRegistration, messageType::request), InitFunction_TTS_ChangeRegistration_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_ChangeRegistration, messageType::response), InitFunction_TTS_ChangeRegistration_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_OnLanguageChange, messageType::notification), InitFunction_TTS_OnLanguageChange_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_GetSupportedLanguages, messageType::request), InitFunction_TTS_GetSupportedLanguages_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_GetSupportedLanguages, messageType::response), InitFunction_TTS_GetSupportedLanguages_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_GetLanguage, messageType::request), InitFunction_TTS_GetLanguage_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_GetLanguage, messageType::response), InitFunction_TTS_GetLanguage_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_SetGlobalProperties, messageType::request), InitFunction_TTS_SetGlobalProperties_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_SetGlobalProperties, messageType::response), InitFunction_TTS_SetGlobalProperties_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::TTS_OnResetTimeout, messageType::notification), InitFunction_TTS_OnResetTimeout_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_Alert, messageType::request), InitFunction_UI_Alert_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_Alert, messageType::response), InitFunction_UI_Alert_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_Show, messageType::request), InitFunction_UI_Show_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_Show, messageType::response), InitFunction_UI_Show_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_AddCommand, messageType::request), InitFunction_UI_AddCommand_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_AddCommand, messageType::response), InitFunction_UI_AddCommand_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_DeleteCommand, messageType::request), InitFunction_UI_DeleteCommand_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_DeleteCommand, messageType::response), InitFunction_UI_DeleteCommand_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_AddSubMenu, messageType::request), InitFunction_UI_AddSubMenu_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_AddSubMenu, messageType::response), InitFunction_UI_AddSubMenu_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_DeleteSubMenu, messageType::request), InitFunction_UI_DeleteSubMenu_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_DeleteSubMenu, messageType::response), InitFunction_UI_DeleteSubMenu_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_PerformInteraction, messageType::request), InitFunction_UI_PerformInteraction_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_PerformInteraction, messageType::response), InitFunction_UI_PerformInteraction_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_SetMediaClockTimer, messageType::request), InitFunction_UI_SetMediaClockTimer_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_SetMediaClockTimer, messageType::response), InitFunction_UI_SetMediaClockTimer_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_SetGlobalProperties, messageType::request), InitFunction_UI_SetGlobalProperties_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_SetGlobalProperties, messageType::response), InitFunction_UI_SetGlobalProperties_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_OnCommand, messageType::notification), InitFunction_UI_OnCommand_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_OnSystemContext, messageType::notification), InitFunction_UI_OnSystemContext_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_GetCapabilities, messageType::request), InitFunction_UI_GetCapabilities_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_GetCapabilities, messageType::response), InitFunction_UI_GetCapabilities_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_ChangeRegistration, messageType::request), InitFunction_UI_ChangeRegistration_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_ChangeRegistration, messageType::response), InitFunction_UI_ChangeRegistration_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_OnLanguageChange, messageType::notification), InitFunction_UI_OnLanguageChange_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_GetSupportedLanguages, messageType::request), InitFunction_UI_GetSupportedLanguages_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_GetSupportedLanguages, messageType::response), InitFunction_UI_GetSupportedLanguages_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_GetLanguage, messageType::request), InitFunction_UI_GetLanguage_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_GetLanguage, messageType::response), InitFunction_UI_GetLanguage_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_OnDriverDistraction, messageType::notification), InitFunction_UI_OnDriverDistraction_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_SetAppIcon, messageType::request), InitFunction_UI_SetAppIcon_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_SetAppIcon, messageType::response), InitFunction_UI_SetAppIcon_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_SetDisplayLayout, messageType::request), InitFunction_UI_SetDisplayLayout_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_SetDisplayLayout, messageType::response), InitFunction_UI_SetDisplayLayout_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_ShowCustomForm, messageType::request), InitFunction_UI_ShowCustomForm_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_ShowCustomForm, messageType::response), InitFunction_UI_ShowCustomForm_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_OnKeyboardInput, messageType::notification), InitFunction_UI_OnKeyboardInput_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_OnTouchEvent, messageType::notification), InitFunction_UI_OnTouchEvent_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_Slider, messageType::request), InitFunction_UI_Slider_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_Slider, messageType::response), InitFunction_UI_Slider_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_ScrollableMessage, messageType::request), InitFunction_UI_ScrollableMessage_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_ScrollableMessage, messageType::response), InitFunction_UI_ScrollableMessage_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_PerformAudioPassThru, messageType::request), InitFunction_UI_PerformAudioPassThru_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_PerformAudioPassThru, messageType::response), InitFunction_UI_PerformAudioPassThru_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_EndAudioPassThru, messageType::request), InitFunction_UI_EndAudioPassThru_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_EndAudioPassThru, messageType::response), InitFunction_UI_EndAudioPassThru_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_IsReady, messageType::request), InitFunction_UI_IsReady_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_IsReady, messageType::response), InitFunction_UI_IsReady_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_ClosePopUp, messageType::request), InitFunction_UI_ClosePopUp_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_ClosePopUp, messageType::response), InitFunction_UI_ClosePopUp_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_OnResetTimeout, messageType::notification), InitFunction_UI_OnResetTimeout_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_OnRecordStart, messageType::notification), InitFunction_UI_OnRecordStart_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_SendHapticData, messageType::request), InitFunction_UI_SendHapticData_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UI_SendHapticData, messageType::response), InitFunction_UI_SendHapticData_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_IsReady, messageType::request), InitFunction_Navigation_IsReady_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_IsReady, messageType::response), InitFunction_Navigation_IsReady_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_SendLocation, messageType::request), InitFunction_Navigation_SendLocation_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_SendLocation, messageType::response), InitFunction_Navigation_SendLocation_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_ShowConstantTBT, messageType::request), InitFunction_Navigation_ShowConstantTBT_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_ShowConstantTBT, messageType::response), InitFunction_Navigation_ShowConstantTBT_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_AlertManeuver, messageType::request), InitFunction_Navigation_AlertManeuver_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_AlertManeuver, messageType::response), InitFunction_Navigation_AlertManeuver_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_UpdateTurnList, messageType::request), InitFunction_Navigation_UpdateTurnList_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_UpdateTurnList, messageType::response), InitFunction_Navigation_UpdateTurnList_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_OnTBTClientState, messageType::notification), InitFunction_Navigation_OnTBTClientState_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_SetVideoConfig, messageType::request), InitFunction_Navigation_SetVideoConfig_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_SetVideoConfig, messageType::response), InitFunction_Navigation_SetVideoConfig_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_StartStream, messageType::request), InitFunction_Navigation_StartStream_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_StartStream, messageType::response), InitFunction_Navigation_StartStream_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_StopStream, messageType::request), InitFunction_Navigation_StopStream_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_StopStream, messageType::response), InitFunction_Navigation_StopStream_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_StartAudioStream, messageType::request), InitFunction_Navigation_StartAudioStream_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_StartAudioStream, messageType::response), InitFunction_Navigation_StartAudioStream_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_StopAudioStream, messageType::request), InitFunction_Navigation_StopAudioStream_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_StopAudioStream, messageType::response), InitFunction_Navigation_StopAudioStream_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_OnAudioDataStreaming, messageType::notification), InitFunction_Navigation_OnAudioDataStreaming_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_OnVideoDataStreaming, messageType::notification), InitFunction_Navigation_OnVideoDataStreaming_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_GetWayPoints, messageType::request), InitFunction_Navigation_GetWayPoints_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_GetWayPoints, messageType::response), InitFunction_Navigation_GetWayPoints_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_OnWayPointChange, messageType::notification), InitFunction_Navigation_OnWayPointChange_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_SubscribeWayPoints, messageType::request), InitFunction_Navigation_SubscribeWayPoints_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_SubscribeWayPoints, messageType::response), InitFunction_Navigation_SubscribeWayPoints_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_UnsubscribeWayPoints, messageType::request), InitFunction_Navigation_UnsubscribeWayPoints_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::Navigation_UnsubscribeWayPoints, messageType::response), InitFunction_Navigation_UnsubscribeWayPoints_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_IsReady, messageType::request), InitFunction_VehicleInfo_IsReady_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_IsReady, messageType::response), InitFunction_VehicleInfo_IsReady_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_GetVehicleType, messageType::request), InitFunction_VehicleInfo_GetVehicleType_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_GetVehicleType, messageType::response), InitFunction_VehicleInfo_GetVehicleType_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_ReadDID, messageType::request), InitFunction_VehicleInfo_ReadDID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_ReadDID, messageType::response), InitFunction_VehicleInfo_ReadDID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_GetDTCs, messageType::request), InitFunction_VehicleInfo_GetDTCs_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_GetDTCs, messageType::response), InitFunction_VehicleInfo_GetDTCs_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_DiagnosticMessage, messageType::request), InitFunction_VehicleInfo_DiagnosticMessage_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_DiagnosticMessage, messageType::response), InitFunction_VehicleInfo_DiagnosticMessage_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_SubscribeVehicleData, messageType::request), InitFunction_VehicleInfo_SubscribeVehicleData_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_SubscribeVehicleData, messageType::response), InitFunction_VehicleInfo_SubscribeVehicleData_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_UnsubscribeVehicleData, messageType::request), InitFunction_VehicleInfo_UnsubscribeVehicleData_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_UnsubscribeVehicleData, messageType::response), InitFunction_VehicleInfo_UnsubscribeVehicleData_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_GetVehicleData, messageType::request), InitFunction_VehicleInfo_GetVehicleData_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_GetVehicleData, messageType::response), InitFunction_VehicleInfo_GetVehicleData_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::VehicleInfo_OnVehicleData, messageType::notification), InitFunction_VehicleInfo_OnVehicleData_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_ActivateApp, messageType::request), InitFunction_SDL_ActivateApp_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_ActivateApp, messageType::response), InitFunction_SDL_ActivateApp_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_GetUserFriendlyMessage, messageType::request), InitFunction_SDL_GetUserFriendlyMessage_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_GetUserFriendlyMessage, messageType::response), InitFunction_SDL_GetUserFriendlyMessage_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_OnAllowSDLFunctionality, messageType::notification), InitFunction_SDL_OnAllowSDLFunctionality_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_OnReceivedPolicyUpdate, messageType::notification), InitFunction_SDL_OnReceivedPolicyUpdate_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_OnPolicyUpdate, messageType::notification), InitFunction_SDL_OnPolicyUpdate_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_GetListOfPermissions, messageType::request), InitFunction_SDL_GetListOfPermissions_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_GetListOfPermissions, messageType::response), InitFunction_SDL_GetListOfPermissions_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_OnAppPermissionConsent, messageType::notification), InitFunction_SDL_OnAppPermissionConsent_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_OnAppPermissionChanged, messageType::notification), InitFunction_SDL_OnAppPermissionChanged_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_OnSDLConsentNeeded, messageType::notification), InitFunction_SDL_OnSDLConsentNeeded_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_UpdateSDL, messageType::request), InitFunction_SDL_UpdateSDL_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_UpdateSDL, messageType::response), InitFunction_SDL_UpdateSDL_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_GetStatusUpdate, messageType::request), InitFunction_SDL_GetStatusUpdate_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_GetStatusUpdate, messageType::response), InitFunction_SDL_GetStatusUpdate_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_OnStatusUpdate, messageType::notification), InitFunction_SDL_OnStatusUpdate_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_OnSystemError, messageType::notification), InitFunction_SDL_OnSystemError_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_AddStatisticsInfo, messageType::notification), InitFunction_SDL_AddStatisticsInfo_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_GetURLS, messageType::request), InitFunction_SDL_GetURLS_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_GetURLS, messageType::response), InitFunction_SDL_GetURLS_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SDL_OnDeviceStateChanged, messageType::notification), InitFunction_SDL_OnDeviceStateChanged_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::RC_IsReady, messageType::request), InitFunction_RC_IsReady_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::RC_IsReady, messageType::response), InitFunction_RC_IsReady_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::RC_GetCapabilities, messageType::request), InitFunction_RC_GetCapabilities_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::RC_GetCapabilities, messageType::response), InitFunction_RC_GetCapabilities_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::RC_SetInteriorVehicleData, messageType::request), InitFunction_RC_SetInteriorVehicleData_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::RC_SetInteriorVehicleData, messageType::response), InitFunction_RC_SetInteriorVehicleData_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::RC_GetInteriorVehicleData, messageType::request), InitFunction_RC_GetInteriorVehicleData_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::RC_GetInteriorVehicleData, messageType::response), InitFunction_RC_GetInteriorVehicleData_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::RC_GetInteriorVehicleDataConsent, messageType::request), InitFunction_RC_GetInteriorVehicleDataConsent_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::RC_GetInteriorVehicleDataConsent, messageType::response), InitFunction_RC_GetInteriorVehicleDataConsent_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::RC_OnInteriorVehicleData, messageType::notification), InitFunction_RC_OnInteriorVehicleData_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::RC_OnRemoteControlSettings, messageType::notification), InitFunction_RC_OnRemoteControlSettings_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::RC_OnRCStatus, messageType::notification), InitFunction_RC_OnRCStatus_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AppService_PublishAppService, messageType::request), InitFunction_AppService_PublishAppService_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AppService_PublishAppService, messageType::response), InitFunction_AppService_PublishAppService_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AppService_OnAppServiceData, messageType::notification), InitFunction_AppService_OnAppServiceData_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AppService_GetAppServiceData, messageType::request), InitFunction_AppService_GetAppServiceData_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AppService_GetAppServiceData, messageType::response), InitFunction_AppService_GetAppServiceData_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AppService_PerformAppServiceInteraction, messageType::request), InitFunction_AppService_PerformAppServiceInteraction_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AppService_PerformAppServiceInteraction, messageType::response), InitFunction_AppService_PerformAppServiceInteraction_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AppService_GetAppServiceRecords, messageType::request), InitFunction_AppService_GetAppServiceRecords_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AppService_GetAppServiceRecords, messageType::response), InitFunction_AppService_GetAppServiceRecords_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AppService_AppServiceActivation, messageType::request), InitFunction_AppService_AppServiceActivation_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AppService_AppServiceActivation, messageType::response), InitFunction_AppService_AppServiceActivation_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AppService_GetActiveServiceConsent, messageType::request), InitFunction_AppService_GetActiveServiceConsent_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AppService_GetActiveServiceConsent, messageType::response), InitFunction_AppService_GetActiveServiceConsent_response(struct_schema_items, function_id_items, message_type_items)));
}

//------------- Functions schemes initialization -------------

CSmartSchema hmi_apis::HMI_API::InitFunction_Buttons_GetCapabilities_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Buttons_GetCapabilities_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter capabilities.
  //
  // Response must provide the names of available buttons and their capabilities.See ButtonCapabilities
  std::shared_ptr<ISchemaItem> capabilities_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ButtonCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter presetBankCapabilities.
  //
  // Must be returned if the platform supports custom on-screen Presets
  std::shared_ptr<ISchemaItem> presetBankCapabilities_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_PresetBankCapabilities);CObjectSchemaItem::Members schema_members;

  schema_members["capabilities"] = CObjectSchemaItem::SMember(capabilities_SchemaItem, true);
  schema_members["presetBankCapabilities"] = CObjectSchemaItem::SMember(presetBankCapabilities_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Buttons_ButtonPress_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_ModuleType::eType> Common_ModuleType_all_enum_values;
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::CLIMATE);
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::RADIO);
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::SEAT);
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::AUDIO);
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::LIGHT);
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::HMI_SETTINGS);

  std::set<Common_ButtonName::eType> Common_ButtonName_all_enum_values;
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::OK);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PLAY_PAUSE);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SEEKLEFT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SEEKRIGHT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::TUNEUP);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::TUNEDOWN);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_0);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_1);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_2);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_3);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_4);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_5);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_6);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_7);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_8);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_9);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::CUSTOM_BUTTON);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SEARCH);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::AC_MAX);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::AC);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::RECIRCULATE);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::FAN_UP);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::FAN_DOWN);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::TEMP_UP);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::TEMP_DOWN);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::DEFROST_MAX);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::DEFROST);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::DEFROST_REAR);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::UPPER_VENT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::LOWER_VENT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::VOLUME_UP);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::VOLUME_DOWN);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::EJECT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SOURCE);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SHUFFLE);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::REPEAT);

  std::set<Common_ButtonPressMode::eType> Common_ButtonPressMode_all_enum_values;
  Common_ButtonPressMode_all_enum_values.insert(Common_ButtonPressMode::LONG);
  Common_ButtonPressMode_all_enum_values.insert(Common_ButtonPressMode::SHORT);

  // Function parameter moduleType.
  //
  // The module where the button should be pressed
  std::shared_ptr<ISchemaItem> moduleType_SchemaItem = TEnumSchemaItem<Common_ModuleType::eType>::create(Common_ModuleType_all_enum_values, TSchemaItemParameter<Common_ModuleType::eType>());

  // Function parameter buttonName.
  std::shared_ptr<ISchemaItem> buttonName_SchemaItem = TEnumSchemaItem<Common_ButtonName::eType>::create(Common_ButtonName_all_enum_values, TSchemaItemParameter<Common_ButtonName::eType>());

  // Function parameter buttonPressMode.
  //
  // Indicates whether this is a LONG or SHORT button press event.
  std::shared_ptr<ISchemaItem> buttonPressMode_SchemaItem = TEnumSchemaItem<Common_ButtonPressMode::eType>::create(Common_ButtonPressMode_all_enum_values, TSchemaItemParameter<Common_ButtonPressMode::eType>());

  // Function parameter appID.
  //
  // ID of the application that triggers the permission prompt.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["moduleType"] = CObjectSchemaItem::SMember(moduleType_SchemaItem, true);
  schema_members["buttonName"] = CObjectSchemaItem::SMember(buttonName_SchemaItem, true);
  schema_members["buttonPressMode"] = CObjectSchemaItem::SMember(buttonPressMode_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Buttons_ButtonPress_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Buttons_OnButtonEvent_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_ButtonName::eType> Common_ButtonName_all_enum_values;
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::OK);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PLAY_PAUSE);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SEEKLEFT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SEEKRIGHT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::TUNEUP);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::TUNEDOWN);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_0);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_1);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_2);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_3);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_4);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_5);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_6);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_7);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_8);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_9);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::CUSTOM_BUTTON);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SEARCH);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::AC_MAX);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::AC);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::RECIRCULATE);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::FAN_UP);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::FAN_DOWN);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::TEMP_UP);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::TEMP_DOWN);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::DEFROST_MAX);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::DEFROST);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::DEFROST_REAR);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::UPPER_VENT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::LOWER_VENT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::VOLUME_UP);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::VOLUME_DOWN);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::EJECT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SOURCE);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SHUFFLE);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::REPEAT);

  std::set<Common_ButtonEventMode::eType> Common_ButtonEventMode_all_enum_values;
  Common_ButtonEventMode_all_enum_values.insert(Common_ButtonEventMode::BUTTONUP);
  Common_ButtonEventMode_all_enum_values.insert(Common_ButtonEventMode::BUTTONDOWN);

  // Function parameter name.
  std::shared_ptr<ISchemaItem> name_SchemaItem = TEnumSchemaItem<Common_ButtonName::eType>::create(Common_ButtonName_all_enum_values, TSchemaItemParameter<Common_ButtonName::eType>());

  // Function parameter mode.
  //
  // Indicates whether this is an UP or DOWN event.
  std::shared_ptr<ISchemaItem> mode_SchemaItem = TEnumSchemaItem<Common_ButtonEventMode::eType>::create(Common_ButtonEventMode_all_enum_values, TSchemaItemParameter<Common_ButtonEventMode::eType>());

  // Function parameter customButtonID.
  //
  // Must be provided if ButtonName is CUSTOM_BUTTON, this references the integer ID passed by a custom button. (e.g. softButtonName)
  std::shared_ptr<ISchemaItem> customButtonID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65536), TSchemaItemParameter<int32_t>());

  // Function parameter appID.
  //
  // 
  //                 In case the ButtonName is CUSTOM_BUTTON or OK, HMI must include appID parameters to OnButtonPress notification sent to SDL.
  //                 If appID is not sent together with CUSTOM_BUTTON, this notification will be ignored by SDL.
  //                 If appID is present for OK button -> SDL transfers notification to the named app only if it is in FULL or LIMITED (ignores if app is in NONE or BACKGROUND).
  //                 If appID is omited for OK button -> SDL transfers notification to app in FULL
  //         
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["name"] = CObjectSchemaItem::SMember(name_SchemaItem, true);
  schema_members["mode"] = CObjectSchemaItem::SMember(mode_SchemaItem, true);
  schema_members["customButtonID"] = CObjectSchemaItem::SMember(customButtonID_SchemaItem, false);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Buttons_OnButtonPress_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_ButtonName::eType> Common_ButtonName_all_enum_values;
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::OK);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PLAY_PAUSE);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SEEKLEFT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SEEKRIGHT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::TUNEUP);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::TUNEDOWN);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_0);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_1);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_2);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_3);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_4);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_5);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_6);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_7);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_8);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_9);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::CUSTOM_BUTTON);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SEARCH);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::AC_MAX);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::AC);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::RECIRCULATE);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::FAN_UP);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::FAN_DOWN);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::TEMP_UP);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::TEMP_DOWN);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::DEFROST_MAX);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::DEFROST);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::DEFROST_REAR);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::UPPER_VENT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::LOWER_VENT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::VOLUME_UP);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::VOLUME_DOWN);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::EJECT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SOURCE);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SHUFFLE);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::REPEAT);

  std::set<Common_ButtonPressMode::eType> Common_ButtonPressMode_all_enum_values;
  Common_ButtonPressMode_all_enum_values.insert(Common_ButtonPressMode::LONG);
  Common_ButtonPressMode_all_enum_values.insert(Common_ButtonPressMode::SHORT);

  // Function parameter name.
  std::shared_ptr<ISchemaItem> name_SchemaItem = TEnumSchemaItem<Common_ButtonName::eType>::create(Common_ButtonName_all_enum_values, TSchemaItemParameter<Common_ButtonName::eType>());

  // Function parameter mode.
  //
  // Indicates whether this is a LONG or SHORT button press event.
  std::shared_ptr<ISchemaItem> mode_SchemaItem = TEnumSchemaItem<Common_ButtonPressMode::eType>::create(Common_ButtonPressMode_all_enum_values, TSchemaItemParameter<Common_ButtonPressMode::eType>());

  // Function parameter customButtonID.
  //
  // Must be returned if ButtonName is CUSTOM_BUTTON, this references the string passed by a custom button. (e.g. softButtonName)
  std::shared_ptr<ISchemaItem> customButtonID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65536), TSchemaItemParameter<int32_t>());

  // Function parameter appID.
  //
  // 
  //                 In case the ButtonName is CUSTOM_BUTTON or OK, HMI must include appID parameters to OnButtonEvent notification sent to SDL.
  //                 If appID is not sent together with CUSTOM_BUTTON, this notification will be ignored by SDL.
  //                 If appID is present for OK button -> SDL transfers notification to the named app only if it is in FULL or LIMITED (ignores if app is in NONE or BACKGROUND).
  //                 If appID is omited for OK button -> SDL transfers notification to app in FULL
  //             
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["name"] = CObjectSchemaItem::SMember(name_SchemaItem, true);
  schema_members["mode"] = CObjectSchemaItem::SMember(mode_SchemaItem, true);
  schema_members["customButtonID"] = CObjectSchemaItem::SMember(customButtonID_SchemaItem, false);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Buttons_OnButtonSubscription_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_ButtonName::eType> Common_ButtonName_all_enum_values;
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::OK);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PLAY_PAUSE);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SEEKLEFT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SEEKRIGHT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::TUNEUP);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::TUNEDOWN);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_0);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_1);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_2);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_3);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_4);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_5);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_6);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_7);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_8);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_9);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::CUSTOM_BUTTON);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SEARCH);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::AC_MAX);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::AC);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::RECIRCULATE);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::FAN_UP);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::FAN_DOWN);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::TEMP_UP);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::TEMP_DOWN);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::DEFROST_MAX);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::DEFROST);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::DEFROST_REAR);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::UPPER_VENT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::LOWER_VENT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::VOLUME_UP);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::VOLUME_DOWN);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::EJECT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SOURCE);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SHUFFLE);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::REPEAT);

  // Function parameter name.
  std::shared_ptr<ISchemaItem> name_SchemaItem = TEnumSchemaItem<Common_ButtonName::eType>::create(Common_ButtonName_all_enum_values, TSchemaItemParameter<Common_ButtonName::eType>());

  // Function parameter isSubscribed.
  //
  // 
  //           Defines whether the named button has status of 'subscribed' or 'unsubscribed':
  //           If "true" - the named button is subscribed.
  //           If "false" - the named button is unsubscribed.
  //         
  std::shared_ptr<ISchemaItem> isSubscribed_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter appID.
  //
  // 
  //           The ID of application that relates to this button-subscription status change.
  //         
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["name"] = CObjectSchemaItem::SMember(name_SchemaItem, true);
  schema_members["isSubscribed"] = CObjectSchemaItem::SMember(isSubscribed_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_GetSystemTime_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_GetSystemTime_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter systemTime.
  //
  // Current UTC system time
  std::shared_ptr<ISchemaItem> systemTime_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DateTime);CObjectSchemaItem::Members schema_members;

  schema_members["systemTime"] = CObjectSchemaItem::SMember(systemTime_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnSystemTimeReady_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnReady_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnStartDeviceDiscovery_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnUpdateDeviceList_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnResumeAudioSource_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter appID.
  //
  // The ID of app to be resumed audio source.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnSDLPersistenceComplete_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_UpdateAppList_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter applications.
  std::shared_ptr<ISchemaItem> applications_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_HMIApplication), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["applications"] = CObjectSchemaItem::SMember(applications_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_UpdateAppList_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_UpdateDeviceList_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter deviceList.
  //
  // The array of names/IDs of connected devices
  std::shared_ptr<ISchemaItem> deviceList_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DeviceInfo), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["deviceList"] = CObjectSchemaItem::SMember(deviceList_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_UpdateDeviceList_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnFileRemoved_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_FileType::eType> Common_FileType_all_enum_values;
  Common_FileType_all_enum_values.insert(Common_FileType::GRAPHIC_BMP);
  Common_FileType_all_enum_values.insert(Common_FileType::GRAPHIC_JPEG);
  Common_FileType_all_enum_values.insert(Common_FileType::GRAPHIC_PNG);
  Common_FileType_all_enum_values.insert(Common_FileType::AUDIO_WAVE);
  Common_FileType_all_enum_values.insert(Common_FileType::AUDIO_MP3);
  Common_FileType_all_enum_values.insert(Common_FileType::AUDIO_AAC);
  Common_FileType_all_enum_values.insert(Common_FileType::BINARY);
  Common_FileType_all_enum_values.insert(Common_FileType::JSON);

  // Function parameter fileName.
  //
  // The name of the removed file
  std::shared_ptr<ISchemaItem> fileName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(30), TSchemaItemParameter<std::string>());

  // Function parameter fileType.
  //
  // The file type. See FileType.
  std::shared_ptr<ISchemaItem> fileType_SchemaItem = TEnumSchemaItem<Common_FileType::eType>::create(Common_FileType_all_enum_values, TSchemaItemParameter<Common_FileType::eType>());

  // Function parameter appID.
  //
  // ID of the application.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["fileName"] = CObjectSchemaItem::SMember(fileName_SchemaItem, true);
  schema_members["fileType"] = CObjectSchemaItem::SMember(fileType_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnDeviceChosen_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter deviceInfo.
  //
  // The name and ID of the device chosen
  std::shared_ptr<ISchemaItem> deviceInfo_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DeviceInfo);CObjectSchemaItem::Members schema_members;

  schema_members["deviceInfo"] = CObjectSchemaItem::SMember(deviceInfo_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnFindApplications_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter deviceInfo.
  //
  // The name and ID of the device the list of registered applications is required for.
  std::shared_ptr<ISchemaItem> deviceInfo_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DeviceInfo);CObjectSchemaItem::Members schema_members;

  schema_members["deviceInfo"] = CObjectSchemaItem::SMember(deviceInfo_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_ActivateApp_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_AppPriority::eType> Common_AppPriority_all_enum_values;
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::EMERGENCY);
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::NAVIGATION);
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::VOICE_COMMUNICATION);
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::COMMUNICATION);
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::NORMAL);
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::NONE);

  std::set<Common_HMILevel::eType> Common_HMILevel_all_enum_values;
  Common_HMILevel_all_enum_values.insert(Common_HMILevel::FULL);
  Common_HMILevel_all_enum_values.insert(Common_HMILevel::LIMITED);
  Common_HMILevel_all_enum_values.insert(Common_HMILevel::BACKGROUND);
  Common_HMILevel_all_enum_values.insert(Common_HMILevel::NONE);

  // Function parameter appID.
  //
  // ID of deactivated application.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Function parameter priority.
  //
  // Send to HMI so that it can coordinate order of requests/notifications correspondingly.
  std::shared_ptr<ISchemaItem> priority_SchemaItem = TEnumSchemaItem<Common_AppPriority::eType>::create(Common_AppPriority_all_enum_values, TSchemaItemParameter<Common_AppPriority::eType>());

  // Function parameter level.
  //
  // If level for application is to be changed to something else then FULL then this parameter should be used.
  std::shared_ptr<ISchemaItem> level_SchemaItem = TEnumSchemaItem<Common_HMILevel::eType>::create(Common_HMILevel_all_enum_values, TSchemaItemParameter<Common_HMILevel::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);
  schema_members["priority"] = CObjectSchemaItem::SMember(priority_SchemaItem, false);
  schema_members["level"] = CObjectSchemaItem::SMember(level_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_ActivateApp_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_CloseApplication_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter appID.
  //
  // ID of selected application.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_CloseApplication_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnAppActivated_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter appID.
  //
  // ID of selected application.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnAppDeactivated_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter appID.
  //
  // ID of deactivated application.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnAppRegistered_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_AppPriority::eType> Common_AppPriority_all_enum_values;
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::EMERGENCY);
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::NAVIGATION);
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::VOICE_COMMUNICATION);
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::COMMUNICATION);
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::NORMAL);
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::NONE);

  // Function parameter application.
  //
  // The information about application registered. See HMIApplication. 
  std::shared_ptr<ISchemaItem> application_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_HMIApplication);

  // Function parameter ttsName.
  //
  // 
  //           TTS string for VR recognition of the mobile application name, e.g. "Ford Drive Green".
  //           Meant to overcome any failing on speech engine in properly pronouncing / understanding app name.
  //           May not be empty.
  //           May not start with a new line character.
  //           Not unique value
  //         
  std::shared_ptr<ISchemaItem> ttsName_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TTSChunk), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter vrSynonyms.
  //
  // 
  //           Defines an additional voice recognition command.
  //           Must not interfere with any name of previously registered applications(SDL makes check).
  //         
  std::shared_ptr<ISchemaItem> vrSynonyms_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(40), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter resumeVrGrammars.
  //
  // The flag if VR grammars resume is required
  std::shared_ptr<ISchemaItem> resumeVrGrammars_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter priority.
  //
  // Send to HMI so that it can coordinate order of requests/notifications correspondingly.
  std::shared_ptr<ISchemaItem> priority_SchemaItem = TEnumSchemaItem<Common_AppPriority::eType>::create(Common_AppPriority_all_enum_values, TSchemaItemParameter<Common_AppPriority::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["application"] = CObjectSchemaItem::SMember(application_SchemaItem, true);
  schema_members["ttsName"] = CObjectSchemaItem::SMember(ttsName_SchemaItem, false);
  schema_members["vrSynonyms"] = CObjectSchemaItem::SMember(vrSynonyms_SchemaItem, false);
  schema_members["resumeVrGrammars"] = CObjectSchemaItem::SMember(resumeVrGrammars_SchemaItem, false);
  schema_members["priority"] = CObjectSchemaItem::SMember(priority_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnAppUnregistered_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter unexpectedDisconnect.
  //
  // 
  //           SDL sends 'true' in case the connection is unexpectedly lost.
  //           SDL sends 'false' in case the mobile app is unregistered gracefully (via appropriate RPC)
  //         
  std::shared_ptr<ISchemaItem> unexpectedDisconnect_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter appID.
  //
  // ID of the application unregistered
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["unexpectedDisconnect"] = CObjectSchemaItem::SMember(unexpectedDisconnect_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnExitApplication_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_ApplicationExitReason::eType> Common_ApplicationExitReason_all_enum_values;
  Common_ApplicationExitReason_all_enum_values.insert(Common_ApplicationExitReason::DRIVER_DISTRACTION_VIOLATION);
  Common_ApplicationExitReason_all_enum_values.insert(Common_ApplicationExitReason::USER_EXIT);
  Common_ApplicationExitReason_all_enum_values.insert(Common_ApplicationExitReason::UNAUTHORIZED_TRANSPORT_REGISTRATION);
  Common_ApplicationExitReason_all_enum_values.insert(Common_ApplicationExitReason::UNSUPPORTED_HMI_RESOURCE);
  Common_ApplicationExitReason_all_enum_values.insert(Common_ApplicationExitReason::CLOSE_CLOUD_CONNECTION);

  // Function parameter reason.
  //
  // Specifies reason of moving the app to NONE
  std::shared_ptr<ISchemaItem> reason_SchemaItem = TEnumSchemaItem<Common_ApplicationExitReason::eType>::create(Common_ApplicationExitReason_all_enum_values, TSchemaItemParameter<Common_ApplicationExitReason::eType>());

  // Function parameter appID.
  //
  // ID of the application to be exited.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["reason"] = CObjectSchemaItem::SMember(reason_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnExitAllApplications_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_ApplicationsCloseReason::eType> Common_ApplicationsCloseReason_all_enum_values;
  Common_ApplicationsCloseReason_all_enum_values.insert(Common_ApplicationsCloseReason::IGNITION_OFF);
  Common_ApplicationsCloseReason_all_enum_values.insert(Common_ApplicationsCloseReason::MASTER_RESET);
  Common_ApplicationsCloseReason_all_enum_values.insert(Common_ApplicationsCloseReason::FACTORY_DEFAULTS);
  Common_ApplicationsCloseReason_all_enum_values.insert(Common_ApplicationsCloseReason::SUSPEND);

  // Function parameter reason.
  //
  // Specifies reason for exiting all apllications.
  std::shared_ptr<ISchemaItem> reason_SchemaItem = TEnumSchemaItem<Common_ApplicationsCloseReason::eType>::create(Common_ApplicationsCloseReason_all_enum_values, TSchemaItemParameter<Common_ApplicationsCloseReason::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["reason"] = CObjectSchemaItem::SMember(reason_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnAwakeSDL_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_MixingAudioSupported_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_MixingAudioSupported_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter attenuatedSupported.
  //
  // Must be true if supported
  std::shared_ptr<ISchemaItem> attenuatedSupported_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["attenuatedSupported"] = CObjectSchemaItem::SMember(attenuatedSupported_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_DialNumber_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter number.
  //
  // The number to dial. Only the character + and numbers are allowed.
  std::shared_ptr<ISchemaItem> number_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(40), TSchemaItemParameter<std::string>());

  // Function parameter appID.
  //
  // ID of application that concerns this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["number"] = CObjectSchemaItem::SMember(number_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_DialNumber_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnSystemRequest_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_RequestType::eType> Common_RequestType_all_enum_values;
  Common_RequestType_all_enum_values.insert(Common_RequestType::HTTP);
  Common_RequestType_all_enum_values.insert(Common_RequestType::FILE_RESUME);
  Common_RequestType_all_enum_values.insert(Common_RequestType::AUTH_REQUEST);
  Common_RequestType_all_enum_values.insert(Common_RequestType::AUTH_CHALLENGE);
  Common_RequestType_all_enum_values.insert(Common_RequestType::AUTH_ACK);
  Common_RequestType_all_enum_values.insert(Common_RequestType::PROPRIETARY);
  Common_RequestType_all_enum_values.insert(Common_RequestType::QUERY_APPS);
  Common_RequestType_all_enum_values.insert(Common_RequestType::LAUNCH_APP);
  Common_RequestType_all_enum_values.insert(Common_RequestType::LOCK_SCREEN_ICON_URL);
  Common_RequestType_all_enum_values.insert(Common_RequestType::TRAFFIC_MESSAGE_CHANNEL);
  Common_RequestType_all_enum_values.insert(Common_RequestType::DRIVER_PROFILE);
  Common_RequestType_all_enum_values.insert(Common_RequestType::VOICE_SEARCH);
  Common_RequestType_all_enum_values.insert(Common_RequestType::NAVIGATION);
  Common_RequestType_all_enum_values.insert(Common_RequestType::PHONE);
  Common_RequestType_all_enum_values.insert(Common_RequestType::CLIMATE);
  Common_RequestType_all_enum_values.insert(Common_RequestType::SETTINGS);
  Common_RequestType_all_enum_values.insert(Common_RequestType::VEHICLE_DIAGNOSTICS);
  Common_RequestType_all_enum_values.insert(Common_RequestType::EMERGENCY);
  Common_RequestType_all_enum_values.insert(Common_RequestType::MEDIA);
  Common_RequestType_all_enum_values.insert(Common_RequestType::FOTA);
  Common_RequestType_all_enum_values.insert(Common_RequestType::OEM_SPECIFIC);
  Common_RequestType_all_enum_values.insert(Common_RequestType::ICON_URL);

  std::set<Common_FileType::eType> Common_FileType_all_enum_values;
  Common_FileType_all_enum_values.insert(Common_FileType::GRAPHIC_BMP);
  Common_FileType_all_enum_values.insert(Common_FileType::GRAPHIC_JPEG);
  Common_FileType_all_enum_values.insert(Common_FileType::GRAPHIC_PNG);
  Common_FileType_all_enum_values.insert(Common_FileType::AUDIO_WAVE);
  Common_FileType_all_enum_values.insert(Common_FileType::AUDIO_MP3);
  Common_FileType_all_enum_values.insert(Common_FileType::AUDIO_AAC);
  Common_FileType_all_enum_values.insert(Common_FileType::BINARY);
  Common_FileType_all_enum_values.insert(Common_FileType::JSON);

  // Function parameter requestType.
  //
  // The type of system request.
  std::shared_ptr<ISchemaItem> requestType_SchemaItem = TEnumSchemaItem<Common_RequestType::eType>::create(Common_RequestType_all_enum_values, TSchemaItemParameter<Common_RequestType::eType>());

  // Function parameter requestSubType.
  //
  // 
  //           This parameter is filled for supporting OEM proprietary data exchanges.
  //         
  std::shared_ptr<ISchemaItem> requestSubType_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(255), TSchemaItemParameter<std::string>());

  // Function parameter url.
  //
  // Optional array of URL(s) for HTTP requests.
  std::shared_ptr<ISchemaItem> url_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter fileType.
  //
  // Optional file type (meant for HTTP file requests).
  std::shared_ptr<ISchemaItem> fileType_SchemaItem = TEnumSchemaItem<Common_FileType::eType>::create(Common_FileType_all_enum_values, TSchemaItemParameter<Common_FileType::eType>());

  // Function parameter offset.
  //
  // Optional offset in bytes for resuming partial data chunks
  std::shared_ptr<ISchemaItem> offset_SchemaItem = TNumberSchemaItem<int64_t>::create(TSchemaItemParameter<int64_t>(0), TSchemaItemParameter<int64_t>(100000000000LL), TSchemaItemParameter<int64_t>());

  // Function parameter length.
  //
  // Optional length in bytes for resuming partial data chunks
  std::shared_ptr<ISchemaItem> length_SchemaItem = TNumberSchemaItem<int64_t>::create(TSchemaItemParameter<int64_t>(0), TSchemaItemParameter<int64_t>(100000000000LL), TSchemaItemParameter<int64_t>());

  // Function parameter timeout.
  std::shared_ptr<ISchemaItem> timeout_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter fileName.
  //
  // File reference name.
  std::shared_ptr<ISchemaItem> fileName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(255), TSchemaItemParameter<std::string>());

  // Function parameter appID.
  //
  // ID of application that requested this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["requestType"] = CObjectSchemaItem::SMember(requestType_SchemaItem, true);
  schema_members["requestSubType"] = CObjectSchemaItem::SMember(requestSubType_SchemaItem, false);
  schema_members["url"] = CObjectSchemaItem::SMember(url_SchemaItem, false);
  schema_members["fileType"] = CObjectSchemaItem::SMember(fileType_SchemaItem, false);
  schema_members["offset"] = CObjectSchemaItem::SMember(offset_SchemaItem, false);
  schema_members["length"] = CObjectSchemaItem::SMember(length_SchemaItem, false);
  schema_members["timeout"] = CObjectSchemaItem::SMember(timeout_SchemaItem, false);
  schema_members["fileName"] = CObjectSchemaItem::SMember(fileName_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_SystemRequest_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_RequestType::eType> Common_RequestType_all_enum_values;
  Common_RequestType_all_enum_values.insert(Common_RequestType::HTTP);
  Common_RequestType_all_enum_values.insert(Common_RequestType::FILE_RESUME);
  Common_RequestType_all_enum_values.insert(Common_RequestType::AUTH_REQUEST);
  Common_RequestType_all_enum_values.insert(Common_RequestType::AUTH_CHALLENGE);
  Common_RequestType_all_enum_values.insert(Common_RequestType::AUTH_ACK);
  Common_RequestType_all_enum_values.insert(Common_RequestType::PROPRIETARY);
  Common_RequestType_all_enum_values.insert(Common_RequestType::QUERY_APPS);
  Common_RequestType_all_enum_values.insert(Common_RequestType::LAUNCH_APP);
  Common_RequestType_all_enum_values.insert(Common_RequestType::LOCK_SCREEN_ICON_URL);
  Common_RequestType_all_enum_values.insert(Common_RequestType::TRAFFIC_MESSAGE_CHANNEL);
  Common_RequestType_all_enum_values.insert(Common_RequestType::DRIVER_PROFILE);
  Common_RequestType_all_enum_values.insert(Common_RequestType::VOICE_SEARCH);
  Common_RequestType_all_enum_values.insert(Common_RequestType::NAVIGATION);
  Common_RequestType_all_enum_values.insert(Common_RequestType::PHONE);
  Common_RequestType_all_enum_values.insert(Common_RequestType::CLIMATE);
  Common_RequestType_all_enum_values.insert(Common_RequestType::SETTINGS);
  Common_RequestType_all_enum_values.insert(Common_RequestType::VEHICLE_DIAGNOSTICS);
  Common_RequestType_all_enum_values.insert(Common_RequestType::EMERGENCY);
  Common_RequestType_all_enum_values.insert(Common_RequestType::MEDIA);
  Common_RequestType_all_enum_values.insert(Common_RequestType::FOTA);
  Common_RequestType_all_enum_values.insert(Common_RequestType::OEM_SPECIFIC);
  Common_RequestType_all_enum_values.insert(Common_RequestType::ICON_URL);

  // Function parameter requestType.
  //
  // The type of system request.
  std::shared_ptr<ISchemaItem> requestType_SchemaItem = TEnumSchemaItem<Common_RequestType::eType>::create(Common_RequestType_all_enum_values, TSchemaItemParameter<Common_RequestType::eType>());

  // Function parameter requestSubType.
  //
  // 
  //               This parameter is filled for supporting OEM proprietary data exchanges.
  //           
  std::shared_ptr<ISchemaItem> requestSubType_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(255), TSchemaItemParameter<std::string>());

  // Function parameter fileName.
  //
  // The path to file.
  std::shared_ptr<ISchemaItem> fileName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(255), TSchemaItemParameter<std::string>());

  // Function parameter appID.
  //
  // Internal ID of the application that requested this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["requestType"] = CObjectSchemaItem::SMember(requestType_SchemaItem, true);
  schema_members["requestSubType"] = CObjectSchemaItem::SMember(requestSubType_SchemaItem, false);
  schema_members["fileName"] = CObjectSchemaItem::SMember(fileName_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_SystemRequest_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_PolicyUpdate_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter file.
  //
  // 
  //           Location of policy table snapshot
  //         
  std::shared_ptr<ISchemaItem> file_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(255), TSchemaItemParameter<std::string>());

  // Function parameter timeout.
  //
  // 
  //           Send attempt timeout in seconds
  //         
  std::shared_ptr<ISchemaItem> timeout_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>());

  // Function parameter retry.
  //
  // 
  //           Array of delays to wait after failed atempts
  //         
  std::shared_ptr<ISchemaItem> retry_SchemaItem = CArraySchemaItem::create(TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(5));CObjectSchemaItem::Members schema_members;

  schema_members["file"] = CObjectSchemaItem::SMember(file_SchemaItem, true);
  schema_members["timeout"] = CObjectSchemaItem::SMember(timeout_SchemaItem, true);
  schema_members["retry"] = CObjectSchemaItem::SMember(retry_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_PolicyUpdate_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnSDLClose_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnPutFile_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_FileType::eType> Common_FileType_all_enum_values;
  Common_FileType_all_enum_values.insert(Common_FileType::GRAPHIC_BMP);
  Common_FileType_all_enum_values.insert(Common_FileType::GRAPHIC_JPEG);
  Common_FileType_all_enum_values.insert(Common_FileType::GRAPHIC_PNG);
  Common_FileType_all_enum_values.insert(Common_FileType::AUDIO_WAVE);
  Common_FileType_all_enum_values.insert(Common_FileType::AUDIO_MP3);
  Common_FileType_all_enum_values.insert(Common_FileType::AUDIO_AAC);
  Common_FileType_all_enum_values.insert(Common_FileType::BINARY);
  Common_FileType_all_enum_values.insert(Common_FileType::JSON);

  // Function parameter offset.
  //
  // Optional offset in bytes for resuming partial data chunks
  std::shared_ptr<ISchemaItem> offset_SchemaItem = TNumberSchemaItem<int64_t>::create(TSchemaItemParameter<int64_t>(0), TSchemaItemParameter<int64_t>(100000000000LL), TSchemaItemParameter<int64_t>());

  // Function parameter length.
  //
  // Optional length in bytes for resuming partial data chunks
  std::shared_ptr<ISchemaItem> length_SchemaItem = TNumberSchemaItem<int64_t>::create(TSchemaItemParameter<int64_t>(0), TSchemaItemParameter<int64_t>(100000000000LL), TSchemaItemParameter<int64_t>());

  // Function parameter fileSize.
  //
  // Full Size of file. sends in first OnPutFile notification if file is splited
  //                     into many PutFiles
  //         
  std::shared_ptr<ISchemaItem> fileSize_SchemaItem = TNumberSchemaItem<int64_t>::create(TSchemaItemParameter<int64_t>(0), TSchemaItemParameter<int64_t>(100000000000LL), TSchemaItemParameter<int64_t>());

  // Function parameter FileName.
  //
  // File reference name.
  std::shared_ptr<ISchemaItem> FileName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(255), TSchemaItemParameter<std::string>());

  // Function parameter syncFileName.
  //
  // File reference name.
  std::shared_ptr<ISchemaItem> syncFileName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(255), TSchemaItemParameter<std::string>());

  // Function parameter fileType.
  //
  // Selected file type.
  std::shared_ptr<ISchemaItem> fileType_SchemaItem = TEnumSchemaItem<Common_FileType::eType>::create(Common_FileType_all_enum_values, TSchemaItemParameter<Common_FileType::eType>());

  // Function parameter persistentFile.
  //
  // 
  //           Indicates if the file is meant to persist between sessions / ignition cycles.
  //           If set to TRUE, then the system will aim to persist this file through session / cycles.
  //           While files with this designation will have priority over others, they are subject to deletion by the system at any time.
  //           In the event of automatic deletion by the system, the app will receive a rejection and have to resend the file.
  //           If omitted, the value will be set to false.
  //         
  std::shared_ptr<ISchemaItem> persistentFile_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>(false));

  // Function parameter isSystemFile.
  //
  // 
  //           Indicates if the file is meant to be passed thru core to elsewhere on the system.
  //           If true the system will pass the data thru as it arrives to a predetermined area outside of core.
  //         
  std::shared_ptr<ISchemaItem> isSystemFile_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>(false));

  // Function parameter appID.
  //
  //  ID of application that uploaded this file. 
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["offset"] = CObjectSchemaItem::SMember(offset_SchemaItem, false);
  schema_members["length"] = CObjectSchemaItem::SMember(length_SchemaItem, false);
  schema_members["fileSize"] = CObjectSchemaItem::SMember(fileSize_SchemaItem, false);
  schema_members["FileName"] = CObjectSchemaItem::SMember(FileName_SchemaItem, true);
  schema_members["syncFileName"] = CObjectSchemaItem::SMember(syncFileName_SchemaItem, true);
  schema_members["fileType"] = CObjectSchemaItem::SMember(fileType_SchemaItem, true);
  schema_members["persistentFile"] = CObjectSchemaItem::SMember(persistentFile_SchemaItem, false);
  schema_members["isSystemFile"] = CObjectSchemaItem::SMember(isSystemFile_SchemaItem, false);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_GetFilePath_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_FileType::eType> Common_FileType_all_enum_values;
  Common_FileType_all_enum_values.insert(Common_FileType::GRAPHIC_BMP);
  Common_FileType_all_enum_values.insert(Common_FileType::GRAPHIC_JPEG);
  Common_FileType_all_enum_values.insert(Common_FileType::GRAPHIC_PNG);
  Common_FileType_all_enum_values.insert(Common_FileType::AUDIO_WAVE);
  Common_FileType_all_enum_values.insert(Common_FileType::AUDIO_MP3);
  Common_FileType_all_enum_values.insert(Common_FileType::AUDIO_AAC);
  Common_FileType_all_enum_values.insert(Common_FileType::BINARY);
  Common_FileType_all_enum_values.insert(Common_FileType::JSON);

  // Function parameter fileName.
  //
  // File name that should be retrieved.
  std::shared_ptr<ISchemaItem> fileName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(255), TSchemaItemParameter<std::string>());

  // Function parameter fileType.
  //
  // Selected file type.
  std::shared_ptr<ISchemaItem> fileType_SchemaItem = TEnumSchemaItem<Common_FileType::eType>::create(Common_FileType_all_enum_values, TSchemaItemParameter<Common_FileType::eType>());

  // Function parameter appServiceId.
  //
  //  ID of the service that should have uploaded the requested file.
  std::shared_ptr<ISchemaItem> appServiceId_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["fileName"] = CObjectSchemaItem::SMember(fileName_SchemaItem, true);
  schema_members["fileType"] = CObjectSchemaItem::SMember(fileType_SchemaItem, false);
  schema_members["appServiceId"] = CObjectSchemaItem::SMember(appServiceId_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_GetFilePath_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_FileType::eType> Common_FileType_all_enum_values;
  Common_FileType_all_enum_values.insert(Common_FileType::GRAPHIC_BMP);
  Common_FileType_all_enum_values.insert(Common_FileType::GRAPHIC_JPEG);
  Common_FileType_all_enum_values.insert(Common_FileType::GRAPHIC_PNG);
  Common_FileType_all_enum_values.insert(Common_FileType::AUDIO_WAVE);
  Common_FileType_all_enum_values.insert(Common_FileType::AUDIO_MP3);
  Common_FileType_all_enum_values.insert(Common_FileType::AUDIO_AAC);
  Common_FileType_all_enum_values.insert(Common_FileType::BINARY);
  Common_FileType_all_enum_values.insert(Common_FileType::JSON);

  // Function parameter filePath.
  //
  // Path to file in hmi
  std::shared_ptr<ISchemaItem> filePath_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Function parameter fileType.
  //
  // Selected file type.
  std::shared_ptr<ISchemaItem> fileType_SchemaItem = TEnumSchemaItem<Common_FileType::eType>::create(Common_FileType_all_enum_values, TSchemaItemParameter<Common_FileType::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["filePath"] = CObjectSchemaItem::SMember(filePath_SchemaItem, false);
  schema_members["fileType"] = CObjectSchemaItem::SMember(fileType_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_GetSystemInfo_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_GetSystemInfo_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_Language::eType> Common_Language_all_enum_values;
  Common_Language_all_enum_values.insert(Common_Language::EN_US);
  Common_Language_all_enum_values.insert(Common_Language::ES_MX);
  Common_Language_all_enum_values.insert(Common_Language::FR_CA);
  Common_Language_all_enum_values.insert(Common_Language::DE_DE);
  Common_Language_all_enum_values.insert(Common_Language::ES_ES);
  Common_Language_all_enum_values.insert(Common_Language::EN_GB);
  Common_Language_all_enum_values.insert(Common_Language::RU_RU);
  Common_Language_all_enum_values.insert(Common_Language::TR_TR);
  Common_Language_all_enum_values.insert(Common_Language::PL_PL);
  Common_Language_all_enum_values.insert(Common_Language::FR_FR);
  Common_Language_all_enum_values.insert(Common_Language::IT_IT);
  Common_Language_all_enum_values.insert(Common_Language::SV_SE);
  Common_Language_all_enum_values.insert(Common_Language::PT_PT);
  Common_Language_all_enum_values.insert(Common_Language::NL_NL);
  Common_Language_all_enum_values.insert(Common_Language::EN_AU);
  Common_Language_all_enum_values.insert(Common_Language::ZH_CN);
  Common_Language_all_enum_values.insert(Common_Language::ZH_TW);
  Common_Language_all_enum_values.insert(Common_Language::JA_JP);
  Common_Language_all_enum_values.insert(Common_Language::AR_SA);
  Common_Language_all_enum_values.insert(Common_Language::KO_KR);
  Common_Language_all_enum_values.insert(Common_Language::PT_BR);
  Common_Language_all_enum_values.insert(Common_Language::CS_CZ);
  Common_Language_all_enum_values.insert(Common_Language::DA_DK);
  Common_Language_all_enum_values.insert(Common_Language::NO_NO);
  Common_Language_all_enum_values.insert(Common_Language::NL_BE);
  Common_Language_all_enum_values.insert(Common_Language::EL_GR);
  Common_Language_all_enum_values.insert(Common_Language::HU_HU);
  Common_Language_all_enum_values.insert(Common_Language::FI_FI);
  Common_Language_all_enum_values.insert(Common_Language::SK_SK);
  Common_Language_all_enum_values.insert(Common_Language::EN_IN);
  Common_Language_all_enum_values.insert(Common_Language::TH_TH);
  Common_Language_all_enum_values.insert(Common_Language::EN_SA);
  Common_Language_all_enum_values.insert(Common_Language::HE_IL);
  Common_Language_all_enum_values.insert(Common_Language::RO_RO);
  Common_Language_all_enum_values.insert(Common_Language::UK_UA);
  Common_Language_all_enum_values.insert(Common_Language::ID_ID);
  Common_Language_all_enum_values.insert(Common_Language::VI_VN);
  Common_Language_all_enum_values.insert(Common_Language::MS_MY);
  Common_Language_all_enum_values.insert(Common_Language::HI_IN);

  // Function parameter ccpu_version.
  //
  // Software version of the module
  std::shared_ptr<ISchemaItem> ccpu_version_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter language.
  //
  // ISO 639-1 combined with ISO 3166 alpha-2 country code (i.e. en-us)
  std::shared_ptr<ISchemaItem> language_SchemaItem = TEnumSchemaItem<Common_Language::eType>::create(Common_Language_all_enum_values, TSchemaItemParameter<Common_Language::eType>());

  // Function parameter wersCountryCode.
  //
  // Country code from the Ford system WERS (i.e.WAEGB).
  std::shared_ptr<ISchemaItem> wersCountryCode_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["ccpu_version"] = CObjectSchemaItem::SMember(ccpu_version_SchemaItem, true);
  schema_members["language"] = CObjectSchemaItem::SMember(language_SchemaItem, true);
  schema_members["wersCountryCode"] = CObjectSchemaItem::SMember(wersCountryCode_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnSystemInfoChanged_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_Language::eType> Common_Language_all_enum_values;
  Common_Language_all_enum_values.insert(Common_Language::EN_US);
  Common_Language_all_enum_values.insert(Common_Language::ES_MX);
  Common_Language_all_enum_values.insert(Common_Language::FR_CA);
  Common_Language_all_enum_values.insert(Common_Language::DE_DE);
  Common_Language_all_enum_values.insert(Common_Language::ES_ES);
  Common_Language_all_enum_values.insert(Common_Language::EN_GB);
  Common_Language_all_enum_values.insert(Common_Language::RU_RU);
  Common_Language_all_enum_values.insert(Common_Language::TR_TR);
  Common_Language_all_enum_values.insert(Common_Language::PL_PL);
  Common_Language_all_enum_values.insert(Common_Language::FR_FR);
  Common_Language_all_enum_values.insert(Common_Language::IT_IT);
  Common_Language_all_enum_values.insert(Common_Language::SV_SE);
  Common_Language_all_enum_values.insert(Common_Language::PT_PT);
  Common_Language_all_enum_values.insert(Common_Language::NL_NL);
  Common_Language_all_enum_values.insert(Common_Language::EN_AU);
  Common_Language_all_enum_values.insert(Common_Language::ZH_CN);
  Common_Language_all_enum_values.insert(Common_Language::ZH_TW);
  Common_Language_all_enum_values.insert(Common_Language::JA_JP);
  Common_Language_all_enum_values.insert(Common_Language::AR_SA);
  Common_Language_all_enum_values.insert(Common_Language::KO_KR);
  Common_Language_all_enum_values.insert(Common_Language::PT_BR);
  Common_Language_all_enum_values.insert(Common_Language::CS_CZ);
  Common_Language_all_enum_values.insert(Common_Language::DA_DK);
  Common_Language_all_enum_values.insert(Common_Language::NO_NO);
  Common_Language_all_enum_values.insert(Common_Language::NL_BE);
  Common_Language_all_enum_values.insert(Common_Language::EL_GR);
  Common_Language_all_enum_values.insert(Common_Language::HU_HU);
  Common_Language_all_enum_values.insert(Common_Language::FI_FI);
  Common_Language_all_enum_values.insert(Common_Language::SK_SK);
  Common_Language_all_enum_values.insert(Common_Language::EN_IN);
  Common_Language_all_enum_values.insert(Common_Language::TH_TH);
  Common_Language_all_enum_values.insert(Common_Language::EN_SA);
  Common_Language_all_enum_values.insert(Common_Language::HE_IL);
  Common_Language_all_enum_values.insert(Common_Language::RO_RO);
  Common_Language_all_enum_values.insert(Common_Language::UK_UA);
  Common_Language_all_enum_values.insert(Common_Language::ID_ID);
  Common_Language_all_enum_values.insert(Common_Language::VI_VN);
  Common_Language_all_enum_values.insert(Common_Language::MS_MY);
  Common_Language_all_enum_values.insert(Common_Language::HI_IN);

  // Function parameter language.
  std::shared_ptr<ISchemaItem> language_SchemaItem = TEnumSchemaItem<Common_Language::eType>::create(Common_Language_all_enum_values, TSchemaItemParameter<Common_Language::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["language"] = CObjectSchemaItem::SMember(language_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnIgnitionCycleOver_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_DecryptCertificate_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter fileName.
  //
  // The path to the file with the encrypted certificate from the PolicyTable.
  std::shared_ptr<ISchemaItem> fileName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(255), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["fileName"] = CObjectSchemaItem::SMember(fileName_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_DecryptCertificate_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnEventChanged_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_EventTypes::eType> Common_EventTypes_all_enum_values;
  Common_EventTypes_all_enum_values.insert(Common_EventTypes::AUDIO_SOURCE);
  Common_EventTypes_all_enum_values.insert(Common_EventTypes::EMBEDDED_NAVI);
  Common_EventTypes_all_enum_values.insert(Common_EventTypes::PHONE_CALL);
  Common_EventTypes_all_enum_values.insert(Common_EventTypes::EMERGENCY_EVENT);
  Common_EventTypes_all_enum_values.insert(Common_EventTypes::DEACTIVATE_HMI);

  // Function parameter eventName.
  //
  // Specifies the types of active events.
  std::shared_ptr<ISchemaItem> eventName_SchemaItem = TEnumSchemaItem<Common_EventTypes::eType>::create(Common_EventTypes_all_enum_values, TSchemaItemParameter<Common_EventTypes::eType>());

  // Function parameter isActive.
  //
  // Must be 'true' - when the event is started on HMI. Must be 'false' when the event is ended on HMI
  std::shared_ptr<ISchemaItem> isActive_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["eventName"] = CObjectSchemaItem::SMember(eventName_SchemaItem, true);
  schema_members["isActive"] = CObjectSchemaItem::SMember(isActive_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_BasicCommunication_OnSystemCapabilityUpdated_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter systemCapability.
  //
  // The system capability that has been updated
  std::shared_ptr<ISchemaItem> systemCapability_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SystemCapability);CObjectSchemaItem::Members schema_members;

  schema_members["systemCapability"] = CObjectSchemaItem::SMember(systemCapability_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VR_IsReady_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VR_IsReady_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter available.
  //
  // Must be true if VR is present and ready to communicate with SDL.
  std::shared_ptr<ISchemaItem> available_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["available"] = CObjectSchemaItem::SMember(available_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VR_Started_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VR_Stopped_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VR_AddCommand_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_VRCommandType::eType> Common_VRCommandType_all_enum_values;
  Common_VRCommandType_all_enum_values.insert(Common_VRCommandType::Choice);
  Common_VRCommandType_all_enum_values.insert(Common_VRCommandType::Command);

  // Function parameter cmdID.
  //
  // ID of a command (further to be used in OnCommand notification).
  std::shared_ptr<ISchemaItem> cmdID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter vrCommands.
  //
  // List of strings to be used as VR commands.
  std::shared_ptr<ISchemaItem> vrCommands_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(99), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter type.
  //
  // Type of added command. See VRCommandType.
  std::shared_ptr<ISchemaItem> type_SchemaItem = TEnumSchemaItem<Common_VRCommandType::eType>::create(Common_VRCommandType_all_enum_values, TSchemaItemParameter<Common_VRCommandType::eType>());

  // Function parameter grammarID.
  //
  // 
  //         ID of the specific grammar, whether top-level or choice set.
  //       
  std::shared_ptr<ISchemaItem> grammarID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter appID.
  //
  // ID of application that requested this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["cmdID"] = CObjectSchemaItem::SMember(cmdID_SchemaItem, true);
  schema_members["vrCommands"] = CObjectSchemaItem::SMember(vrCommands_SchemaItem, true);
  schema_members["type"] = CObjectSchemaItem::SMember(type_SchemaItem, true);
  schema_members["grammarID"] = CObjectSchemaItem::SMember(grammarID_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VR_AddCommand_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VR_DeleteCommand_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_VRCommandType::eType> Common_VRCommandType_all_enum_values;
  Common_VRCommandType_all_enum_values.insert(Common_VRCommandType::Choice);
  Common_VRCommandType_all_enum_values.insert(Common_VRCommandType::Command);

  // Function parameter cmdID.
  //
  // Id of a command (list of strings), previously sent by AddCommand.
  std::shared_ptr<ISchemaItem> cmdID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter type.
  //
  // Type of added command. See VRCommandType.
  std::shared_ptr<ISchemaItem> type_SchemaItem = TEnumSchemaItem<Common_VRCommandType::eType>::create(Common_VRCommandType_all_enum_values, TSchemaItemParameter<Common_VRCommandType::eType>());

  // Function parameter grammarID.
  //
  // ID of the specific grammar.
  std::shared_ptr<ISchemaItem> grammarID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter appID.
  //
  // ID of application that requested this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["cmdID"] = CObjectSchemaItem::SMember(cmdID_SchemaItem, true);
  schema_members["type"] = CObjectSchemaItem::SMember(type_SchemaItem, true);
  schema_members["grammarID"] = CObjectSchemaItem::SMember(grammarID_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VR_DeleteCommand_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VR_PerformInteraction_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter helpPrompt.
  //
  // 
  //         The help prompt. An array of text chunks of type TTSChunk. See TTSChunk. The array must have at least one item.
  //       
  std::shared_ptr<ISchemaItem> helpPrompt_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TTSChunk), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter initialPrompt.
  //
  // 
  //         This is the intial prompt spoken to the user at the start of an interaction. An array of text chunks of type TTSChunk. See TTSChunk. The array must have at least one item.
  //       
  std::shared_ptr<ISchemaItem> initialPrompt_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TTSChunk), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter timeoutPrompt.
  //
  // 
  //         Help text for a wait timeout. An array of text chunks of type TTSChunk. See TTSChunk. The array must have at least one item.
  //       
  std::shared_ptr<ISchemaItem> timeoutPrompt_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TTSChunk), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter timeout.
  //
  // Timeout initiate timeoutPrompt
  std::shared_ptr<ISchemaItem> timeout_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Function parameter grammarID.
  //
  // 
  //         IDs of the specific compiled grammars for this voice interaction.
  //       
  std::shared_ptr<ISchemaItem> grammarID_SchemaItem = CArraySchemaItem::create(TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter appID.
  //
  // ID of application related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["helpPrompt"] = CObjectSchemaItem::SMember(helpPrompt_SchemaItem, false);
  schema_members["initialPrompt"] = CObjectSchemaItem::SMember(initialPrompt_SchemaItem, false);
  schema_members["timeoutPrompt"] = CObjectSchemaItem::SMember(timeoutPrompt_SchemaItem, false);
  schema_members["timeout"] = CObjectSchemaItem::SMember(timeout_SchemaItem, true);
  schema_members["grammarID"] = CObjectSchemaItem::SMember(grammarID_SchemaItem, false);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VR_PerformInteraction_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter choiceID.
  //
  // 
  //         ID of the choice that was selected in response to PerformInteraction.
  //       
  std::shared_ptr<ISchemaItem> choiceID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["choiceID"] = CObjectSchemaItem::SMember(choiceID_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VR_OnCommand_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter cmdID.
  //
  // ID of of the command (list of strings)
  std::shared_ptr<ISchemaItem> cmdID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter appID.
  //
  // ID of application related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["cmdID"] = CObjectSchemaItem::SMember(cmdID_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VR_ChangeRegistration_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_Language::eType> Common_Language_all_enum_values;
  Common_Language_all_enum_values.insert(Common_Language::EN_US);
  Common_Language_all_enum_values.insert(Common_Language::ES_MX);
  Common_Language_all_enum_values.insert(Common_Language::FR_CA);
  Common_Language_all_enum_values.insert(Common_Language::DE_DE);
  Common_Language_all_enum_values.insert(Common_Language::ES_ES);
  Common_Language_all_enum_values.insert(Common_Language::EN_GB);
  Common_Language_all_enum_values.insert(Common_Language::RU_RU);
  Common_Language_all_enum_values.insert(Common_Language::TR_TR);
  Common_Language_all_enum_values.insert(Common_Language::PL_PL);
  Common_Language_all_enum_values.insert(Common_Language::FR_FR);
  Common_Language_all_enum_values.insert(Common_Language::IT_IT);
  Common_Language_all_enum_values.insert(Common_Language::SV_SE);
  Common_Language_all_enum_values.insert(Common_Language::PT_PT);
  Common_Language_all_enum_values.insert(Common_Language::NL_NL);
  Common_Language_all_enum_values.insert(Common_Language::EN_AU);
  Common_Language_all_enum_values.insert(Common_Language::ZH_CN);
  Common_Language_all_enum_values.insert(Common_Language::ZH_TW);
  Common_Language_all_enum_values.insert(Common_Language::JA_JP);
  Common_Language_all_enum_values.insert(Common_Language::AR_SA);
  Common_Language_all_enum_values.insert(Common_Language::KO_KR);
  Common_Language_all_enum_values.insert(Common_Language::PT_BR);
  Common_Language_all_enum_values.insert(Common_Language::CS_CZ);
  Common_Language_all_enum_values.insert(Common_Language::DA_DK);
  Common_Language_all_enum_values.insert(Common_Language::NO_NO);
  Common_Language_all_enum_values.insert(Common_Language::NL_BE);
  Common_Language_all_enum_values.insert(Common_Language::EL_GR);
  Common_Language_all_enum_values.insert(Common_Language::HU_HU);
  Common_Language_all_enum_values.insert(Common_Language::FI_FI);
  Common_Language_all_enum_values.insert(Common_Language::SK_SK);
  Common_Language_all_enum_values.insert(Common_Language::EN_IN);
  Common_Language_all_enum_values.insert(Common_Language::TH_TH);
  Common_Language_all_enum_values.insert(Common_Language::EN_SA);
  Common_Language_all_enum_values.insert(Common_Language::HE_IL);
  Common_Language_all_enum_values.insert(Common_Language::RO_RO);
  Common_Language_all_enum_values.insert(Common_Language::UK_UA);
  Common_Language_all_enum_values.insert(Common_Language::ID_ID);
  Common_Language_all_enum_values.insert(Common_Language::VI_VN);
  Common_Language_all_enum_values.insert(Common_Language::MS_MY);
  Common_Language_all_enum_values.insert(Common_Language::HI_IN);

  // Function parameter vrSynonyms.
  //
  // 
  //         Request new VR synonyms registration
  //         Defines an additional voice recognition command.
  //         Must not interfere with any name of previously registered applications(SDL makes check).
  //       
  std::shared_ptr<ISchemaItem> vrSynonyms_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(40), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter language.
  //
  // The language application wants to switch to.
  std::shared_ptr<ISchemaItem> language_SchemaItem = TEnumSchemaItem<Common_Language::eType>::create(Common_Language_all_enum_values, TSchemaItemParameter<Common_Language::eType>());

  // Function parameter appID.
  //
  // ID of application that concerns this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["vrSynonyms"] = CObjectSchemaItem::SMember(vrSynonyms_SchemaItem, false);
  schema_members["language"] = CObjectSchemaItem::SMember(language_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VR_ChangeRegistration_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VR_OnLanguageChange_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_Language::eType> Common_Language_all_enum_values;
  Common_Language_all_enum_values.insert(Common_Language::EN_US);
  Common_Language_all_enum_values.insert(Common_Language::ES_MX);
  Common_Language_all_enum_values.insert(Common_Language::FR_CA);
  Common_Language_all_enum_values.insert(Common_Language::DE_DE);
  Common_Language_all_enum_values.insert(Common_Language::ES_ES);
  Common_Language_all_enum_values.insert(Common_Language::EN_GB);
  Common_Language_all_enum_values.insert(Common_Language::RU_RU);
  Common_Language_all_enum_values.insert(Common_Language::TR_TR);
  Common_Language_all_enum_values.insert(Common_Language::PL_PL);
  Common_Language_all_enum_values.insert(Common_Language::FR_FR);
  Common_Language_all_enum_values.insert(Common_Language::IT_IT);
  Common_Language_all_enum_values.insert(Common_Language::SV_SE);
  Common_Language_all_enum_values.insert(Common_Language::PT_PT);
  Common_Language_all_enum_values.insert(Common_Language::NL_NL);
  Common_Language_all_enum_values.insert(Common_Language::EN_AU);
  Common_Language_all_enum_values.insert(Common_Language::ZH_CN);
  Common_Language_all_enum_values.insert(Common_Language::ZH_TW);
  Common_Language_all_enum_values.insert(Common_Language::JA_JP);
  Common_Language_all_enum_values.insert(Common_Language::AR_SA);
  Common_Language_all_enum_values.insert(Common_Language::KO_KR);
  Common_Language_all_enum_values.insert(Common_Language::PT_BR);
  Common_Language_all_enum_values.insert(Common_Language::CS_CZ);
  Common_Language_all_enum_values.insert(Common_Language::DA_DK);
  Common_Language_all_enum_values.insert(Common_Language::NO_NO);
  Common_Language_all_enum_values.insert(Common_Language::NL_BE);
  Common_Language_all_enum_values.insert(Common_Language::EL_GR);
  Common_Language_all_enum_values.insert(Common_Language::HU_HU);
  Common_Language_all_enum_values.insert(Common_Language::FI_FI);
  Common_Language_all_enum_values.insert(Common_Language::SK_SK);
  Common_Language_all_enum_values.insert(Common_Language::EN_IN);
  Common_Language_all_enum_values.insert(Common_Language::TH_TH);
  Common_Language_all_enum_values.insert(Common_Language::EN_SA);
  Common_Language_all_enum_values.insert(Common_Language::HE_IL);
  Common_Language_all_enum_values.insert(Common_Language::RO_RO);
  Common_Language_all_enum_values.insert(Common_Language::UK_UA);
  Common_Language_all_enum_values.insert(Common_Language::ID_ID);
  Common_Language_all_enum_values.insert(Common_Language::VI_VN);
  Common_Language_all_enum_values.insert(Common_Language::MS_MY);
  Common_Language_all_enum_values.insert(Common_Language::HI_IN);

  // Function parameter language.
  //
  // Language VR has switched to.
  std::shared_ptr<ISchemaItem> language_SchemaItem = TEnumSchemaItem<Common_Language::eType>::create(Common_Language_all_enum_values, TSchemaItemParameter<Common_Language::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["language"] = CObjectSchemaItem::SMember(language_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VR_GetSupportedLanguages_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VR_GetSupportedLanguages_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_Language::eType> Common_Language_all_enum_values;
  Common_Language_all_enum_values.insert(Common_Language::EN_US);
  Common_Language_all_enum_values.insert(Common_Language::ES_MX);
  Common_Language_all_enum_values.insert(Common_Language::FR_CA);
  Common_Language_all_enum_values.insert(Common_Language::DE_DE);
  Common_Language_all_enum_values.insert(Common_Language::ES_ES);
  Common_Language_all_enum_values.insert(Common_Language::EN_GB);
  Common_Language_all_enum_values.insert(Common_Language::RU_RU);
  Common_Language_all_enum_values.insert(Common_Language::TR_TR);
  Common_Language_all_enum_values.insert(Common_Language::PL_PL);
  Common_Language_all_enum_values.insert(Common_Language::FR_FR);
  Common_Language_all_enum_values.insert(Common_Language::IT_IT);
  Common_Language_all_enum_values.insert(Common_Language::SV_SE);
  Common_Language_all_enum_values.insert(Common_Language::PT_PT);
  Common_Language_all_enum_values.insert(Common_Language::NL_NL);
  Common_Language_all_enum_values.insert(Common_Language::EN_AU);
  Common_Language_all_enum_values.insert(Common_Language::ZH_CN);
  Common_Language_all_enum_values.insert(Common_Language::ZH_TW);
  Common_Language_all_enum_values.insert(Common_Language::JA_JP);
  Common_Language_all_enum_values.insert(Common_Language::AR_SA);
  Common_Language_all_enum_values.insert(Common_Language::KO_KR);
  Common_Language_all_enum_values.insert(Common_Language::PT_BR);
  Common_Language_all_enum_values.insert(Common_Language::CS_CZ);
  Common_Language_all_enum_values.insert(Common_Language::DA_DK);
  Common_Language_all_enum_values.insert(Common_Language::NO_NO);
  Common_Language_all_enum_values.insert(Common_Language::NL_BE);
  Common_Language_all_enum_values.insert(Common_Language::EL_GR);
  Common_Language_all_enum_values.insert(Common_Language::HU_HU);
  Common_Language_all_enum_values.insert(Common_Language::FI_FI);
  Common_Language_all_enum_values.insert(Common_Language::SK_SK);
  Common_Language_all_enum_values.insert(Common_Language::EN_IN);
  Common_Language_all_enum_values.insert(Common_Language::TH_TH);
  Common_Language_all_enum_values.insert(Common_Language::EN_SA);
  Common_Language_all_enum_values.insert(Common_Language::HE_IL);
  Common_Language_all_enum_values.insert(Common_Language::RO_RO);
  Common_Language_all_enum_values.insert(Common_Language::UK_UA);
  Common_Language_all_enum_values.insert(Common_Language::ID_ID);
  Common_Language_all_enum_values.insert(Common_Language::VI_VN);
  Common_Language_all_enum_values.insert(Common_Language::MS_MY);
  Common_Language_all_enum_values.insert(Common_Language::HI_IN);

  // Function parameter languages.
  //
  // List of languages supported in VR.
  std::shared_ptr<ISchemaItem> languages_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<Common_Language::eType>::create(Common_Language_all_enum_values, TSchemaItemParameter<Common_Language::eType>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["languages"] = CObjectSchemaItem::SMember(languages_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VR_GetLanguage_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VR_GetLanguage_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_Language::eType> Common_Language_all_enum_values;
  Common_Language_all_enum_values.insert(Common_Language::EN_US);
  Common_Language_all_enum_values.insert(Common_Language::ES_MX);
  Common_Language_all_enum_values.insert(Common_Language::FR_CA);
  Common_Language_all_enum_values.insert(Common_Language::DE_DE);
  Common_Language_all_enum_values.insert(Common_Language::ES_ES);
  Common_Language_all_enum_values.insert(Common_Language::EN_GB);
  Common_Language_all_enum_values.insert(Common_Language::RU_RU);
  Common_Language_all_enum_values.insert(Common_Language::TR_TR);
  Common_Language_all_enum_values.insert(Common_Language::PL_PL);
  Common_Language_all_enum_values.insert(Common_Language::FR_FR);
  Common_Language_all_enum_values.insert(Common_Language::IT_IT);
  Common_Language_all_enum_values.insert(Common_Language::SV_SE);
  Common_Language_all_enum_values.insert(Common_Language::PT_PT);
  Common_Language_all_enum_values.insert(Common_Language::NL_NL);
  Common_Language_all_enum_values.insert(Common_Language::EN_AU);
  Common_Language_all_enum_values.insert(Common_Language::ZH_CN);
  Common_Language_all_enum_values.insert(Common_Language::ZH_TW);
  Common_Language_all_enum_values.insert(Common_Language::JA_JP);
  Common_Language_all_enum_values.insert(Common_Language::AR_SA);
  Common_Language_all_enum_values.insert(Common_Language::KO_KR);
  Common_Language_all_enum_values.insert(Common_Language::PT_BR);
  Common_Language_all_enum_values.insert(Common_Language::CS_CZ);
  Common_Language_all_enum_values.insert(Common_Language::DA_DK);
  Common_Language_all_enum_values.insert(Common_Language::NO_NO);
  Common_Language_all_enum_values.insert(Common_Language::NL_BE);
  Common_Language_all_enum_values.insert(Common_Language::EL_GR);
  Common_Language_all_enum_values.insert(Common_Language::HU_HU);
  Common_Language_all_enum_values.insert(Common_Language::FI_FI);
  Common_Language_all_enum_values.insert(Common_Language::SK_SK);
  Common_Language_all_enum_values.insert(Common_Language::EN_IN);
  Common_Language_all_enum_values.insert(Common_Language::TH_TH);
  Common_Language_all_enum_values.insert(Common_Language::EN_SA);
  Common_Language_all_enum_values.insert(Common_Language::HE_IL);
  Common_Language_all_enum_values.insert(Common_Language::RO_RO);
  Common_Language_all_enum_values.insert(Common_Language::UK_UA);
  Common_Language_all_enum_values.insert(Common_Language::ID_ID);
  Common_Language_all_enum_values.insert(Common_Language::VI_VN);
  Common_Language_all_enum_values.insert(Common_Language::MS_MY);
  Common_Language_all_enum_values.insert(Common_Language::HI_IN);

  // Function parameter language.
  std::shared_ptr<ISchemaItem> language_SchemaItem = TEnumSchemaItem<Common_Language::eType>::create(Common_Language_all_enum_values, TSchemaItemParameter<Common_Language::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["language"] = CObjectSchemaItem::SMember(language_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VR_GetCapabilities_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VR_GetCapabilities_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_VrCapabilities::eType> Common_VrCapabilities_all_enum_values;
  Common_VrCapabilities_all_enum_values.insert(Common_VrCapabilities::VR_TEXT);

  // Function parameter vrCapabilities.
  //
  // Types of input recognized by VR module.
  std::shared_ptr<ISchemaItem> vrCapabilities_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<Common_VrCapabilities::eType>::create(Common_VrCapabilities_all_enum_values, TSchemaItemParameter<Common_VrCapabilities::eType>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["vrCapabilities"] = CObjectSchemaItem::SMember(vrCapabilities_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_TTS_GetCapabilities_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_TTS_GetCapabilities_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_SpeechCapabilities::eType> Common_SpeechCapabilities_all_enum_values;
  Common_SpeechCapabilities_all_enum_values.insert(Common_SpeechCapabilities::SC_TEXT);
  Common_SpeechCapabilities_all_enum_values.insert(Common_SpeechCapabilities::SAPI_PHONEMES);
  Common_SpeechCapabilities_all_enum_values.insert(Common_SpeechCapabilities::LHPLUS_PHONEMES);
  Common_SpeechCapabilities_all_enum_values.insert(Common_SpeechCapabilities::PRE_RECORDED);
  Common_SpeechCapabilities_all_enum_values.insert(Common_SpeechCapabilities::SILENCE);
  Common_SpeechCapabilities_all_enum_values.insert(Common_SpeechCapabilities::FILE);

  std::set<Common_PrerecordedSpeech::eType> Common_PrerecordedSpeech_all_enum_values;
  Common_PrerecordedSpeech_all_enum_values.insert(Common_PrerecordedSpeech::HELP_JINGLE);
  Common_PrerecordedSpeech_all_enum_values.insert(Common_PrerecordedSpeech::INITIAL_JINGLE);
  Common_PrerecordedSpeech_all_enum_values.insert(Common_PrerecordedSpeech::LISTEN_JINGLE);
  Common_PrerecordedSpeech_all_enum_values.insert(Common_PrerecordedSpeech::POSITIVE_JINGLE);
  Common_PrerecordedSpeech_all_enum_values.insert(Common_PrerecordedSpeech::NEGATIVE_JINGLE);

  // Function parameter speechCapabilities.
  //
  // See SpeechCapabilities
  std::shared_ptr<ISchemaItem> speechCapabilities_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<Common_SpeechCapabilities::eType>::create(Common_SpeechCapabilities_all_enum_values, TSchemaItemParameter<Common_SpeechCapabilities::eType>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter prerecordedSpeechCapabilities.
  //
  // See PrerecordedSpeech
  std::shared_ptr<ISchemaItem> prerecordedSpeechCapabilities_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<Common_PrerecordedSpeech::eType>::create(Common_PrerecordedSpeech_all_enum_values, TSchemaItemParameter<Common_PrerecordedSpeech::eType>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["speechCapabilities"] = CObjectSchemaItem::SMember(speechCapabilities_SchemaItem, true);
  schema_members["prerecordedSpeechCapabilities"] = CObjectSchemaItem::SMember(prerecordedSpeechCapabilities_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_TTS_Started_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_TTS_Stopped_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_TTS_IsReady_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_TTS_IsReady_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter available.
  //
  // Must be true if TTS is present and ready to communicate with SDL.
  std::shared_ptr<ISchemaItem> available_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["available"] = CObjectSchemaItem::SMember(available_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_TTS_Speak_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_MethodName::eType> Common_MethodName_all_enum_values;
  Common_MethodName_all_enum_values.insert(Common_MethodName::ALERT);
  Common_MethodName_all_enum_values.insert(Common_MethodName::SPEAK);
  Common_MethodName_all_enum_values.insert(Common_MethodName::AUDIO_PASS_THRU);
  Common_MethodName_all_enum_values.insert(Common_MethodName::ALERT_MANEUVER);

  // Function parameter ttsChunks.
  //
  // List of strings to be spoken.
  std::shared_ptr<ISchemaItem> ttsChunks_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TTSChunk), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter appID.
  //
  // ID of application that requested this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Function parameter speakType.
  //
  // Defines the type of the request which causes text-to-speech
  std::shared_ptr<ISchemaItem> speakType_SchemaItem = TEnumSchemaItem<Common_MethodName::eType>::create(Common_MethodName_all_enum_values, TSchemaItemParameter<Common_MethodName::eType>());

  // Function parameter playTone.
  //
  // Defines that the tone should be played
  std::shared_ptr<ISchemaItem> playTone_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["ttsChunks"] = CObjectSchemaItem::SMember(ttsChunks_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);
  schema_members["speakType"] = CObjectSchemaItem::SMember(speakType_SchemaItem, false);
  schema_members["playTone"] = CObjectSchemaItem::SMember(playTone_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_TTS_Speak_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_TTS_StopSpeaking_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_TTS_StopSpeaking_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_TTS_ChangeRegistration_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_Language::eType> Common_Language_all_enum_values;
  Common_Language_all_enum_values.insert(Common_Language::EN_US);
  Common_Language_all_enum_values.insert(Common_Language::ES_MX);
  Common_Language_all_enum_values.insert(Common_Language::FR_CA);
  Common_Language_all_enum_values.insert(Common_Language::DE_DE);
  Common_Language_all_enum_values.insert(Common_Language::ES_ES);
  Common_Language_all_enum_values.insert(Common_Language::EN_GB);
  Common_Language_all_enum_values.insert(Common_Language::RU_RU);
  Common_Language_all_enum_values.insert(Common_Language::TR_TR);
  Common_Language_all_enum_values.insert(Common_Language::PL_PL);
  Common_Language_all_enum_values.insert(Common_Language::FR_FR);
  Common_Language_all_enum_values.insert(Common_Language::IT_IT);
  Common_Language_all_enum_values.insert(Common_Language::SV_SE);
  Common_Language_all_enum_values.insert(Common_Language::PT_PT);
  Common_Language_all_enum_values.insert(Common_Language::NL_NL);
  Common_Language_all_enum_values.insert(Common_Language::EN_AU);
  Common_Language_all_enum_values.insert(Common_Language::ZH_CN);
  Common_Language_all_enum_values.insert(Common_Language::ZH_TW);
  Common_Language_all_enum_values.insert(Common_Language::JA_JP);
  Common_Language_all_enum_values.insert(Common_Language::AR_SA);
  Common_Language_all_enum_values.insert(Common_Language::KO_KR);
  Common_Language_all_enum_values.insert(Common_Language::PT_BR);
  Common_Language_all_enum_values.insert(Common_Language::CS_CZ);
  Common_Language_all_enum_values.insert(Common_Language::DA_DK);
  Common_Language_all_enum_values.insert(Common_Language::NO_NO);
  Common_Language_all_enum_values.insert(Common_Language::NL_BE);
  Common_Language_all_enum_values.insert(Common_Language::EL_GR);
  Common_Language_all_enum_values.insert(Common_Language::HU_HU);
  Common_Language_all_enum_values.insert(Common_Language::FI_FI);
  Common_Language_all_enum_values.insert(Common_Language::SK_SK);
  Common_Language_all_enum_values.insert(Common_Language::EN_IN);
  Common_Language_all_enum_values.insert(Common_Language::TH_TH);
  Common_Language_all_enum_values.insert(Common_Language::EN_SA);
  Common_Language_all_enum_values.insert(Common_Language::HE_IL);
  Common_Language_all_enum_values.insert(Common_Language::RO_RO);
  Common_Language_all_enum_values.insert(Common_Language::UK_UA);
  Common_Language_all_enum_values.insert(Common_Language::ID_ID);
  Common_Language_all_enum_values.insert(Common_Language::VI_VN);
  Common_Language_all_enum_values.insert(Common_Language::MS_MY);
  Common_Language_all_enum_values.insert(Common_Language::HI_IN);

  // Function parameter ttsName.
  //
  // 
  //         Request new ttsName registration
  //         TTS string for VR recognition of the mobile application name, e.g. "Ford Drive Green".
  //         Meant to overcome any failing on speech engine in properly pronouncing / understanding app name.
  //         May not be empty.
  //         May not start with a new line character.
  //         Not unique value (SDL makes all the checks)
  //       
  std::shared_ptr<ISchemaItem> ttsName_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TTSChunk), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter language.
  //
  // The language application wants to switch to.
  std::shared_ptr<ISchemaItem> language_SchemaItem = TEnumSchemaItem<Common_Language::eType>::create(Common_Language_all_enum_values, TSchemaItemParameter<Common_Language::eType>());

  // Function parameter appID.
  //
  // ID of application related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["ttsName"] = CObjectSchemaItem::SMember(ttsName_SchemaItem, false);
  schema_members["language"] = CObjectSchemaItem::SMember(language_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_TTS_ChangeRegistration_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_TTS_OnLanguageChange_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_Language::eType> Common_Language_all_enum_values;
  Common_Language_all_enum_values.insert(Common_Language::EN_US);
  Common_Language_all_enum_values.insert(Common_Language::ES_MX);
  Common_Language_all_enum_values.insert(Common_Language::FR_CA);
  Common_Language_all_enum_values.insert(Common_Language::DE_DE);
  Common_Language_all_enum_values.insert(Common_Language::ES_ES);
  Common_Language_all_enum_values.insert(Common_Language::EN_GB);
  Common_Language_all_enum_values.insert(Common_Language::RU_RU);
  Common_Language_all_enum_values.insert(Common_Language::TR_TR);
  Common_Language_all_enum_values.insert(Common_Language::PL_PL);
  Common_Language_all_enum_values.insert(Common_Language::FR_FR);
  Common_Language_all_enum_values.insert(Common_Language::IT_IT);
  Common_Language_all_enum_values.insert(Common_Language::SV_SE);
  Common_Language_all_enum_values.insert(Common_Language::PT_PT);
  Common_Language_all_enum_values.insert(Common_Language::NL_NL);
  Common_Language_all_enum_values.insert(Common_Language::EN_AU);
  Common_Language_all_enum_values.insert(Common_Language::ZH_CN);
  Common_Language_all_enum_values.insert(Common_Language::ZH_TW);
  Common_Language_all_enum_values.insert(Common_Language::JA_JP);
  Common_Language_all_enum_values.insert(Common_Language::AR_SA);
  Common_Language_all_enum_values.insert(Common_Language::KO_KR);
  Common_Language_all_enum_values.insert(Common_Language::PT_BR);
  Common_Language_all_enum_values.insert(Common_Language::CS_CZ);
  Common_Language_all_enum_values.insert(Common_Language::DA_DK);
  Common_Language_all_enum_values.insert(Common_Language::NO_NO);
  Common_Language_all_enum_values.insert(Common_Language::NL_BE);
  Common_Language_all_enum_values.insert(Common_Language::EL_GR);
  Common_Language_all_enum_values.insert(Common_Language::HU_HU);
  Common_Language_all_enum_values.insert(Common_Language::FI_FI);
  Common_Language_all_enum_values.insert(Common_Language::SK_SK);
  Common_Language_all_enum_values.insert(Common_Language::EN_IN);
  Common_Language_all_enum_values.insert(Common_Language::TH_TH);
  Common_Language_all_enum_values.insert(Common_Language::EN_SA);
  Common_Language_all_enum_values.insert(Common_Language::HE_IL);
  Common_Language_all_enum_values.insert(Common_Language::RO_RO);
  Common_Language_all_enum_values.insert(Common_Language::UK_UA);
  Common_Language_all_enum_values.insert(Common_Language::ID_ID);
  Common_Language_all_enum_values.insert(Common_Language::VI_VN);
  Common_Language_all_enum_values.insert(Common_Language::MS_MY);
  Common_Language_all_enum_values.insert(Common_Language::HI_IN);

  // Function parameter language.
  //
  // Language TTS has switched to.
  std::shared_ptr<ISchemaItem> language_SchemaItem = TEnumSchemaItem<Common_Language::eType>::create(Common_Language_all_enum_values, TSchemaItemParameter<Common_Language::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["language"] = CObjectSchemaItem::SMember(language_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_TTS_GetSupportedLanguages_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_TTS_GetSupportedLanguages_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_Language::eType> Common_Language_all_enum_values;
  Common_Language_all_enum_values.insert(Common_Language::EN_US);
  Common_Language_all_enum_values.insert(Common_Language::ES_MX);
  Common_Language_all_enum_values.insert(Common_Language::FR_CA);
  Common_Language_all_enum_values.insert(Common_Language::DE_DE);
  Common_Language_all_enum_values.insert(Common_Language::ES_ES);
  Common_Language_all_enum_values.insert(Common_Language::EN_GB);
  Common_Language_all_enum_values.insert(Common_Language::RU_RU);
  Common_Language_all_enum_values.insert(Common_Language::TR_TR);
  Common_Language_all_enum_values.insert(Common_Language::PL_PL);
  Common_Language_all_enum_values.insert(Common_Language::FR_FR);
  Common_Language_all_enum_values.insert(Common_Language::IT_IT);
  Common_Language_all_enum_values.insert(Common_Language::SV_SE);
  Common_Language_all_enum_values.insert(Common_Language::PT_PT);
  Common_Language_all_enum_values.insert(Common_Language::NL_NL);
  Common_Language_all_enum_values.insert(Common_Language::EN_AU);
  Common_Language_all_enum_values.insert(Common_Language::ZH_CN);
  Common_Language_all_enum_values.insert(Common_Language::ZH_TW);
  Common_Language_all_enum_values.insert(Common_Language::JA_JP);
  Common_Language_all_enum_values.insert(Common_Language::AR_SA);
  Common_Language_all_enum_values.insert(Common_Language::KO_KR);
  Common_Language_all_enum_values.insert(Common_Language::PT_BR);
  Common_Language_all_enum_values.insert(Common_Language::CS_CZ);
  Common_Language_all_enum_values.insert(Common_Language::DA_DK);
  Common_Language_all_enum_values.insert(Common_Language::NO_NO);
  Common_Language_all_enum_values.insert(Common_Language::NL_BE);
  Common_Language_all_enum_values.insert(Common_Language::EL_GR);
  Common_Language_all_enum_values.insert(Common_Language::HU_HU);
  Common_Language_all_enum_values.insert(Common_Language::FI_FI);
  Common_Language_all_enum_values.insert(Common_Language::SK_SK);
  Common_Language_all_enum_values.insert(Common_Language::EN_IN);
  Common_Language_all_enum_values.insert(Common_Language::TH_TH);
  Common_Language_all_enum_values.insert(Common_Language::EN_SA);
  Common_Language_all_enum_values.insert(Common_Language::HE_IL);
  Common_Language_all_enum_values.insert(Common_Language::RO_RO);
  Common_Language_all_enum_values.insert(Common_Language::UK_UA);
  Common_Language_all_enum_values.insert(Common_Language::ID_ID);
  Common_Language_all_enum_values.insert(Common_Language::VI_VN);
  Common_Language_all_enum_values.insert(Common_Language::MS_MY);
  Common_Language_all_enum_values.insert(Common_Language::HI_IN);

  // Function parameter languages.
  //
  // List of languages supported in TTS.
  std::shared_ptr<ISchemaItem> languages_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<Common_Language::eType>::create(Common_Language_all_enum_values, TSchemaItemParameter<Common_Language::eType>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["languages"] = CObjectSchemaItem::SMember(languages_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_TTS_GetLanguage_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_TTS_GetLanguage_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_Language::eType> Common_Language_all_enum_values;
  Common_Language_all_enum_values.insert(Common_Language::EN_US);
  Common_Language_all_enum_values.insert(Common_Language::ES_MX);
  Common_Language_all_enum_values.insert(Common_Language::FR_CA);
  Common_Language_all_enum_values.insert(Common_Language::DE_DE);
  Common_Language_all_enum_values.insert(Common_Language::ES_ES);
  Common_Language_all_enum_values.insert(Common_Language::EN_GB);
  Common_Language_all_enum_values.insert(Common_Language::RU_RU);
  Common_Language_all_enum_values.insert(Common_Language::TR_TR);
  Common_Language_all_enum_values.insert(Common_Language::PL_PL);
  Common_Language_all_enum_values.insert(Common_Language::FR_FR);
  Common_Language_all_enum_values.insert(Common_Language::IT_IT);
  Common_Language_all_enum_values.insert(Common_Language::SV_SE);
  Common_Language_all_enum_values.insert(Common_Language::PT_PT);
  Common_Language_all_enum_values.insert(Common_Language::NL_NL);
  Common_Language_all_enum_values.insert(Common_Language::EN_AU);
  Common_Language_all_enum_values.insert(Common_Language::ZH_CN);
  Common_Language_all_enum_values.insert(Common_Language::ZH_TW);
  Common_Language_all_enum_values.insert(Common_Language::JA_JP);
  Common_Language_all_enum_values.insert(Common_Language::AR_SA);
  Common_Language_all_enum_values.insert(Common_Language::KO_KR);
  Common_Language_all_enum_values.insert(Common_Language::PT_BR);
  Common_Language_all_enum_values.insert(Common_Language::CS_CZ);
  Common_Language_all_enum_values.insert(Common_Language::DA_DK);
  Common_Language_all_enum_values.insert(Common_Language::NO_NO);
  Common_Language_all_enum_values.insert(Common_Language::NL_BE);
  Common_Language_all_enum_values.insert(Common_Language::EL_GR);
  Common_Language_all_enum_values.insert(Common_Language::HU_HU);
  Common_Language_all_enum_values.insert(Common_Language::FI_FI);
  Common_Language_all_enum_values.insert(Common_Language::SK_SK);
  Common_Language_all_enum_values.insert(Common_Language::EN_IN);
  Common_Language_all_enum_values.insert(Common_Language::TH_TH);
  Common_Language_all_enum_values.insert(Common_Language::EN_SA);
  Common_Language_all_enum_values.insert(Common_Language::HE_IL);
  Common_Language_all_enum_values.insert(Common_Language::RO_RO);
  Common_Language_all_enum_values.insert(Common_Language::UK_UA);
  Common_Language_all_enum_values.insert(Common_Language::ID_ID);
  Common_Language_all_enum_values.insert(Common_Language::VI_VN);
  Common_Language_all_enum_values.insert(Common_Language::MS_MY);
  Common_Language_all_enum_values.insert(Common_Language::HI_IN);

  // Function parameter language.
  std::shared_ptr<ISchemaItem> language_SchemaItem = TEnumSchemaItem<Common_Language::eType>::create(Common_Language_all_enum_values, TSchemaItemParameter<Common_Language::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["language"] = CObjectSchemaItem::SMember(language_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_TTS_SetGlobalProperties_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter helpPrompt.
  //
  // 
  //           The help prompt.
  //           An array of text chunks of type TTSChunk. See TTSChunk.
  //       
  std::shared_ptr<ISchemaItem> helpPrompt_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TTSChunk), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));

  // Function parameter timeoutPrompt.
  //
  // 
  //           Help text for a wait timeout.
  //           An array of text chunks of type TTSChunk. See TTSChunk.
  //           The array must have at least one item.
  //       
  std::shared_ptr<ISchemaItem> timeoutPrompt_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TTSChunk), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter appID.
  //
  // ID of application related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["helpPrompt"] = CObjectSchemaItem::SMember(helpPrompt_SchemaItem, false);
  schema_members["timeoutPrompt"] = CObjectSchemaItem::SMember(timeoutPrompt_SchemaItem, false);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_TTS_SetGlobalProperties_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_TTS_OnResetTimeout_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter appID.
  //
  // Id of application that concerns the 'methodName'.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Function parameter methodName.
  //
  // The name of the method, the renew of timeout is required for
  std::shared_ptr<ISchemaItem> methodName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);
  schema_members["methodName"] = CObjectSchemaItem::SMember(methodName_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_Alert_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_AlertType::eType> Common_AlertType_all_enum_values;
  Common_AlertType_all_enum_values.insert(Common_AlertType::UI);
  Common_AlertType_all_enum_values.insert(Common_AlertType::BOTH);

  // Function parameter alertStrings.
  //
  // Array of lines of alert text fields. See TextFieldStruct. Uses alertText1, alertText2, alertText3.
  std::shared_ptr<ISchemaItem> alertStrings_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TextFieldStruct), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(3));

  // Function parameter duration.
  //
  // Timeout in milliseconds.
  std::shared_ptr<ISchemaItem> duration_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(3000), TSchemaItemParameter<int32_t>(10000), TSchemaItemParameter<int32_t>());

  // Function parameter softButtons.
  //
  // App defined SoftButtons
  std::shared_ptr<ISchemaItem> softButtons_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SoftButton), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(4));

  // Function parameter progressIndicator.
  //
  // If supported on the given platform, the alert GUI will include some sort of animation indicating that loading of a feature is progressing.  e.g. a spinning wheel or hourglass, etc.
  std::shared_ptr<ISchemaItem> progressIndicator_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter alertType.
  //
  // Defines if only UI or BOTH portions of the Alert request are being sent to HMI Side
  std::shared_ptr<ISchemaItem> alertType_SchemaItem = TEnumSchemaItem<Common_AlertType::eType>::create(Common_AlertType_all_enum_values, TSchemaItemParameter<Common_AlertType::eType>());

  // Function parameter appID.
  //
  // ID of application requested this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["alertStrings"] = CObjectSchemaItem::SMember(alertStrings_SchemaItem, true);
  schema_members["duration"] = CObjectSchemaItem::SMember(duration_SchemaItem, true);
  schema_members["softButtons"] = CObjectSchemaItem::SMember(softButtons_SchemaItem, false);
  schema_members["progressIndicator"] = CObjectSchemaItem::SMember(progressIndicator_SchemaItem, false);
  schema_members["alertType"] = CObjectSchemaItem::SMember(alertType_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_Alert_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter tryAgainTime.
  //
  // Amount of time (in milliseconds) that SDL must wait before resending an alert. Must be provided if another system event or overlay currently has a higher priority than this alert.
  std::shared_ptr<ISchemaItem> tryAgainTime_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["tryAgainTime"] = CObjectSchemaItem::SMember(tryAgainTime_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_Show_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_TextAlignment::eType> Common_TextAlignment_all_enum_values;
  Common_TextAlignment_all_enum_values.insert(Common_TextAlignment::LEFT_ALIGNED);
  Common_TextAlignment_all_enum_values.insert(Common_TextAlignment::RIGHT_ALIGNED);
  Common_TextAlignment_all_enum_values.insert(Common_TextAlignment::CENTERED);

  // Function parameter showStrings.
  //
  // Array of lines of show text fields. See TextFieldStruct. Uses mainField1, mainField2, mainField3, mainField4. If some field is not set, the corresponding text should stay unchanged. If field's text is empty "", the field must be cleared.
  //           mainField1: The text that should be displayed in a single or upper display line.
  //           mainField2: The text that should be displayed on the second display line.
  //           mainField3: The text that should be displayed on the second "page" first display line.
  //           mainField4: The text that should be displayed on the second "page" second display line.
  //           statusBar: statusBar.
  //           mediaClock: Text value for MediaClock field.
  //           mediaTrack: The text that should be displayed in the track field. This field is only valid for media applications on NGN type ACMs.
  //       
  std::shared_ptr<ISchemaItem> showStrings_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TextFieldStruct), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(7));

  // Function parameter alignment.
  //
  // Specifies how mainField1 and mainField2 texts should be aligned on the display.
  // If omitted, texts must be centered
  std::shared_ptr<ISchemaItem> alignment_SchemaItem = TEnumSchemaItem<Common_TextAlignment::eType>::create(Common_TextAlignment_all_enum_values, TSchemaItemParameter<Common_TextAlignment::eType>());

  // Function parameter graphic.
  //
  // Path to optional dynamic image or the static binary image itself.  See Image. If omitted, the displayed graphic should not change.
  std::shared_ptr<ISchemaItem> graphic_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Image);

  // Function parameter secondaryGraphic.
  //
  // 
  //         Image struct determining whether static or dynamic secondary image to display in app.
  //         If omitted on supported displays, the displayed secondary graphic shall not change.
  //       
  std::shared_ptr<ISchemaItem> secondaryGraphic_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Image);

  // Function parameter softButtons.
  //
  // App defined SoftButtons.
  // If omitted, the currently displayed SoftButton values should not change.
  std::shared_ptr<ISchemaItem> softButtons_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SoftButton), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(8));

  // Function parameter customPresets.
  //
  // App labeled on-screen presets (i.e. GEN3 media presets or dynamic search suggestions).
  // If omitted on supported displays, the presets will be shown as not defined.
  std::shared_ptr<ISchemaItem> customPresets_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(10));

  // Function parameter appID.
  //
  // Id of application related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["showStrings"] = CObjectSchemaItem::SMember(showStrings_SchemaItem, true);
  schema_members["alignment"] = CObjectSchemaItem::SMember(alignment_SchemaItem, false);
  schema_members["graphic"] = CObjectSchemaItem::SMember(graphic_SchemaItem, false);
  schema_members["secondaryGraphic"] = CObjectSchemaItem::SMember(secondaryGraphic_SchemaItem, false);
  schema_members["softButtons"] = CObjectSchemaItem::SMember(softButtons_SchemaItem, false);
  schema_members["customPresets"] = CObjectSchemaItem::SMember(customPresets_SchemaItem, false);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_Show_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_AddCommand_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter cmdID.
  //
  // ID of the command to be added.
  std::shared_ptr<ISchemaItem> cmdID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter menuParams.
  //
  // Optional sub value containing parameters of the command (position, name, etc.). See MenuParams. If omitted the command should be added to the end of the list of commands.
  std::shared_ptr<ISchemaItem> menuParams_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_MenuParams);

  // Function parameter cmdIcon.
  //
  // Image to be displayed for representing the command. See Image.
  // If omitted, no (or the default if applicable) icon should be displayed.
  std::shared_ptr<ISchemaItem> cmdIcon_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Image);

  // Function parameter appID.
  //
  // ID of application that concerns this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["cmdID"] = CObjectSchemaItem::SMember(cmdID_SchemaItem, true);
  schema_members["menuParams"] = CObjectSchemaItem::SMember(menuParams_SchemaItem, false);
  schema_members["cmdIcon"] = CObjectSchemaItem::SMember(cmdIcon_SchemaItem, false);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_AddCommand_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_DeleteCommand_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter cmdID.
  //
  // cmdId previously sent via AddCommand request - id of the command to be deleted.
  std::shared_ptr<ISchemaItem> cmdID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter appID.
  //
  // ID of application that concerns this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["cmdID"] = CObjectSchemaItem::SMember(cmdID_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_DeleteCommand_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_AddSubMenu_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter menuID.
  //
  // ID of the sub menu to be added. Unique for the application.
  std::shared_ptr<ISchemaItem> menuID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter menuParams.
  //
  // Position and name of menu to be added. 'parent' field is omitted for this RPC.  
  std::shared_ptr<ISchemaItem> menuParams_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_MenuParams);

  // Function parameter menuIcon.
  //
  // The image field for AddSubMenu
  std::shared_ptr<ISchemaItem> menuIcon_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Image);

  // Function parameter appID.
  //
  // ID of application that requested this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["menuID"] = CObjectSchemaItem::SMember(menuID_SchemaItem, true);
  schema_members["menuParams"] = CObjectSchemaItem::SMember(menuParams_SchemaItem, true);
  schema_members["menuIcon"] = CObjectSchemaItem::SMember(menuIcon_SchemaItem, false);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_AddSubMenu_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_DeleteSubMenu_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter menuID.
  //
  // The "menuID" of the sub-menu to be deleted. (See addSubMenu.menuID)
  std::shared_ptr<ISchemaItem> menuID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter appID.
  //
  // ID of application that concerns this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["menuID"] = CObjectSchemaItem::SMember(menuID_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_DeleteSubMenu_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_PerformInteraction_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_LayoutMode::eType> Common_LayoutMode_all_enum_values;
  Common_LayoutMode_all_enum_values.insert(Common_LayoutMode::ICON_ONLY);
  Common_LayoutMode_all_enum_values.insert(Common_LayoutMode::ICON_WITH_SEARCH);
  Common_LayoutMode_all_enum_values.insert(Common_LayoutMode::LIST_ONLY);
  Common_LayoutMode_all_enum_values.insert(Common_LayoutMode::LIST_WITH_SEARCH);
  Common_LayoutMode_all_enum_values.insert(Common_LayoutMode::KEYBOARD);

  // Function parameter initialText.
  //
  // Uses initialInteractionText. See TextFieldStruct.
  std::shared_ptr<ISchemaItem> initialText_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TextFieldStruct);

  // Function parameter choiceSet.
  //
  // The list of choices to be used for the interaction with the user
  std::shared_ptr<ISchemaItem> choiceSet_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Choice), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter vrHelpTitle.
  //
  // VR Help Title text.
  // If omitted on supported displays, the default HU system help title should be used.
  std::shared_ptr<ISchemaItem> vrHelpTitle_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter vrHelp.
  //
  // VR Help Items. If omitted on supported displays, the default HU system generated help items should be used.
  std::shared_ptr<ISchemaItem> vrHelp_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VrHelpItem), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter timeout.
  //
  // Timeout in milliseconds.
  std::shared_ptr<ISchemaItem> timeout_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(5000), TSchemaItemParameter<int32_t>(100000), TSchemaItemParameter<int32_t>(10000));

  // Function parameter interactionLayout.
  //
  // See LayoutMode.
  std::shared_ptr<ISchemaItem> interactionLayout_SchemaItem = TEnumSchemaItem<Common_LayoutMode::eType>::create(Common_LayoutMode_all_enum_values, TSchemaItemParameter<Common_LayoutMode::eType>());

  // Function parameter appID.
  //
  // ID of application that concerns this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["initialText"] = CObjectSchemaItem::SMember(initialText_SchemaItem, false);
  schema_members["choiceSet"] = CObjectSchemaItem::SMember(choiceSet_SchemaItem, false);
  schema_members["vrHelpTitle"] = CObjectSchemaItem::SMember(vrHelpTitle_SchemaItem, false);
  schema_members["vrHelp"] = CObjectSchemaItem::SMember(vrHelp_SchemaItem, false);
  schema_members["timeout"] = CObjectSchemaItem::SMember(timeout_SchemaItem, true);
  schema_members["interactionLayout"] = CObjectSchemaItem::SMember(interactionLayout_SchemaItem, false);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_PerformInteraction_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter choiceID.
  //
  // ID of the choice that was selected in response to PerformInteraction.
  std::shared_ptr<ISchemaItem> choiceID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter manualTextEntry.
  //
  // 
  //             Manually entered text selection, e.g. through keyboard
  //             Can be returned in lieu of choiceID, depending on trigger source
  //       
  std::shared_ptr<ISchemaItem> manualTextEntry_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["choiceID"] = CObjectSchemaItem::SMember(choiceID_SchemaItem, false);
  schema_members["manualTextEntry"] = CObjectSchemaItem::SMember(manualTextEntry_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_SetMediaClockTimer_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_ClockUpdateMode::eType> Common_ClockUpdateMode_all_enum_values;
  Common_ClockUpdateMode_all_enum_values.insert(Common_ClockUpdateMode::COUNTUP);
  Common_ClockUpdateMode_all_enum_values.insert(Common_ClockUpdateMode::COUNTDOWN);
  Common_ClockUpdateMode_all_enum_values.insert(Common_ClockUpdateMode::PAUSE);
  Common_ClockUpdateMode_all_enum_values.insert(Common_ClockUpdateMode::RESUME);
  Common_ClockUpdateMode_all_enum_values.insert(Common_ClockUpdateMode::CLEAR);

  std::set<Common_AudioStreamingIndicator::eType> Common_AudioStreamingIndicator_all_enum_values;
  Common_AudioStreamingIndicator_all_enum_values.insert(Common_AudioStreamingIndicator::PLAY_PAUSE);
  Common_AudioStreamingIndicator_all_enum_values.insert(Common_AudioStreamingIndicator::PLAY);
  Common_AudioStreamingIndicator_all_enum_values.insert(Common_AudioStreamingIndicator::PAUSE);
  Common_AudioStreamingIndicator_all_enum_values.insert(Common_AudioStreamingIndicator::STOP);

  // Function parameter startTime.
  //
  // SDL transfers startTime together with modes: "COUNTUP", "COUNTDOWN", "PAUSE" to HMI.
  //       SDL ignores startTime for modes: "RESUME", and "CLEAR"
  std::shared_ptr<ISchemaItem> startTime_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TimeFormat);

  // Function parameter endTime.
  //
  // 
  //           See TimeFormat.
  //           SDL transfers endTime together with modes: "COUNTUP", "COUNTDOWN", "PAUSE" to HMI. To be used to calculate any visual progress bar (if not provided, this feature is ignored).
  //           SDL ignores endTime for modes: "RESUME", and "CLEAR"
  //       
  std::shared_ptr<ISchemaItem> endTime_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TimeFormat);

  // Function parameter updateMode.
  //
  // The update method of the media clock.
  // In case of pause, resume, or clear, the start time value is ignored and shall be left out.  For resume, the time continues with the same value as it was when paused.
  std::shared_ptr<ISchemaItem> updateMode_SchemaItem = TEnumSchemaItem<Common_ClockUpdateMode::eType>::create(Common_ClockUpdateMode_all_enum_values, TSchemaItemParameter<Common_ClockUpdateMode::eType>());

  // Function parameter audioStreamingIndicator.
  //
  // Indicates that a button press of the Play/Pause button would play, pause or Stop the current playback.
  std::shared_ptr<ISchemaItem> audioStreamingIndicator_SchemaItem = TEnumSchemaItem<Common_AudioStreamingIndicator::eType>::create(Common_AudioStreamingIndicator_all_enum_values, TSchemaItemParameter<Common_AudioStreamingIndicator::eType>());

  // Function parameter appID.
  //
  // ID of application that requested this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["startTime"] = CObjectSchemaItem::SMember(startTime_SchemaItem, false);
  schema_members["endTime"] = CObjectSchemaItem::SMember(endTime_SchemaItem, false);
  schema_members["updateMode"] = CObjectSchemaItem::SMember(updateMode_SchemaItem, true);
  schema_members["audioStreamingIndicator"] = CObjectSchemaItem::SMember(audioStreamingIndicator_SchemaItem, false);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_SetMediaClockTimer_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_SetGlobalProperties_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter vrHelpTitle.
  //
  // VR Help Title text.
  // If omitted on supported displays, the default HU system help title should be used.
  std::shared_ptr<ISchemaItem> vrHelpTitle_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter vrHelp.
  //
  // VR Help Items. If omitted on supported displays, the default HU system generated help items should be used.
  std::shared_ptr<ISchemaItem> vrHelp_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VrHelpItem), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter menuTitle.
  //
  // Optional text to label an app menu button (for certain touchscreen platforms).
  std::shared_ptr<ISchemaItem> menuTitle_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter menuIcon.
  //
  // Optional icon to draw on an app menu button (for certain touchscreen platforms).
  std::shared_ptr<ISchemaItem> menuIcon_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Image);

  // Function parameter keyboardProperties.
  //
  // On-screen keybaord configuration (if available).
  std::shared_ptr<ISchemaItem> keyboardProperties_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_KeyboardProperties);

  // Function parameter appID.
  //
  // ID of application that concerns this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["vrHelpTitle"] = CObjectSchemaItem::SMember(vrHelpTitle_SchemaItem, false);
  schema_members["vrHelp"] = CObjectSchemaItem::SMember(vrHelp_SchemaItem, false);
  schema_members["menuTitle"] = CObjectSchemaItem::SMember(menuTitle_SchemaItem, false);
  schema_members["menuIcon"] = CObjectSchemaItem::SMember(menuIcon_SchemaItem, false);
  schema_members["keyboardProperties"] = CObjectSchemaItem::SMember(keyboardProperties_SchemaItem, false);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_SetGlobalProperties_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_OnCommand_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter cmdID.
  //
  // Command ID, which is related to a specific menu entry (previously sent with AddCommand).
  std::shared_ptr<ISchemaItem> cmdID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter appID.
  //
  // ID of application that is related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["cmdID"] = CObjectSchemaItem::SMember(cmdID_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_OnSystemContext_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_SystemContext::eType> Common_SystemContext_all_enum_values;
  Common_SystemContext_all_enum_values.insert(Common_SystemContext::SYSCTXT_MAIN);
  Common_SystemContext_all_enum_values.insert(Common_SystemContext::SYSCTXT_VRSESSION);
  Common_SystemContext_all_enum_values.insert(Common_SystemContext::SYSCTXT_MENU);
  Common_SystemContext_all_enum_values.insert(Common_SystemContext::SYSCTXT_HMI_OBSCURED);
  Common_SystemContext_all_enum_values.insert(Common_SystemContext::SYSCTXT_ALERT);

  // Function parameter systemContext.
  //
  // The context the application is brought into.
  std::shared_ptr<ISchemaItem> systemContext_SchemaItem = TEnumSchemaItem<Common_SystemContext::eType>::create(Common_SystemContext_all_enum_values, TSchemaItemParameter<Common_SystemContext::eType>());

  // Function parameter appID.
  //
  // ID of application that is related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["systemContext"] = CObjectSchemaItem::SMember(systemContext_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_GetCapabilities_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_GetCapabilities_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_HmiZoneCapabilities::eType> Common_HmiZoneCapabilities_all_enum_values;
  Common_HmiZoneCapabilities_all_enum_values.insert(Common_HmiZoneCapabilities::FRONT);
  Common_HmiZoneCapabilities_all_enum_values.insert(Common_HmiZoneCapabilities::BACK);

  // Function parameter displayCapabilities.
  //
  // Information about the capabilities of the display: its type, text field supported, etc. See DisplayCapabilities. 
  std::shared_ptr<ISchemaItem> displayCapabilities_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DisplayCapabilities);

  // Function parameter audioPassThruCapabilities.
  std::shared_ptr<ISchemaItem> audioPassThruCapabilities_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_AudioPassThruCapabilities);

  // Function parameter hmiZoneCapabilities.
  std::shared_ptr<ISchemaItem> hmiZoneCapabilities_SchemaItem = TEnumSchemaItem<Common_HmiZoneCapabilities::eType>::create(Common_HmiZoneCapabilities_all_enum_values, TSchemaItemParameter<Common_HmiZoneCapabilities::eType>());

  // Function parameter softButtonCapabilities.
  //
  // Must be returned if the platform supports on-screen SoftButtons.
  std::shared_ptr<ISchemaItem> softButtonCapabilities_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SoftButtonCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter hmiCapabilities.
  //
  // Specifies the HMI’s capabilities. See HMICapabilities.
  std::shared_ptr<ISchemaItem> hmiCapabilities_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_HMICapabilities);

  // Function parameter systemCapabilities.
  //
  // Specifies system capabilities. See SystemCapabilities
  std::shared_ptr<ISchemaItem> systemCapabilities_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SystemCapabilities);CObjectSchemaItem::Members schema_members;

  schema_members["displayCapabilities"] = CObjectSchemaItem::SMember(displayCapabilities_SchemaItem, true);
  schema_members["audioPassThruCapabilities"] = CObjectSchemaItem::SMember(audioPassThruCapabilities_SchemaItem, true);
  schema_members["hmiZoneCapabilities"] = CObjectSchemaItem::SMember(hmiZoneCapabilities_SchemaItem, true);
  schema_members["softButtonCapabilities"] = CObjectSchemaItem::SMember(softButtonCapabilities_SchemaItem, false);
  schema_members["hmiCapabilities"] = CObjectSchemaItem::SMember(hmiCapabilities_SchemaItem, false);
  schema_members["systemCapabilities"] = CObjectSchemaItem::SMember(systemCapabilities_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_ChangeRegistration_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_Language::eType> Common_Language_all_enum_values;
  Common_Language_all_enum_values.insert(Common_Language::EN_US);
  Common_Language_all_enum_values.insert(Common_Language::ES_MX);
  Common_Language_all_enum_values.insert(Common_Language::FR_CA);
  Common_Language_all_enum_values.insert(Common_Language::DE_DE);
  Common_Language_all_enum_values.insert(Common_Language::ES_ES);
  Common_Language_all_enum_values.insert(Common_Language::EN_GB);
  Common_Language_all_enum_values.insert(Common_Language::RU_RU);
  Common_Language_all_enum_values.insert(Common_Language::TR_TR);
  Common_Language_all_enum_values.insert(Common_Language::PL_PL);
  Common_Language_all_enum_values.insert(Common_Language::FR_FR);
  Common_Language_all_enum_values.insert(Common_Language::IT_IT);
  Common_Language_all_enum_values.insert(Common_Language::SV_SE);
  Common_Language_all_enum_values.insert(Common_Language::PT_PT);
  Common_Language_all_enum_values.insert(Common_Language::NL_NL);
  Common_Language_all_enum_values.insert(Common_Language::EN_AU);
  Common_Language_all_enum_values.insert(Common_Language::ZH_CN);
  Common_Language_all_enum_values.insert(Common_Language::ZH_TW);
  Common_Language_all_enum_values.insert(Common_Language::JA_JP);
  Common_Language_all_enum_values.insert(Common_Language::AR_SA);
  Common_Language_all_enum_values.insert(Common_Language::KO_KR);
  Common_Language_all_enum_values.insert(Common_Language::PT_BR);
  Common_Language_all_enum_values.insert(Common_Language::CS_CZ);
  Common_Language_all_enum_values.insert(Common_Language::DA_DK);
  Common_Language_all_enum_values.insert(Common_Language::NO_NO);
  Common_Language_all_enum_values.insert(Common_Language::NL_BE);
  Common_Language_all_enum_values.insert(Common_Language::EL_GR);
  Common_Language_all_enum_values.insert(Common_Language::HU_HU);
  Common_Language_all_enum_values.insert(Common_Language::FI_FI);
  Common_Language_all_enum_values.insert(Common_Language::SK_SK);
  Common_Language_all_enum_values.insert(Common_Language::EN_IN);
  Common_Language_all_enum_values.insert(Common_Language::TH_TH);
  Common_Language_all_enum_values.insert(Common_Language::EN_SA);
  Common_Language_all_enum_values.insert(Common_Language::HE_IL);
  Common_Language_all_enum_values.insert(Common_Language::RO_RO);
  Common_Language_all_enum_values.insert(Common_Language::UK_UA);
  Common_Language_all_enum_values.insert(Common_Language::ID_ID);
  Common_Language_all_enum_values.insert(Common_Language::VI_VN);
  Common_Language_all_enum_values.insert(Common_Language::MS_MY);
  Common_Language_all_enum_values.insert(Common_Language::HI_IN);

  std::set<Common_AppHMIType::eType> Common_AppHMIType_all_enum_values;
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::DEFAULT);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::COMMUNICATION);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::MEDIA);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::MESSAGING);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::NAVIGATION);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::INFORMATION);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::SOCIAL);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::BACKGROUND_PROCESS);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::TESTING);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::SYSTEM);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::PROJECTION);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::REMOTE_CONTROL);

  // Function parameter appName.
  //
  // 
  //         Request new app name registration
  //         Needs to be unique over all applications.
  //         May not be empty. May not start with a new line character.
  //         May not interfere with any name or synonym of any registered applications.
  //         Applications with the same name will be rejected. (SDL makes all the checks)
  //       
  std::shared_ptr<ISchemaItem> appName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Function parameter ngnMediaScreenAppName.
  //
  // Request new app short name registration
  std::shared_ptr<ISchemaItem> ngnMediaScreenAppName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Function parameter language.
  //
  // The language application wants to switch to.
  std::shared_ptr<ISchemaItem> language_SchemaItem = TEnumSchemaItem<Common_Language::eType>::create(Common_Language_all_enum_values, TSchemaItemParameter<Common_Language::eType>());

  // Function parameter appHMIType.
  //
  // 
  //        Sent when app's requested-during-registration AppHMIType is changed to different one due to Policies update. Contains the updated list of all allowed app's AppHMITypes.
  //       
  std::shared_ptr<ISchemaItem> appHMIType_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<Common_AppHMIType::eType>::create(Common_AppHMIType_all_enum_values, TSchemaItemParameter<Common_AppHMIType::eType>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter appID.
  //
  // ID of application that concerns this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["appName"] = CObjectSchemaItem::SMember(appName_SchemaItem, false);
  schema_members["ngnMediaScreenAppName"] = CObjectSchemaItem::SMember(ngnMediaScreenAppName_SchemaItem, false);
  schema_members["language"] = CObjectSchemaItem::SMember(language_SchemaItem, true);
  schema_members["appHMIType"] = CObjectSchemaItem::SMember(appHMIType_SchemaItem, false);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_ChangeRegistration_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_OnLanguageChange_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_Language::eType> Common_Language_all_enum_values;
  Common_Language_all_enum_values.insert(Common_Language::EN_US);
  Common_Language_all_enum_values.insert(Common_Language::ES_MX);
  Common_Language_all_enum_values.insert(Common_Language::FR_CA);
  Common_Language_all_enum_values.insert(Common_Language::DE_DE);
  Common_Language_all_enum_values.insert(Common_Language::ES_ES);
  Common_Language_all_enum_values.insert(Common_Language::EN_GB);
  Common_Language_all_enum_values.insert(Common_Language::RU_RU);
  Common_Language_all_enum_values.insert(Common_Language::TR_TR);
  Common_Language_all_enum_values.insert(Common_Language::PL_PL);
  Common_Language_all_enum_values.insert(Common_Language::FR_FR);
  Common_Language_all_enum_values.insert(Common_Language::IT_IT);
  Common_Language_all_enum_values.insert(Common_Language::SV_SE);
  Common_Language_all_enum_values.insert(Common_Language::PT_PT);
  Common_Language_all_enum_values.insert(Common_Language::NL_NL);
  Common_Language_all_enum_values.insert(Common_Language::EN_AU);
  Common_Language_all_enum_values.insert(Common_Language::ZH_CN);
  Common_Language_all_enum_values.insert(Common_Language::ZH_TW);
  Common_Language_all_enum_values.insert(Common_Language::JA_JP);
  Common_Language_all_enum_values.insert(Common_Language::AR_SA);
  Common_Language_all_enum_values.insert(Common_Language::KO_KR);
  Common_Language_all_enum_values.insert(Common_Language::PT_BR);
  Common_Language_all_enum_values.insert(Common_Language::CS_CZ);
  Common_Language_all_enum_values.insert(Common_Language::DA_DK);
  Common_Language_all_enum_values.insert(Common_Language::NO_NO);
  Common_Language_all_enum_values.insert(Common_Language::NL_BE);
  Common_Language_all_enum_values.insert(Common_Language::EL_GR);
  Common_Language_all_enum_values.insert(Common_Language::HU_HU);
  Common_Language_all_enum_values.insert(Common_Language::FI_FI);
  Common_Language_all_enum_values.insert(Common_Language::SK_SK);
  Common_Language_all_enum_values.insert(Common_Language::EN_IN);
  Common_Language_all_enum_values.insert(Common_Language::TH_TH);
  Common_Language_all_enum_values.insert(Common_Language::EN_SA);
  Common_Language_all_enum_values.insert(Common_Language::HE_IL);
  Common_Language_all_enum_values.insert(Common_Language::RO_RO);
  Common_Language_all_enum_values.insert(Common_Language::UK_UA);
  Common_Language_all_enum_values.insert(Common_Language::ID_ID);
  Common_Language_all_enum_values.insert(Common_Language::VI_VN);
  Common_Language_all_enum_values.insert(Common_Language::MS_MY);
  Common_Language_all_enum_values.insert(Common_Language::HI_IN);

  // Function parameter language.
  //
  // Language UI has switched to.
  std::shared_ptr<ISchemaItem> language_SchemaItem = TEnumSchemaItem<Common_Language::eType>::create(Common_Language_all_enum_values, TSchemaItemParameter<Common_Language::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["language"] = CObjectSchemaItem::SMember(language_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_GetSupportedLanguages_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_GetSupportedLanguages_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_Language::eType> Common_Language_all_enum_values;
  Common_Language_all_enum_values.insert(Common_Language::EN_US);
  Common_Language_all_enum_values.insert(Common_Language::ES_MX);
  Common_Language_all_enum_values.insert(Common_Language::FR_CA);
  Common_Language_all_enum_values.insert(Common_Language::DE_DE);
  Common_Language_all_enum_values.insert(Common_Language::ES_ES);
  Common_Language_all_enum_values.insert(Common_Language::EN_GB);
  Common_Language_all_enum_values.insert(Common_Language::RU_RU);
  Common_Language_all_enum_values.insert(Common_Language::TR_TR);
  Common_Language_all_enum_values.insert(Common_Language::PL_PL);
  Common_Language_all_enum_values.insert(Common_Language::FR_FR);
  Common_Language_all_enum_values.insert(Common_Language::IT_IT);
  Common_Language_all_enum_values.insert(Common_Language::SV_SE);
  Common_Language_all_enum_values.insert(Common_Language::PT_PT);
  Common_Language_all_enum_values.insert(Common_Language::NL_NL);
  Common_Language_all_enum_values.insert(Common_Language::EN_AU);
  Common_Language_all_enum_values.insert(Common_Language::ZH_CN);
  Common_Language_all_enum_values.insert(Common_Language::ZH_TW);
  Common_Language_all_enum_values.insert(Common_Language::JA_JP);
  Common_Language_all_enum_values.insert(Common_Language::AR_SA);
  Common_Language_all_enum_values.insert(Common_Language::KO_KR);
  Common_Language_all_enum_values.insert(Common_Language::PT_BR);
  Common_Language_all_enum_values.insert(Common_Language::CS_CZ);
  Common_Language_all_enum_values.insert(Common_Language::DA_DK);
  Common_Language_all_enum_values.insert(Common_Language::NO_NO);
  Common_Language_all_enum_values.insert(Common_Language::NL_BE);
  Common_Language_all_enum_values.insert(Common_Language::EL_GR);
  Common_Language_all_enum_values.insert(Common_Language::HU_HU);
  Common_Language_all_enum_values.insert(Common_Language::FI_FI);
  Common_Language_all_enum_values.insert(Common_Language::SK_SK);
  Common_Language_all_enum_values.insert(Common_Language::EN_IN);
  Common_Language_all_enum_values.insert(Common_Language::TH_TH);
  Common_Language_all_enum_values.insert(Common_Language::EN_SA);
  Common_Language_all_enum_values.insert(Common_Language::HE_IL);
  Common_Language_all_enum_values.insert(Common_Language::RO_RO);
  Common_Language_all_enum_values.insert(Common_Language::UK_UA);
  Common_Language_all_enum_values.insert(Common_Language::ID_ID);
  Common_Language_all_enum_values.insert(Common_Language::VI_VN);
  Common_Language_all_enum_values.insert(Common_Language::MS_MY);
  Common_Language_all_enum_values.insert(Common_Language::HI_IN);

  // Function parameter languages.
  //
  // List of languages supported in UI.
  std::shared_ptr<ISchemaItem> languages_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<Common_Language::eType>::create(Common_Language_all_enum_values, TSchemaItemParameter<Common_Language::eType>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["languages"] = CObjectSchemaItem::SMember(languages_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_GetLanguage_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_GetLanguage_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_Language::eType> Common_Language_all_enum_values;
  Common_Language_all_enum_values.insert(Common_Language::EN_US);
  Common_Language_all_enum_values.insert(Common_Language::ES_MX);
  Common_Language_all_enum_values.insert(Common_Language::FR_CA);
  Common_Language_all_enum_values.insert(Common_Language::DE_DE);
  Common_Language_all_enum_values.insert(Common_Language::ES_ES);
  Common_Language_all_enum_values.insert(Common_Language::EN_GB);
  Common_Language_all_enum_values.insert(Common_Language::RU_RU);
  Common_Language_all_enum_values.insert(Common_Language::TR_TR);
  Common_Language_all_enum_values.insert(Common_Language::PL_PL);
  Common_Language_all_enum_values.insert(Common_Language::FR_FR);
  Common_Language_all_enum_values.insert(Common_Language::IT_IT);
  Common_Language_all_enum_values.insert(Common_Language::SV_SE);
  Common_Language_all_enum_values.insert(Common_Language::PT_PT);
  Common_Language_all_enum_values.insert(Common_Language::NL_NL);
  Common_Language_all_enum_values.insert(Common_Language::EN_AU);
  Common_Language_all_enum_values.insert(Common_Language::ZH_CN);
  Common_Language_all_enum_values.insert(Common_Language::ZH_TW);
  Common_Language_all_enum_values.insert(Common_Language::JA_JP);
  Common_Language_all_enum_values.insert(Common_Language::AR_SA);
  Common_Language_all_enum_values.insert(Common_Language::KO_KR);
  Common_Language_all_enum_values.insert(Common_Language::PT_BR);
  Common_Language_all_enum_values.insert(Common_Language::CS_CZ);
  Common_Language_all_enum_values.insert(Common_Language::DA_DK);
  Common_Language_all_enum_values.insert(Common_Language::NO_NO);
  Common_Language_all_enum_values.insert(Common_Language::NL_BE);
  Common_Language_all_enum_values.insert(Common_Language::EL_GR);
  Common_Language_all_enum_values.insert(Common_Language::HU_HU);
  Common_Language_all_enum_values.insert(Common_Language::FI_FI);
  Common_Language_all_enum_values.insert(Common_Language::SK_SK);
  Common_Language_all_enum_values.insert(Common_Language::EN_IN);
  Common_Language_all_enum_values.insert(Common_Language::TH_TH);
  Common_Language_all_enum_values.insert(Common_Language::EN_SA);
  Common_Language_all_enum_values.insert(Common_Language::HE_IL);
  Common_Language_all_enum_values.insert(Common_Language::RO_RO);
  Common_Language_all_enum_values.insert(Common_Language::UK_UA);
  Common_Language_all_enum_values.insert(Common_Language::ID_ID);
  Common_Language_all_enum_values.insert(Common_Language::VI_VN);
  Common_Language_all_enum_values.insert(Common_Language::MS_MY);
  Common_Language_all_enum_values.insert(Common_Language::HI_IN);

  // Function parameter language.
  std::shared_ptr<ISchemaItem> language_SchemaItem = TEnumSchemaItem<Common_Language::eType>::create(Common_Language_all_enum_values, TSchemaItemParameter<Common_Language::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["language"] = CObjectSchemaItem::SMember(language_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_OnDriverDistraction_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_DriverDistractionState::eType> Common_DriverDistractionState_all_enum_values;
  Common_DriverDistractionState_all_enum_values.insert(Common_DriverDistractionState::DD_ON);
  Common_DriverDistractionState_all_enum_values.insert(Common_DriverDistractionState::DD_OFF);

  // Function parameter state.
  //
  // See DriverDistractionState. 
  std::shared_ptr<ISchemaItem> state_SchemaItem = TEnumSchemaItem<Common_DriverDistractionState::eType>::create(Common_DriverDistractionState_all_enum_values, TSchemaItemParameter<Common_DriverDistractionState::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["state"] = CObjectSchemaItem::SMember(state_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_SetAppIcon_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter syncFileName.
  //
  // Either the path to the dynamic image stored on HY or the static binary image itself. See Image
  std::shared_ptr<ISchemaItem> syncFileName_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Image);

  // Function parameter appID.
  //
  // ID of application related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["syncFileName"] = CObjectSchemaItem::SMember(syncFileName_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_SetAppIcon_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_SetDisplayLayout_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter displayLayout.
  //
  // 
  //         Predefined or dynamically created screen layout.
  //         Currently only predefined screen layouts are defined.
  //       
  std::shared_ptr<ISchemaItem> displayLayout_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter appID.
  //
  // ID of application related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Function parameter dayColorScheme.
  std::shared_ptr<ISchemaItem> dayColorScheme_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TemplateColorScheme);

  // Function parameter nightColorScheme.
  std::shared_ptr<ISchemaItem> nightColorScheme_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TemplateColorScheme);CObjectSchemaItem::Members schema_members;

  schema_members["displayLayout"] = CObjectSchemaItem::SMember(displayLayout_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);
  schema_members["dayColorScheme"] = CObjectSchemaItem::SMember(dayColorScheme_SchemaItem, false);
  schema_members["nightColorScheme"] = CObjectSchemaItem::SMember(nightColorScheme_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_SetDisplayLayout_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter displayCapabilities.
  //
  // See DisplayCapabilities
  std::shared_ptr<ISchemaItem> displayCapabilities_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DisplayCapabilities);

  // Function parameter buttonCapabilities.
  //
  // See ButtonCapabilities
  std::shared_ptr<ISchemaItem> buttonCapabilities_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ButtonCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter softButtonCapabilities.
  //
  // If returned, the platform supports on-screen SoftButtons; see SoftButtonCapabilities.
  std::shared_ptr<ISchemaItem> softButtonCapabilities_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SoftButtonCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter presetBankCapabilities.
  //
  // If returned, the platform supports custom on-screen Presets; see PresetBankCapabilities.
  std::shared_ptr<ISchemaItem> presetBankCapabilities_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_PresetBankCapabilities);CObjectSchemaItem::Members schema_members;

  schema_members["displayCapabilities"] = CObjectSchemaItem::SMember(displayCapabilities_SchemaItem, false);
  schema_members["buttonCapabilities"] = CObjectSchemaItem::SMember(buttonCapabilities_SchemaItem, false);
  schema_members["softButtonCapabilities"] = CObjectSchemaItem::SMember(softButtonCapabilities_SchemaItem, false);
  schema_members["presetBankCapabilities"] = CObjectSchemaItem::SMember(presetBankCapabilities_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_ShowCustomForm_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter customFormID.
  //
  // 
  //             Predefined or dynamically created screen layout.
  //             Currently only predefined forms are defined.
  //             Predefined layouts include:
  //                 "DEFAULT" - Default media / non-media screen
  //                 "ONSCREEN_PRESETS" - Custom root media screen containing app-defined onscreen presets.
  //                 "KEYBOARD_SEARCH" - Custom template containing app-configured on-screen keyboard with active search updating; user also can trigger voice search.
  //                 "NAV_FULLSCREEN_MAP" - Custom root template screen containing full screen map with navigation controls.
  //                 "NAV_POI_MENU" - Custom template containing app-defined POI options.
  //                 "NAV_SEARCH_RESULTS" - Custom template containing a list of app-defined search results
  //                 "NAV_POI_INFO" - Custom template containing app-defined POI information (and potentially map data).
  //       
  std::shared_ptr<ISchemaItem> customFormID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter parentFormID.
  //
  // 
  //             Parent screen of predefined form to display.
  //             Currently only predefined forms are defined.
  //             If not provided, then set to "DEFAULT".
  //             Predefined layouts include:
  //                 "DEFAULT" - Default media / non-media screen
  //                 "ONSCREEN_PRESETS" - Custom root media screen containing app-defined onscreen presets.
  //                 "NAV_FULLSCREEN_MAP" - Custom template containing full screen map with navigation controls.
  //       
  std::shared_ptr<ISchemaItem> parentFormID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>("DEFAULT"));CObjectSchemaItem::Members schema_members;

  schema_members["customFormID"] = CObjectSchemaItem::SMember(customFormID_SchemaItem, true);
  schema_members["parentFormID"] = CObjectSchemaItem::SMember(parentFormID_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_ShowCustomForm_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_OnKeyboardInput_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_KeyboardEvent::eType> Common_KeyboardEvent_all_enum_values;
  Common_KeyboardEvent_all_enum_values.insert(Common_KeyboardEvent::KEYPRESS);
  Common_KeyboardEvent_all_enum_values.insert(Common_KeyboardEvent::ENTRY_SUBMITTED);
  Common_KeyboardEvent_all_enum_values.insert(Common_KeyboardEvent::ENTRY_VOICE);
  Common_KeyboardEvent_all_enum_values.insert(Common_KeyboardEvent::ENTRY_CANCELLED);
  Common_KeyboardEvent_all_enum_values.insert(Common_KeyboardEvent::ENTRY_ABORTED);

  // Function parameter event.
  //
  // On-screen keyboard input data.
  std::shared_ptr<ISchemaItem> event_SchemaItem = TEnumSchemaItem<Common_KeyboardEvent::eType>::create(Common_KeyboardEvent_all_enum_values, TSchemaItemParameter<Common_KeyboardEvent::eType>());

  // Function parameter data.
  //
  // On-screen keyboard input data.
  // For dynamic keypress events, this will be the current compounded string of entry text.
  // For entry submission events, this will be the full text entry (this will always return regardless of the mode).
  // For entry cancelled and entry aborted events, this data param will be omitted.
  std::shared_ptr<ISchemaItem> data_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["event"] = CObjectSchemaItem::SMember(event_SchemaItem, true);
  schema_members["data"] = CObjectSchemaItem::SMember(data_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_OnTouchEvent_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_TouchType::eType> Common_TouchType_all_enum_values;
  Common_TouchType_all_enum_values.insert(Common_TouchType::BEGIN);
  Common_TouchType_all_enum_values.insert(Common_TouchType::MOVE);
  Common_TouchType_all_enum_values.insert(Common_TouchType::END);
  Common_TouchType_all_enum_values.insert(Common_TouchType::CANCEL);

  // Function parameter type.
  //
  // The type of touch event.
  std::shared_ptr<ISchemaItem> type_SchemaItem = TEnumSchemaItem<Common_TouchType::eType>::create(Common_TouchType_all_enum_values, TSchemaItemParameter<Common_TouchType::eType>());

  // Function parameter event.
  //
  // List of all individual touches involved in this event.
  std::shared_ptr<ISchemaItem> event_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TouchEvent), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(10));CObjectSchemaItem::Members schema_members;

  schema_members["type"] = CObjectSchemaItem::SMember(type_SchemaItem, true);
  schema_members["event"] = CObjectSchemaItem::SMember(event_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_Slider_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter numTicks.
  //
  // Number of selectable items on a horizontal axis
  std::shared_ptr<ISchemaItem> numTicks_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(2), TSchemaItemParameter<int32_t>(26), TSchemaItemParameter<int32_t>());

  // Function parameter position.
  //
  // Initial position of slider control (cannot exceed numTicks)
  std::shared_ptr<ISchemaItem> position_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(26), TSchemaItemParameter<int32_t>());

  // Function parameter sliderHeader.
  //
  // Text header to be displayed.
  std::shared_ptr<ISchemaItem> sliderHeader_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter sliderFooter.
  //
  // Text footer to be displayed (meant to display min/max threshold descriptors).
  // For a static text footer, only one footer string shall be provided in the array.
  // For a dynamic text footer, the number of footer text string in the array must match the numTicks value.
  // For a dynamic text footer, text array string should correlate with potential slider position index.
  // If omitted on supported displays, no footer text shall be displayed.
  std::shared_ptr<ISchemaItem> sliderFooter_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(26));

  // Function parameter timeout.
  //
  // Timeout. The slider should be displayed until the defined amount of time has elapsed. 
  std::shared_ptr<ISchemaItem> timeout_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1000), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>());

  // Function parameter appID.
  //
  // ID of application that concerns this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["numTicks"] = CObjectSchemaItem::SMember(numTicks_SchemaItem, true);
  schema_members["position"] = CObjectSchemaItem::SMember(position_SchemaItem, true);
  schema_members["sliderHeader"] = CObjectSchemaItem::SMember(sliderHeader_SchemaItem, true);
  schema_members["sliderFooter"] = CObjectSchemaItem::SMember(sliderFooter_SchemaItem, false);
  schema_members["timeout"] = CObjectSchemaItem::SMember(timeout_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_Slider_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter sliderPosition.
  //
  // Current slider position. Must be returned when the user has clicked the ‘Save’ or ‘Canceled’ button or by the timeout 
  std::shared_ptr<ISchemaItem> sliderPosition_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(26), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["sliderPosition"] = CObjectSchemaItem::SMember(sliderPosition_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_ScrollableMessage_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter messageText.
  //
  // Body of text that can include newlines and tabs. Uses scrollableMessageBody.
  std::shared_ptr<ISchemaItem> messageText_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TextFieldStruct);

  // Function parameter timeout.
  //
  // Timeout in milliseconds. The message should be displayed until the time defined is up.
  std::shared_ptr<ISchemaItem> timeout_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>());

  // Function parameter softButtons.
  //
  // App defined SoftButtons.
  // If omitted on supported displays, only the system defined "Close" SoftButton should be displayed.
  std::shared_ptr<ISchemaItem> softButtons_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SoftButton), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(8));

  // Function parameter appID.
  //
  // ID of application related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["messageText"] = CObjectSchemaItem::SMember(messageText_SchemaItem, true);
  schema_members["timeout"] = CObjectSchemaItem::SMember(timeout_SchemaItem, true);
  schema_members["softButtons"] = CObjectSchemaItem::SMember(softButtons_SchemaItem, false);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_ScrollableMessage_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_PerformAudioPassThru_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter appID.
  //
  // ID of application related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Function parameter audioPassThruDisplayTexts.
  //
  // Uses
  //             audioPassThruDisplayText1: First line of text displayed during audio capture.
  //             audioPassThruDisplayText2: Second line of text displayed during audio capture.
  std::shared_ptr<ISchemaItem> audioPassThruDisplayTexts_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TextFieldStruct), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(2));

  // Function parameter maxDuration.
  //
  // The maximum duration of audio recording in milliseconds. If not provided, the recording should be performed until EndAudioPassThru arrives.
  std::shared_ptr<ISchemaItem> maxDuration_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(1000000), TSchemaItemParameter<int32_t>());

  // Function parameter muteAudio.
  //
  // 
  //         Defines if the current audio source should be muted during the APT session. If not, the audio source will play without interruption.
  //         If omitted, the value is set to true.
  //       
  std::shared_ptr<ISchemaItem> muteAudio_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);
  schema_members["audioPassThruDisplayTexts"] = CObjectSchemaItem::SMember(audioPassThruDisplayTexts_SchemaItem, true);
  schema_members["maxDuration"] = CObjectSchemaItem::SMember(maxDuration_SchemaItem, true);
  schema_members["muteAudio"] = CObjectSchemaItem::SMember(muteAudio_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_PerformAudioPassThru_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_EndAudioPassThru_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_EndAudioPassThru_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_IsReady_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_IsReady_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter available.
  //
  // Must be true if UI is present and ready to communicate with SDL.
  std::shared_ptr<ISchemaItem> available_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["available"] = CObjectSchemaItem::SMember(available_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_ClosePopUp_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter methodName.
  //
  // Method to be closed
  std::shared_ptr<ISchemaItem> methodName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["methodName"] = CObjectSchemaItem::SMember(methodName_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_ClosePopUp_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_OnResetTimeout_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter appID.
  //
  // Id of application that invoked notifcation.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Function parameter methodName.
  //
  // Currently used method name on which was triggered action
  std::shared_ptr<ISchemaItem> methodName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);
  schema_members["methodName"] = CObjectSchemaItem::SMember(methodName_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_OnRecordStart_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter appID.
  //
  // ID of application related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_SendHapticData_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter appID.
  //
  // Internal ID of the application that requested this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Function parameter hapticRectData.
  //
  // 
  //         Array of rectangle data structures that represent the locations of all user controls present on the HMI.
  //         This data should be updated if/when the application presents a new screen.
  //         When a request is sent, if successful, it will replace all rectangle data previously sent through RPC.
  //         Avoidance of doubt, when an empty hapticRectData, it will be clear all rectangle data previously sent through RPC.
  //       
  std::shared_ptr<ISchemaItem> hapticRectData_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_HapticRect), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(1000));CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);
  schema_members["hapticRectData"] = CObjectSchemaItem::SMember(hapticRectData_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_UI_SendHapticData_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_IsReady_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_IsReady_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter available.
  //
  // Must be true if Navigation is present and ready to communicate with SDL.
  std::shared_ptr<ISchemaItem> available_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["available"] = CObjectSchemaItem::SMember(available_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_SendLocation_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_DeliveryMode::eType> Common_DeliveryMode_all_enum_values;
  Common_DeliveryMode_all_enum_values.insert(Common_DeliveryMode::PROMPT);
  Common_DeliveryMode_all_enum_values.insert(Common_DeliveryMode::DESTINATION);
  Common_DeliveryMode_all_enum_values.insert(Common_DeliveryMode::QUEUE);

  // Function parameter appID.
  //
  // ID of application related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Function parameter longitudeDegrees.
  std::shared_ptr<ISchemaItem> longitudeDegrees_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-180.0), TSchemaItemParameter<double>(180.0), TSchemaItemParameter<double>());

  // Function parameter latitudeDegrees.
  std::shared_ptr<ISchemaItem> latitudeDegrees_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-90.0), TSchemaItemParameter<double>(90.0), TSchemaItemParameter<double>());

  // Function parameter locationName.
  //
  //      Name / title of intended location   
  std::shared_ptr<ISchemaItem> locationName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter locationDescription.
  //
  //         Description intended location / establishment (if applicable)   
  std::shared_ptr<ISchemaItem> locationDescription_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter addressLines.
  //
  //      Location address (if applicable)   
  std::shared_ptr<ISchemaItem> addressLines_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(4));

  // Function parameter phoneNumber.
  //
  //      Phone number of intended location / establishment (if applicable)   
  std::shared_ptr<ISchemaItem> phoneNumber_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter locationImage.
  //
  //      Image / icon of intended location (if applicable and supported)   
  std::shared_ptr<ISchemaItem> locationImage_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Image);

  // Function parameter timeStamp.
  //
  // 
  //             timestamp in ISO 8601 format
  //         
  std::shared_ptr<ISchemaItem> timeStamp_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DateTime);

  // Function parameter address.
  //
  // Address to be used for setting destination
  std::shared_ptr<ISchemaItem> address_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_OASISAddress);

  // Function parameter deliveryMode.
  //
  // Defines the mode of prompt for user
  std::shared_ptr<ISchemaItem> deliveryMode_SchemaItem = TEnumSchemaItem<Common_DeliveryMode::eType>::create(Common_DeliveryMode_all_enum_values, TSchemaItemParameter<Common_DeliveryMode::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);
  schema_members["longitudeDegrees"] = CObjectSchemaItem::SMember(longitudeDegrees_SchemaItem, false);
  schema_members["latitudeDegrees"] = CObjectSchemaItem::SMember(latitudeDegrees_SchemaItem, false);
  schema_members["locationName"] = CObjectSchemaItem::SMember(locationName_SchemaItem, false);
  schema_members["locationDescription"] = CObjectSchemaItem::SMember(locationDescription_SchemaItem, false);
  schema_members["addressLines"] = CObjectSchemaItem::SMember(addressLines_SchemaItem, false);
  schema_members["phoneNumber"] = CObjectSchemaItem::SMember(phoneNumber_SchemaItem, false);
  schema_members["locationImage"] = CObjectSchemaItem::SMember(locationImage_SchemaItem, false);
  schema_members["timeStamp"] = CObjectSchemaItem::SMember(timeStamp_SchemaItem, false);
  schema_members["address"] = CObjectSchemaItem::SMember(address_SchemaItem, false);
  schema_members["deliveryMode"] = CObjectSchemaItem::SMember(deliveryMode_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_SendLocation_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_ShowConstantTBT_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter navigationTexts.
  //
  // See TextFieldStruct. Uses:
  //         navigationText1
  //         navigationText2
  //         ETA
  //         totalDistance
  //         timeToDestination.
  //       
  std::shared_ptr<ISchemaItem> navigationTexts_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TextFieldStruct), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(5));

  // Function parameter turnIcon.
  std::shared_ptr<ISchemaItem> turnIcon_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Image);

  // Function parameter nextTurnIcon.
  std::shared_ptr<ISchemaItem> nextTurnIcon_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Image);

  // Function parameter distanceToManeuver.
  //
  // Fraction of distance till next maneuver (from previous maneuver).
  // May be used to calculate progress bar.
  std::shared_ptr<ISchemaItem> distanceToManeuver_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(1000000000.0), TSchemaItemParameter<double>());

  // Function parameter distanceToManeuverScale.
  //
  // Fraction of distance till next maneuver (starting from when AlertManeuver is triggered).
  // May be used to calculate progress bar.
  std::shared_ptr<ISchemaItem> distanceToManeuverScale_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(1000000000.0), TSchemaItemParameter<double>());

  // Function parameter maneuverComplete.
  //
  // If and when a maneuver has completed while an AlertManeuver is active, SDL will send this value set to TRUE in order to clear the AlertManeuver overlay.
  // If omitted the value should be assumed as FALSE.
  std::shared_ptr<ISchemaItem> maneuverComplete_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter softButtons.
  //
  // Three dynamic SoftButtons available
  // If omitted on supported displays, the currently displayed SoftButton values will not change.
  std::shared_ptr<ISchemaItem> softButtons_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SoftButton), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(3));

  // Function parameter appID.
  //
  // ID of application related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["navigationTexts"] = CObjectSchemaItem::SMember(navigationTexts_SchemaItem, true);
  schema_members["turnIcon"] = CObjectSchemaItem::SMember(turnIcon_SchemaItem, false);
  schema_members["nextTurnIcon"] = CObjectSchemaItem::SMember(nextTurnIcon_SchemaItem, false);
  schema_members["distanceToManeuver"] = CObjectSchemaItem::SMember(distanceToManeuver_SchemaItem, true);
  schema_members["distanceToManeuverScale"] = CObjectSchemaItem::SMember(distanceToManeuverScale_SchemaItem, true);
  schema_members["maneuverComplete"] = CObjectSchemaItem::SMember(maneuverComplete_SchemaItem, false);
  schema_members["softButtons"] = CObjectSchemaItem::SMember(softButtons_SchemaItem, false);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_ShowConstantTBT_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_AlertManeuver_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter softButtons.
  //
  // If omitted, only the system defined "Close" SoftButton should be displayed.
  std::shared_ptr<ISchemaItem> softButtons_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SoftButton), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(3));

  // Function parameter appID.
  //
  // ID of the application requested this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["softButtons"] = CObjectSchemaItem::SMember(softButtons_SchemaItem, false);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_AlertManeuver_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_UpdateTurnList_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter turnList.
  std::shared_ptr<ISchemaItem> turnList_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Turn), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter softButtons.
  //
  // If omitted, app-defined SoftButton should be left blank.
  std::shared_ptr<ISchemaItem> softButtons_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SoftButton), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(1));

  // Function parameter appID.
  //
  // ID of application related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["turnList"] = CObjectSchemaItem::SMember(turnList_SchemaItem, false);
  schema_members["softButtons"] = CObjectSchemaItem::SMember(softButtons_SchemaItem, false);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_UpdateTurnList_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_OnTBTClientState_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_TBTState::eType> Common_TBTState_all_enum_values;
  Common_TBTState_all_enum_values.insert(Common_TBTState::ROUTE_UPDATE_REQUEST);
  Common_TBTState_all_enum_values.insert(Common_TBTState::ROUTE_ACCEPTED);
  Common_TBTState_all_enum_values.insert(Common_TBTState::ROUTE_REFUSED);
  Common_TBTState_all_enum_values.insert(Common_TBTState::ROUTE_CANCELLED);
  Common_TBTState_all_enum_values.insert(Common_TBTState::ETA_REQUEST);
  Common_TBTState_all_enum_values.insert(Common_TBTState::NEXT_TURN_REQUEST);
  Common_TBTState_all_enum_values.insert(Common_TBTState::ROUTE_STATUS_REQUEST);
  Common_TBTState_all_enum_values.insert(Common_TBTState::ROUTE_SUMMARY_REQUEST);
  Common_TBTState_all_enum_values.insert(Common_TBTState::TRIP_STATUS_REQUEST);
  Common_TBTState_all_enum_values.insert(Common_TBTState::ROUTE_UPDATE_REQUEST_TIMEOUT);

  // Function parameter state.
  //
  // Current State of TBT client
  std::shared_ptr<ISchemaItem> state_SchemaItem = TEnumSchemaItem<Common_TBTState::eType>::create(Common_TBTState_all_enum_values, TSchemaItemParameter<Common_TBTState::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["state"] = CObjectSchemaItem::SMember(state_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_SetVideoConfig_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter config.
  //
  // Configuration of a video stream.
  std::shared_ptr<ISchemaItem> config_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VideoConfig);

  // Function parameter appID.
  //
  // ID of application related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["config"] = CObjectSchemaItem::SMember(config_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_SetVideoConfig_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter rejectedParams.
  //
  // 
  //         List of params of VideoConfig struct which are not accepted by HMI, e.g. "protocol" and "codec".
  //         This param exists only when the response is negative.
  //       
  std::shared_ptr<ISchemaItem> rejectedParams_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000));CObjectSchemaItem::Members schema_members;

  schema_members["rejectedParams"] = CObjectSchemaItem::SMember(rejectedParams_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_StartStream_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter url.
  //
  // URL that HMI start playing.
  std::shared_ptr<ISchemaItem> url_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(21), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter appID.
  //
  // ID of application related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["url"] = CObjectSchemaItem::SMember(url_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_StartStream_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_StopStream_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter appID.
  //
  // ID of application related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_StopStream_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_StartAudioStream_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter url.
  //
  // URL that HMI start playing.
  std::shared_ptr<ISchemaItem> url_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(21), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter appID.
  //
  // ID of application related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["url"] = CObjectSchemaItem::SMember(url_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_StartAudioStream_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_StopAudioStream_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter appID.
  //
  // ID of application related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_StopAudioStream_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_OnAudioDataStreaming_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter available.
  //
  // If "true" - audio data started. If "false" - audio data stopped.
  std::shared_ptr<ISchemaItem> available_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["available"] = CObjectSchemaItem::SMember(available_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_OnVideoDataStreaming_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter available.
  //
  // If "true" - video data started. If "false" - video data stopped.
  std::shared_ptr<ISchemaItem> available_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["available"] = CObjectSchemaItem::SMember(available_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_GetWayPoints_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_WayPointType::eType> Common_WayPointType_all_enum_values;
  Common_WayPointType_all_enum_values.insert(Common_WayPointType::ALL);
  Common_WayPointType_all_enum_values.insert(Common_WayPointType::DESTINATION);

  // Function parameter wayPointType.
  //
  // To request for either the destination only or for all waypoints including destination
  std::shared_ptr<ISchemaItem> wayPointType_SchemaItem = TEnumSchemaItem<Common_WayPointType::eType>::create(Common_WayPointType_all_enum_values, TSchemaItemParameter<Common_WayPointType::eType>());

  // Function parameter appID.
  //
  // ID of the application.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["wayPointType"] = CObjectSchemaItem::SMember(wayPointType_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_GetWayPoints_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter appID.
  //
  // ID of the application.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Function parameter wayPoints.
  //
  // See LocationDetails
  std::shared_ptr<ISchemaItem> wayPoints_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_LocationDetails), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(10));CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);
  schema_members["wayPoints"] = CObjectSchemaItem::SMember(wayPoints_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_OnWayPointChange_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter wayPoints.
  //
  // See LocationDetails
  std::shared_ptr<ISchemaItem> wayPoints_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_LocationDetails), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(10));CObjectSchemaItem::Members schema_members;

  schema_members["wayPoints"] = CObjectSchemaItem::SMember(wayPoints_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_SubscribeWayPoints_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_SubscribeWayPoints_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_UnsubscribeWayPoints_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_Navigation_UnsubscribeWayPoints_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VehicleInfo_IsReady_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VehicleInfo_IsReady_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter available.
  //
  // Must be true if vehicle data modules are present and ready to communicate with SDL.
  std::shared_ptr<ISchemaItem> available_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["available"] = CObjectSchemaItem::SMember(available_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VehicleInfo_GetVehicleType_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VehicleInfo_GetVehicleType_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter vehicleType.
  std::shared_ptr<ISchemaItem> vehicleType_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleType);CObjectSchemaItem::Members schema_members;

  schema_members["vehicleType"] = CObjectSchemaItem::SMember(vehicleType_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VehicleInfo_ReadDID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter ecuName.
  //
  // Name of ECU.
  std::shared_ptr<ISchemaItem> ecuName_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>());

  // Function parameter didLocation.
  //
  // Get raw data from vehicle data DID location(s).
  std::shared_ptr<ISchemaItem> didLocation_SchemaItem = CArraySchemaItem::create(TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000));

  // Function parameter appID.
  //
  // ID of application related to this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["ecuName"] = CObjectSchemaItem::SMember(ecuName_SchemaItem, true);
  schema_members["didLocation"] = CObjectSchemaItem::SMember(didLocation_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VehicleInfo_ReadDID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter didResult.
  //
  // Array of requested DID results (with data if available).
  std::shared_ptr<ISchemaItem> didResult_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DIDResult), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(1000));CObjectSchemaItem::Members schema_members;

  schema_members["didResult"] = CObjectSchemaItem::SMember(didResult_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VehicleInfo_GetDTCs_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter ecuName.
  //
  // Name of ECU.
  std::shared_ptr<ISchemaItem> ecuName_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>());

  // Function parameter dtcMask.
  //
  // DTC Mask Byte to be sent in diagnostic request to module .
  std::shared_ptr<ISchemaItem> dtcMask_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(255), TSchemaItemParameter<int32_t>());

  // Function parameter appID.
  //
  // ID of application that requested this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["ecuName"] = CObjectSchemaItem::SMember(ecuName_SchemaItem, true);
  schema_members["dtcMask"] = CObjectSchemaItem::SMember(dtcMask_SchemaItem, false);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VehicleInfo_GetDTCs_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter ecuHeader.
  //
  // 2 byte ECU Header for DTC response (as defined in VHR_Layout_Specification_DTCs.pdf)
  std::shared_ptr<ISchemaItem> ecuHeader_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>());

  // Function parameter dtc.
  //
  // 
  //         Array of all reported DTCs on module. Each DTC is represented with 4 bytes:
  //         3 bytes for data
  //         1 byte for status
  //       
  std::shared_ptr<ISchemaItem> dtc_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(10), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(15));CObjectSchemaItem::Members schema_members;

  schema_members["ecuHeader"] = CObjectSchemaItem::SMember(ecuHeader_SchemaItem, true);
  schema_members["dtc"] = CObjectSchemaItem::SMember(dtc_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VehicleInfo_DiagnosticMessage_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter targetID.
  //
  // Name of target ECU.
  std::shared_ptr<ISchemaItem> targetID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>());

  // Function parameter messageLength.
  //
  // Length of message (in bytes).
  std::shared_ptr<ISchemaItem> messageLength_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>());

  // Function parameter messageData.
  //
  // 
  //         Array of bytes comprising CAN message.
  //       
  std::shared_ptr<ISchemaItem> messageData_SchemaItem = CArraySchemaItem::create(TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(255), TSchemaItemParameter<int32_t>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(65535));

  // Function parameter appID.
  //
  // ID of application that requested this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["targetID"] = CObjectSchemaItem::SMember(targetID_SchemaItem, true);
  schema_members["messageLength"] = CObjectSchemaItem::SMember(messageLength_SchemaItem, true);
  schema_members["messageData"] = CObjectSchemaItem::SMember(messageData_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VehicleInfo_DiagnosticMessage_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter messageDataResult.
  //
  // 
  //         Array of bytes comprising CAN message result.
  //       
  std::shared_ptr<ISchemaItem> messageDataResult_SchemaItem = CArraySchemaItem::create(TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(255), TSchemaItemParameter<int32_t>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(65535));CObjectSchemaItem::Members schema_members;

  schema_members["messageDataResult"] = CObjectSchemaItem::SMember(messageDataResult_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VehicleInfo_SubscribeVehicleData_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter gps.
  //
  // See GPSData
  std::shared_ptr<ISchemaItem> gps_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter speed.
  //
  // The vehicle speed in kilometers per hour
  std::shared_ptr<ISchemaItem> speed_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter rpm.
  //
  // The number of revolutions per minute of the engine
  std::shared_ptr<ISchemaItem> rpm_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter fuelLevel.
  //
  // The fuel level in the tank (percentage)
  std::shared_ptr<ISchemaItem> fuelLevel_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter fuelLevel_State.
  //
  // The fuel level state
  std::shared_ptr<ISchemaItem> fuelLevel_State_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter instantFuelConsumption.
  //
  // The instantaneous fuel consumption in microlitres
  std::shared_ptr<ISchemaItem> instantFuelConsumption_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter fuelRange.
  //
  // The estimate range in KM the vehicle can travel based on fuel level and consumption
  std::shared_ptr<ISchemaItem> fuelRange_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter externalTemperature.
  //
  // The external temperature in degrees celsius
  std::shared_ptr<ISchemaItem> externalTemperature_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter turnSignal.
  //
  // See TurnSignal
  std::shared_ptr<ISchemaItem> turnSignal_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter prndl.
  //
  // See PRNDL
  std::shared_ptr<ISchemaItem> prndl_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter tirePressure.
  //
  // See TireStatus
  std::shared_ptr<ISchemaItem> tirePressure_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter odometer.
  //
  // Odometer in km
  std::shared_ptr<ISchemaItem> odometer_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter beltStatus.
  //
  // The status of the seat belts
  std::shared_ptr<ISchemaItem> beltStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter bodyInformation.
  //
  // The body information including power modes
  std::shared_ptr<ISchemaItem> bodyInformation_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter deviceStatus.
  //
  // The device status including signal and battery strength
  std::shared_ptr<ISchemaItem> deviceStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter driverBraking.
  //
  // The status of the brake pedal
  std::shared_ptr<ISchemaItem> driverBraking_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter wiperStatus.
  //
  // The status of the wipers
  std::shared_ptr<ISchemaItem> wiperStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter headLampStatus.
  //
  // Status of the head lamps
  std::shared_ptr<ISchemaItem> headLampStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter engineTorque.
  //
  // Torque value for engine (in Nm) on non-diesel variants
  std::shared_ptr<ISchemaItem> engineTorque_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter accPedalPosition.
  //
  // Accelerator pedal position (percentage depressed)
  std::shared_ptr<ISchemaItem> accPedalPosition_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter steeringWheelAngle.
  //
  // Current angle of the steering wheel (in deg)
  std::shared_ptr<ISchemaItem> steeringWheelAngle_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter engineOilLife.
  //
  // The estimated percentage of remaining oil life of the engine.
  std::shared_ptr<ISchemaItem> engineOilLife_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter electronicParkBrakeStatus.
  //
  // The status of the park brake as provided by Electric Park Brake (EPB) system.
  std::shared_ptr<ISchemaItem> electronicParkBrakeStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter cloudAppVehicleID.
  //
  // Parameter used by cloud apps to identify a head unit
  std::shared_ptr<ISchemaItem> cloudAppVehicleID_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter eCallInfo.
  //
  // Emergency Call notification and confirmation data
  std::shared_ptr<ISchemaItem> eCallInfo_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter airbagStatus.
  //
  // The status of the air bags
  std::shared_ptr<ISchemaItem> airbagStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter emergencyEvent.
  //
  // Information related to an emergency event (and if it occurred)
  std::shared_ptr<ISchemaItem> emergencyEvent_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter clusterModeStatus.
  //
  // The status modes of the cluster
  std::shared_ptr<ISchemaItem> clusterModeStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter myKey.
  //
  // Information related to the MyKey feature
  std::shared_ptr<ISchemaItem> myKey_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["gps"] = CObjectSchemaItem::SMember(gps_SchemaItem, false);
  schema_members["speed"] = CObjectSchemaItem::SMember(speed_SchemaItem, false);
  schema_members["rpm"] = CObjectSchemaItem::SMember(rpm_SchemaItem, false);
  schema_members["fuelLevel"] = CObjectSchemaItem::SMember(fuelLevel_SchemaItem, false);
  schema_members["fuelLevel_State"] = CObjectSchemaItem::SMember(fuelLevel_State_SchemaItem, false);
  schema_members["instantFuelConsumption"] = CObjectSchemaItem::SMember(instantFuelConsumption_SchemaItem, false);
  schema_members["fuelRange"] = CObjectSchemaItem::SMember(fuelRange_SchemaItem, false);
  schema_members["externalTemperature"] = CObjectSchemaItem::SMember(externalTemperature_SchemaItem, false);
  schema_members["turnSignal"] = CObjectSchemaItem::SMember(turnSignal_SchemaItem, false);
  schema_members["prndl"] = CObjectSchemaItem::SMember(prndl_SchemaItem, false);
  schema_members["tirePressure"] = CObjectSchemaItem::SMember(tirePressure_SchemaItem, false);
  schema_members["odometer"] = CObjectSchemaItem::SMember(odometer_SchemaItem, false);
  schema_members["beltStatus"] = CObjectSchemaItem::SMember(beltStatus_SchemaItem, false);
  schema_members["bodyInformation"] = CObjectSchemaItem::SMember(bodyInformation_SchemaItem, false);
  schema_members["deviceStatus"] = CObjectSchemaItem::SMember(deviceStatus_SchemaItem, false);
  schema_members["driverBraking"] = CObjectSchemaItem::SMember(driverBraking_SchemaItem, false);
  schema_members["wiperStatus"] = CObjectSchemaItem::SMember(wiperStatus_SchemaItem, false);
  schema_members["headLampStatus"] = CObjectSchemaItem::SMember(headLampStatus_SchemaItem, false);
  schema_members["engineTorque"] = CObjectSchemaItem::SMember(engineTorque_SchemaItem, false);
  schema_members["accPedalPosition"] = CObjectSchemaItem::SMember(accPedalPosition_SchemaItem, false);
  schema_members["steeringWheelAngle"] = CObjectSchemaItem::SMember(steeringWheelAngle_SchemaItem, false);
  schema_members["engineOilLife"] = CObjectSchemaItem::SMember(engineOilLife_SchemaItem, false);
  schema_members["electronicParkBrakeStatus"] = CObjectSchemaItem::SMember(electronicParkBrakeStatus_SchemaItem, false);
  schema_members["cloudAppVehicleID"] = CObjectSchemaItem::SMember(cloudAppVehicleID_SchemaItem, false);
  schema_members["eCallInfo"] = CObjectSchemaItem::SMember(eCallInfo_SchemaItem, false);
  schema_members["airbagStatus"] = CObjectSchemaItem::SMember(airbagStatus_SchemaItem, false);
  schema_members["emergencyEvent"] = CObjectSchemaItem::SMember(emergencyEvent_SchemaItem, false);
  schema_members["clusterModeStatus"] = CObjectSchemaItem::SMember(clusterModeStatus_SchemaItem, false);
  schema_members["myKey"] = CObjectSchemaItem::SMember(myKey_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VehicleInfo_SubscribeVehicleData_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter gps.
  //
  // See GPSData
  std::shared_ptr<ISchemaItem> gps_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter speed.
  //
  // The vehicle speed in kilometers per hour
  std::shared_ptr<ISchemaItem> speed_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter rpm.
  //
  // The number of revolutions per minute of the engine
  std::shared_ptr<ISchemaItem> rpm_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter fuelLevel.
  //
  // The fuel level in the tank (percentage)
  std::shared_ptr<ISchemaItem> fuelLevel_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter fuelLevel_State.
  //
  // The fuel level state
  std::shared_ptr<ISchemaItem> fuelLevel_State_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter instantFuelConsumption.
  //
  // The instantaneous fuel consumption in microlitres
  std::shared_ptr<ISchemaItem> instantFuelConsumption_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter fuelRange.
  //
  // The estimate range in KM the vehicle can travel based on fuel level and consumption
  std::shared_ptr<ISchemaItem> fuelRange_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter externalTemperature.
  //
  // The external temperature in degrees celsius.
  std::shared_ptr<ISchemaItem> externalTemperature_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter turnSignal.
  //
  // See TurnSignal
  std::shared_ptr<ISchemaItem> turnSignal_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter prndl.
  //
  // See PRNDL
  std::shared_ptr<ISchemaItem> prndl_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter tirePressure.
  //
  // See TireStatus
  std::shared_ptr<ISchemaItem> tirePressure_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter odometer.
  //
  // Odometer in km
  std::shared_ptr<ISchemaItem> odometer_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter beltStatus.
  //
  // The status of the seat belts
  std::shared_ptr<ISchemaItem> beltStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter bodyInformation.
  //
  // The body information including power modes
  std::shared_ptr<ISchemaItem> bodyInformation_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter deviceStatus.
  //
  // The device status including signal and battery strength
  std::shared_ptr<ISchemaItem> deviceStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter driverBraking.
  //
  // The status of the brake pedal
  std::shared_ptr<ISchemaItem> driverBraking_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter wiperStatus.
  //
  // The status of the wipers
  std::shared_ptr<ISchemaItem> wiperStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter headLampStatus.
  //
  // Status of the head lamps
  std::shared_ptr<ISchemaItem> headLampStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter engineTorque.
  //
  // Torque value for engine (in Nm) on non-diesel variants
  std::shared_ptr<ISchemaItem> engineTorque_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter accPedalPosition.
  //
  // Accelerator pedal position (percentage depressed)
  std::shared_ptr<ISchemaItem> accPedalPosition_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter steeringWheelAngle.
  //
  // Current angle of the steering wheel (in deg)
  std::shared_ptr<ISchemaItem> steeringWheelAngle_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter engineOilLife.
  //
  // The estimated percentage of remaining oil life of the engine.
  std::shared_ptr<ISchemaItem> engineOilLife_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter electronicParkBrakeStatus.
  //
  // The status of the park brake as provided by Electric Park Brake (EPB) system.
  std::shared_ptr<ISchemaItem> electronicParkBrakeStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter cloudAppVehicleID.
  //
  // Parameter used by cloud apps to identify a head unit
  std::shared_ptr<ISchemaItem> cloudAppVehicleID_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter eCallInfo.
  //
  // Emergency Call notification and confirmation data
  std::shared_ptr<ISchemaItem> eCallInfo_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter airbagStatus.
  //
  // The status of the air bags
  std::shared_ptr<ISchemaItem> airbagStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter emergencyEvent.
  //
  // Information related to an emergency event (and if it occurred)
  std::shared_ptr<ISchemaItem> emergencyEvent_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter clusterModes.
  //
  // The status modes of the cluster
  std::shared_ptr<ISchemaItem> clusterModes_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter myKey.
  //
  // Information related to the MyKey feature
  std::shared_ptr<ISchemaItem> myKey_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);CObjectSchemaItem::Members schema_members;

  schema_members["gps"] = CObjectSchemaItem::SMember(gps_SchemaItem, false);
  schema_members["speed"] = CObjectSchemaItem::SMember(speed_SchemaItem, false);
  schema_members["rpm"] = CObjectSchemaItem::SMember(rpm_SchemaItem, false);
  schema_members["fuelLevel"] = CObjectSchemaItem::SMember(fuelLevel_SchemaItem, false);
  schema_members["fuelLevel_State"] = CObjectSchemaItem::SMember(fuelLevel_State_SchemaItem, false);
  schema_members["instantFuelConsumption"] = CObjectSchemaItem::SMember(instantFuelConsumption_SchemaItem, false);
  schema_members["fuelRange"] = CObjectSchemaItem::SMember(fuelRange_SchemaItem, false);
  schema_members["externalTemperature"] = CObjectSchemaItem::SMember(externalTemperature_SchemaItem, false);
  schema_members["turnSignal"] = CObjectSchemaItem::SMember(turnSignal_SchemaItem, false);
  schema_members["prndl"] = CObjectSchemaItem::SMember(prndl_SchemaItem, false);
  schema_members["tirePressure"] = CObjectSchemaItem::SMember(tirePressure_SchemaItem, false);
  schema_members["odometer"] = CObjectSchemaItem::SMember(odometer_SchemaItem, false);
  schema_members["beltStatus"] = CObjectSchemaItem::SMember(beltStatus_SchemaItem, false);
  schema_members["bodyInformation"] = CObjectSchemaItem::SMember(bodyInformation_SchemaItem, false);
  schema_members["deviceStatus"] = CObjectSchemaItem::SMember(deviceStatus_SchemaItem, false);
  schema_members["driverBraking"] = CObjectSchemaItem::SMember(driverBraking_SchemaItem, false);
  schema_members["wiperStatus"] = CObjectSchemaItem::SMember(wiperStatus_SchemaItem, false);
  schema_members["headLampStatus"] = CObjectSchemaItem::SMember(headLampStatus_SchemaItem, false);
  schema_members["engineTorque"] = CObjectSchemaItem::SMember(engineTorque_SchemaItem, false);
  schema_members["accPedalPosition"] = CObjectSchemaItem::SMember(accPedalPosition_SchemaItem, false);
  schema_members["steeringWheelAngle"] = CObjectSchemaItem::SMember(steeringWheelAngle_SchemaItem, false);
  schema_members["engineOilLife"] = CObjectSchemaItem::SMember(engineOilLife_SchemaItem, false);
  schema_members["electronicParkBrakeStatus"] = CObjectSchemaItem::SMember(electronicParkBrakeStatus_SchemaItem, false);
  schema_members["cloudAppVehicleID"] = CObjectSchemaItem::SMember(cloudAppVehicleID_SchemaItem, false);
  schema_members["eCallInfo"] = CObjectSchemaItem::SMember(eCallInfo_SchemaItem, false);
  schema_members["airbagStatus"] = CObjectSchemaItem::SMember(airbagStatus_SchemaItem, false);
  schema_members["emergencyEvent"] = CObjectSchemaItem::SMember(emergencyEvent_SchemaItem, false);
  schema_members["clusterModes"] = CObjectSchemaItem::SMember(clusterModes_SchemaItem, false);
  schema_members["myKey"] = CObjectSchemaItem::SMember(myKey_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VehicleInfo_UnsubscribeVehicleData_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter appID.
  //
  // ID of application that requested this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Function parameter gps.
  //
  // See GPSData
  std::shared_ptr<ISchemaItem> gps_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter speed.
  //
  // The vehicle speed in kilometers per hour
  std::shared_ptr<ISchemaItem> speed_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter rpm.
  //
  // The number of revolutions per minute of the engine
  std::shared_ptr<ISchemaItem> rpm_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter fuelLevel.
  //
  // The fuel level in the tank (percentage)
  std::shared_ptr<ISchemaItem> fuelLevel_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter fuelLevel_State.
  //
  // The fuel level state
  std::shared_ptr<ISchemaItem> fuelLevel_State_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter instantFuelConsumption.
  //
  // The instantaneous fuel consumption in microlitres
  std::shared_ptr<ISchemaItem> instantFuelConsumption_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter fuelRange.
  //
  // The estimate range in KM the vehicle can travel based on fuel level and consumption
  std::shared_ptr<ISchemaItem> fuelRange_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter externalTemperature.
  //
  // The external temperature in degrees celsius.
  std::shared_ptr<ISchemaItem> externalTemperature_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter turnSignal.
  //
  // See TurnSignal
  std::shared_ptr<ISchemaItem> turnSignal_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter prndl.
  //
  // See PRNDL
  std::shared_ptr<ISchemaItem> prndl_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter tirePressure.
  //
  // See TireStatus
  std::shared_ptr<ISchemaItem> tirePressure_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter odometer.
  //
  // Odometer in km
  std::shared_ptr<ISchemaItem> odometer_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter beltStatus.
  //
  // The status of the seat belts
  std::shared_ptr<ISchemaItem> beltStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter bodyInformation.
  //
  // The body information including power modes
  std::shared_ptr<ISchemaItem> bodyInformation_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter deviceStatus.
  //
  // The device status including signal and battery strength
  std::shared_ptr<ISchemaItem> deviceStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter driverBraking.
  //
  // The status of the brake pedal
  std::shared_ptr<ISchemaItem> driverBraking_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter wiperStatus.
  //
  // The status of the wipers
  std::shared_ptr<ISchemaItem> wiperStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter headLampStatus.
  //
  // Status of the head lamps
  std::shared_ptr<ISchemaItem> headLampStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter engineTorque.
  //
  // Torque value for engine (in Nm) on non-diesel variants
  std::shared_ptr<ISchemaItem> engineTorque_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter accPedalPosition.
  //
  // Accelerator pedal position (percentage depressed)
  std::shared_ptr<ISchemaItem> accPedalPosition_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter steeringWheelAngle.
  //
  // Current angle of the steering wheel (in deg)
  std::shared_ptr<ISchemaItem> steeringWheelAngle_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter engineOilLife.
  //
  // The estimated percentage of remaining oil life of the engine.
  std::shared_ptr<ISchemaItem> engineOilLife_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter electronicParkBrakeStatus.
  //
  // The status of the park brake as provided by Electric Park Brake (EPB) system.
  std::shared_ptr<ISchemaItem> electronicParkBrakeStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter cloudAppVehicleID.
  //
  // Parameter used by cloud apps to identify a head unit
  std::shared_ptr<ISchemaItem> cloudAppVehicleID_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter eCallInfo.
  //
  // Emergency Call notification and confirmation data
  std::shared_ptr<ISchemaItem> eCallInfo_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter airbagStatus.
  //
  // The status of the air bags
  std::shared_ptr<ISchemaItem> airbagStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter emergencyEvent.
  //
  // Information related to an emergency event (and if it occurred)
  std::shared_ptr<ISchemaItem> emergencyEvent_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter clusterModeStatus.
  //
  // The status modes of the cluster
  std::shared_ptr<ISchemaItem> clusterModeStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter myKey.
  //
  // Information related to the MyKey feature
  std::shared_ptr<ISchemaItem> myKey_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);
  schema_members["gps"] = CObjectSchemaItem::SMember(gps_SchemaItem, false);
  schema_members["speed"] = CObjectSchemaItem::SMember(speed_SchemaItem, false);
  schema_members["rpm"] = CObjectSchemaItem::SMember(rpm_SchemaItem, false);
  schema_members["fuelLevel"] = CObjectSchemaItem::SMember(fuelLevel_SchemaItem, false);
  schema_members["fuelLevel_State"] = CObjectSchemaItem::SMember(fuelLevel_State_SchemaItem, false);
  schema_members["instantFuelConsumption"] = CObjectSchemaItem::SMember(instantFuelConsumption_SchemaItem, false);
  schema_members["fuelRange"] = CObjectSchemaItem::SMember(fuelRange_SchemaItem, false);
  schema_members["externalTemperature"] = CObjectSchemaItem::SMember(externalTemperature_SchemaItem, false);
  schema_members["turnSignal"] = CObjectSchemaItem::SMember(turnSignal_SchemaItem, false);
  schema_members["prndl"] = CObjectSchemaItem::SMember(prndl_SchemaItem, false);
  schema_members["tirePressure"] = CObjectSchemaItem::SMember(tirePressure_SchemaItem, false);
  schema_members["odometer"] = CObjectSchemaItem::SMember(odometer_SchemaItem, false);
  schema_members["beltStatus"] = CObjectSchemaItem::SMember(beltStatus_SchemaItem, false);
  schema_members["bodyInformation"] = CObjectSchemaItem::SMember(bodyInformation_SchemaItem, false);
  schema_members["deviceStatus"] = CObjectSchemaItem::SMember(deviceStatus_SchemaItem, false);
  schema_members["driverBraking"] = CObjectSchemaItem::SMember(driverBraking_SchemaItem, false);
  schema_members["wiperStatus"] = CObjectSchemaItem::SMember(wiperStatus_SchemaItem, false);
  schema_members["headLampStatus"] = CObjectSchemaItem::SMember(headLampStatus_SchemaItem, false);
  schema_members["engineTorque"] = CObjectSchemaItem::SMember(engineTorque_SchemaItem, false);
  schema_members["accPedalPosition"] = CObjectSchemaItem::SMember(accPedalPosition_SchemaItem, false);
  schema_members["steeringWheelAngle"] = CObjectSchemaItem::SMember(steeringWheelAngle_SchemaItem, false);
  schema_members["engineOilLife"] = CObjectSchemaItem::SMember(engineOilLife_SchemaItem, false);
  schema_members["electronicParkBrakeStatus"] = CObjectSchemaItem::SMember(electronicParkBrakeStatus_SchemaItem, false);
  schema_members["cloudAppVehicleID"] = CObjectSchemaItem::SMember(cloudAppVehicleID_SchemaItem, false);
  schema_members["eCallInfo"] = CObjectSchemaItem::SMember(eCallInfo_SchemaItem, false);
  schema_members["airbagStatus"] = CObjectSchemaItem::SMember(airbagStatus_SchemaItem, false);
  schema_members["emergencyEvent"] = CObjectSchemaItem::SMember(emergencyEvent_SchemaItem, false);
  schema_members["clusterModeStatus"] = CObjectSchemaItem::SMember(clusterModeStatus_SchemaItem, false);
  schema_members["myKey"] = CObjectSchemaItem::SMember(myKey_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VehicleInfo_UnsubscribeVehicleData_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter gps.
  //
  // See GPSData
  std::shared_ptr<ISchemaItem> gps_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter speed.
  //
  // The vehicle speed in kilometers per hour
  std::shared_ptr<ISchemaItem> speed_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter rpm.
  //
  // The number of revolutions per minute of the engine
  std::shared_ptr<ISchemaItem> rpm_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter fuelLevel.
  //
  // The fuel level in the tank (percentage)
  std::shared_ptr<ISchemaItem> fuelLevel_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter fuelLevel_State.
  //
  // The fuel level state
  std::shared_ptr<ISchemaItem> fuelLevel_State_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter instantFuelConsumption.
  //
  // The instantaneous fuel consumption in microlitres
  std::shared_ptr<ISchemaItem> instantFuelConsumption_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter fuelRange.
  //
  // The estimate range in KM the vehicle can travel based on fuel level and consumption
  std::shared_ptr<ISchemaItem> fuelRange_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter externalTemperature.
  //
  // The external temperature in degrees celsius
  std::shared_ptr<ISchemaItem> externalTemperature_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter turnSignal.
  //
  // See TurnSignal
  std::shared_ptr<ISchemaItem> turnSignal_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter prndl.
  //
  // See PRNDL
  std::shared_ptr<ISchemaItem> prndl_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter tirePressure.
  //
  // See TireStatus
  std::shared_ptr<ISchemaItem> tirePressure_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter odometer.
  //
  // Odometer in km
  std::shared_ptr<ISchemaItem> odometer_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter beltStatus.
  //
  // The status of the seat belts
  std::shared_ptr<ISchemaItem> beltStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter bodyInformation.
  //
  // The body information including power modes
  std::shared_ptr<ISchemaItem> bodyInformation_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter deviceStatus.
  //
  // The device status including signal and battery strength
  std::shared_ptr<ISchemaItem> deviceStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter driverBraking.
  //
  // The status of the brake pedal
  std::shared_ptr<ISchemaItem> driverBraking_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter wiperStatus.
  //
  // The status of the wipers
  std::shared_ptr<ISchemaItem> wiperStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter headLampStatus.
  //
  // Status of the head lamps
  std::shared_ptr<ISchemaItem> headLampStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter engineTorque.
  //
  // Torque value for engine (in Nm) on non-diesel variants
  std::shared_ptr<ISchemaItem> engineTorque_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter accPedalPosition.
  //
  // Accelerator pedal position (percentage depressed)
  std::shared_ptr<ISchemaItem> accPedalPosition_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter steeringWheelAngle.
  //
  // Current angle of the steering wheel (in deg)
  std::shared_ptr<ISchemaItem> steeringWheelAngle_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter engineOilLife.
  //
  // The estimated percentage of remaining oil life of the engine.
  std::shared_ptr<ISchemaItem> engineOilLife_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter electronicParkBrakeStatus.
  //
  // The status of the park brake as provided by Electric Park Brake (EPB) system.
  std::shared_ptr<ISchemaItem> electronicParkBrakeStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter cloudAppVehicleID.
  //
  // Parameter used by cloud apps to identify a head unit
  std::shared_ptr<ISchemaItem> cloudAppVehicleID_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter eCallInfo.
  //
  // Emergency Call notification and confirmation data
  std::shared_ptr<ISchemaItem> eCallInfo_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter airbagStatus.
  //
  // The status of the air bags
  std::shared_ptr<ISchemaItem> airbagStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter emergencyEvent.
  //
  // Information related to an emergency event (and if it occurred)
  std::shared_ptr<ISchemaItem> emergencyEvent_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter clusterModes.
  //
  // The status modes of the cluster
  std::shared_ptr<ISchemaItem> clusterModes_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);

  // Function parameter myKey.
  //
  // Information related to the MyKey feature
  std::shared_ptr<ISchemaItem> myKey_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VehicleDataResult);CObjectSchemaItem::Members schema_members;

  schema_members["gps"] = CObjectSchemaItem::SMember(gps_SchemaItem, false);
  schema_members["speed"] = CObjectSchemaItem::SMember(speed_SchemaItem, false);
  schema_members["rpm"] = CObjectSchemaItem::SMember(rpm_SchemaItem, false);
  schema_members["fuelLevel"] = CObjectSchemaItem::SMember(fuelLevel_SchemaItem, false);
  schema_members["fuelLevel_State"] = CObjectSchemaItem::SMember(fuelLevel_State_SchemaItem, false);
  schema_members["instantFuelConsumption"] = CObjectSchemaItem::SMember(instantFuelConsumption_SchemaItem, false);
  schema_members["fuelRange"] = CObjectSchemaItem::SMember(fuelRange_SchemaItem, false);
  schema_members["externalTemperature"] = CObjectSchemaItem::SMember(externalTemperature_SchemaItem, false);
  schema_members["turnSignal"] = CObjectSchemaItem::SMember(turnSignal_SchemaItem, false);
  schema_members["prndl"] = CObjectSchemaItem::SMember(prndl_SchemaItem, false);
  schema_members["tirePressure"] = CObjectSchemaItem::SMember(tirePressure_SchemaItem, false);
  schema_members["odometer"] = CObjectSchemaItem::SMember(odometer_SchemaItem, false);
  schema_members["beltStatus"] = CObjectSchemaItem::SMember(beltStatus_SchemaItem, false);
  schema_members["bodyInformation"] = CObjectSchemaItem::SMember(bodyInformation_SchemaItem, false);
  schema_members["deviceStatus"] = CObjectSchemaItem::SMember(deviceStatus_SchemaItem, false);
  schema_members["driverBraking"] = CObjectSchemaItem::SMember(driverBraking_SchemaItem, false);
  schema_members["wiperStatus"] = CObjectSchemaItem::SMember(wiperStatus_SchemaItem, false);
  schema_members["headLampStatus"] = CObjectSchemaItem::SMember(headLampStatus_SchemaItem, false);
  schema_members["engineTorque"] = CObjectSchemaItem::SMember(engineTorque_SchemaItem, false);
  schema_members["accPedalPosition"] = CObjectSchemaItem::SMember(accPedalPosition_SchemaItem, false);
  schema_members["steeringWheelAngle"] = CObjectSchemaItem::SMember(steeringWheelAngle_SchemaItem, false);
  schema_members["engineOilLife"] = CObjectSchemaItem::SMember(engineOilLife_SchemaItem, false);
  schema_members["electronicParkBrakeStatus"] = CObjectSchemaItem::SMember(electronicParkBrakeStatus_SchemaItem, false);
  schema_members["cloudAppVehicleID"] = CObjectSchemaItem::SMember(cloudAppVehicleID_SchemaItem, false);
  schema_members["eCallInfo"] = CObjectSchemaItem::SMember(eCallInfo_SchemaItem, false);
  schema_members["airbagStatus"] = CObjectSchemaItem::SMember(airbagStatus_SchemaItem, false);
  schema_members["emergencyEvent"] = CObjectSchemaItem::SMember(emergencyEvent_SchemaItem, false);
  schema_members["clusterModes"] = CObjectSchemaItem::SMember(clusterModes_SchemaItem, false);
  schema_members["myKey"] = CObjectSchemaItem::SMember(myKey_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VehicleInfo_GetVehicleData_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter gps.
  //
  // See GPSData
  std::shared_ptr<ISchemaItem> gps_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter speed.
  //
  // The vehicle speed in kilometers per hour
  std::shared_ptr<ISchemaItem> speed_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter rpm.
  //
  // The number of revolutions per minute of the engine
  std::shared_ptr<ISchemaItem> rpm_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter fuelLevel.
  //
  // The fuel level in the tank (percentage)
  std::shared_ptr<ISchemaItem> fuelLevel_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter fuelLevel_State.
  //
  // The fuel level state
  std::shared_ptr<ISchemaItem> fuelLevel_State_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter instantFuelConsumption.
  //
  // The instantaneous fuel consumption in microlitres
  std::shared_ptr<ISchemaItem> instantFuelConsumption_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter fuelRange.
  //
  // The estimate range in KM the vehicle can travel based on fuel level and consumption
  std::shared_ptr<ISchemaItem> fuelRange_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter externalTemperature.
  //
  // The external temperature in degrees celsius
  std::shared_ptr<ISchemaItem> externalTemperature_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter turnSignal.
  //
  // See TurnSignal
  std::shared_ptr<ISchemaItem> turnSignal_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter vin.
  //
  // Vehicle identification number
  std::shared_ptr<ISchemaItem> vin_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter prndl.
  //
  // See PRNDL
  std::shared_ptr<ISchemaItem> prndl_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter tirePressure.
  //
  // See TireStatus
  std::shared_ptr<ISchemaItem> tirePressure_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter odometer.
  //
  // Odometer in km
  std::shared_ptr<ISchemaItem> odometer_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter beltStatus.
  //
  // The status of the seat belts
  std::shared_ptr<ISchemaItem> beltStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter bodyInformation.
  //
  // The body information including ignition status and internal temp
  std::shared_ptr<ISchemaItem> bodyInformation_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter deviceStatus.
  //
  // The device status including signal and battery strength
  std::shared_ptr<ISchemaItem> deviceStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter driverBraking.
  //
  // The status of the brake pedal
  std::shared_ptr<ISchemaItem> driverBraking_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter wiperStatus.
  //
  // The status of the wipers
  std::shared_ptr<ISchemaItem> wiperStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter headLampStatus.
  //
  // Status of the head lamps
  std::shared_ptr<ISchemaItem> headLampStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter engineTorque.
  //
  // Torque value for engine (in Nm) on non-diesel variants
  std::shared_ptr<ISchemaItem> engineTorque_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter accPedalPosition.
  //
  // Accelerator pedal position (percentage depressed)
  std::shared_ptr<ISchemaItem> accPedalPosition_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter steeringWheelAngle.
  //
  // Current angle of the steering wheel (in deg)
  std::shared_ptr<ISchemaItem> steeringWheelAngle_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter engineOilLife.
  //
  // The estimated percentage of remaining oil life of the engine.
  std::shared_ptr<ISchemaItem> engineOilLife_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter electronicParkBrakeStatus.
  //
  // The status of the park brake as provided by Electric Park Brake (EPB) system.
  std::shared_ptr<ISchemaItem> electronicParkBrakeStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter cloudAppVehicleID.
  //
  // Parameter used by cloud apps to identify a head unit
  std::shared_ptr<ISchemaItem> cloudAppVehicleID_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter eCallInfo.
  //
  // Emergency Call notification and confirmation data
  std::shared_ptr<ISchemaItem> eCallInfo_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter airbagStatus.
  //
  // The status of the air bags
  std::shared_ptr<ISchemaItem> airbagStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter emergencyEvent.
  //
  // Information related to an emergency event (and if it occurred)
  std::shared_ptr<ISchemaItem> emergencyEvent_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter clusterModeStatus.
  //
  // The status modes of the cluster
  std::shared_ptr<ISchemaItem> clusterModeStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter myKey.
  //
  // Information related to the MyKey feature
  std::shared_ptr<ISchemaItem> myKey_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["gps"] = CObjectSchemaItem::SMember(gps_SchemaItem, false);
  schema_members["speed"] = CObjectSchemaItem::SMember(speed_SchemaItem, false);
  schema_members["rpm"] = CObjectSchemaItem::SMember(rpm_SchemaItem, false);
  schema_members["fuelLevel"] = CObjectSchemaItem::SMember(fuelLevel_SchemaItem, false);
  schema_members["fuelLevel_State"] = CObjectSchemaItem::SMember(fuelLevel_State_SchemaItem, false);
  schema_members["instantFuelConsumption"] = CObjectSchemaItem::SMember(instantFuelConsumption_SchemaItem, false);
  schema_members["fuelRange"] = CObjectSchemaItem::SMember(fuelRange_SchemaItem, false);
  schema_members["externalTemperature"] = CObjectSchemaItem::SMember(externalTemperature_SchemaItem, false);
  schema_members["turnSignal"] = CObjectSchemaItem::SMember(turnSignal_SchemaItem, false);
  schema_members["vin"] = CObjectSchemaItem::SMember(vin_SchemaItem, false);
  schema_members["prndl"] = CObjectSchemaItem::SMember(prndl_SchemaItem, false);
  schema_members["tirePressure"] = CObjectSchemaItem::SMember(tirePressure_SchemaItem, false);
  schema_members["odometer"] = CObjectSchemaItem::SMember(odometer_SchemaItem, false);
  schema_members["beltStatus"] = CObjectSchemaItem::SMember(beltStatus_SchemaItem, false);
  schema_members["bodyInformation"] = CObjectSchemaItem::SMember(bodyInformation_SchemaItem, false);
  schema_members["deviceStatus"] = CObjectSchemaItem::SMember(deviceStatus_SchemaItem, false);
  schema_members["driverBraking"] = CObjectSchemaItem::SMember(driverBraking_SchemaItem, false);
  schema_members["wiperStatus"] = CObjectSchemaItem::SMember(wiperStatus_SchemaItem, false);
  schema_members["headLampStatus"] = CObjectSchemaItem::SMember(headLampStatus_SchemaItem, false);
  schema_members["engineTorque"] = CObjectSchemaItem::SMember(engineTorque_SchemaItem, false);
  schema_members["accPedalPosition"] = CObjectSchemaItem::SMember(accPedalPosition_SchemaItem, false);
  schema_members["steeringWheelAngle"] = CObjectSchemaItem::SMember(steeringWheelAngle_SchemaItem, false);
  schema_members["engineOilLife"] = CObjectSchemaItem::SMember(engineOilLife_SchemaItem, false);
  schema_members["electronicParkBrakeStatus"] = CObjectSchemaItem::SMember(electronicParkBrakeStatus_SchemaItem, false);
  schema_members["cloudAppVehicleID"] = CObjectSchemaItem::SMember(cloudAppVehicleID_SchemaItem, false);
  schema_members["eCallInfo"] = CObjectSchemaItem::SMember(eCallInfo_SchemaItem, false);
  schema_members["airbagStatus"] = CObjectSchemaItem::SMember(airbagStatus_SchemaItem, false);
  schema_members["emergencyEvent"] = CObjectSchemaItem::SMember(emergencyEvent_SchemaItem, false);
  schema_members["clusterModeStatus"] = CObjectSchemaItem::SMember(clusterModeStatus_SchemaItem, false);
  schema_members["myKey"] = CObjectSchemaItem::SMember(myKey_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VehicleInfo_GetVehicleData_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_ComponentVolumeStatus::eType> Common_ComponentVolumeStatus_all_enum_values;
  Common_ComponentVolumeStatus_all_enum_values.insert(Common_ComponentVolumeStatus::CVS_UNKNOWN);
  Common_ComponentVolumeStatus_all_enum_values.insert(Common_ComponentVolumeStatus::CVS_NORMAL);
  Common_ComponentVolumeStatus_all_enum_values.insert(Common_ComponentVolumeStatus::CVS_LOW);
  Common_ComponentVolumeStatus_all_enum_values.insert(Common_ComponentVolumeStatus::CVS_FAULT);
  Common_ComponentVolumeStatus_all_enum_values.insert(Common_ComponentVolumeStatus::CVS_ALERT);
  Common_ComponentVolumeStatus_all_enum_values.insert(Common_ComponentVolumeStatus::CVS_NOT_SUPPORTED);

  std::set<Common_TurnSignal::eType> Common_TurnSignal_all_enum_values;
  Common_TurnSignal_all_enum_values.insert(Common_TurnSignal::OFF);
  Common_TurnSignal_all_enum_values.insert(Common_TurnSignal::LEFT);
  Common_TurnSignal_all_enum_values.insert(Common_TurnSignal::RIGHT);
  Common_TurnSignal_all_enum_values.insert(Common_TurnSignal::BOTH);

  std::set<Common_PRNDL::eType> Common_PRNDL_all_enum_values;
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::PARK);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::REVERSE);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::NEUTRAL);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::DRIVE);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::SPORT);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::LOWGEAR);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::FIRST);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::SECOND);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::THIRD);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::FOURTH);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::FIFTH);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::SIXTH);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::SEVENTH);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::EIGHTH);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::UNKNOWN);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::FAULT);

  std::set<Common_VehicleDataEventStatus::eType> Common_VehicleDataEventStatus_all_enum_values;
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_NO_EVENT);
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_NO);
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_YES);
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_NOT_SUPPORTED);
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_FAULT);

  std::set<Common_WiperStatus::eType> Common_WiperStatus_all_enum_values;
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::OFF);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::AUTO_OFF);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::OFF_MOVING);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::MAN_INT_OFF);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::MAN_INT_ON);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::MAN_LOW);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::MAN_HIGH);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::MAN_FLICK);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::WASH);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::AUTO_LOW);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::AUTO_HIGH);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::COURTESYWIPE);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::AUTO_ADJUST);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::STALLED);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::NO_DATA_EXISTS);

  std::set<Common_ElectronicParkBrakeStatus::eType> Common_ElectronicParkBrakeStatus_all_enum_values;
  Common_ElectronicParkBrakeStatus_all_enum_values.insert(Common_ElectronicParkBrakeStatus::CLOSED);
  Common_ElectronicParkBrakeStatus_all_enum_values.insert(Common_ElectronicParkBrakeStatus::TRANSITION);
  Common_ElectronicParkBrakeStatus_all_enum_values.insert(Common_ElectronicParkBrakeStatus::OPEN);
  Common_ElectronicParkBrakeStatus_all_enum_values.insert(Common_ElectronicParkBrakeStatus::DRIVE_ACTIVE);
  Common_ElectronicParkBrakeStatus_all_enum_values.insert(Common_ElectronicParkBrakeStatus::FAULT);

  // Function parameter gps.
  //
  // See GPSData
  std::shared_ptr<ISchemaItem> gps_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_GPSData);

  // Function parameter speed.
  //
  // The vehicle speed in kilometers per hour
  std::shared_ptr<ISchemaItem> speed_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(700.0), TSchemaItemParameter<double>());

  // Function parameter rpm.
  //
  // The number of revolutions per minute of the engine
  std::shared_ptr<ISchemaItem> rpm_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(20000), TSchemaItemParameter<int32_t>());

  // Function parameter fuelLevel.
  //
  // The fuel level in the tank (percentage)
  std::shared_ptr<ISchemaItem> fuelLevel_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-6.0), TSchemaItemParameter<double>(106.0), TSchemaItemParameter<double>());

  // Function parameter fuelLevel_State.
  //
  // The fuel level state
  std::shared_ptr<ISchemaItem> fuelLevel_State_SchemaItem = TEnumSchemaItem<Common_ComponentVolumeStatus::eType>::create(Common_ComponentVolumeStatus_all_enum_values, TSchemaItemParameter<Common_ComponentVolumeStatus::eType>());

  // Function parameter instantFuelConsumption.
  //
  // The instantaneous fuel consumption in microlitres
  std::shared_ptr<ISchemaItem> instantFuelConsumption_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(25575.0), TSchemaItemParameter<double>());

  // Function parameter fuelRange.
  //
  // The estimate range in KM the vehicle can travel based on fuel level and consumption
  std::shared_ptr<ISchemaItem> fuelRange_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_FuelRange), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));

  // Function parameter externalTemperature.
  //
  // The external temperature in degrees celsius
  std::shared_ptr<ISchemaItem> externalTemperature_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-40.0), TSchemaItemParameter<double>(100.0), TSchemaItemParameter<double>());

  // Function parameter turnSignal.
  //
  // See TurnSignal
  std::shared_ptr<ISchemaItem> turnSignal_SchemaItem = TEnumSchemaItem<Common_TurnSignal::eType>::create(Common_TurnSignal_all_enum_values, TSchemaItemParameter<Common_TurnSignal::eType>());

  // Function parameter vin.
  //
  // Vehicle identification number
  std::shared_ptr<ISchemaItem> vin_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(17), TSchemaItemParameter<std::string>());

  // Function parameter prndl.
  //
  // See PRNDL
  std::shared_ptr<ISchemaItem> prndl_SchemaItem = TEnumSchemaItem<Common_PRNDL::eType>::create(Common_PRNDL_all_enum_values, TSchemaItemParameter<Common_PRNDL::eType>());

  // Function parameter tirePressure.
  //
  // See TireStatus
  std::shared_ptr<ISchemaItem> tirePressure_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TireStatus);

  // Function parameter odometer.
  //
  // Odometer in km
  std::shared_ptr<ISchemaItem> odometer_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(17000000), TSchemaItemParameter<int32_t>());

  // Function parameter beltStatus.
  //
  // The status of the seat belts
  std::shared_ptr<ISchemaItem> beltStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_BeltStatus);

  // Function parameter bodyInformation.
  //
  // The body information including power modes
  std::shared_ptr<ISchemaItem> bodyInformation_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_BodyInformation);

  // Function parameter deviceStatus.
  //
  // The device status including signal and battery strength
  std::shared_ptr<ISchemaItem> deviceStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DeviceStatus);

  // Function parameter driverBraking.
  //
  // The status of the brake pedal
  std::shared_ptr<ISchemaItem> driverBraking_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Function parameter wiperStatus.
  //
  // The status of the wipers
  std::shared_ptr<ISchemaItem> wiperStatus_SchemaItem = TEnumSchemaItem<Common_WiperStatus::eType>::create(Common_WiperStatus_all_enum_values, TSchemaItemParameter<Common_WiperStatus::eType>());

  // Function parameter headLampStatus.
  //
  // Status of the head lamps
  std::shared_ptr<ISchemaItem> headLampStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_HeadLampStatus);

  // Function parameter engineTorque.
  //
  // Torque value for engine (in Nm) on non-diesel variants
  std::shared_ptr<ISchemaItem> engineTorque_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-1000.0), TSchemaItemParameter<double>(2000.0), TSchemaItemParameter<double>());

  // Function parameter accPedalPosition.
  //
  // Accelerator pedal position (percentage depressed)
  std::shared_ptr<ISchemaItem> accPedalPosition_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(100.0), TSchemaItemParameter<double>());

  // Function parameter steeringWheelAngle.
  //
  // Current angle of the steering wheel (in deg)
  std::shared_ptr<ISchemaItem> steeringWheelAngle_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-2000.0), TSchemaItemParameter<double>(2000.0), TSchemaItemParameter<double>());

  // Function parameter engineOilLife.
  //
  // The estimated percentage of remaining oil life of the engine.
  std::shared_ptr<ISchemaItem> engineOilLife_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(100.0), TSchemaItemParameter<double>());

  // Function parameter electronicParkBrakeStatus.
  //
  // The status of the park brake as provided by Electric Park Brake (EPB) system.
  std::shared_ptr<ISchemaItem> electronicParkBrakeStatus_SchemaItem = TEnumSchemaItem<Common_ElectronicParkBrakeStatus::eType>::create(Common_ElectronicParkBrakeStatus_all_enum_values, TSchemaItemParameter<Common_ElectronicParkBrakeStatus::eType>());

  // Function parameter cloudAppVehicleID.
  //
  // Parameter used by cloud apps to identify a head unit
  std::shared_ptr<ISchemaItem> cloudAppVehicleID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Function parameter eCallInfo.
  //
  // Emergency Call notification and confirmation data
  std::shared_ptr<ISchemaItem> eCallInfo_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ECallInfo);

  // Function parameter airbagStatus.
  //
  // The status of the air bags
  std::shared_ptr<ISchemaItem> airbagStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_AirbagStatus);

  // Function parameter emergencyEvent.
  //
  // Information related to an emergency event (and if it occurred)
  std::shared_ptr<ISchemaItem> emergencyEvent_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_EmergencyEvent);

  // Function parameter clusterModeStatus.
  //
  // The status modes of the cluster
  std::shared_ptr<ISchemaItem> clusterModeStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ClusterModeStatus);

  // Function parameter myKey.
  //
  // Information related to the MyKey feature
  std::shared_ptr<ISchemaItem> myKey_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_MyKey);CObjectSchemaItem::Members schema_members;

  schema_members["gps"] = CObjectSchemaItem::SMember(gps_SchemaItem, false);
  schema_members["speed"] = CObjectSchemaItem::SMember(speed_SchemaItem, false);
  schema_members["rpm"] = CObjectSchemaItem::SMember(rpm_SchemaItem, false);
  schema_members["fuelLevel"] = CObjectSchemaItem::SMember(fuelLevel_SchemaItem, false);
  schema_members["fuelLevel_State"] = CObjectSchemaItem::SMember(fuelLevel_State_SchemaItem, false);
  schema_members["instantFuelConsumption"] = CObjectSchemaItem::SMember(instantFuelConsumption_SchemaItem, false);
  schema_members["fuelRange"] = CObjectSchemaItem::SMember(fuelRange_SchemaItem, false);
  schema_members["externalTemperature"] = CObjectSchemaItem::SMember(externalTemperature_SchemaItem, false);
  schema_members["turnSignal"] = CObjectSchemaItem::SMember(turnSignal_SchemaItem, false);
  schema_members["vin"] = CObjectSchemaItem::SMember(vin_SchemaItem, false);
  schema_members["prndl"] = CObjectSchemaItem::SMember(prndl_SchemaItem, false);
  schema_members["tirePressure"] = CObjectSchemaItem::SMember(tirePressure_SchemaItem, false);
  schema_members["odometer"] = CObjectSchemaItem::SMember(odometer_SchemaItem, false);
  schema_members["beltStatus"] = CObjectSchemaItem::SMember(beltStatus_SchemaItem, false);
  schema_members["bodyInformation"] = CObjectSchemaItem::SMember(bodyInformation_SchemaItem, false);
  schema_members["deviceStatus"] = CObjectSchemaItem::SMember(deviceStatus_SchemaItem, false);
  schema_members["driverBraking"] = CObjectSchemaItem::SMember(driverBraking_SchemaItem, false);
  schema_members["wiperStatus"] = CObjectSchemaItem::SMember(wiperStatus_SchemaItem, false);
  schema_members["headLampStatus"] = CObjectSchemaItem::SMember(headLampStatus_SchemaItem, false);
  schema_members["engineTorque"] = CObjectSchemaItem::SMember(engineTorque_SchemaItem, false);
  schema_members["accPedalPosition"] = CObjectSchemaItem::SMember(accPedalPosition_SchemaItem, false);
  schema_members["steeringWheelAngle"] = CObjectSchemaItem::SMember(steeringWheelAngle_SchemaItem, false);
  schema_members["engineOilLife"] = CObjectSchemaItem::SMember(engineOilLife_SchemaItem, false);
  schema_members["electronicParkBrakeStatus"] = CObjectSchemaItem::SMember(electronicParkBrakeStatus_SchemaItem, false);
  schema_members["cloudAppVehicleID"] = CObjectSchemaItem::SMember(cloudAppVehicleID_SchemaItem, false);
  schema_members["eCallInfo"] = CObjectSchemaItem::SMember(eCallInfo_SchemaItem, false);
  schema_members["airbagStatus"] = CObjectSchemaItem::SMember(airbagStatus_SchemaItem, false);
  schema_members["emergencyEvent"] = CObjectSchemaItem::SMember(emergencyEvent_SchemaItem, false);
  schema_members["clusterModeStatus"] = CObjectSchemaItem::SMember(clusterModeStatus_SchemaItem, false);
  schema_members["myKey"] = CObjectSchemaItem::SMember(myKey_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_VehicleInfo_OnVehicleData_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_ComponentVolumeStatus::eType> Common_ComponentVolumeStatus_all_enum_values;
  Common_ComponentVolumeStatus_all_enum_values.insert(Common_ComponentVolumeStatus::CVS_UNKNOWN);
  Common_ComponentVolumeStatus_all_enum_values.insert(Common_ComponentVolumeStatus::CVS_NORMAL);
  Common_ComponentVolumeStatus_all_enum_values.insert(Common_ComponentVolumeStatus::CVS_LOW);
  Common_ComponentVolumeStatus_all_enum_values.insert(Common_ComponentVolumeStatus::CVS_FAULT);
  Common_ComponentVolumeStatus_all_enum_values.insert(Common_ComponentVolumeStatus::CVS_ALERT);
  Common_ComponentVolumeStatus_all_enum_values.insert(Common_ComponentVolumeStatus::CVS_NOT_SUPPORTED);

  std::set<Common_TurnSignal::eType> Common_TurnSignal_all_enum_values;
  Common_TurnSignal_all_enum_values.insert(Common_TurnSignal::OFF);
  Common_TurnSignal_all_enum_values.insert(Common_TurnSignal::LEFT);
  Common_TurnSignal_all_enum_values.insert(Common_TurnSignal::RIGHT);
  Common_TurnSignal_all_enum_values.insert(Common_TurnSignal::BOTH);

  std::set<Common_PRNDL::eType> Common_PRNDL_all_enum_values;
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::PARK);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::REVERSE);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::NEUTRAL);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::DRIVE);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::SPORT);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::LOWGEAR);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::FIRST);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::SECOND);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::THIRD);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::FOURTH);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::FIFTH);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::SIXTH);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::SEVENTH);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::EIGHTH);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::UNKNOWN);
  Common_PRNDL_all_enum_values.insert(Common_PRNDL::FAULT);

  std::set<Common_ElectronicParkBrakeStatus::eType> Common_ElectronicParkBrakeStatus_all_enum_values;
  Common_ElectronicParkBrakeStatus_all_enum_values.insert(Common_ElectronicParkBrakeStatus::CLOSED);
  Common_ElectronicParkBrakeStatus_all_enum_values.insert(Common_ElectronicParkBrakeStatus::TRANSITION);
  Common_ElectronicParkBrakeStatus_all_enum_values.insert(Common_ElectronicParkBrakeStatus::OPEN);
  Common_ElectronicParkBrakeStatus_all_enum_values.insert(Common_ElectronicParkBrakeStatus::DRIVE_ACTIVE);
  Common_ElectronicParkBrakeStatus_all_enum_values.insert(Common_ElectronicParkBrakeStatus::FAULT);

  std::set<Common_VehicleDataEventStatus::eType> Common_VehicleDataEventStatus_all_enum_values;
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_NO_EVENT);
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_NO);
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_YES);
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_NOT_SUPPORTED);
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_FAULT);

  std::set<Common_WiperStatus::eType> Common_WiperStatus_all_enum_values;
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::OFF);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::AUTO_OFF);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::OFF_MOVING);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::MAN_INT_OFF);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::MAN_INT_ON);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::MAN_LOW);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::MAN_HIGH);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::MAN_FLICK);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::WASH);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::AUTO_LOW);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::AUTO_HIGH);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::COURTESYWIPE);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::AUTO_ADJUST);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::STALLED);
  Common_WiperStatus_all_enum_values.insert(Common_WiperStatus::NO_DATA_EXISTS);

  // Function parameter gps.
  //
  // See GPSData
  std::shared_ptr<ISchemaItem> gps_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_GPSData);

  // Function parameter speed.
  //
  // The vehicle speed in kilometers per hour
  std::shared_ptr<ISchemaItem> speed_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(700.0), TSchemaItemParameter<double>());

  // Function parameter rpm.
  //
  // The number of revolutions per minute of the engine
  std::shared_ptr<ISchemaItem> rpm_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(20000), TSchemaItemParameter<int32_t>());

  // Function parameter fuelLevel.
  //
  // The fuel level in the tank (percentage)
  std::shared_ptr<ISchemaItem> fuelLevel_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-6.0), TSchemaItemParameter<double>(106.0), TSchemaItemParameter<double>());

  // Function parameter fuelLevel_State.
  //
  // The fuel level state
  std::shared_ptr<ISchemaItem> fuelLevel_State_SchemaItem = TEnumSchemaItem<Common_ComponentVolumeStatus::eType>::create(Common_ComponentVolumeStatus_all_enum_values, TSchemaItemParameter<Common_ComponentVolumeStatus::eType>());

  // Function parameter instantFuelConsumption.
  //
  // The instantaneous fuel consumption in microlitres
  std::shared_ptr<ISchemaItem> instantFuelConsumption_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(25575.0), TSchemaItemParameter<double>());

  // Function parameter fuelRange.
  //
  // The estimate range in KM the vehicle can travel based on fuel level and consumption
  std::shared_ptr<ISchemaItem> fuelRange_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_FuelRange), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));

  // Function parameter externalTemperature.
  //
  // The external temperature in degrees celsius
  std::shared_ptr<ISchemaItem> externalTemperature_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-40.0), TSchemaItemParameter<double>(100.0), TSchemaItemParameter<double>());

  // Function parameter turnSignal.
  //
  // See TurnSignal
  std::shared_ptr<ISchemaItem> turnSignal_SchemaItem = TEnumSchemaItem<Common_TurnSignal::eType>::create(Common_TurnSignal_all_enum_values, TSchemaItemParameter<Common_TurnSignal::eType>());

  // Function parameter vin.
  //
  // Vehicle identification number.
  std::shared_ptr<ISchemaItem> vin_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(17), TSchemaItemParameter<std::string>());

  // Function parameter prndl.
  //
  // See PRNDL
  std::shared_ptr<ISchemaItem> prndl_SchemaItem = TEnumSchemaItem<Common_PRNDL::eType>::create(Common_PRNDL_all_enum_values, TSchemaItemParameter<Common_PRNDL::eType>());

  // Function parameter tirePressure.
  //
  // See TireStatus
  std::shared_ptr<ISchemaItem> tirePressure_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TireStatus);

  // Function parameter odometer.
  //
  // Odometer in km
  std::shared_ptr<ISchemaItem> odometer_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(17000000), TSchemaItemParameter<int32_t>());

  // Function parameter beltStatus.
  //
  // The status of the seat belts
  std::shared_ptr<ISchemaItem> beltStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_BeltStatus);

  // Function parameter electronicParkBrakeStatus.
  //
  // The status of the park brake as provided by Electric Park Brake (EPB) system.
  std::shared_ptr<ISchemaItem> electronicParkBrakeStatus_SchemaItem = TEnumSchemaItem<Common_ElectronicParkBrakeStatus::eType>::create(Common_ElectronicParkBrakeStatus_all_enum_values, TSchemaItemParameter<Common_ElectronicParkBrakeStatus::eType>());

  // Function parameter bodyInformation.
  //
  // The body information including power modes
  std::shared_ptr<ISchemaItem> bodyInformation_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_BodyInformation);

  // Function parameter deviceStatus.
  //
  // The device status including signal and battery strength
  std::shared_ptr<ISchemaItem> deviceStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DeviceStatus);

  // Function parameter driverBraking.
  //
  // The status of the brake pedal
  std::shared_ptr<ISchemaItem> driverBraking_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Function parameter wiperStatus.
  //
  // The status of the wipers
  std::shared_ptr<ISchemaItem> wiperStatus_SchemaItem = TEnumSchemaItem<Common_WiperStatus::eType>::create(Common_WiperStatus_all_enum_values, TSchemaItemParameter<Common_WiperStatus::eType>());

  // Function parameter headLampStatus.
  //
  // Status of the head lamps
  std::shared_ptr<ISchemaItem> headLampStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_HeadLampStatus);

  // Function parameter engineTorque.
  //
  // Torque value for engine (in Nm) on non-diesel variants
  std::shared_ptr<ISchemaItem> engineTorque_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-1000.0), TSchemaItemParameter<double>(2000.0), TSchemaItemParameter<double>());

  // Function parameter accPedalPosition.
  //
  // Accelerator pedal position (percentage depressed)
  std::shared_ptr<ISchemaItem> accPedalPosition_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(100.0), TSchemaItemParameter<double>());

  // Function parameter steeringWheelAngle.
  //
  // Current angle of the steering wheel (in deg)
  std::shared_ptr<ISchemaItem> steeringWheelAngle_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-2000.0), TSchemaItemParameter<double>(2000.0), TSchemaItemParameter<double>());

  // Function parameter cloudAppVehicleID.
  //
  // Parameter used by cloud apps to identify a head unit
  std::shared_ptr<ISchemaItem> cloudAppVehicleID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Function parameter eCallInfo.
  //
  // Emergency Call notification and confirmation data
  std::shared_ptr<ISchemaItem> eCallInfo_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ECallInfo);

  // Function parameter airbagStatus.
  //
  // The status of the air bags
  std::shared_ptr<ISchemaItem> airbagStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_AirbagStatus);

  // Function parameter emergencyEvent.
  //
  // Information related to an emergency event (and if it occurred)
  std::shared_ptr<ISchemaItem> emergencyEvent_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_EmergencyEvent);

  // Function parameter clusterModeStatus.
  //
  // The status modes of the cluster
  std::shared_ptr<ISchemaItem> clusterModeStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ClusterModeStatus);

  // Function parameter myKey.
  //
  // Information related to the MyKey feature
  std::shared_ptr<ISchemaItem> myKey_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_MyKey);CObjectSchemaItem::Members schema_members;

  schema_members["gps"] = CObjectSchemaItem::SMember(gps_SchemaItem, false);
  schema_members["speed"] = CObjectSchemaItem::SMember(speed_SchemaItem, false);
  schema_members["rpm"] = CObjectSchemaItem::SMember(rpm_SchemaItem, false);
  schema_members["fuelLevel"] = CObjectSchemaItem::SMember(fuelLevel_SchemaItem, false);
  schema_members["fuelLevel_State"] = CObjectSchemaItem::SMember(fuelLevel_State_SchemaItem, false);
  schema_members["instantFuelConsumption"] = CObjectSchemaItem::SMember(instantFuelConsumption_SchemaItem, false);
  schema_members["fuelRange"] = CObjectSchemaItem::SMember(fuelRange_SchemaItem, false);
  schema_members["externalTemperature"] = CObjectSchemaItem::SMember(externalTemperature_SchemaItem, false);
  schema_members["turnSignal"] = CObjectSchemaItem::SMember(turnSignal_SchemaItem, false);
  schema_members["vin"] = CObjectSchemaItem::SMember(vin_SchemaItem, false);
  schema_members["prndl"] = CObjectSchemaItem::SMember(prndl_SchemaItem, false);
  schema_members["tirePressure"] = CObjectSchemaItem::SMember(tirePressure_SchemaItem, false);
  schema_members["odometer"] = CObjectSchemaItem::SMember(odometer_SchemaItem, false);
  schema_members["beltStatus"] = CObjectSchemaItem::SMember(beltStatus_SchemaItem, false);
  schema_members["electronicParkBrakeStatus"] = CObjectSchemaItem::SMember(electronicParkBrakeStatus_SchemaItem, false);
  schema_members["bodyInformation"] = CObjectSchemaItem::SMember(bodyInformation_SchemaItem, false);
  schema_members["deviceStatus"] = CObjectSchemaItem::SMember(deviceStatus_SchemaItem, false);
  schema_members["driverBraking"] = CObjectSchemaItem::SMember(driverBraking_SchemaItem, false);
  schema_members["wiperStatus"] = CObjectSchemaItem::SMember(wiperStatus_SchemaItem, false);
  schema_members["headLampStatus"] = CObjectSchemaItem::SMember(headLampStatus_SchemaItem, false);
  schema_members["engineTorque"] = CObjectSchemaItem::SMember(engineTorque_SchemaItem, false);
  schema_members["accPedalPosition"] = CObjectSchemaItem::SMember(accPedalPosition_SchemaItem, false);
  schema_members["steeringWheelAngle"] = CObjectSchemaItem::SMember(steeringWheelAngle_SchemaItem, false);
  schema_members["cloudAppVehicleID"] = CObjectSchemaItem::SMember(cloudAppVehicleID_SchemaItem, false);
  schema_members["eCallInfo"] = CObjectSchemaItem::SMember(eCallInfo_SchemaItem, false);
  schema_members["airbagStatus"] = CObjectSchemaItem::SMember(airbagStatus_SchemaItem, false);
  schema_members["emergencyEvent"] = CObjectSchemaItem::SMember(emergencyEvent_SchemaItem, false);
  schema_members["clusterModeStatus"] = CObjectSchemaItem::SMember(clusterModeStatus_SchemaItem, false);
  schema_members["myKey"] = CObjectSchemaItem::SMember(myKey_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_ActivateApp_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter appID.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_ActivateApp_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_AppPriority::eType> Common_AppPriority_all_enum_values;
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::EMERGENCY);
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::NAVIGATION);
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::VOICE_COMMUNICATION);
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::COMMUNICATION);
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::NORMAL);
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::NONE);

  // Function parameter isSDLAllowed.
  std::shared_ptr<ISchemaItem> isSDLAllowed_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter device.
  //
  // If isSDLAllowed is false, consent for sending PT through specified device is required.
  std::shared_ptr<ISchemaItem> device_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DeviceInfo);

  // Function parameter isPermissionsConsentNeeded.
  std::shared_ptr<ISchemaItem> isPermissionsConsentNeeded_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter isAppPermissionsRevoked.
  std::shared_ptr<ISchemaItem> isAppPermissionsRevoked_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter appRevokedPermissions.
  //
  // If app permissions were reduced (isAppPermissionsRevoked == true), then this array specifies list of removed permissions. 
  std::shared_ptr<ISchemaItem> appRevokedPermissions_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_PermissionItem), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter isAppRevoked.
  std::shared_ptr<ISchemaItem> isAppRevoked_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter priority.
  //
  // Send to HMI so that it can coordinate order of requests/notifications correspondingly.
  std::shared_ptr<ISchemaItem> priority_SchemaItem = TEnumSchemaItem<Common_AppPriority::eType>::create(Common_AppPriority_all_enum_values, TSchemaItemParameter<Common_AppPriority::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["isSDLAllowed"] = CObjectSchemaItem::SMember(isSDLAllowed_SchemaItem, true);
  schema_members["device"] = CObjectSchemaItem::SMember(device_SchemaItem, false);
  schema_members["isPermissionsConsentNeeded"] = CObjectSchemaItem::SMember(isPermissionsConsentNeeded_SchemaItem, true);
  schema_members["isAppPermissionsRevoked"] = CObjectSchemaItem::SMember(isAppPermissionsRevoked_SchemaItem, true);
  schema_members["appRevokedPermissions"] = CObjectSchemaItem::SMember(appRevokedPermissions_SchemaItem, false);
  schema_members["isAppRevoked"] = CObjectSchemaItem::SMember(isAppRevoked_SchemaItem, true);
  schema_members["priority"] = CObjectSchemaItem::SMember(priority_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_GetUserFriendlyMessage_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_Language::eType> Common_Language_all_enum_values;
  Common_Language_all_enum_values.insert(Common_Language::EN_US);
  Common_Language_all_enum_values.insert(Common_Language::ES_MX);
  Common_Language_all_enum_values.insert(Common_Language::FR_CA);
  Common_Language_all_enum_values.insert(Common_Language::DE_DE);
  Common_Language_all_enum_values.insert(Common_Language::ES_ES);
  Common_Language_all_enum_values.insert(Common_Language::EN_GB);
  Common_Language_all_enum_values.insert(Common_Language::RU_RU);
  Common_Language_all_enum_values.insert(Common_Language::TR_TR);
  Common_Language_all_enum_values.insert(Common_Language::PL_PL);
  Common_Language_all_enum_values.insert(Common_Language::FR_FR);
  Common_Language_all_enum_values.insert(Common_Language::IT_IT);
  Common_Language_all_enum_values.insert(Common_Language::SV_SE);
  Common_Language_all_enum_values.insert(Common_Language::PT_PT);
  Common_Language_all_enum_values.insert(Common_Language::NL_NL);
  Common_Language_all_enum_values.insert(Common_Language::EN_AU);
  Common_Language_all_enum_values.insert(Common_Language::ZH_CN);
  Common_Language_all_enum_values.insert(Common_Language::ZH_TW);
  Common_Language_all_enum_values.insert(Common_Language::JA_JP);
  Common_Language_all_enum_values.insert(Common_Language::AR_SA);
  Common_Language_all_enum_values.insert(Common_Language::KO_KR);
  Common_Language_all_enum_values.insert(Common_Language::PT_BR);
  Common_Language_all_enum_values.insert(Common_Language::CS_CZ);
  Common_Language_all_enum_values.insert(Common_Language::DA_DK);
  Common_Language_all_enum_values.insert(Common_Language::NO_NO);
  Common_Language_all_enum_values.insert(Common_Language::NL_BE);
  Common_Language_all_enum_values.insert(Common_Language::EL_GR);
  Common_Language_all_enum_values.insert(Common_Language::HU_HU);
  Common_Language_all_enum_values.insert(Common_Language::FI_FI);
  Common_Language_all_enum_values.insert(Common_Language::SK_SK);
  Common_Language_all_enum_values.insert(Common_Language::EN_IN);
  Common_Language_all_enum_values.insert(Common_Language::TH_TH);
  Common_Language_all_enum_values.insert(Common_Language::EN_SA);
  Common_Language_all_enum_values.insert(Common_Language::HE_IL);
  Common_Language_all_enum_values.insert(Common_Language::RO_RO);
  Common_Language_all_enum_values.insert(Common_Language::UK_UA);
  Common_Language_all_enum_values.insert(Common_Language::ID_ID);
  Common_Language_all_enum_values.insert(Common_Language::VI_VN);
  Common_Language_all_enum_values.insert(Common_Language::MS_MY);
  Common_Language_all_enum_values.insert(Common_Language::HI_IN);

  // Function parameter messageCodes.
  //
  // Id of message to be received according to Policy Table i.e. StatusNeeded, Notifications, DrivingCharacteristics etc.
  std::shared_ptr<ISchemaItem> messageCodes_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter language.
  //
  // Optional parameter if HMI wants message in some other language then its current one already known to SDL.
  std::shared_ptr<ISchemaItem> language_SchemaItem = TEnumSchemaItem<Common_Language::eType>::create(Common_Language_all_enum_values, TSchemaItemParameter<Common_Language::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["messageCodes"] = CObjectSchemaItem::SMember(messageCodes_SchemaItem, true);
  schema_members["language"] = CObjectSchemaItem::SMember(language_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_GetUserFriendlyMessage_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter messages.
  //
  // If no message was found in PT for specified message code and for HMI current or specified language, this parameter will be omitted.
  std::shared_ptr<ISchemaItem> messages_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_UserFriendlyMessage), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["messages"] = CObjectSchemaItem::SMember(messages_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_OnAllowSDLFunctionality_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_ConsentSource::eType> Common_ConsentSource_all_enum_values;
  Common_ConsentSource_all_enum_values.insert(Common_ConsentSource::GUI);
  Common_ConsentSource_all_enum_values.insert(Common_ConsentSource::VUI);

  // Function parameter device.
  //
  // If no device is specified permission counts for SDL functionality in general.
  std::shared_ptr<ISchemaItem> device_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DeviceInfo);

  // Function parameter allowed.
  //
  // Must be true if allowed
  std::shared_ptr<ISchemaItem> allowed_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter source.
  std::shared_ptr<ISchemaItem> source_SchemaItem = TEnumSchemaItem<Common_ConsentSource::eType>::create(Common_ConsentSource_all_enum_values, TSchemaItemParameter<Common_ConsentSource::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["device"] = CObjectSchemaItem::SMember(device_SchemaItem, false);
  schema_members["allowed"] = CObjectSchemaItem::SMember(allowed_SchemaItem, true);
  schema_members["source"] = CObjectSchemaItem::SMember(source_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_OnReceivedPolicyUpdate_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter policyfile.
  //
  // Location of decrypted policy table Json file on target
  std::shared_ptr<ISchemaItem> policyfile_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(255), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["policyfile"] = CObjectSchemaItem::SMember(policyfile_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_OnPolicyUpdate_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_GetListOfPermissions_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter appID.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_GetListOfPermissions_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter allowedFunctions.
  //
  // If no permissions were specified for application the array will come empty.
  std::shared_ptr<ISchemaItem> allowedFunctions_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_PermissionItem), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));

  // Function parameter externalConsentStatus.
  //
  // External User Consent Settings (defined by entityType and entityID) status: enabled/disabled. If empty array is returned, SDL does not have any stored status.
  std::shared_ptr<ISchemaItem> externalConsentStatus_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ExternalConsentStatus), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["allowedFunctions"] = CObjectSchemaItem::SMember(allowedFunctions_SchemaItem, true);
  schema_members["externalConsentStatus"] = CObjectSchemaItem::SMember(externalConsentStatus_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_OnAppPermissionConsent_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_ConsentSource::eType> Common_ConsentSource_all_enum_values;
  Common_ConsentSource_all_enum_values.insert(Common_ConsentSource::GUI);
  Common_ConsentSource_all_enum_values.insert(Common_ConsentSource::VUI);

  // Function parameter appID.
  //
  // Information about the application. See HMIApplication. If omitted - allow/disallow all applications 
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Function parameter consentedFunctions.
  std::shared_ptr<ISchemaItem> consentedFunctions_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_PermissionItem), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter externalConsentStatus.
  std::shared_ptr<ISchemaItem> externalConsentStatus_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ExternalConsentStatus), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter source.
  std::shared_ptr<ISchemaItem> source_SchemaItem = TEnumSchemaItem<Common_ConsentSource::eType>::create(Common_ConsentSource_all_enum_values, TSchemaItemParameter<Common_ConsentSource::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, false);
  schema_members["consentedFunctions"] = CObjectSchemaItem::SMember(consentedFunctions_SchemaItem, false);
  schema_members["externalConsentStatus"] = CObjectSchemaItem::SMember(externalConsentStatus_SchemaItem, false);
  schema_members["source"] = CObjectSchemaItem::SMember(source_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_OnAppPermissionChanged_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_AppPriority::eType> Common_AppPriority_all_enum_values;
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::EMERGENCY);
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::NAVIGATION);
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::VOICE_COMMUNICATION);
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::COMMUNICATION);
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::NORMAL);
  Common_AppPriority_all_enum_values.insert(Common_AppPriority::NONE);

  std::set<Common_RequestType::eType> Common_RequestType_all_enum_values;
  Common_RequestType_all_enum_values.insert(Common_RequestType::HTTP);
  Common_RequestType_all_enum_values.insert(Common_RequestType::FILE_RESUME);
  Common_RequestType_all_enum_values.insert(Common_RequestType::AUTH_REQUEST);
  Common_RequestType_all_enum_values.insert(Common_RequestType::AUTH_CHALLENGE);
  Common_RequestType_all_enum_values.insert(Common_RequestType::AUTH_ACK);
  Common_RequestType_all_enum_values.insert(Common_RequestType::PROPRIETARY);
  Common_RequestType_all_enum_values.insert(Common_RequestType::QUERY_APPS);
  Common_RequestType_all_enum_values.insert(Common_RequestType::LAUNCH_APP);
  Common_RequestType_all_enum_values.insert(Common_RequestType::LOCK_SCREEN_ICON_URL);
  Common_RequestType_all_enum_values.insert(Common_RequestType::TRAFFIC_MESSAGE_CHANNEL);
  Common_RequestType_all_enum_values.insert(Common_RequestType::DRIVER_PROFILE);
  Common_RequestType_all_enum_values.insert(Common_RequestType::VOICE_SEARCH);
  Common_RequestType_all_enum_values.insert(Common_RequestType::NAVIGATION);
  Common_RequestType_all_enum_values.insert(Common_RequestType::PHONE);
  Common_RequestType_all_enum_values.insert(Common_RequestType::CLIMATE);
  Common_RequestType_all_enum_values.insert(Common_RequestType::SETTINGS);
  Common_RequestType_all_enum_values.insert(Common_RequestType::VEHICLE_DIAGNOSTICS);
  Common_RequestType_all_enum_values.insert(Common_RequestType::EMERGENCY);
  Common_RequestType_all_enum_values.insert(Common_RequestType::MEDIA);
  Common_RequestType_all_enum_values.insert(Common_RequestType::FOTA);
  Common_RequestType_all_enum_values.insert(Common_RequestType::OEM_SPECIFIC);
  Common_RequestType_all_enum_values.insert(Common_RequestType::ICON_URL);

  // Function parameter appID.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Function parameter isAppPermissionsRevoked.
  std::shared_ptr<ISchemaItem> isAppPermissionsRevoked_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter appRevokedPermissions.
  //
  // If app permissions were reduced (isAppPermissionsRevoked == true), then this array specifies list of removed permissions. 
  std::shared_ptr<ISchemaItem> appRevokedPermissions_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_PermissionItem), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter appRevoked.
  //
  // If present then specified application was prohibited to used with Sync.
  std::shared_ptr<ISchemaItem> appRevoked_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter appPermissionsConsentNeeded.
  //
  // If present specifies that permissions were added to application that require User Consent, then HMI can send GetListOfPermissions request to obtain list of permissions.
  std::shared_ptr<ISchemaItem> appPermissionsConsentNeeded_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter appUnauthorized.
  //
  // When present and set to true (should be if present) then this means that application was not authorized (nickname check failed.)
  std::shared_ptr<ISchemaItem> appUnauthorized_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter priority.
  //
  // Send to HMI so that it can coordinate order of requests/notifications correspondingly.
  std::shared_ptr<ISchemaItem> priority_SchemaItem = TEnumSchemaItem<Common_AppPriority::eType>::create(Common_AppPriority_all_enum_values, TSchemaItemParameter<Common_AppPriority::eType>());

  // Function parameter requestType.
  //
  // The list of SystemRequest's RequestTypes allowed by policies for the named application (the app's SystemRequest sent with RequestType           out of this list will get 'disallowed' response from SDL).
  //         If SDL sends an empty array - any RequestType is allowed for this app.
  //         If SDL omits this parameter - nothing is changed for RequestType in the policies
  //       
  std::shared_ptr<ISchemaItem> requestType_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<Common_RequestType::eType>::create(Common_RequestType_all_enum_values, TSchemaItemParameter<Common_RequestType::eType>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));

  // Function parameter requestSubType.
  //
  // 
  //               The list of SystemRequest's requestSubTypes allowed by policies for the named application.
  //               If the app sends a requestSubType which is not specified in this list, then that request should be rejected.
  //               An empty array signifies that any value of requestSubType is allowed for this app.
  //               If this parameter is omitted, then a request with any value of requestSubType is now allowed for this app
  //           
  std::shared_ptr<ISchemaItem> requestSubType_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);
  schema_members["isAppPermissionsRevoked"] = CObjectSchemaItem::SMember(isAppPermissionsRevoked_SchemaItem, false);
  schema_members["appRevokedPermissions"] = CObjectSchemaItem::SMember(appRevokedPermissions_SchemaItem, false);
  schema_members["appRevoked"] = CObjectSchemaItem::SMember(appRevoked_SchemaItem, false);
  schema_members["appPermissionsConsentNeeded"] = CObjectSchemaItem::SMember(appPermissionsConsentNeeded_SchemaItem, false);
  schema_members["appUnauthorized"] = CObjectSchemaItem::SMember(appUnauthorized_SchemaItem, false);
  schema_members["priority"] = CObjectSchemaItem::SMember(priority_SchemaItem, false);
  schema_members["requestType"] = CObjectSchemaItem::SMember(requestType_SchemaItem, false);
  schema_members["requestSubType"] = CObjectSchemaItem::SMember(requestSubType_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_OnSDLConsentNeeded_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter device.
  std::shared_ptr<ISchemaItem> device_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DeviceInfo);CObjectSchemaItem::Members schema_members;

  schema_members["device"] = CObjectSchemaItem::SMember(device_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_UpdateSDL_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_UpdateSDL_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_UpdateResult::eType> Common_UpdateResult_all_enum_values;
  Common_UpdateResult_all_enum_values.insert(Common_UpdateResult::UP_TO_DATE);
  Common_UpdateResult_all_enum_values.insert(Common_UpdateResult::UPDATING);
  Common_UpdateResult_all_enum_values.insert(Common_UpdateResult::UPDATE_NEEDED);

  // Function parameter result.
  std::shared_ptr<ISchemaItem> result_SchemaItem = TEnumSchemaItem<Common_UpdateResult::eType>::create(Common_UpdateResult_all_enum_values, TSchemaItemParameter<Common_UpdateResult::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["result"] = CObjectSchemaItem::SMember(result_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_GetStatusUpdate_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_GetStatusUpdate_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_UpdateResult::eType> Common_UpdateResult_all_enum_values;
  Common_UpdateResult_all_enum_values.insert(Common_UpdateResult::UP_TO_DATE);
  Common_UpdateResult_all_enum_values.insert(Common_UpdateResult::UPDATING);
  Common_UpdateResult_all_enum_values.insert(Common_UpdateResult::UPDATE_NEEDED);

  // Function parameter status.
  std::shared_ptr<ISchemaItem> status_SchemaItem = TEnumSchemaItem<Common_UpdateResult::eType>::create(Common_UpdateResult_all_enum_values, TSchemaItemParameter<Common_UpdateResult::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["status"] = CObjectSchemaItem::SMember(status_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_OnStatusUpdate_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_UpdateResult::eType> Common_UpdateResult_all_enum_values;
  Common_UpdateResult_all_enum_values.insert(Common_UpdateResult::UP_TO_DATE);
  Common_UpdateResult_all_enum_values.insert(Common_UpdateResult::UPDATING);
  Common_UpdateResult_all_enum_values.insert(Common_UpdateResult::UPDATE_NEEDED);

  // Function parameter status.
  std::shared_ptr<ISchemaItem> status_SchemaItem = TEnumSchemaItem<Common_UpdateResult::eType>::create(Common_UpdateResult_all_enum_values, TSchemaItemParameter<Common_UpdateResult::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["status"] = CObjectSchemaItem::SMember(status_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_OnSystemError_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_SystemError::eType> Common_SystemError_all_enum_values;
  Common_SystemError_all_enum_values.insert(Common_SystemError::SYNC_REBOOTED);
  Common_SystemError_all_enum_values.insert(Common_SystemError::SYNC_OUT_OF_MEMMORY);

  // Function parameter error.
  std::shared_ptr<ISchemaItem> error_SchemaItem = TEnumSchemaItem<Common_SystemError::eType>::create(Common_SystemError_all_enum_values, TSchemaItemParameter<Common_SystemError::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["error"] = CObjectSchemaItem::SMember(error_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_AddStatisticsInfo_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_StatisticsType::eType> Common_StatisticsType_all_enum_values;
  Common_StatisticsType_all_enum_values.insert(Common_StatisticsType::iAPP_BUFFER_FULL);

  // Function parameter statisticType.
  std::shared_ptr<ISchemaItem> statisticType_SchemaItem = TEnumSchemaItem<Common_StatisticsType::eType>::create(Common_StatisticsType_all_enum_values, TSchemaItemParameter<Common_StatisticsType::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["statisticType"] = CObjectSchemaItem::SMember(statisticType_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_GetURLS_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter service.
  std::shared_ptr<ISchemaItem> service_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["service"] = CObjectSchemaItem::SMember(service_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_GetURLS_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter urls.
  std::shared_ptr<ISchemaItem> urls_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ServiceInfo), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["urls"] = CObjectSchemaItem::SMember(urls_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_SDL_OnDeviceStateChanged_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_DeviceState::eType> Common_DeviceState_all_enum_values;
  Common_DeviceState_all_enum_values.insert(Common_DeviceState::UNKNOWN);
  Common_DeviceState_all_enum_values.insert(Common_DeviceState::UNPAIRED);

  // Function parameter deviceState.
  std::shared_ptr<ISchemaItem> deviceState_SchemaItem = TEnumSchemaItem<Common_DeviceState::eType>::create(Common_DeviceState_all_enum_values, TSchemaItemParameter<Common_DeviceState::eType>());

  // Function parameter deviceInternalId.
  std::shared_ptr<ISchemaItem> deviceInternalId_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter deviceId.
  std::shared_ptr<ISchemaItem> deviceId_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DeviceInfo);CObjectSchemaItem::Members schema_members;

  schema_members["deviceState"] = CObjectSchemaItem::SMember(deviceState_SchemaItem, true);
  schema_members["deviceInternalId"] = CObjectSchemaItem::SMember(deviceInternalId_SchemaItem, true);
  schema_members["deviceId"] = CObjectSchemaItem::SMember(deviceId_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_RC_IsReady_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_RC_IsReady_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter available.
  //
  // Must be true if vehicle RC modules are present and ready to communicate with SDL.
  std::shared_ptr<ISchemaItem> available_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["available"] = CObjectSchemaItem::SMember(available_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_RC_GetCapabilities_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_RC_GetCapabilities_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter remoteControlCapability.
  //
  // See RemoteControlCapabilities, all available RC modules and buttons shall be returned.
  std::shared_ptr<ISchemaItem> remoteControlCapability_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_RemoteControlCapabilities);CObjectSchemaItem::Members schema_members;

  schema_members["remoteControlCapability"] = CObjectSchemaItem::SMember(remoteControlCapability_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_RC_SetInteriorVehicleData_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter moduleData.
  //
  // The module type and data to set
  std::shared_ptr<ISchemaItem> moduleData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ModuleData);

  // Function parameter appID.
  //
  // Internal SDL-assigned ID of the related application
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["moduleData"] = CObjectSchemaItem::SMember(moduleData_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_RC_SetInteriorVehicleData_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter moduleData.
  std::shared_ptr<ISchemaItem> moduleData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ModuleData);CObjectSchemaItem::Members schema_members;

  schema_members["moduleData"] = CObjectSchemaItem::SMember(moduleData_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_RC_GetInteriorVehicleData_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_ModuleType::eType> Common_ModuleType_all_enum_values;
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::CLIMATE);
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::RADIO);
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::SEAT);
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::AUDIO);
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::LIGHT);
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::HMI_SETTINGS);

  // Function parameter moduleType.
  //
  // The module data to retrieve from the vehicle for that type
  std::shared_ptr<ISchemaItem> moduleType_SchemaItem = TEnumSchemaItem<Common_ModuleType::eType>::create(Common_ModuleType_all_enum_values, TSchemaItemParameter<Common_ModuleType::eType>());

  // Function parameter subscribe.
  //
  // If subscribe is true, the head unit will send OnInteriorVehicleData notifications for the module type
  std::shared_ptr<ISchemaItem> subscribe_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["moduleType"] = CObjectSchemaItem::SMember(moduleType_SchemaItem, true);
  schema_members["subscribe"] = CObjectSchemaItem::SMember(subscribe_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_RC_GetInteriorVehicleData_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter moduleData.
  std::shared_ptr<ISchemaItem> moduleData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ModuleData);

  // Function parameter isSubscribed.
  //
  // Is a conditional-mandatory parameter: must be returned in case "subscribe" parameter was present in the related request.
  //     if "true" - the "moduleType" from request is successfully subscribed and  the head unit will send OnInteriorVehicleData notifications for the moduleDescription.
  //     if "false" - the "moduleType" from request is either unsubscribed or failed to subscribe.
  std::shared_ptr<ISchemaItem> isSubscribed_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["moduleData"] = CObjectSchemaItem::SMember(moduleData_SchemaItem, true);
  schema_members["isSubscribed"] = CObjectSchemaItem::SMember(isSubscribed_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_RC_GetInteriorVehicleDataConsent_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_ModuleType::eType> Common_ModuleType_all_enum_values;
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::CLIMATE);
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::RADIO);
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::SEAT);
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::AUDIO);
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::LIGHT);
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::HMI_SETTINGS);

  // Function parameter moduleType.
  //
  // The module type that the app requests to control.
  std::shared_ptr<ISchemaItem> moduleType_SchemaItem = TEnumSchemaItem<Common_ModuleType::eType>::create(Common_ModuleType_all_enum_values, TSchemaItemParameter<Common_ModuleType::eType>());

  // Function parameter appID.
  //
  // ID of the application that triggers the permission prompt.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["moduleType"] = CObjectSchemaItem::SMember(moduleType_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_RC_GetInteriorVehicleDataConsent_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter allowed.
  //
  // "true" - if the driver grants the permission for controlling to the named app;
  //       "false" - in case the driver denies the permission for controlling to the named app.
  std::shared_ptr<ISchemaItem> allowed_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["allowed"] = CObjectSchemaItem::SMember(allowed_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_RC_OnInteriorVehicleData_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter moduleData.
  std::shared_ptr<ISchemaItem> moduleData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ModuleData);CObjectSchemaItem::Members schema_members;

  schema_members["moduleData"] = CObjectSchemaItem::SMember(moduleData_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_RC_OnRemoteControlSettings_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Common_RCAccessMode::eType> Common_RCAccessMode_all_enum_values;
  Common_RCAccessMode_all_enum_values.insert(Common_RCAccessMode::AUTO_ALLOW);
  Common_RCAccessMode_all_enum_values.insert(Common_RCAccessMode::AUTO_DENY);
  Common_RCAccessMode_all_enum_values.insert(Common_RCAccessMode::ASK_DRIVER);

  // Function parameter allowed.
  //
  // If "true" - RC is allowed; if "false" - RC is disallowed.
  std::shared_ptr<ISchemaItem> allowed_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter accessMode.
  //
  // The remote control access mode specified by the driver via HMI.
  std::shared_ptr<ISchemaItem> accessMode_SchemaItem = TEnumSchemaItem<Common_RCAccessMode::eType>::create(Common_RCAccessMode_all_enum_values, TSchemaItemParameter<Common_RCAccessMode::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["allowed"] = CObjectSchemaItem::SMember(allowed_SchemaItem, false);
  schema_members["accessMode"] = CObjectSchemaItem::SMember(accessMode_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_RC_OnRCStatus_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter appID.
  //
  // ID of selected application.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Function parameter allocatedModules.
  //
  // Contains a list (zero or more) of module types that are allocated to the application.
  std::shared_ptr<ISchemaItem> allocatedModules_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ModuleData), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));

  // Function parameter freeModules.
  //
  // Contains a list (zero or more) of module types that are free to access for the application.
  std::shared_ptr<ISchemaItem> freeModules_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ModuleData), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);
  schema_members["allocatedModules"] = CObjectSchemaItem::SMember(allocatedModules_SchemaItem, true);
  schema_members["freeModules"] = CObjectSchemaItem::SMember(freeModules_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_AppService_PublishAppService_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter appServiceManifest.
  //
  //  The manifest of the service that wishes to be published.
  std::shared_ptr<ISchemaItem> appServiceManifest_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_AppServiceManifest);CObjectSchemaItem::Members schema_members;

  schema_members["appServiceManifest"] = CObjectSchemaItem::SMember(appServiceManifest_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_AppService_PublishAppService_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter appServiceRecord.
  //
  //  If the request was successful, this object will be the current status of the service record for the published service. This will include the Core supplied service ID.
  std::shared_ptr<ISchemaItem> appServiceRecord_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_AppServiceRecord);CObjectSchemaItem::Members schema_members;

  schema_members["appServiceRecord"] = CObjectSchemaItem::SMember(appServiceRecord_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_AppService_OnAppServiceData_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter serviceData.
  std::shared_ptr<ISchemaItem> serviceData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_AppServiceData);CObjectSchemaItem::Members schema_members;

  schema_members["serviceData"] = CObjectSchemaItem::SMember(serviceData_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_AppService_GetAppServiceData_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter serviceType.
  //
  // The type of service that is to be offered by this app. See AppServiceType for known enum equivalent types. Parameter is a string to allow for new service types to be used by apps on older versions of SDL Core.
  std::shared_ptr<ISchemaItem> serviceType_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Function parameter subscribe.
  //
  //  If true, the consumer is requesting to subscribe to all future updates from the service publisher. If false, the consumer doesn't wish to subscribe and should be unsubscribed if it was previously subscribed.
  std::shared_ptr<ISchemaItem> subscribe_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["serviceType"] = CObjectSchemaItem::SMember(serviceType_SchemaItem, true);
  schema_members["subscribe"] = CObjectSchemaItem::SMember(subscribe_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_AppService_GetAppServiceData_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter serviceData.
  std::shared_ptr<ISchemaItem> serviceData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_AppServiceData);CObjectSchemaItem::Members schema_members;

  schema_members["serviceData"] = CObjectSchemaItem::SMember(serviceData_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_AppService_PerformAppServiceInteraction_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter serviceUri.
  //
  // Fully qualified URI based on a predetermined scheme provided by the app service. SDL makes no guarantee that this URI is correct.
  std::shared_ptr<ISchemaItem> serviceUri_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Function parameter serviceID.
  //
  // The service ID that the app consumer wishes to send this URI.
  std::shared_ptr<ISchemaItem> serviceID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Function parameter originApp.
  //
  // This string is the appID of the app requesting the app service provider take the specific action. This will automatically be set by SDL Core in requests originating from the HMI
  std::shared_ptr<ISchemaItem> originApp_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Function parameter requestServiceActive.
  //
  // This flag signals the requesting consumer would like this service to become the active primary service of the destination's type.
  std::shared_ptr<ISchemaItem> requestServiceActive_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["serviceUri"] = CObjectSchemaItem::SMember(serviceUri_SchemaItem, true);
  schema_members["serviceID"] = CObjectSchemaItem::SMember(serviceID_SchemaItem, true);
  schema_members["originApp"] = CObjectSchemaItem::SMember(originApp_SchemaItem, false);
  schema_members["requestServiceActive"] = CObjectSchemaItem::SMember(requestServiceActive_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_AppService_PerformAppServiceInteraction_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter serviceSpecificResult.
  //
  // The service can provide specific result strings to the consumer through this param.
  std::shared_ptr<ISchemaItem> serviceSpecificResult_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["serviceSpecificResult"] = CObjectSchemaItem::SMember(serviceSpecificResult_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_AppService_GetAppServiceRecords_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter serviceType.
  //
  // If included, only service records of supplied type will be returned in response. If not included, all service records for all types will be returned. See Common.AppServiceType.
  std::shared_ptr<ISchemaItem> serviceType_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["serviceType"] = CObjectSchemaItem::SMember(serviceType_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_AppService_GetAppServiceRecords_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter serviceRecords.
  //
  // All app service records of requested type.
  std::shared_ptr<ISchemaItem> serviceRecords_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_AppServiceRecord), TSchemaItemParameter<size_t>(), TSchemaItemParameter<size_t>());CObjectSchemaItem::Members schema_members;

  schema_members["serviceRecords"] = CObjectSchemaItem::SMember(serviceRecords_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_AppService_AppServiceActivation_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter serviceID.
  //
  // The ID of the service that should have an activation event take place on
  std::shared_ptr<ISchemaItem> serviceID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Function parameter activate.
  //
  // True if the service is to be activated. False if the app is to be deactivated
  std::shared_ptr<ISchemaItem> activate_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter setAsDefault.
  //
  // True if the service is to be the default service of this type. False if the app is not to be the default
  std::shared_ptr<ISchemaItem> setAsDefault_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["serviceID"] = CObjectSchemaItem::SMember(serviceID_SchemaItem, true);
  schema_members["activate"] = CObjectSchemaItem::SMember(activate_SchemaItem, true);
  schema_members["setAsDefault"] = CObjectSchemaItem::SMember(setAsDefault_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_AppService_AppServiceActivation_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter serviceID.
  //
  // The ID of the service that was requested to have an activation event take place
  std::shared_ptr<ISchemaItem> serviceID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Function parameter activate.
  //
  // True if the service was activated. False if the app was deactivated or unable to be activated
  std::shared_ptr<ISchemaItem> activate_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter setAsDefault.
  //
  // True if the service was set to the default service of this type. False if the app was not to be the default
  std::shared_ptr<ISchemaItem> setAsDefault_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["serviceID"] = CObjectSchemaItem::SMember(serviceID_SchemaItem, true);
  schema_members["activate"] = CObjectSchemaItem::SMember(activate_SchemaItem, true);
  schema_members["setAsDefault"] = CObjectSchemaItem::SMember(setAsDefault_SchemaItem, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_AppService_GetActiveServiceConsent_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter serviceID.
  //
  // The ID of the service to be activated
  std::shared_ptr<ISchemaItem> serviceID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["serviceID"] = CObjectSchemaItem::SMember(serviceID_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema hmi_apis::HMI_API::InitFunction_AppService_GetActiveServiceConsent_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter activate.
  //
  // 
  //                 "true" - If the driver grants permission for the app service to take over as the active service.
  //                 "false" - If the driver denies permission for the app service to take over as the active service.
  //             
  std::shared_ptr<ISchemaItem> activate_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["activate"] = CObjectSchemaItem::SMember(activate_SchemaItem, true);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::kCode] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

//----------- Structs schema items initialization ------------

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_Coordinate(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member latitudeDegrees.
  //
  // Latitude of the location.
  std::shared_ptr<ISchemaItem> latitudeDegrees_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-90.0), TSchemaItemParameter<double>(90.0), TSchemaItemParameter<double>());

  // Struct member longitudeDegrees.
  //
  // Longitude of the location.
  std::shared_ptr<ISchemaItem> longitudeDegrees_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-180.0), TSchemaItemParameter<double>(180.0), TSchemaItemParameter<double>());CObjectSchemaItem::Members schema_members;

  schema_members["latitudeDegrees"] = CObjectSchemaItem::SMember(latitudeDegrees_SchemaItem, true);
  schema_members["longitudeDegrees"] = CObjectSchemaItem::SMember(longitudeDegrees_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_FuelRange(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_FuelType::eType> Common_FuelType_all_enum_values;
  Common_FuelType_all_enum_values.insert(Common_FuelType::GASOLINE);
  Common_FuelType_all_enum_values.insert(Common_FuelType::DIESEL);
  Common_FuelType_all_enum_values.insert(Common_FuelType::CNG);
  Common_FuelType_all_enum_values.insert(Common_FuelType::LPG);
  Common_FuelType_all_enum_values.insert(Common_FuelType::HYDROGEN);
  Common_FuelType_all_enum_values.insert(Common_FuelType::BATTERY);

  // Struct member type.
  std::shared_ptr<ISchemaItem> type_SchemaItem = TEnumSchemaItem<Common_FuelType::eType>::create(Common_FuelType_all_enum_values, TSchemaItemParameter<Common_FuelType::eType>());

  // Struct member range.
  //
  // 
  //             The estimate range in KM the vehicle can travel based on fuel level and consumption.
  //         
  std::shared_ptr<ISchemaItem> range_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(10000.0), TSchemaItemParameter<double>());CObjectSchemaItem::Members schema_members;

  schema_members["type"] = CObjectSchemaItem::SMember(type_SchemaItem, false);
  schema_members["range"] = CObjectSchemaItem::SMember(range_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_UserFriendlyMessage(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member messageCode.
  std::shared_ptr<ISchemaItem> messageCode_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member ttsString.
  std::shared_ptr<ISchemaItem> ttsString_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member label.
  std::shared_ptr<ISchemaItem> label_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member line1.
  std::shared_ptr<ISchemaItem> line1_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member line2.
  std::shared_ptr<ISchemaItem> line2_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member textBody.
  std::shared_ptr<ISchemaItem> textBody_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["messageCode"] = CObjectSchemaItem::SMember(messageCode_SchemaItem, true);
  schema_members["ttsString"] = CObjectSchemaItem::SMember(ttsString_SchemaItem, false);
  schema_members["label"] = CObjectSchemaItem::SMember(label_SchemaItem, false);
  schema_members["line1"] = CObjectSchemaItem::SMember(line1_SchemaItem, false);
  schema_members["line2"] = CObjectSchemaItem::SMember(line2_SchemaItem, false);
  schema_members["textBody"] = CObjectSchemaItem::SMember(textBody_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_PermissionItem(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member name.
  //
  // Code of message of user-friendly text about functional group to be allowed/disallowed
  std::shared_ptr<ISchemaItem> name_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member id.
  //
  // Id of corresponding functional group, needed by SDL.
  std::shared_ptr<ISchemaItem> id_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member allowed.
  //
  // Specifies whether functionality was allowed/disallowed. If ommited - no information about User Consent is yet found for app.
  std::shared_ptr<ISchemaItem> allowed_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["name"] = CObjectSchemaItem::SMember(name_SchemaItem, true);
  schema_members["id"] = CObjectSchemaItem::SMember(id_SchemaItem, true);
  schema_members["allowed"] = CObjectSchemaItem::SMember(allowed_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_ServiceInfo(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member url.
  //
  // Get URL based on service type.
  std::shared_ptr<ISchemaItem> url_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member appID.
  //
  // ID of application that requested this RPC.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["url"] = CObjectSchemaItem::SMember(url_SchemaItem, true);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_ExternalConsentStatus(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_EntityStatus::eType> Common_EntityStatus_all_enum_values;
  Common_EntityStatus_all_enum_values.insert(Common_EntityStatus::ON);
  Common_EntityStatus_all_enum_values.insert(Common_EntityStatus::OFF);

  // Struct member entityType.
  //
  // The entityType which status is informed by "status" param.
  std::shared_ptr<ISchemaItem> entityType_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(128), TSchemaItemParameter<int32_t>());

  // Struct member entityID.
  //
  // The corresponding ID of entityType which status is informed by "status" param
  std::shared_ptr<ISchemaItem> entityID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(128), TSchemaItemParameter<int32_t>());

  // Struct member status.
  //
  // Status of the ExternalConsentStatus entity: "ON" or "OFF". 
  std::shared_ptr<ISchemaItem> status_SchemaItem = TEnumSchemaItem<Common_EntityStatus::eType>::create(Common_EntityStatus_all_enum_values, TSchemaItemParameter<Common_EntityStatus::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["entityType"] = CObjectSchemaItem::SMember(entityType_SchemaItem, true);
  schema_members["entityID"] = CObjectSchemaItem::SMember(entityID_SchemaItem, true);
  schema_members["status"] = CObjectSchemaItem::SMember(status_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_MassageModeData(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_MassageZone::eType> Common_MassageZone_all_enum_values;
  Common_MassageZone_all_enum_values.insert(Common_MassageZone::LUMBAR);
  Common_MassageZone_all_enum_values.insert(Common_MassageZone::SEAT_CUSHION);

  std::set<Common_MassageMode::eType> Common_MassageMode_all_enum_values;
  Common_MassageMode_all_enum_values.insert(Common_MassageMode::OFF);
  Common_MassageMode_all_enum_values.insert(Common_MassageMode::LOW);
  Common_MassageMode_all_enum_values.insert(Common_MassageMode::HIGH);

  // Struct member massageZone.
  std::shared_ptr<ISchemaItem> massageZone_SchemaItem = TEnumSchemaItem<Common_MassageZone::eType>::create(Common_MassageZone_all_enum_values, TSchemaItemParameter<Common_MassageZone::eType>());

  // Struct member massageMode.
  std::shared_ptr<ISchemaItem> massageMode_SchemaItem = TEnumSchemaItem<Common_MassageMode::eType>::create(Common_MassageMode_all_enum_values, TSchemaItemParameter<Common_MassageMode::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["massageZone"] = CObjectSchemaItem::SMember(massageZone_SchemaItem, true);
  schema_members["massageMode"] = CObjectSchemaItem::SMember(massageMode_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_MassageCushionFirmness(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_MassageCushion::eType> Common_MassageCushion_all_enum_values;
  Common_MassageCushion_all_enum_values.insert(Common_MassageCushion::TOP_LUMBAR);
  Common_MassageCushion_all_enum_values.insert(Common_MassageCushion::MIDDLE_LUMBAR);
  Common_MassageCushion_all_enum_values.insert(Common_MassageCushion::BOTTOM_LUMBAR);
  Common_MassageCushion_all_enum_values.insert(Common_MassageCushion::BACK_BOLSTERS);
  Common_MassageCushion_all_enum_values.insert(Common_MassageCushion::SEAT_BOLSTERS);

  // Struct member cushion.
  std::shared_ptr<ISchemaItem> cushion_SchemaItem = TEnumSchemaItem<Common_MassageCushion::eType>::create(Common_MassageCushion_all_enum_values, TSchemaItemParameter<Common_MassageCushion::eType>());

  // Struct member firmness.
  std::shared_ptr<ISchemaItem> firmness_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["cushion"] = CObjectSchemaItem::SMember(cushion_SchemaItem, true);
  schema_members["firmness"] = CObjectSchemaItem::SMember(firmness_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_SeatMemoryAction(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_SeatMemoryActionType::eType> Common_SeatMemoryActionType_all_enum_values;
  Common_SeatMemoryActionType_all_enum_values.insert(Common_SeatMemoryActionType::SAVE);
  Common_SeatMemoryActionType_all_enum_values.insert(Common_SeatMemoryActionType::RESTORE);
  Common_SeatMemoryActionType_all_enum_values.insert(Common_SeatMemoryActionType::NONE);

  // Struct member id.
  std::shared_ptr<ISchemaItem> id_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(10), TSchemaItemParameter<int32_t>());

  // Struct member label.
  std::shared_ptr<ISchemaItem> label_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Struct member action.
  std::shared_ptr<ISchemaItem> action_SchemaItem = TEnumSchemaItem<Common_SeatMemoryActionType::eType>::create(Common_SeatMemoryActionType_all_enum_values, TSchemaItemParameter<Common_SeatMemoryActionType::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["id"] = CObjectSchemaItem::SMember(id_SchemaItem, true);
  schema_members["label"] = CObjectSchemaItem::SMember(label_SchemaItem, false);
  schema_members["action"] = CObjectSchemaItem::SMember(action_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_SeatControlData(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_SupportedSeat::eType> Common_SupportedSeat_all_enum_values;
  Common_SupportedSeat_all_enum_values.insert(Common_SupportedSeat::DRIVER);
  Common_SupportedSeat_all_enum_values.insert(Common_SupportedSeat::FRONT_PASSENGER);

  // Struct member id.
  std::shared_ptr<ISchemaItem> id_SchemaItem = TEnumSchemaItem<Common_SupportedSeat::eType>::create(Common_SupportedSeat_all_enum_values, TSchemaItemParameter<Common_SupportedSeat::eType>());

  // Struct member heatingEnabled.
  std::shared_ptr<ISchemaItem> heatingEnabled_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member coolingEnabled.
  std::shared_ptr<ISchemaItem> coolingEnabled_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member heatingLevel.
  std::shared_ptr<ISchemaItem> heatingLevel_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member coolingLevel.
  std::shared_ptr<ISchemaItem> coolingLevel_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member horizontalPosition.
  std::shared_ptr<ISchemaItem> horizontalPosition_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member verticalPosition.
  std::shared_ptr<ISchemaItem> verticalPosition_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member frontVerticalPosition.
  std::shared_ptr<ISchemaItem> frontVerticalPosition_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member backVerticalPosition.
  std::shared_ptr<ISchemaItem> backVerticalPosition_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member backTiltAngle.
  std::shared_ptr<ISchemaItem> backTiltAngle_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member headSupportHorizontalPosition.
  std::shared_ptr<ISchemaItem> headSupportHorizontalPosition_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member headSupportVerticalPosition.
  std::shared_ptr<ISchemaItem> headSupportVerticalPosition_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member massageEnabled.
  std::shared_ptr<ISchemaItem> massageEnabled_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member massageMode.
  std::shared_ptr<ISchemaItem> massageMode_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_MassageModeData), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(2));

  // Struct member massageCushionFirmness.
  std::shared_ptr<ISchemaItem> massageCushionFirmness_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_MassageCushionFirmness), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(5));

  // Struct member memory.
  std::shared_ptr<ISchemaItem> memory_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SeatMemoryAction);CObjectSchemaItem::Members schema_members;

  schema_members["id"] = CObjectSchemaItem::SMember(id_SchemaItem, true);
  schema_members["heatingEnabled"] = CObjectSchemaItem::SMember(heatingEnabled_SchemaItem, false);
  schema_members["coolingEnabled"] = CObjectSchemaItem::SMember(coolingEnabled_SchemaItem, false);
  schema_members["heatingLevel"] = CObjectSchemaItem::SMember(heatingLevel_SchemaItem, false);
  schema_members["coolingLevel"] = CObjectSchemaItem::SMember(coolingLevel_SchemaItem, false);
  schema_members["horizontalPosition"] = CObjectSchemaItem::SMember(horizontalPosition_SchemaItem, false);
  schema_members["verticalPosition"] = CObjectSchemaItem::SMember(verticalPosition_SchemaItem, false);
  schema_members["frontVerticalPosition"] = CObjectSchemaItem::SMember(frontVerticalPosition_SchemaItem, false);
  schema_members["backVerticalPosition"] = CObjectSchemaItem::SMember(backVerticalPosition_SchemaItem, false);
  schema_members["backTiltAngle"] = CObjectSchemaItem::SMember(backTiltAngle_SchemaItem, false);
  schema_members["headSupportHorizontalPosition"] = CObjectSchemaItem::SMember(headSupportHorizontalPosition_SchemaItem, false);
  schema_members["headSupportVerticalPosition"] = CObjectSchemaItem::SMember(headSupportVerticalPosition_SchemaItem, false);
  schema_members["massageEnabled"] = CObjectSchemaItem::SMember(massageEnabled_SchemaItem, false);
  schema_members["massageMode"] = CObjectSchemaItem::SMember(massageMode_SchemaItem, false);
  schema_members["massageCushionFirmness"] = CObjectSchemaItem::SMember(massageCushionFirmness_SchemaItem, false);
  schema_members["memory"] = CObjectSchemaItem::SMember(memory_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_SeatControlCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member moduleName.
  //
  // 
  //         The short friendly name of the light control module.
  //         It should not be used to identify a module by mobile application.
  //         
  std::shared_ptr<ISchemaItem> moduleName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Struct member heatingEnabledAvailable.
  std::shared_ptr<ISchemaItem> heatingEnabledAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member coolingEnabledAvailable.
  std::shared_ptr<ISchemaItem> coolingEnabledAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member heatingLevelAvailable.
  std::shared_ptr<ISchemaItem> heatingLevelAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member coolingLevelAvailable.
  std::shared_ptr<ISchemaItem> coolingLevelAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member horizontalPositionAvailable.
  std::shared_ptr<ISchemaItem> horizontalPositionAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member verticalPositionAvailable.
  std::shared_ptr<ISchemaItem> verticalPositionAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member frontVerticalPositionAvailable.
  std::shared_ptr<ISchemaItem> frontVerticalPositionAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member backVerticalPositionAvailable.
  std::shared_ptr<ISchemaItem> backVerticalPositionAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member backTiltAngleAvailable.
  std::shared_ptr<ISchemaItem> backTiltAngleAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member headSupportHorizontalPositionAvailable.
  std::shared_ptr<ISchemaItem> headSupportHorizontalPositionAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member headSupportVerticalPositionAvailable.
  std::shared_ptr<ISchemaItem> headSupportVerticalPositionAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member massageEnabledAvailable.
  std::shared_ptr<ISchemaItem> massageEnabledAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member massageModeAvailable.
  std::shared_ptr<ISchemaItem> massageModeAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member massageCushionFirmnessAvailable.
  std::shared_ptr<ISchemaItem> massageCushionFirmnessAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member memoryAvailable.
  std::shared_ptr<ISchemaItem> memoryAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["moduleName"] = CObjectSchemaItem::SMember(moduleName_SchemaItem, true);
  schema_members["heatingEnabledAvailable"] = CObjectSchemaItem::SMember(heatingEnabledAvailable_SchemaItem, false);
  schema_members["coolingEnabledAvailable"] = CObjectSchemaItem::SMember(coolingEnabledAvailable_SchemaItem, false);
  schema_members["heatingLevelAvailable"] = CObjectSchemaItem::SMember(heatingLevelAvailable_SchemaItem, false);
  schema_members["coolingLevelAvailable"] = CObjectSchemaItem::SMember(coolingLevelAvailable_SchemaItem, false);
  schema_members["horizontalPositionAvailable"] = CObjectSchemaItem::SMember(horizontalPositionAvailable_SchemaItem, false);
  schema_members["verticalPositionAvailable"] = CObjectSchemaItem::SMember(verticalPositionAvailable_SchemaItem, false);
  schema_members["frontVerticalPositionAvailable"] = CObjectSchemaItem::SMember(frontVerticalPositionAvailable_SchemaItem, false);
  schema_members["backVerticalPositionAvailable"] = CObjectSchemaItem::SMember(backVerticalPositionAvailable_SchemaItem, false);
  schema_members["backTiltAngleAvailable"] = CObjectSchemaItem::SMember(backTiltAngleAvailable_SchemaItem, false);
  schema_members["headSupportHorizontalPositionAvailable"] = CObjectSchemaItem::SMember(headSupportHorizontalPositionAvailable_SchemaItem, false);
  schema_members["headSupportVerticalPositionAvailable"] = CObjectSchemaItem::SMember(headSupportVerticalPositionAvailable_SchemaItem, false);
  schema_members["massageEnabledAvailable"] = CObjectSchemaItem::SMember(massageEnabledAvailable_SchemaItem, false);
  schema_members["massageModeAvailable"] = CObjectSchemaItem::SMember(massageModeAvailable_SchemaItem, false);
  schema_members["massageCushionFirmnessAvailable"] = CObjectSchemaItem::SMember(massageCushionFirmnessAvailable_SchemaItem, false);
  schema_members["memoryAvailable"] = CObjectSchemaItem::SMember(memoryAvailable_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_RdsData(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member PS.
  //
  // Program Service Name
  std::shared_ptr<ISchemaItem> PS_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(8), TSchemaItemParameter<std::string>());

  // Struct member RT.
  //
  // Radio Text
  std::shared_ptr<ISchemaItem> RT_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(64), TSchemaItemParameter<std::string>());

  // Struct member CT.
  //
  // The clock text in UTC format as YYYY-MM-DDThh:mm:ss.sTZD
  std::shared_ptr<ISchemaItem> CT_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(24), TSchemaItemParameter<size_t>(24), TSchemaItemParameter<std::string>());

  // Struct member PI.
  //
  // Program Identification - the call sign for the radio station
  std::shared_ptr<ISchemaItem> PI_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(6), TSchemaItemParameter<std::string>());

  // Struct member PTY.
  //
  // The program type - The region should be used to differentiate between EU and North America program types
  std::shared_ptr<ISchemaItem> PTY_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(31), TSchemaItemParameter<int32_t>());

  // Struct member TP.
  //
  // Traffic Program Identification - Identifies a station that offers traffic
  std::shared_ptr<ISchemaItem> TP_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member TA.
  //
  // Traffic Announcement Identification - Indicates an ongoing traffic announcement
  std::shared_ptr<ISchemaItem> TA_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member REG.
  //
  // Region
  std::shared_ptr<ISchemaItem> REG_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["PS"] = CObjectSchemaItem::SMember(PS_SchemaItem, false);
  schema_members["RT"] = CObjectSchemaItem::SMember(RT_SchemaItem, false);
  schema_members["CT"] = CObjectSchemaItem::SMember(CT_SchemaItem, false);
  schema_members["PI"] = CObjectSchemaItem::SMember(PI_SchemaItem, false);
  schema_members["PTY"] = CObjectSchemaItem::SMember(PTY_SchemaItem, false);
  schema_members["TP"] = CObjectSchemaItem::SMember(TP_SchemaItem, false);
  schema_members["TA"] = CObjectSchemaItem::SMember(TA_SchemaItem, false);
  schema_members["REG"] = CObjectSchemaItem::SMember(REG_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_StationIDNumber(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member countryCode.
  //
  // Binary Representation of ITU Country Code. USA Code is 001.
  std::shared_ptr<ISchemaItem> countryCode_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(999), TSchemaItemParameter<int32_t>());

  // Struct member fccFacilityId.
  //
  // Binary representation  of unique facility ID assigned by the FCC; FCC controlled for U.S. territory
  std::shared_ptr<ISchemaItem> fccFacilityId_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(999999), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["countryCode"] = CObjectSchemaItem::SMember(countryCode_SchemaItem, false);
  schema_members["fccFacilityId"] = CObjectSchemaItem::SMember(fccFacilityId_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_GPSData(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_CompassDirection::eType> Common_CompassDirection_all_enum_values;
  Common_CompassDirection_all_enum_values.insert(Common_CompassDirection::NORTH);
  Common_CompassDirection_all_enum_values.insert(Common_CompassDirection::NORTHWEST);
  Common_CompassDirection_all_enum_values.insert(Common_CompassDirection::WEST);
  Common_CompassDirection_all_enum_values.insert(Common_CompassDirection::SOUTHWEST);
  Common_CompassDirection_all_enum_values.insert(Common_CompassDirection::SOUTH);
  Common_CompassDirection_all_enum_values.insert(Common_CompassDirection::SOUTHEAST);
  Common_CompassDirection_all_enum_values.insert(Common_CompassDirection::EAST);
  Common_CompassDirection_all_enum_values.insert(Common_CompassDirection::NORTHEAST);

  std::set<Common_Dimension::eType> Common_Dimension_all_enum_values;
  Common_Dimension_all_enum_values.insert(Common_Dimension::Dimension_NO_FIX);
  Common_Dimension_all_enum_values.insert(Common_Dimension::Dimension_2D);
  Common_Dimension_all_enum_values.insert(Common_Dimension::Dimension_3D);

  // Struct member longitudeDegrees.
  std::shared_ptr<ISchemaItem> longitudeDegrees_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-180.0), TSchemaItemParameter<double>(180.0), TSchemaItemParameter<double>());

  // Struct member latitudeDegrees.
  std::shared_ptr<ISchemaItem> latitudeDegrees_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-90.0), TSchemaItemParameter<double>(90.0), TSchemaItemParameter<double>());

  // Struct member utcYear.
  //
  // The current UTC year.
  std::shared_ptr<ISchemaItem> utcYear_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(2010), TSchemaItemParameter<int32_t>(2100), TSchemaItemParameter<int32_t>());

  // Struct member utcMonth.
  //
  // The current UTC month.
  std::shared_ptr<ISchemaItem> utcMonth_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(12), TSchemaItemParameter<int32_t>());

  // Struct member utcDay.
  //
  // The current UTC day.
  std::shared_ptr<ISchemaItem> utcDay_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(31), TSchemaItemParameter<int32_t>());

  // Struct member utcHours.
  //
  // The current UTC hour.
  std::shared_ptr<ISchemaItem> utcHours_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(23), TSchemaItemParameter<int32_t>());

  // Struct member utcMinutes.
  //
  // The current UTC minute.
  std::shared_ptr<ISchemaItem> utcMinutes_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(59), TSchemaItemParameter<int32_t>());

  // Struct member utcSeconds.
  //
  // The current UTC second.
  std::shared_ptr<ISchemaItem> utcSeconds_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(59), TSchemaItemParameter<int32_t>());

  // Struct member compassDirection.
  //
  // See CompassDirection.
  std::shared_ptr<ISchemaItem> compassDirection_SchemaItem = TEnumSchemaItem<Common_CompassDirection::eType>::create(Common_CompassDirection_all_enum_values, TSchemaItemParameter<Common_CompassDirection::eType>());

  // Struct member pdop.
  //
  // PDOP.
  std::shared_ptr<ISchemaItem> pdop_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(1000.0), TSchemaItemParameter<double>());

  // Struct member hdop.
  //
  // HDOP.
  std::shared_ptr<ISchemaItem> hdop_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(1000.0), TSchemaItemParameter<double>());

  // Struct member vdop.
  //
  // VDOP.
  std::shared_ptr<ISchemaItem> vdop_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(1000.0), TSchemaItemParameter<double>());

  // Struct member actual.
  //
  // 
  //          True, if actual.
  //          False, if infered.
  //        
  std::shared_ptr<ISchemaItem> actual_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member satellites.
  //
  // Number of satellites in view
  std::shared_ptr<ISchemaItem> satellites_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(31), TSchemaItemParameter<int32_t>());

  // Struct member dimension.
  //
  // See Dimension
  std::shared_ptr<ISchemaItem> dimension_SchemaItem = TEnumSchemaItem<Common_Dimension::eType>::create(Common_Dimension_all_enum_values, TSchemaItemParameter<Common_Dimension::eType>());

  // Struct member altitude.
  //
  // Altitude in meters
  std::shared_ptr<ISchemaItem> altitude_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-10000.0), TSchemaItemParameter<double>(10000.0), TSchemaItemParameter<double>());

  // Struct member heading.
  //
  // The heading. North is 0. Resolution is 0.01
  std::shared_ptr<ISchemaItem> heading_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(359.99), TSchemaItemParameter<double>());

  // Struct member speed.
  //
  // The speed in KPH
  std::shared_ptr<ISchemaItem> speed_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(500.0), TSchemaItemParameter<double>());

  // Struct member shifted.
  //
  // 
  //            True, if GPS lat/long, time, and altitude have been purposefully shifted (requires a proprietary algorithm to unshift).
  //            False, if the GPS data is raw and un-shifted.
  //            If not provided, then value is assumed False.
  //        
  std::shared_ptr<ISchemaItem> shifted_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["longitudeDegrees"] = CObjectSchemaItem::SMember(longitudeDegrees_SchemaItem, true);
  schema_members["latitudeDegrees"] = CObjectSchemaItem::SMember(latitudeDegrees_SchemaItem, true);
  schema_members["utcYear"] = CObjectSchemaItem::SMember(utcYear_SchemaItem, false);
  schema_members["utcMonth"] = CObjectSchemaItem::SMember(utcMonth_SchemaItem, false);
  schema_members["utcDay"] = CObjectSchemaItem::SMember(utcDay_SchemaItem, false);
  schema_members["utcHours"] = CObjectSchemaItem::SMember(utcHours_SchemaItem, false);
  schema_members["utcMinutes"] = CObjectSchemaItem::SMember(utcMinutes_SchemaItem, false);
  schema_members["utcSeconds"] = CObjectSchemaItem::SMember(utcSeconds_SchemaItem, false);
  schema_members["compassDirection"] = CObjectSchemaItem::SMember(compassDirection_SchemaItem, false);
  schema_members["pdop"] = CObjectSchemaItem::SMember(pdop_SchemaItem, false);
  schema_members["hdop"] = CObjectSchemaItem::SMember(hdop_SchemaItem, false);
  schema_members["vdop"] = CObjectSchemaItem::SMember(vdop_SchemaItem, false);
  schema_members["actual"] = CObjectSchemaItem::SMember(actual_SchemaItem, false);
  schema_members["satellites"] = CObjectSchemaItem::SMember(satellites_SchemaItem, false);
  schema_members["dimension"] = CObjectSchemaItem::SMember(dimension_SchemaItem, false);
  schema_members["altitude"] = CObjectSchemaItem::SMember(altitude_SchemaItem, false);
  schema_members["heading"] = CObjectSchemaItem::SMember(heading_SchemaItem, false);
  schema_members["speed"] = CObjectSchemaItem::SMember(speed_SchemaItem, false);
  schema_members["shifted"] = CObjectSchemaItem::SMember(shifted_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_SisData(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member stationShortName.
  //
  // Identifies the 4-alpha-character station call sign plus an optional (-FM) extension
  std::shared_ptr<ISchemaItem> stationShortName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(4), TSchemaItemParameter<size_t>(7), TSchemaItemParameter<std::string>());

  // Struct member stationIDNumber.
  //
  // Used for network Application. Consists of Country Code and FCC Facility ID.
  std::shared_ptr<ISchemaItem> stationIDNumber_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_StationIDNumber);

  // Struct member stationLongName.
  //
  // Identifies the station call sign or other identifying information in the long format.
  std::shared_ptr<ISchemaItem> stationLongName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(56), TSchemaItemParameter<std::string>());

  // Struct member stationLocation.
  //
  // Provides the 3-dimensional geographic station location.
  std::shared_ptr<ISchemaItem> stationLocation_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_GPSData);

  // Struct member stationMessage.
  //
  // May be used to convey textual information of general interest to the consumer such as weather forecasts or public service announcements. Includes a high priority delivery feature to convey emergencies that may be in the listening area.
  std::shared_ptr<ISchemaItem> stationMessage_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(56), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["stationShortName"] = CObjectSchemaItem::SMember(stationShortName_SchemaItem, false);
  schema_members["stationIDNumber"] = CObjectSchemaItem::SMember(stationIDNumber_SchemaItem, false);
  schema_members["stationLongName"] = CObjectSchemaItem::SMember(stationLongName_SchemaItem, false);
  schema_members["stationLocation"] = CObjectSchemaItem::SMember(stationLocation_SchemaItem, false);
  schema_members["stationMessage"] = CObjectSchemaItem::SMember(stationMessage_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_RadioControlData(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_RadioBand::eType> Common_RadioBand_all_enum_values;
  Common_RadioBand_all_enum_values.insert(Common_RadioBand::AM);
  Common_RadioBand_all_enum_values.insert(Common_RadioBand::FM);
  Common_RadioBand_all_enum_values.insert(Common_RadioBand::XM);

  std::set<Common_RadioState::eType> Common_RadioState_all_enum_values;
  Common_RadioState_all_enum_values.insert(Common_RadioState::ACQUIRING);
  Common_RadioState_all_enum_values.insert(Common_RadioState::ACQUIRED);
  Common_RadioState_all_enum_values.insert(Common_RadioState::MULTICAST);
  Common_RadioState_all_enum_values.insert(Common_RadioState::NOT_FOUND);

  // Struct member frequencyInteger.
  //
  // The integer part of the frequency ie for 101.7 this value should be 101
  std::shared_ptr<ISchemaItem> frequencyInteger_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(1710), TSchemaItemParameter<int32_t>());

  // Struct member frequencyFraction.
  //
  // The fractional part of the frequency for 101.7 is 7
  std::shared_ptr<ISchemaItem> frequencyFraction_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(9), TSchemaItemParameter<int32_t>());

  // Struct member band.
  std::shared_ptr<ISchemaItem> band_SchemaItem = TEnumSchemaItem<Common_RadioBand::eType>::create(Common_RadioBand_all_enum_values, TSchemaItemParameter<Common_RadioBand::eType>());

  // Struct member rdsData.
  std::shared_ptr<ISchemaItem> rdsData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_RdsData);

  // Struct member hdRadioEnable.
  //
  //  True if the hd radio is on, false is the radio is off
  std::shared_ptr<ISchemaItem> hdRadioEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member availableHDs.
  //
  // 
  //        Number of HD sub-channels if available.
  //        Note that this parameter is deprecated in MOBILE API.
  //     
  std::shared_ptr<ISchemaItem> availableHDs_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(7), TSchemaItemParameter<int32_t>());

  // Struct member availableHdChannels.
  //
  // The list of available hd sub-channel indexes. Empty list means no Hd channel is available. Read-only.
  std::shared_ptr<ISchemaItem> availableHdChannels_SchemaItem = CArraySchemaItem::create(TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(7), TSchemaItemParameter<int32_t>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(8));

  // Struct member hdChannel.
  //
  // Current HD sub-channel if available
  std::shared_ptr<ISchemaItem> hdChannel_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(7), TSchemaItemParameter<int32_t>());

  // Struct member signalStrength.
  std::shared_ptr<ISchemaItem> signalStrength_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member signalChangeThreshold.
  //
  // If the signal strength falls below the set value for this parameter, the radio will tune to an alternative frequency
  std::shared_ptr<ISchemaItem> signalChangeThreshold_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member radioEnable.
  //
  //  True if the radio is on, false is the radio is off
  std::shared_ptr<ISchemaItem> radioEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member state.
  std::shared_ptr<ISchemaItem> state_SchemaItem = TEnumSchemaItem<Common_RadioState::eType>::create(Common_RadioState_all_enum_values, TSchemaItemParameter<Common_RadioState::eType>());

  // Struct member sisData.
  //
  // Read-only Station Information Service (SIS) data provides basic information about the station such as call sign, as well as information not displayable to the consumer such as the station identification number
  std::shared_ptr<ISchemaItem> sisData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SisData);CObjectSchemaItem::Members schema_members;

  schema_members["frequencyInteger"] = CObjectSchemaItem::SMember(frequencyInteger_SchemaItem, false);
  schema_members["frequencyFraction"] = CObjectSchemaItem::SMember(frequencyFraction_SchemaItem, false);
  schema_members["band"] = CObjectSchemaItem::SMember(band_SchemaItem, false);
  schema_members["rdsData"] = CObjectSchemaItem::SMember(rdsData_SchemaItem, false);
  schema_members["hdRadioEnable"] = CObjectSchemaItem::SMember(hdRadioEnable_SchemaItem, false);
  schema_members["availableHDs"] = CObjectSchemaItem::SMember(availableHDs_SchemaItem, false);
  schema_members["availableHdChannels"] = CObjectSchemaItem::SMember(availableHdChannels_SchemaItem, false);
  schema_members["hdChannel"] = CObjectSchemaItem::SMember(hdChannel_SchemaItem, false);
  schema_members["signalStrength"] = CObjectSchemaItem::SMember(signalStrength_SchemaItem, false);
  schema_members["signalChangeThreshold"] = CObjectSchemaItem::SMember(signalChangeThreshold_SchemaItem, false);
  schema_members["radioEnable"] = CObjectSchemaItem::SMember(radioEnable_SchemaItem, false);
  schema_members["state"] = CObjectSchemaItem::SMember(state_SchemaItem, false);
  schema_members["sisData"] = CObjectSchemaItem::SMember(sisData_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_RadioControlCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member moduleName.
  //
  // The short name or a short description of the radio control module.
  std::shared_ptr<ISchemaItem> moduleName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Struct member radioEnableAvailable.
  //
  // 
  //        Availability of the control of enable/disable radio.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> radioEnableAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member radioBandAvailable.
  //
  // 
  //        Availability of the control of radio band.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> radioBandAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member radioFrequencyAvailable.
  //
  // 
  //        Availability of the control of radio frequency.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> radioFrequencyAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member hdChannelAvailable.
  //
  // 
  //        Availability of the control of HD radio channel.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> hdChannelAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member rdsDataAvailable.
  //
  // 
  //        Availability of the getting Radio Data System (RDS) data.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> rdsDataAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member availableHDsAvailable.
  //
  // 
  //        Availability of the getting the number of available HD channels.
  //        True: Available, False: Not Available, Not present: Not Available.
  //        Note that this parameter is deprecated in MOBILE API
  //      
  std::shared_ptr<ISchemaItem> availableHDsAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member availableHdChannelsAvailable.
  //
  // 
  //        Availability of the list of available HD sub-channel indexes.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> availableHdChannelsAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member stateAvailable.
  //
  // 
  //        Availability of the getting the Radio state.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> stateAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member signalStrengthAvailable.
  //
  // 
  //        Availability of the getting the signal strength.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> signalStrengthAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member signalChangeThresholdAvailable.
  //
  // 
  //        Availability of the getting the signal Change Threshold.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> signalChangeThresholdAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member sisDataAvailable.
  //
  // 
  //          Availability of the getting HD radio Station Information Service (SIS) data.
  //          True: Available, False: Not Available, Not present: Not Available.
  //        
  std::shared_ptr<ISchemaItem> sisDataAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member hdRadioEnableAvailable.
  //
  // 
  //        Availability of the control of enable/disable HD radio.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> hdRadioEnableAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member siriusxmRadioAvailable.
  //
  // 
  //        Availability of sirius XM radio.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> siriusxmRadioAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["moduleName"] = CObjectSchemaItem::SMember(moduleName_SchemaItem, true);
  schema_members["radioEnableAvailable"] = CObjectSchemaItem::SMember(radioEnableAvailable_SchemaItem, false);
  schema_members["radioBandAvailable"] = CObjectSchemaItem::SMember(radioBandAvailable_SchemaItem, false);
  schema_members["radioFrequencyAvailable"] = CObjectSchemaItem::SMember(radioFrequencyAvailable_SchemaItem, false);
  schema_members["hdChannelAvailable"] = CObjectSchemaItem::SMember(hdChannelAvailable_SchemaItem, false);
  schema_members["rdsDataAvailable"] = CObjectSchemaItem::SMember(rdsDataAvailable_SchemaItem, false);
  schema_members["availableHDsAvailable"] = CObjectSchemaItem::SMember(availableHDsAvailable_SchemaItem, false);
  schema_members["availableHdChannelsAvailable"] = CObjectSchemaItem::SMember(availableHdChannelsAvailable_SchemaItem, false);
  schema_members["stateAvailable"] = CObjectSchemaItem::SMember(stateAvailable_SchemaItem, false);
  schema_members["signalStrengthAvailable"] = CObjectSchemaItem::SMember(signalStrengthAvailable_SchemaItem, false);
  schema_members["signalChangeThresholdAvailable"] = CObjectSchemaItem::SMember(signalChangeThresholdAvailable_SchemaItem, false);
  schema_members["sisDataAvailable"] = CObjectSchemaItem::SMember(sisDataAvailable_SchemaItem, false);
  schema_members["hdRadioEnableAvailable"] = CObjectSchemaItem::SMember(hdRadioEnableAvailable_SchemaItem, false);
  schema_members["siriusxmRadioAvailable"] = CObjectSchemaItem::SMember(siriusxmRadioAvailable_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_Temperature(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_TemperatureUnit::eType> Common_TemperatureUnit_all_enum_values;
  Common_TemperatureUnit_all_enum_values.insert(Common_TemperatureUnit::FAHRENHEIT);
  Common_TemperatureUnit_all_enum_values.insert(Common_TemperatureUnit::CELSIUS);

  // Struct member unit.
  //
  // Temperature Unit
  std::shared_ptr<ISchemaItem> unit_SchemaItem = TEnumSchemaItem<Common_TemperatureUnit::eType>::create(Common_TemperatureUnit_all_enum_values, TSchemaItemParameter<Common_TemperatureUnit::eType>());

  // Struct member value.
  //
  // Temperature Value in TemperatureUnit specified unit. Range depends on OEM and is not checked by SDL.
  std::shared_ptr<ISchemaItem> value_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());CObjectSchemaItem::Members schema_members;

  schema_members["unit"] = CObjectSchemaItem::SMember(unit_SchemaItem, true);
  schema_members["value"] = CObjectSchemaItem::SMember(value_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_ClimateControlData(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_DefrostZone::eType> Common_DefrostZone_all_enum_values;
  Common_DefrostZone_all_enum_values.insert(Common_DefrostZone::FRONT);
  Common_DefrostZone_all_enum_values.insert(Common_DefrostZone::REAR);
  Common_DefrostZone_all_enum_values.insert(Common_DefrostZone::ALL);
  Common_DefrostZone_all_enum_values.insert(Common_DefrostZone::NONE);

  std::set<Common_VentilationMode::eType> Common_VentilationMode_all_enum_values;
  Common_VentilationMode_all_enum_values.insert(Common_VentilationMode::UPPER);
  Common_VentilationMode_all_enum_values.insert(Common_VentilationMode::LOWER);
  Common_VentilationMode_all_enum_values.insert(Common_VentilationMode::BOTH);
  Common_VentilationMode_all_enum_values.insert(Common_VentilationMode::NONE);

  // Struct member fanSpeed.
  std::shared_ptr<ISchemaItem> fanSpeed_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member currentTemperature.
  std::shared_ptr<ISchemaItem> currentTemperature_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Temperature);

  // Struct member desiredTemperature.
  std::shared_ptr<ISchemaItem> desiredTemperature_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Temperature);

  // Struct member acEnable.
  std::shared_ptr<ISchemaItem> acEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member circulateAirEnable.
  std::shared_ptr<ISchemaItem> circulateAirEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member autoModeEnable.
  std::shared_ptr<ISchemaItem> autoModeEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member defrostZone.
  std::shared_ptr<ISchemaItem> defrostZone_SchemaItem = TEnumSchemaItem<Common_DefrostZone::eType>::create(Common_DefrostZone_all_enum_values, TSchemaItemParameter<Common_DefrostZone::eType>());

  // Struct member dualModeEnable.
  std::shared_ptr<ISchemaItem> dualModeEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member acMaxEnable.
  std::shared_ptr<ISchemaItem> acMaxEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member ventilationMode.
  std::shared_ptr<ISchemaItem> ventilationMode_SchemaItem = TEnumSchemaItem<Common_VentilationMode::eType>::create(Common_VentilationMode_all_enum_values, TSchemaItemParameter<Common_VentilationMode::eType>());

  // Struct member heatedSteeringWheelEnable.
  //
  // value false means disabled/turn off, value true means enabled/turn on.
  std::shared_ptr<ISchemaItem> heatedSteeringWheelEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member heatedWindshieldEnable.
  //
  // value false means disabled, value true means enabled.
  std::shared_ptr<ISchemaItem> heatedWindshieldEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member heatedRearWindowEnable.
  //
  // value false means disabled, value true means enabled.
  std::shared_ptr<ISchemaItem> heatedRearWindowEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member heatedMirrorsEnable.
  //
  // value false means disabled, value true means enabled.
  std::shared_ptr<ISchemaItem> heatedMirrorsEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member climateEnable.
  std::shared_ptr<ISchemaItem> climateEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["fanSpeed"] = CObjectSchemaItem::SMember(fanSpeed_SchemaItem, false);
  schema_members["currentTemperature"] = CObjectSchemaItem::SMember(currentTemperature_SchemaItem, false);
  schema_members["desiredTemperature"] = CObjectSchemaItem::SMember(desiredTemperature_SchemaItem, false);
  schema_members["acEnable"] = CObjectSchemaItem::SMember(acEnable_SchemaItem, false);
  schema_members["circulateAirEnable"] = CObjectSchemaItem::SMember(circulateAirEnable_SchemaItem, false);
  schema_members["autoModeEnable"] = CObjectSchemaItem::SMember(autoModeEnable_SchemaItem, false);
  schema_members["defrostZone"] = CObjectSchemaItem::SMember(defrostZone_SchemaItem, false);
  schema_members["dualModeEnable"] = CObjectSchemaItem::SMember(dualModeEnable_SchemaItem, false);
  schema_members["acMaxEnable"] = CObjectSchemaItem::SMember(acMaxEnable_SchemaItem, false);
  schema_members["ventilationMode"] = CObjectSchemaItem::SMember(ventilationMode_SchemaItem, false);
  schema_members["heatedSteeringWheelEnable"] = CObjectSchemaItem::SMember(heatedSteeringWheelEnable_SchemaItem, false);
  schema_members["heatedWindshieldEnable"] = CObjectSchemaItem::SMember(heatedWindshieldEnable_SchemaItem, false);
  schema_members["heatedRearWindowEnable"] = CObjectSchemaItem::SMember(heatedRearWindowEnable_SchemaItem, false);
  schema_members["heatedMirrorsEnable"] = CObjectSchemaItem::SMember(heatedMirrorsEnable_SchemaItem, false);
  schema_members["climateEnable"] = CObjectSchemaItem::SMember(climateEnable_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_ClimateControlCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_DefrostZone::eType> Common_DefrostZone_all_enum_values;
  Common_DefrostZone_all_enum_values.insert(Common_DefrostZone::FRONT);
  Common_DefrostZone_all_enum_values.insert(Common_DefrostZone::REAR);
  Common_DefrostZone_all_enum_values.insert(Common_DefrostZone::ALL);
  Common_DefrostZone_all_enum_values.insert(Common_DefrostZone::NONE);

  std::set<Common_VentilationMode::eType> Common_VentilationMode_all_enum_values;
  Common_VentilationMode_all_enum_values.insert(Common_VentilationMode::UPPER);
  Common_VentilationMode_all_enum_values.insert(Common_VentilationMode::LOWER);
  Common_VentilationMode_all_enum_values.insert(Common_VentilationMode::BOTH);
  Common_VentilationMode_all_enum_values.insert(Common_VentilationMode::NONE);

  // Struct member moduleName.
  //
  // The short name or a short description of the climate control module.
  std::shared_ptr<ISchemaItem> moduleName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Struct member currentTemperatureAvailable.
  //
  // 
  //        Availability of the reading of current temperature.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> currentTemperatureAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member fanSpeedAvailable.
  //
  // 
  //        Availability of the control of fan speed.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> fanSpeedAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member desiredTemperatureAvailable.
  //
  // 
  //        Availability of the control of desired temperature.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> desiredTemperatureAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member acEnableAvailable.
  //
  // 
  //        Availability of the control of turn on/off AC.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> acEnableAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member acMaxEnableAvailable.
  //
  // 
  //        Availability of the control of enable/disable air conditioning is ON on the maximum level.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> acMaxEnableAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member circulateAirEnableAvailable.
  //
  // 
  //        Availability of the control of enable/disable circulate Air mode.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> circulateAirEnableAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member autoModeEnableAvailable.
  //
  // 
  //        Availability of the control of enable/disable auto mode.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> autoModeEnableAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member dualModeEnableAvailable.
  //
  // 
  //        Availability of the control of enable/disable dual mode.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> dualModeEnableAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member defrostZoneAvailable.
  //
  // 
  //        Availability of the control of defrost zones.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> defrostZoneAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member defrostZone.
  //
  // 
  //        A set of all defrost zones that are controllable.
  //      
  std::shared_ptr<ISchemaItem> defrostZone_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<Common_DefrostZone::eType>::create(Common_DefrostZone_all_enum_values, TSchemaItemParameter<Common_DefrostZone::eType>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member ventilationModeAvailable.
  //
  // 
  //        Availability of the control of air ventilation mode.
  //        True: Available, False: Not Available, Not present: Not Available.
  //      
  std::shared_ptr<ISchemaItem> ventilationModeAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member ventilationMode.
  //
  // 
  //        A set of all ventilation modes that are controllable.
  //      
  std::shared_ptr<ISchemaItem> ventilationMode_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<Common_VentilationMode::eType>::create(Common_VentilationMode_all_enum_values, TSchemaItemParameter<Common_VentilationMode::eType>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member heatedSteeringWheelAvailable.
  //
  // 
  //          Availability of the control (enable/disable) of heated Steering Wheel.
  //          True: Available, False: Not Available, Not present: Not Available.
  //        
  std::shared_ptr<ISchemaItem> heatedSteeringWheelAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member heatedWindshieldAvailable.
  //
  // 
  //          Availability of the control (enable/disable) of heated Windshield.
  //          True: Available, False: Not Available, Not present: Not Available.
  //        
  std::shared_ptr<ISchemaItem> heatedWindshieldAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member heatedRearWindowAvailable.
  //
  // 
  //          Availability of the control (enable/disable) of heated Rear Window.
  //          True: Available, False: Not Available, Not present: Not Available.
  //        
  std::shared_ptr<ISchemaItem> heatedRearWindowAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member heatedMirrorsAvailable.
  //
  // 
  //          Availability of the control (enable/disable) of heated Mirrors.
  //          True: Available, False: Not Available, Not present: Not Available.
  //        
  std::shared_ptr<ISchemaItem> heatedMirrorsAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member climateEnableAvailable.
  //
  // 
  //          Availability of the control of enable/disable climate control.
  //          True: Available, False: Not Available, Not present: Not Available.
  //        
  std::shared_ptr<ISchemaItem> climateEnableAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["moduleName"] = CObjectSchemaItem::SMember(moduleName_SchemaItem, true);
  schema_members["currentTemperatureAvailable"] = CObjectSchemaItem::SMember(currentTemperatureAvailable_SchemaItem, false);
  schema_members["fanSpeedAvailable"] = CObjectSchemaItem::SMember(fanSpeedAvailable_SchemaItem, false);
  schema_members["desiredTemperatureAvailable"] = CObjectSchemaItem::SMember(desiredTemperatureAvailable_SchemaItem, false);
  schema_members["acEnableAvailable"] = CObjectSchemaItem::SMember(acEnableAvailable_SchemaItem, false);
  schema_members["acMaxEnableAvailable"] = CObjectSchemaItem::SMember(acMaxEnableAvailable_SchemaItem, false);
  schema_members["circulateAirEnableAvailable"] = CObjectSchemaItem::SMember(circulateAirEnableAvailable_SchemaItem, false);
  schema_members["autoModeEnableAvailable"] = CObjectSchemaItem::SMember(autoModeEnableAvailable_SchemaItem, false);
  schema_members["dualModeEnableAvailable"] = CObjectSchemaItem::SMember(dualModeEnableAvailable_SchemaItem, false);
  schema_members["defrostZoneAvailable"] = CObjectSchemaItem::SMember(defrostZoneAvailable_SchemaItem, false);
  schema_members["defrostZone"] = CObjectSchemaItem::SMember(defrostZone_SchemaItem, false);
  schema_members["ventilationModeAvailable"] = CObjectSchemaItem::SMember(ventilationModeAvailable_SchemaItem, false);
  schema_members["ventilationMode"] = CObjectSchemaItem::SMember(ventilationMode_SchemaItem, false);
  schema_members["heatedSteeringWheelAvailable"] = CObjectSchemaItem::SMember(heatedSteeringWheelAvailable_SchemaItem, false);
  schema_members["heatedWindshieldAvailable"] = CObjectSchemaItem::SMember(heatedWindshieldAvailable_SchemaItem, false);
  schema_members["heatedRearWindowAvailable"] = CObjectSchemaItem::SMember(heatedRearWindowAvailable_SchemaItem, false);
  schema_members["heatedMirrorsAvailable"] = CObjectSchemaItem::SMember(heatedMirrorsAvailable_SchemaItem, false);
  schema_members["climateEnableAvailable"] = CObjectSchemaItem::SMember(climateEnableAvailable_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_EqualizerSettings(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member channelId.
  std::shared_ptr<ISchemaItem> channelId_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member channelName.
  //
  // read-only channel / frequency name (e.i. "Treble, Midrange, Bass" or "125 Hz")
  std::shared_ptr<ISchemaItem> channelName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(50), TSchemaItemParameter<std::string>());

  // Struct member channelSetting.
  std::shared_ptr<ISchemaItem> channelSetting_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["channelId"] = CObjectSchemaItem::SMember(channelId_SchemaItem, true);
  schema_members["channelName"] = CObjectSchemaItem::SMember(channelName_SchemaItem, false);
  schema_members["channelSetting"] = CObjectSchemaItem::SMember(channelSetting_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_AudioControlData(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_PrimaryAudioSource::eType> Common_PrimaryAudioSource_all_enum_values;
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::NO_SOURCE_SELECTED);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::CD);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::USB);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::USB2);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::BLUETOOTH_STEREO_BTST);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::LINE_IN);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::IPOD);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::MOBILE_APP);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::AM);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::FM);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::XM);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::DAB);

  // Struct member source.
  //
  // 
  //            In a getter response or a notification, it is the current primary audio source of the system.
  //            In a setter request, it is the target audio source that the system shall switch to.
  //            If the value is MOBILE_APP, the system shall switch to the mobile media app that issues the setter RPC.
  //          
  std::shared_ptr<ISchemaItem> source_SchemaItem = TEnumSchemaItem<Common_PrimaryAudioSource::eType>::create(Common_PrimaryAudioSource_all_enum_values, TSchemaItemParameter<Common_PrimaryAudioSource::eType>());

  // Struct member keepContext.
  //
  // 
  //            This parameter shall not be present in any getter responses or notifications.
  //            This parameter is optional in a setter request. The default value is false.
  //            If it is false, the system not only changes the audio source but also brings the default application
  //            or system UI associated with the audio source to foreground.
  //            If it is true, the system changes the audio source, but still keeps the current application in foreground.
  //          
  std::shared_ptr<ISchemaItem> keepContext_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member volume.
  //
  // Reflects the volume of audio, from 0%-100%.
  std::shared_ptr<ISchemaItem> volume_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member equalizerSettings.
  //
  // Defines the list of supported channels (band) and their current/desired settings on HMI
  std::shared_ptr<ISchemaItem> equalizerSettings_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_EqualizerSettings), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["source"] = CObjectSchemaItem::SMember(source_SchemaItem, false);
  schema_members["keepContext"] = CObjectSchemaItem::SMember(keepContext_SchemaItem, false);
  schema_members["volume"] = CObjectSchemaItem::SMember(volume_SchemaItem, false);
  schema_members["equalizerSettings"] = CObjectSchemaItem::SMember(equalizerSettings_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_AudioControlCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member moduleName.
  //
  // 
  //            The short friendly name of the light control module.
  //            It should not be used to identify a module by mobile application.
  //          
  std::shared_ptr<ISchemaItem> moduleName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Struct member sourceAvailable.
  //
  // Availability of the control of audio source. 
  std::shared_ptr<ISchemaItem> sourceAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member keepContextAvailable.
  //
  // Availability of the keepContext paramter. 
  std::shared_ptr<ISchemaItem> keepContextAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member volumeAvailable.
  //
  // Availability of the control of audio volume.
  std::shared_ptr<ISchemaItem> volumeAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member equalizerAvailable.
  //
  // Availability of the control of Equalizer Settings.
  std::shared_ptr<ISchemaItem> equalizerAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member equalizerMaxChannelId.
  //
  // Must be included if equalizerAvailable=true, and assume all IDs starting from 1 to this value are valid
  std::shared_ptr<ISchemaItem> equalizerMaxChannelId_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["moduleName"] = CObjectSchemaItem::SMember(moduleName_SchemaItem, true);
  schema_members["sourceAvailable"] = CObjectSchemaItem::SMember(sourceAvailable_SchemaItem, false);
  schema_members["keepContextAvailable"] = CObjectSchemaItem::SMember(keepContextAvailable_SchemaItem, false);
  schema_members["volumeAvailable"] = CObjectSchemaItem::SMember(volumeAvailable_SchemaItem, false);
  schema_members["equalizerAvailable"] = CObjectSchemaItem::SMember(equalizerAvailable_SchemaItem, false);
  schema_members["equalizerMaxChannelId"] = CObjectSchemaItem::SMember(equalizerMaxChannelId_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_RGBColor(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member red.
  std::shared_ptr<ISchemaItem> red_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(255), TSchemaItemParameter<int32_t>());

  // Struct member green.
  std::shared_ptr<ISchemaItem> green_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(255), TSchemaItemParameter<int32_t>());

  // Struct member blue.
  std::shared_ptr<ISchemaItem> blue_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(255), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["red"] = CObjectSchemaItem::SMember(red_SchemaItem, true);
  schema_members["green"] = CObjectSchemaItem::SMember(green_SchemaItem, true);
  schema_members["blue"] = CObjectSchemaItem::SMember(blue_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_LightCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_LightName::eType> Common_LightName_all_enum_values;
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_LEFT_HIGH_BEAM);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_RIGHT_HIGH_BEAM);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_LEFT_LOW_BEAM);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_RIGHT_LOW_BEAM);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_LEFT_PARKING_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_RIGHT_PARKING_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_LEFT_FOG_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_RIGHT_FOG_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_LEFT_DAYTIME_RUNNING_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_RIGHT_DAYTIME_RUNNING_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_LEFT_TURN_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_RIGHT_TURN_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_LEFT_FOG_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_RIGHT_FOG_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_LEFT_TAIL_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_RIGHT_TAIL_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_LEFT_BRAKE_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_RIGHT_BRAKE_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_LEFT_TURN_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_RIGHT_TURN_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_REGISTRATION_PLATE_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::HIGH_BEAMS);
  Common_LightName_all_enum_values.insert(Common_LightName::LOW_BEAMS);
  Common_LightName_all_enum_values.insert(Common_LightName::FOG_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::RUNNING_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::PARKING_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::BRAKE_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_REVERSING_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::SIDE_MARKER_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::LEFT_TURN_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::RIGHT_TURN_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::HAZARD_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_CARGO_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_TRUCK_BED_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_TRAILER_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::LEFT_SPOT_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::RIGHT_SPOT_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::LEFT_PUDDLE_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::RIGHT_PUDDLE_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::AMBIENT_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::OVERHEAD_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::READING_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::TRUNK_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::EXTERIOR_FRONT_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::EXTERIOR_REAR_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::EXTERIOR_LEFT_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::EXTERIOR_RIGHT_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::EXTERIOR_ALL_LIGHTS);

  // Struct member name.
  std::shared_ptr<ISchemaItem> name_SchemaItem = TEnumSchemaItem<Common_LightName::eType>::create(Common_LightName_all_enum_values, TSchemaItemParameter<Common_LightName::eType>());

  // Struct member statusAvailable.
  //
  // 
  //          Indicates if the status (ON/OFF) can be set remotely. App shall not use read-only values (RAMP_UP/RAMP_DOWN/UNKNOWN/INVALID) in a setInteriorVehicleData request.
  //        
  std::shared_ptr<ISchemaItem> statusAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member densityAvailable.
  //
  // 
  //            Indicates if the light's density can be set remotely (similar to a dimmer).
  //          
  std::shared_ptr<ISchemaItem> densityAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member rgbColorSpaceAvailable.
  //
  // 
  //            Indicates if the light's color can be set remotely by using the RGB color space.
  //          
  std::shared_ptr<ISchemaItem> rgbColorSpaceAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["name"] = CObjectSchemaItem::SMember(name_SchemaItem, true);
  schema_members["statusAvailable"] = CObjectSchemaItem::SMember(statusAvailable_SchemaItem, false);
  schema_members["densityAvailable"] = CObjectSchemaItem::SMember(densityAvailable_SchemaItem, false);
  schema_members["rgbColorSpaceAvailable"] = CObjectSchemaItem::SMember(rgbColorSpaceAvailable_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_LightControlCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member moduleName.
  //
  // 
  //            The short friendly name of the light control module.
  //            It should not be used to identify a module by mobile application.
  //          
  std::shared_ptr<ISchemaItem> moduleName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Struct member supportedLights.
  //
  //  An array of available light names that are controllable. 
  std::shared_ptr<ISchemaItem> supportedLights_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_LightCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["moduleName"] = CObjectSchemaItem::SMember(moduleName_SchemaItem, true);
  schema_members["supportedLights"] = CObjectSchemaItem::SMember(supportedLights_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_LightState(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_LightName::eType> Common_LightName_all_enum_values;
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_LEFT_HIGH_BEAM);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_RIGHT_HIGH_BEAM);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_LEFT_LOW_BEAM);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_RIGHT_LOW_BEAM);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_LEFT_PARKING_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_RIGHT_PARKING_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_LEFT_FOG_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_RIGHT_FOG_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_LEFT_DAYTIME_RUNNING_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_RIGHT_DAYTIME_RUNNING_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_LEFT_TURN_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::FRONT_RIGHT_TURN_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_LEFT_FOG_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_RIGHT_FOG_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_LEFT_TAIL_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_RIGHT_TAIL_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_LEFT_BRAKE_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_RIGHT_BRAKE_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_LEFT_TURN_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_RIGHT_TURN_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_REGISTRATION_PLATE_LIGHT);
  Common_LightName_all_enum_values.insert(Common_LightName::HIGH_BEAMS);
  Common_LightName_all_enum_values.insert(Common_LightName::LOW_BEAMS);
  Common_LightName_all_enum_values.insert(Common_LightName::FOG_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::RUNNING_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::PARKING_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::BRAKE_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_REVERSING_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::SIDE_MARKER_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::LEFT_TURN_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::RIGHT_TURN_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::HAZARD_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_CARGO_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_TRUCK_BED_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::REAR_TRAILER_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::LEFT_SPOT_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::RIGHT_SPOT_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::LEFT_PUDDLE_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::RIGHT_PUDDLE_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::AMBIENT_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::OVERHEAD_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::READING_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::TRUNK_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::EXTERIOR_FRONT_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::EXTERIOR_REAR_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::EXTERIOR_LEFT_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::EXTERIOR_RIGHT_LIGHTS);
  Common_LightName_all_enum_values.insert(Common_LightName::EXTERIOR_ALL_LIGHTS);

  std::set<Common_LightStatus::eType> Common_LightStatus_all_enum_values;
  Common_LightStatus_all_enum_values.insert(Common_LightStatus::ON);
  Common_LightStatus_all_enum_values.insert(Common_LightStatus::OFF);
  Common_LightStatus_all_enum_values.insert(Common_LightStatus::RAMP_UP);
  Common_LightStatus_all_enum_values.insert(Common_LightStatus::RAMP_DOWN);
  Common_LightStatus_all_enum_values.insert(Common_LightStatus::UNKNOWN);
  Common_LightStatus_all_enum_values.insert(Common_LightStatus::INVALID);

  // Struct member id.
  //
  // The name of a light or a group of lights. 
  std::shared_ptr<ISchemaItem> id_SchemaItem = TEnumSchemaItem<Common_LightName::eType>::create(Common_LightName_all_enum_values, TSchemaItemParameter<Common_LightName::eType>());

  // Struct member status.
  std::shared_ptr<ISchemaItem> status_SchemaItem = TEnumSchemaItem<Common_LightStatus::eType>::create(Common_LightStatus_all_enum_values, TSchemaItemParameter<Common_LightStatus::eType>());

  // Struct member density.
  std::shared_ptr<ISchemaItem> density_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(1.0), TSchemaItemParameter<double>());

  // Struct member color.
  std::shared_ptr<ISchemaItem> color_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_RGBColor);CObjectSchemaItem::Members schema_members;

  schema_members["id"] = CObjectSchemaItem::SMember(id_SchemaItem, true);
  schema_members["status"] = CObjectSchemaItem::SMember(status_SchemaItem, true);
  schema_members["density"] = CObjectSchemaItem::SMember(density_SchemaItem, false);
  schema_members["color"] = CObjectSchemaItem::SMember(color_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_LightControlData(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member lightState.
  //
  // An array of LightNames and their current or desired status. No change to the status of the LightNames that are not listed in the array.
  std::shared_ptr<ISchemaItem> lightState_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_LightState), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["lightState"] = CObjectSchemaItem::SMember(lightState_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_HMISettingsControlData(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_DisplayMode::eType> Common_DisplayMode_all_enum_values;
  Common_DisplayMode_all_enum_values.insert(Common_DisplayMode::DAY);
  Common_DisplayMode_all_enum_values.insert(Common_DisplayMode::NIGHT);
  Common_DisplayMode_all_enum_values.insert(Common_DisplayMode::AUTO);

  std::set<Common_TemperatureUnit::eType> Common_TemperatureUnit_all_enum_values;
  Common_TemperatureUnit_all_enum_values.insert(Common_TemperatureUnit::FAHRENHEIT);
  Common_TemperatureUnit_all_enum_values.insert(Common_TemperatureUnit::CELSIUS);

  std::set<Common_DistanceUnit::eType> Common_DistanceUnit_all_enum_values;
  Common_DistanceUnit_all_enum_values.insert(Common_DistanceUnit::MILES);
  Common_DistanceUnit_all_enum_values.insert(Common_DistanceUnit::KILOMETERS);

  // Struct member displayMode.
  std::shared_ptr<ISchemaItem> displayMode_SchemaItem = TEnumSchemaItem<Common_DisplayMode::eType>::create(Common_DisplayMode_all_enum_values, TSchemaItemParameter<Common_DisplayMode::eType>());

  // Struct member temperatureUnit.
  std::shared_ptr<ISchemaItem> temperatureUnit_SchemaItem = TEnumSchemaItem<Common_TemperatureUnit::eType>::create(Common_TemperatureUnit_all_enum_values, TSchemaItemParameter<Common_TemperatureUnit::eType>());

  // Struct member distanceUnit.
  std::shared_ptr<ISchemaItem> distanceUnit_SchemaItem = TEnumSchemaItem<Common_DistanceUnit::eType>::create(Common_DistanceUnit_all_enum_values, TSchemaItemParameter<Common_DistanceUnit::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["displayMode"] = CObjectSchemaItem::SMember(displayMode_SchemaItem, false);
  schema_members["temperatureUnit"] = CObjectSchemaItem::SMember(temperatureUnit_SchemaItem, false);
  schema_members["distanceUnit"] = CObjectSchemaItem::SMember(distanceUnit_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_HMISettingsControlCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member moduleName.
  //
  // 
  //            The short friendly name of the hmi setting module.
  //            It should not be used to identify a module by mobile application.
  //          
  std::shared_ptr<ISchemaItem> moduleName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Struct member distanceUnitAvailable.
  //
  // Availability of the control of distance unit. 
  std::shared_ptr<ISchemaItem> distanceUnitAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member temperatureUnitAvailable.
  //
  // Availability of the control of temperature unit. 
  std::shared_ptr<ISchemaItem> temperatureUnitAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member displayModeUnitAvailable.
  //
  // Availability of the control of HMI display mode. 
  std::shared_ptr<ISchemaItem> displayModeUnitAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["moduleName"] = CObjectSchemaItem::SMember(moduleName_SchemaItem, true);
  schema_members["distanceUnitAvailable"] = CObjectSchemaItem::SMember(distanceUnitAvailable_SchemaItem, false);
  schema_members["temperatureUnitAvailable"] = CObjectSchemaItem::SMember(temperatureUnitAvailable_SchemaItem, false);
  schema_members["displayModeUnitAvailable"] = CObjectSchemaItem::SMember(displayModeUnitAvailable_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_ModuleData(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_ModuleType::eType> Common_ModuleType_all_enum_values;
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::CLIMATE);
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::RADIO);
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::SEAT);
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::AUDIO);
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::LIGHT);
  Common_ModuleType_all_enum_values.insert(Common_ModuleType::HMI_SETTINGS);

  // Struct member moduleType.
  std::shared_ptr<ISchemaItem> moduleType_SchemaItem = TEnumSchemaItem<Common_ModuleType::eType>::create(Common_ModuleType_all_enum_values, TSchemaItemParameter<Common_ModuleType::eType>());

  // Struct member radioControlData.
  std::shared_ptr<ISchemaItem> radioControlData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_RadioControlData);

  // Struct member climateControlData.
  std::shared_ptr<ISchemaItem> climateControlData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ClimateControlData);

  // Struct member seatControlData.
  std::shared_ptr<ISchemaItem> seatControlData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SeatControlData);

  // Struct member audioControlData.
  std::shared_ptr<ISchemaItem> audioControlData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_AudioControlData);

  // Struct member lightControlData.
  std::shared_ptr<ISchemaItem> lightControlData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_LightControlData);

  // Struct member hmiSettingsControlData.
  std::shared_ptr<ISchemaItem> hmiSettingsControlData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_HMISettingsControlData);CObjectSchemaItem::Members schema_members;

  schema_members["moduleType"] = CObjectSchemaItem::SMember(moduleType_SchemaItem, true);
  schema_members["radioControlData"] = CObjectSchemaItem::SMember(radioControlData_SchemaItem, false);
  schema_members["climateControlData"] = CObjectSchemaItem::SMember(climateControlData_SchemaItem, false);
  schema_members["seatControlData"] = CObjectSchemaItem::SMember(seatControlData_SchemaItem, false);
  schema_members["audioControlData"] = CObjectSchemaItem::SMember(audioControlData_SchemaItem, false);
  schema_members["lightControlData"] = CObjectSchemaItem::SMember(lightControlData_SchemaItem, false);
  schema_members["hmiSettingsControlData"] = CObjectSchemaItem::SMember(hmiSettingsControlData_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_TextField(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_TextFieldName::eType> Common_TextFieldName_all_enum_values;
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::mainField1);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::mainField2);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::mainField3);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::mainField4);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::statusBar);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::mediaClock);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::mediaTrack);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::alertText1);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::alertText2);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::alertText3);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::scrollableMessageBody);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::initialInteractionText);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::navigationText1);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::navigationText2);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::ETA);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::totalDistance);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::audioPassThruDisplayText1);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::audioPassThruDisplayText2);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::sliderHeader);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::sliderFooter);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::menuName);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::secondaryText);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::tertiaryText);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::menuTitle);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::navigationText);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::notificationText);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::locationName);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::locationDescription);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::addressLines);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::phoneNumber);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::timeToDestination);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::turnText);

  std::set<Common_CharacterSet::eType> Common_CharacterSet_all_enum_values;
  Common_CharacterSet_all_enum_values.insert(Common_CharacterSet::TYPE2SET);
  Common_CharacterSet_all_enum_values.insert(Common_CharacterSet::TYPE5SET);
  Common_CharacterSet_all_enum_values.insert(Common_CharacterSet::CID1SET);
  Common_CharacterSet_all_enum_values.insert(Common_CharacterSet::CID2SET);

  // Struct member name.
  //
  // The name that identifies the field. See TextFieldName.
  std::shared_ptr<ISchemaItem> name_SchemaItem = TEnumSchemaItem<Common_TextFieldName::eType>::create(Common_TextFieldName_all_enum_values, TSchemaItemParameter<Common_TextFieldName::eType>());

  // Struct member characterSet.
  //
  // The character set that is supported in this field. See CharacterSet.
  std::shared_ptr<ISchemaItem> characterSet_SchemaItem = TEnumSchemaItem<Common_CharacterSet::eType>::create(Common_CharacterSet_all_enum_values, TSchemaItemParameter<Common_CharacterSet::eType>());

  // Struct member width.
  //
  // The number of characters in one row of this field.
  std::shared_ptr<ISchemaItem> width_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(500), TSchemaItemParameter<int32_t>());

  // Struct member rows.
  //
  // The number of rows of this field.
  std::shared_ptr<ISchemaItem> rows_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(8), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["name"] = CObjectSchemaItem::SMember(name_SchemaItem, true);
  schema_members["characterSet"] = CObjectSchemaItem::SMember(characterSet_SchemaItem, true);
  schema_members["width"] = CObjectSchemaItem::SMember(width_SchemaItem, true);
  schema_members["rows"] = CObjectSchemaItem::SMember(rows_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_ButtonCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_ButtonName::eType> Common_ButtonName_all_enum_values;
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::OK);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PLAY_PAUSE);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SEEKLEFT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SEEKRIGHT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::TUNEUP);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::TUNEDOWN);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_0);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_1);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_2);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_3);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_4);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_5);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_6);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_7);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_8);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::PRESET_9);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::CUSTOM_BUTTON);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SEARCH);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::AC_MAX);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::AC);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::RECIRCULATE);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::FAN_UP);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::FAN_DOWN);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::TEMP_UP);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::TEMP_DOWN);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::DEFROST_MAX);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::DEFROST);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::DEFROST_REAR);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::UPPER_VENT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::LOWER_VENT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::VOLUME_UP);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::VOLUME_DOWN);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::EJECT);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SOURCE);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::SHUFFLE);
  Common_ButtonName_all_enum_values.insert(Common_ButtonName::REPEAT);

  // Struct member name.
  //
  // The name of the Button from the ButtonName enum
  std::shared_ptr<ISchemaItem> name_SchemaItem = TEnumSchemaItem<Common_ButtonName::eType>::create(Common_ButtonName_all_enum_values, TSchemaItemParameter<Common_ButtonName::eType>());

  // Struct member shortPressAvailable.
  //
  // The button supports a short press. Whenever the button is pressed short, onButtonPressed(SHORT) should be invoked.
  std::shared_ptr<ISchemaItem> shortPressAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member longPressAvailable.
  //
  // The button supports a LONG press. Whenever the button is pressed long, onButtonPressed(LONG) should be invoked.
  std::shared_ptr<ISchemaItem> longPressAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member upDownAvailable.
  //
  // The button supports "button down" and "button up". Whenever the button is pressed, onButtonEvent(DOWN) should be invoked. Whenever the button is released, onButtonEvent(UP) should be invoked.
  std::shared_ptr<ISchemaItem> upDownAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["name"] = CObjectSchemaItem::SMember(name_SchemaItem, true);
  schema_members["shortPressAvailable"] = CObjectSchemaItem::SMember(shortPressAvailable_SchemaItem, true);
  schema_members["longPressAvailable"] = CObjectSchemaItem::SMember(longPressAvailable_SchemaItem, true);
  schema_members["upDownAvailable"] = CObjectSchemaItem::SMember(upDownAvailable_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_VehicleDataResult(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_VehicleDataType::eType> Common_VehicleDataType_all_enum_values;
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_GPS);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_SPEED);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_RPM);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_FUELLEVEL);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_FUELLEVEL_STATE);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_FUELCONSUMPTION);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_EXTERNTEMP);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_VIN);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_PRNDL);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_TIREPRESSURE);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_ODOMETER);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_BELTSTATUS);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_BODYINFO);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_DEVICESTATUS);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_ECALLINFO);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_AIRBAGSTATUS);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_EMERGENCYEVENT);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_CLUSTERMODESTATUS);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_MYKEY);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_BRAKING);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_WIPERSTATUS);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_HEADLAMPSTATUS);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_BATTVOLTAGE);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_ENGINETORQUE);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_ACCPEDAL);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_STEERINGWHEEL);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_TURNSIGNAL);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_FUELRANGE);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_ENGINEOILLIFE);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_ELECTRONICPARKBRAKESTATUS);
  Common_VehicleDataType_all_enum_values.insert(Common_VehicleDataType::VEHICLEDATA_CLOUDAPPVEHICLEID);

  std::set<Common_VehicleDataResultCode::eType> Common_VehicleDataResultCode_all_enum_values;
  Common_VehicleDataResultCode_all_enum_values.insert(Common_VehicleDataResultCode::VDRC_SUCCESS);
  Common_VehicleDataResultCode_all_enum_values.insert(Common_VehicleDataResultCode::VDRC_TRUNCATED_DATA);
  Common_VehicleDataResultCode_all_enum_values.insert(Common_VehicleDataResultCode::VDRC_DISALLOWED);
  Common_VehicleDataResultCode_all_enum_values.insert(Common_VehicleDataResultCode::VDRC_USER_DISALLOWED);
  Common_VehicleDataResultCode_all_enum_values.insert(Common_VehicleDataResultCode::VDRC_INVALID_ID);
  Common_VehicleDataResultCode_all_enum_values.insert(Common_VehicleDataResultCode::VDRC_DATA_NOT_AVAILABLE);
  Common_VehicleDataResultCode_all_enum_values.insert(Common_VehicleDataResultCode::VDRC_DATA_ALREADY_SUBSCRIBED);
  Common_VehicleDataResultCode_all_enum_values.insert(Common_VehicleDataResultCode::VDRC_DATA_NOT_SUBSCRIBED);
  Common_VehicleDataResultCode_all_enum_values.insert(Common_VehicleDataResultCode::VDRC_IGNORED);

  // Struct member dataType.
  //
  // Defined published data element type.
  std::shared_ptr<ISchemaItem> dataType_SchemaItem = TEnumSchemaItem<Common_VehicleDataType::eType>::create(Common_VehicleDataType_all_enum_values, TSchemaItemParameter<Common_VehicleDataType::eType>());

  // Struct member resultCode.
  //
  // Published data result code.
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Common_VehicleDataResultCode::eType>::create(Common_VehicleDataResultCode_all_enum_values, TSchemaItemParameter<Common_VehicleDataResultCode::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["dataType"] = CObjectSchemaItem::SMember(dataType_SchemaItem, true);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_TouchCoord(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member x.
  //
  // The x coordinate of the touch.
  std::shared_ptr<ISchemaItem> x_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(10000), TSchemaItemParameter<int32_t>());

  // Struct member y.
  //
  // The y coordinate of the touch.
  std::shared_ptr<ISchemaItem> y_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(10000), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["x"] = CObjectSchemaItem::SMember(x_SchemaItem, true);
  schema_members["y"] = CObjectSchemaItem::SMember(y_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_TouchEvent(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member id.
  //
  // 
  //       A touch's unique identifier.  The application can track the current touch events by id.
  //       If a touch event has type begin, the id should be added to the set of touches.
  //       If a touch event has type end, the id should be removed from the set of touches.
  //     
  std::shared_ptr<ISchemaItem> id_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(9), TSchemaItemParameter<int32_t>());

  // Struct member ts.
  //
  // 
  //       The time that the touch was recorded.  This number can the time since the beginning of the session or something else as long as the units are in milliseconds.
  //       The timestamp is used to determined the rate of change of position of a touch.
  //       The application also uses the time to verify whether two touches, with different ids, are part of a single action by the user.
  //       If there is only a single timestamp in this array, it is the same for every coordinate in the coordinates array.
  //     
  std::shared_ptr<ISchemaItem> ts_SchemaItem = CArraySchemaItem::create(TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2147483647), TSchemaItemParameter<int32_t>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000));

  // Struct member c.
  std::shared_ptr<ISchemaItem> c_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TouchCoord), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000));CObjectSchemaItem::Members schema_members;

  schema_members["id"] = CObjectSchemaItem::SMember(id_SchemaItem, true);
  schema_members["ts"] = CObjectSchemaItem::SMember(ts_SchemaItem, true);
  schema_members["c"] = CObjectSchemaItem::SMember(c_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_PresetBankCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member onScreenPresetsAvailable.
  //
  // Must be true if onscreen custom presets are available.
  std::shared_ptr<ISchemaItem> onScreenPresetsAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["onScreenPresetsAvailable"] = CObjectSchemaItem::SMember(onScreenPresetsAvailable_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_Image(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_ImageType::eType> Common_ImageType_all_enum_values;
  Common_ImageType_all_enum_values.insert(Common_ImageType::STATIC);
  Common_ImageType_all_enum_values.insert(Common_ImageType::DYNAMIC);

  // Struct member value.
  //
  // The path to the dynamic image stored on HU or the static binary image itself.
  std::shared_ptr<ISchemaItem> value_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(65535), TSchemaItemParameter<std::string>());

  // Struct member imageType.
  //
  // Describes, whether it is a static or dynamic image.
  std::shared_ptr<ISchemaItem> imageType_SchemaItem = TEnumSchemaItem<Common_ImageType::eType>::create(Common_ImageType_all_enum_values, TSchemaItemParameter<Common_ImageType::eType>());

  // Struct member isTemplate.
  //
  // Optional value to specify whether it's a template image. A template image can be (re)colored by the HMI as needed by using an image pattern
  std::shared_ptr<ISchemaItem> isTemplate_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["value"] = CObjectSchemaItem::SMember(value_SchemaItem, true);
  schema_members["imageType"] = CObjectSchemaItem::SMember(imageType_SchemaItem, true);
  schema_members["isTemplate"] = CObjectSchemaItem::SMember(isTemplate_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_DeviceInfo(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_TransportType::eType> Common_TransportType_all_enum_values;
  Common_TransportType_all_enum_values.insert(Common_TransportType::BLUETOOTH);
  Common_TransportType_all_enum_values.insert(Common_TransportType::USB_IOS);
  Common_TransportType_all_enum_values.insert(Common_TransportType::USB_AOA);
  Common_TransportType_all_enum_values.insert(Common_TransportType::WIFI);
  Common_TransportType_all_enum_values.insert(Common_TransportType::CLOUD_WEBSOCKET);

  // Struct member name.
  //
  // The name of the device connected.
  std::shared_ptr<ISchemaItem> name_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member id.
  //
  // The ID of the device connectedi: either hash of device's USB serial number(in case of USB connection) or has of device's MAC address(in case of BlueTooth or WIFI connection
  std::shared_ptr<ISchemaItem> id_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member transportType.
  //
  // The transport type the named-app's-device is connected over HU(BlueTooth, USB or WiFi). It must be provided in OnAppRegistered and in UpdateDeviceList
  std::shared_ptr<ISchemaItem> transportType_SchemaItem = TEnumSchemaItem<Common_TransportType::eType>::create(Common_TransportType_all_enum_values, TSchemaItemParameter<Common_TransportType::eType>());

  // Struct member isSDLAllowed.
  //
  // Sent by SDL in UpdateDeviceList. ’true’ – if device is allowed for PolicyTable Exchange; ‘false’ – if device is NOT allowed for PolicyTable Exchange 
  std::shared_ptr<ISchemaItem> isSDLAllowed_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["name"] = CObjectSchemaItem::SMember(name_SchemaItem, true);
  schema_members["id"] = CObjectSchemaItem::SMember(id_SchemaItem, true);
  schema_members["transportType"] = CObjectSchemaItem::SMember(transportType_SchemaItem, false);
  schema_members["isSDLAllowed"] = CObjectSchemaItem::SMember(isSDLAllowed_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_SoftButton(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_SoftButtonType::eType> Common_SoftButtonType_all_enum_values;
  Common_SoftButtonType_all_enum_values.insert(Common_SoftButtonType::SBT_TEXT);
  Common_SoftButtonType_all_enum_values.insert(Common_SoftButtonType::SBT_IMAGE);
  Common_SoftButtonType_all_enum_values.insert(Common_SoftButtonType::SBT_BOTH);

  std::set<Common_SystemAction::eType> Common_SystemAction_all_enum_values;
  Common_SystemAction_all_enum_values.insert(Common_SystemAction::DEFAULT_ACTION);
  Common_SystemAction_all_enum_values.insert(Common_SystemAction::STEAL_FOCUS);
  Common_SystemAction_all_enum_values.insert(Common_SystemAction::KEEP_CONTEXT);

  // Struct member type.
  //
  // Describes, whether text, icon or both text and image should be displayed on the soft button. See softButtonType
  std::shared_ptr<ISchemaItem> type_SchemaItem = TEnumSchemaItem<Common_SoftButtonType::eType>::create(Common_SoftButtonType_all_enum_values, TSchemaItemParameter<Common_SoftButtonType::eType>());

  // Struct member text.
  //
  // Optional text to be displayed (if defined as TEXT or BOTH)
  std::shared_ptr<ISchemaItem> text_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member image.
  //
  // Optional image struct for SoftButton (if defined as IMAGE or BOTH)
  std::shared_ptr<ISchemaItem> image_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Image);

  // Struct member isHighlighted.
  //
  // If true, must be highlighted
  // If false, must be not
  std::shared_ptr<ISchemaItem> isHighlighted_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member softButtonID.
  //
  // Value which must be returned via OnButtonPress / OnButtonEvent
  std::shared_ptr<ISchemaItem> softButtonID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>());

  // Struct member systemAction.
  //
  // Parameter indicates whether clicking a SoftButton must call a specific system action.  See SystemAction
  std::shared_ptr<ISchemaItem> systemAction_SchemaItem = TEnumSchemaItem<Common_SystemAction::eType>::create(Common_SystemAction_all_enum_values, TSchemaItemParameter<Common_SystemAction::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["type"] = CObjectSchemaItem::SMember(type_SchemaItem, true);
  schema_members["text"] = CObjectSchemaItem::SMember(text_SchemaItem, false);
  schema_members["image"] = CObjectSchemaItem::SMember(image_SchemaItem, false);
  schema_members["isHighlighted"] = CObjectSchemaItem::SMember(isHighlighted_SchemaItem, false);
  schema_members["softButtonID"] = CObjectSchemaItem::SMember(softButtonID_SchemaItem, true);
  schema_members["systemAction"] = CObjectSchemaItem::SMember(systemAction_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_TTSChunk(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_SpeechCapabilities::eType> Common_SpeechCapabilities_all_enum_values;
  Common_SpeechCapabilities_all_enum_values.insert(Common_SpeechCapabilities::SC_TEXT);
  Common_SpeechCapabilities_all_enum_values.insert(Common_SpeechCapabilities::SAPI_PHONEMES);
  Common_SpeechCapabilities_all_enum_values.insert(Common_SpeechCapabilities::LHPLUS_PHONEMES);
  Common_SpeechCapabilities_all_enum_values.insert(Common_SpeechCapabilities::PRE_RECORDED);
  Common_SpeechCapabilities_all_enum_values.insert(Common_SpeechCapabilities::SILENCE);
  Common_SpeechCapabilities_all_enum_values.insert(Common_SpeechCapabilities::FILE);

  // Struct member text.
  //
  // The text or phonemes to be spoken, or the name of an audio file to play.
  std::shared_ptr<ISchemaItem> text_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member type.
  //
  // Describes whether the TTS chunk is plain text, a specific phoneme set, or an audio file. See SpeechCapabilities.
  std::shared_ptr<ISchemaItem> type_SchemaItem = TEnumSchemaItem<Common_SpeechCapabilities::eType>::create(Common_SpeechCapabilities_all_enum_values, TSchemaItemParameter<Common_SpeechCapabilities::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["text"] = CObjectSchemaItem::SMember(text_SchemaItem, true);
  schema_members["type"] = CObjectSchemaItem::SMember(type_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_TemplateColorScheme(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member primaryColor.
  //
  // The primary "accent" color
  std::shared_ptr<ISchemaItem> primaryColor_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_RGBColor);

  // Struct member secondaryColor.
  //
  // The secondary "accent" color
  std::shared_ptr<ISchemaItem> secondaryColor_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_RGBColor);

  // Struct member backgroundColor.
  //
  // The color of the background
  std::shared_ptr<ISchemaItem> backgroundColor_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_RGBColor);CObjectSchemaItem::Members schema_members;

  schema_members["primaryColor"] = CObjectSchemaItem::SMember(primaryColor_SchemaItem, false);
  schema_members["secondaryColor"] = CObjectSchemaItem::SMember(secondaryColor_SchemaItem, false);
  schema_members["backgroundColor"] = CObjectSchemaItem::SMember(backgroundColor_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_HMIApplication(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_Language::eType> Common_Language_all_enum_values;
  Common_Language_all_enum_values.insert(Common_Language::EN_US);
  Common_Language_all_enum_values.insert(Common_Language::ES_MX);
  Common_Language_all_enum_values.insert(Common_Language::FR_CA);
  Common_Language_all_enum_values.insert(Common_Language::DE_DE);
  Common_Language_all_enum_values.insert(Common_Language::ES_ES);
  Common_Language_all_enum_values.insert(Common_Language::EN_GB);
  Common_Language_all_enum_values.insert(Common_Language::RU_RU);
  Common_Language_all_enum_values.insert(Common_Language::TR_TR);
  Common_Language_all_enum_values.insert(Common_Language::PL_PL);
  Common_Language_all_enum_values.insert(Common_Language::FR_FR);
  Common_Language_all_enum_values.insert(Common_Language::IT_IT);
  Common_Language_all_enum_values.insert(Common_Language::SV_SE);
  Common_Language_all_enum_values.insert(Common_Language::PT_PT);
  Common_Language_all_enum_values.insert(Common_Language::NL_NL);
  Common_Language_all_enum_values.insert(Common_Language::EN_AU);
  Common_Language_all_enum_values.insert(Common_Language::ZH_CN);
  Common_Language_all_enum_values.insert(Common_Language::ZH_TW);
  Common_Language_all_enum_values.insert(Common_Language::JA_JP);
  Common_Language_all_enum_values.insert(Common_Language::AR_SA);
  Common_Language_all_enum_values.insert(Common_Language::KO_KR);
  Common_Language_all_enum_values.insert(Common_Language::PT_BR);
  Common_Language_all_enum_values.insert(Common_Language::CS_CZ);
  Common_Language_all_enum_values.insert(Common_Language::DA_DK);
  Common_Language_all_enum_values.insert(Common_Language::NO_NO);
  Common_Language_all_enum_values.insert(Common_Language::NL_BE);
  Common_Language_all_enum_values.insert(Common_Language::EL_GR);
  Common_Language_all_enum_values.insert(Common_Language::HU_HU);
  Common_Language_all_enum_values.insert(Common_Language::FI_FI);
  Common_Language_all_enum_values.insert(Common_Language::SK_SK);
  Common_Language_all_enum_values.insert(Common_Language::EN_IN);
  Common_Language_all_enum_values.insert(Common_Language::TH_TH);
  Common_Language_all_enum_values.insert(Common_Language::EN_SA);
  Common_Language_all_enum_values.insert(Common_Language::HE_IL);
  Common_Language_all_enum_values.insert(Common_Language::RO_RO);
  Common_Language_all_enum_values.insert(Common_Language::UK_UA);
  Common_Language_all_enum_values.insert(Common_Language::ID_ID);
  Common_Language_all_enum_values.insert(Common_Language::VI_VN);
  Common_Language_all_enum_values.insert(Common_Language::MS_MY);
  Common_Language_all_enum_values.insert(Common_Language::HI_IN);

  std::set<Common_AppHMIType::eType> Common_AppHMIType_all_enum_values;
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::DEFAULT);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::COMMUNICATION);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::MEDIA);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::MESSAGING);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::NAVIGATION);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::INFORMATION);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::SOCIAL);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::BACKGROUND_PROCESS);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::TESTING);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::SYSTEM);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::PROJECTION);
  Common_AppHMIType_all_enum_values.insert(Common_AppHMIType::REMOTE_CONTROL);

  std::set<Common_RequestType::eType> Common_RequestType_all_enum_values;
  Common_RequestType_all_enum_values.insert(Common_RequestType::HTTP);
  Common_RequestType_all_enum_values.insert(Common_RequestType::FILE_RESUME);
  Common_RequestType_all_enum_values.insert(Common_RequestType::AUTH_REQUEST);
  Common_RequestType_all_enum_values.insert(Common_RequestType::AUTH_CHALLENGE);
  Common_RequestType_all_enum_values.insert(Common_RequestType::AUTH_ACK);
  Common_RequestType_all_enum_values.insert(Common_RequestType::PROPRIETARY);
  Common_RequestType_all_enum_values.insert(Common_RequestType::QUERY_APPS);
  Common_RequestType_all_enum_values.insert(Common_RequestType::LAUNCH_APP);
  Common_RequestType_all_enum_values.insert(Common_RequestType::LOCK_SCREEN_ICON_URL);
  Common_RequestType_all_enum_values.insert(Common_RequestType::TRAFFIC_MESSAGE_CHANNEL);
  Common_RequestType_all_enum_values.insert(Common_RequestType::DRIVER_PROFILE);
  Common_RequestType_all_enum_values.insert(Common_RequestType::VOICE_SEARCH);
  Common_RequestType_all_enum_values.insert(Common_RequestType::NAVIGATION);
  Common_RequestType_all_enum_values.insert(Common_RequestType::PHONE);
  Common_RequestType_all_enum_values.insert(Common_RequestType::CLIMATE);
  Common_RequestType_all_enum_values.insert(Common_RequestType::SETTINGS);
  Common_RequestType_all_enum_values.insert(Common_RequestType::VEHICLE_DIAGNOSTICS);
  Common_RequestType_all_enum_values.insert(Common_RequestType::EMERGENCY);
  Common_RequestType_all_enum_values.insert(Common_RequestType::MEDIA);
  Common_RequestType_all_enum_values.insert(Common_RequestType::FOTA);
  Common_RequestType_all_enum_values.insert(Common_RequestType::OEM_SPECIFIC);
  Common_RequestType_all_enum_values.insert(Common_RequestType::ICON_URL);

  std::set<Common_CloudConnectionStatus::eType> Common_CloudConnectionStatus_all_enum_values;
  Common_CloudConnectionStatus_all_enum_values.insert(Common_CloudConnectionStatus::NOT_CONNECTED);
  Common_CloudConnectionStatus_all_enum_values.insert(Common_CloudConnectionStatus::CONNECTED);
  Common_CloudConnectionStatus_all_enum_values.insert(Common_CloudConnectionStatus::RETRY);

  // Struct member appName.
  //
  // The mobile application name, e.g. "Ford Drive Green".
  std::shared_ptr<ISchemaItem> appName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Struct member ngnMediaScreenAppName.
  //
  // Provides an abbreviated version of the app name (if needed), that may be displayed on the NGN media screen.
  // If not provided, the appName should be used instead (and may be truncated if too long)
  std::shared_ptr<ISchemaItem> ngnMediaScreenAppName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Struct member icon.
  //
  // Path to application icon stored on HU.
  std::shared_ptr<ISchemaItem> icon_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member deviceInfo.
  //
  // The ID, serial number, transport type the named-app's-device is connected over to HU.
  std::shared_ptr<ISchemaItem> deviceInfo_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DeviceInfo);

  // Struct member secondaryDeviceInfo.
  //
  // The ID, serial number, transport type that are acquired through Secondary Transport.
  std::shared_ptr<ISchemaItem> secondaryDeviceInfo_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DeviceInfo);

  // Struct member policyAppID.
  //
  // Policy ID(=the appID the application registers with) of registered application.
  std::shared_ptr<ISchemaItem> policyAppID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(50), TSchemaItemParameter<std::string>());

  // Struct member ttsName.
  //
  // 
  //         TTS string for VR recognition of the mobile application name, e.g. "Ford Drive Green".
  //         Meant to overcome any failing on speech engine in properly pronouncing / understanding app name.
  //         May not be empty.
  //         May not start with a new line character.
  //         Not unique value
  //       
  std::shared_ptr<ISchemaItem> ttsName_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TTSChunk), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member vrSynonyms.
  //
  // 
  //         Defines an additional voice recognition command.
  //         Must not interfere with any name of previously registered applications(SDL makes check).
  //       
  std::shared_ptr<ISchemaItem> vrSynonyms_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(40), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member appID.
  //
  // Unique (during ignition cycle) id of the application. To be used in all RPCs sent by both HU system and SDL
  std::shared_ptr<ISchemaItem> appID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member hmiDisplayLanguageDesired.
  //
  // The language the application intends to use on HU  
  std::shared_ptr<ISchemaItem> hmiDisplayLanguageDesired_SchemaItem = TEnumSchemaItem<Common_Language::eType>::create(Common_Language_all_enum_values, TSchemaItemParameter<Common_Language::eType>());

  // Struct member isMediaApplication.
  //
  // Indicates whether it is a media or a non-media application.
  std::shared_ptr<ISchemaItem> isMediaApplication_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member appType.
  //
  // List of all applicable app types stating which classifications to be given to the app.
  // e.g. for platforms like GEN2, this determines which "corner(s)" the app can populate.
  std::shared_ptr<ISchemaItem> appType_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<Common_AppHMIType::eType>::create(Common_AppHMIType_all_enum_values, TSchemaItemParameter<Common_AppHMIType::eType>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member greyOut.
  //
  // Indicates whether application should be dimmed on the screen.
  // Applicable only for apps received through QueryApps and still not registered.
  std::shared_ptr<ISchemaItem> greyOut_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member requestType.
  //
  // The list of SystemRequest's RequestTypes allowed by policies for the named application
  // (the app's SystemRequest sent with RequestType out of this list will get 'disallowed' response from SDL).
  // If SDL sends an empty array - any RequestType is allowed for this app.
  // If SDL omits this parameter - none RequestType is allowed for this app
  // (either this is a pre-registered app or such is dictated by policies).
  std::shared_ptr<ISchemaItem> requestType_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<Common_RequestType::eType>::create(Common_RequestType_all_enum_values, TSchemaItemParameter<Common_RequestType::eType>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));

  // Struct member requestSubType.
  //
  // 
  //         The list of SystemRequest's requestSubTypes allowed by policies for the named application.
  //         If the app sends a requestSubType which is not specified in this list, then that request should be rejected.
  //         An empty array signifies that any value of requestSubType is allowed for this app.
  //         If this parameter is omitted, then a request with any value of requestSubType is now allowed for this app
  //       
  std::shared_ptr<ISchemaItem> requestSubType_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));

  // Struct member dayColorScheme.
  std::shared_ptr<ISchemaItem> dayColorScheme_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TemplateColorScheme);

  // Struct member nightColorScheme.
  std::shared_ptr<ISchemaItem> nightColorScheme_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TemplateColorScheme);

  // Struct member isCloudApplication.
  std::shared_ptr<ISchemaItem> isCloudApplication_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member cloudConnectionStatus.
  std::shared_ptr<ISchemaItem> cloudConnectionStatus_SchemaItem = TEnumSchemaItem<Common_CloudConnectionStatus::eType>::create(Common_CloudConnectionStatus_all_enum_values, TSchemaItemParameter<Common_CloudConnectionStatus::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["appName"] = CObjectSchemaItem::SMember(appName_SchemaItem, true);
  schema_members["ngnMediaScreenAppName"] = CObjectSchemaItem::SMember(ngnMediaScreenAppName_SchemaItem, false);
  schema_members["icon"] = CObjectSchemaItem::SMember(icon_SchemaItem, false);
  schema_members["deviceInfo"] = CObjectSchemaItem::SMember(deviceInfo_SchemaItem, true);
  schema_members["secondaryDeviceInfo"] = CObjectSchemaItem::SMember(secondaryDeviceInfo_SchemaItem, false);
  schema_members["policyAppID"] = CObjectSchemaItem::SMember(policyAppID_SchemaItem, true);
  schema_members["ttsName"] = CObjectSchemaItem::SMember(ttsName_SchemaItem, false);
  schema_members["vrSynonyms"] = CObjectSchemaItem::SMember(vrSynonyms_SchemaItem, false);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true);
  schema_members["hmiDisplayLanguageDesired"] = CObjectSchemaItem::SMember(hmiDisplayLanguageDesired_SchemaItem, false);
  schema_members["isMediaApplication"] = CObjectSchemaItem::SMember(isMediaApplication_SchemaItem, false);
  schema_members["appType"] = CObjectSchemaItem::SMember(appType_SchemaItem, false);
  schema_members["greyOut"] = CObjectSchemaItem::SMember(greyOut_SchemaItem, false);
  schema_members["requestType"] = CObjectSchemaItem::SMember(requestType_SchemaItem, false);
  schema_members["requestSubType"] = CObjectSchemaItem::SMember(requestSubType_SchemaItem, false);
  schema_members["dayColorScheme"] = CObjectSchemaItem::SMember(dayColorScheme_SchemaItem, false);
  schema_members["nightColorScheme"] = CObjectSchemaItem::SMember(nightColorScheme_SchemaItem, false);
  schema_members["isCloudApplication"] = CObjectSchemaItem::SMember(isCloudApplication_SchemaItem, false);
  schema_members["cloudConnectionStatus"] = CObjectSchemaItem::SMember(cloudConnectionStatus_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_MenuParams(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member parentID.
  //
  // unique ID of the sub menu, the command must be added to.
  // If not provided, the command must be added to the top level of the in application menu.
  std::shared_ptr<ISchemaItem> parentID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Struct member position.
  //
  // Position within the items that are at the top level of the in application menu.
  // 0 should insert at the front.
  // 1 should insert at the second position.
  // if position is greater than or equal to the number of items on the top level, the the sub menu/command should be appended to the end.
  // If this param is omitted the entry should be added at the end.
  std::shared_ptr<ISchemaItem> position_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(1000), TSchemaItemParameter<int32_t>());

  // Struct member menuName.
  //
  // The name of the sub menu/command.
  std::shared_ptr<ISchemaItem> menuName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["parentID"] = CObjectSchemaItem::SMember(parentID_SchemaItem, false);
  schema_members["position"] = CObjectSchemaItem::SMember(position_SchemaItem, false);
  schema_members["menuName"] = CObjectSchemaItem::SMember(menuName_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_Choice(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member choiceID.
  //
  //  The unique within the concerned application identifier for this choice 
  std::shared_ptr<ISchemaItem> choiceID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>());

  // Struct member menuName.
  //
  //  The name of the choice 
  std::shared_ptr<ISchemaItem> menuName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member image.
  //
  //  The image for representing the choice 
  std::shared_ptr<ISchemaItem> image_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Image);

  // Struct member secondaryText.
  //
  // Optional secondary text to display; e.g. address of POI in a search result entry
  std::shared_ptr<ISchemaItem> secondaryText_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member tertiaryText.
  //
  // Optional tertiary text to display; e.g. distance to POI for a search result entry
  std::shared_ptr<ISchemaItem> tertiaryText_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member secondaryImage.
  //
  // Optional secondary image struct for choice
  std::shared_ptr<ISchemaItem> secondaryImage_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Image);CObjectSchemaItem::Members schema_members;

  schema_members["choiceID"] = CObjectSchemaItem::SMember(choiceID_SchemaItem, true);
  schema_members["menuName"] = CObjectSchemaItem::SMember(menuName_SchemaItem, false);
  schema_members["image"] = CObjectSchemaItem::SMember(image_SchemaItem, false);
  schema_members["secondaryText"] = CObjectSchemaItem::SMember(secondaryText_SchemaItem, false);
  schema_members["tertiaryText"] = CObjectSchemaItem::SMember(tertiaryText_SchemaItem, false);
  schema_members["secondaryImage"] = CObjectSchemaItem::SMember(secondaryImage_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_VrHelpItem(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member text.
  //
  // Text to display for VR Help item
  std::shared_ptr<ISchemaItem> text_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member image.
  //
  // Image struct for VR Help item
  std::shared_ptr<ISchemaItem> image_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Image);

  // Struct member position.
  //
  // Position to display item in VR Help list
  std::shared_ptr<ISchemaItem> position_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["text"] = CObjectSchemaItem::SMember(text_SchemaItem, true);
  schema_members["image"] = CObjectSchemaItem::SMember(image_SchemaItem, false);
  schema_members["position"] = CObjectSchemaItem::SMember(position_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_TimeFormat(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member hours.
  //
  // The hour of the media clock.
  // Some units only support a max of 19 hours. If out of range, it should be rejected.
  std::shared_ptr<ISchemaItem> hours_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(59), TSchemaItemParameter<int32_t>());

  // Struct member minutes.
  std::shared_ptr<ISchemaItem> minutes_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(59), TSchemaItemParameter<int32_t>());

  // Struct member seconds.
  std::shared_ptr<ISchemaItem> seconds_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(59), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["hours"] = CObjectSchemaItem::SMember(hours_SchemaItem, true);
  schema_members["minutes"] = CObjectSchemaItem::SMember(minutes_SchemaItem, true);
  schema_members["seconds"] = CObjectSchemaItem::SMember(seconds_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_TouchEventCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member pressAvailable.
  std::shared_ptr<ISchemaItem> pressAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member multiTouchAvailable.
  std::shared_ptr<ISchemaItem> multiTouchAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member doublePressAvailable.
  std::shared_ptr<ISchemaItem> doublePressAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["pressAvailable"] = CObjectSchemaItem::SMember(pressAvailable_SchemaItem, true);
  schema_members["multiTouchAvailable"] = CObjectSchemaItem::SMember(multiTouchAvailable_SchemaItem, true);
  schema_members["doublePressAvailable"] = CObjectSchemaItem::SMember(doublePressAvailable_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_ImageResolution(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member resolutionWidth.
  //
  // The image resolution width.
  std::shared_ptr<ISchemaItem> resolutionWidth_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(10000), TSchemaItemParameter<int32_t>());

  // Struct member resolutionHeight.
  //
  // The image resolution height.
  std::shared_ptr<ISchemaItem> resolutionHeight_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(10000), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["resolutionWidth"] = CObjectSchemaItem::SMember(resolutionWidth_SchemaItem, true);
  schema_members["resolutionHeight"] = CObjectSchemaItem::SMember(resolutionHeight_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_ScreenParams(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member resolution.
  //
  // The resolution of the prescribed screen area.
  std::shared_ptr<ISchemaItem> resolution_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ImageResolution);

  // Struct member touchEventAvailable.
  //
  // Types of screen touch events available in screen area.
  std::shared_ptr<ISchemaItem> touchEventAvailable_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TouchEventCapabilities);CObjectSchemaItem::Members schema_members;

  schema_members["resolution"] = CObjectSchemaItem::SMember(resolution_SchemaItem, true);
  schema_members["touchEventAvailable"] = CObjectSchemaItem::SMember(touchEventAvailable_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_ImageField(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_ImageFieldName::eType> Common_ImageFieldName_all_enum_values;
  Common_ImageFieldName_all_enum_values.insert(Common_ImageFieldName::softButtonImage);
  Common_ImageFieldName_all_enum_values.insert(Common_ImageFieldName::choiceImage);
  Common_ImageFieldName_all_enum_values.insert(Common_ImageFieldName::choiceSecondaryImage);
  Common_ImageFieldName_all_enum_values.insert(Common_ImageFieldName::vrHelpItem);
  Common_ImageFieldName_all_enum_values.insert(Common_ImageFieldName::turnIcon);
  Common_ImageFieldName_all_enum_values.insert(Common_ImageFieldName::menuIcon);
  Common_ImageFieldName_all_enum_values.insert(Common_ImageFieldName::cmdIcon);
  Common_ImageFieldName_all_enum_values.insert(Common_ImageFieldName::appIcon);
  Common_ImageFieldName_all_enum_values.insert(Common_ImageFieldName::graphic);
  Common_ImageFieldName_all_enum_values.insert(Common_ImageFieldName::secondaryGraphic);
  Common_ImageFieldName_all_enum_values.insert(Common_ImageFieldName::showConstantTBTIcon);
  Common_ImageFieldName_all_enum_values.insert(Common_ImageFieldName::showConstantTBTNextTurnIcon);
  Common_ImageFieldName_all_enum_values.insert(Common_ImageFieldName::locationImage);

  std::set<Common_FileType::eType> Common_FileType_all_enum_values;
  Common_FileType_all_enum_values.insert(Common_FileType::GRAPHIC_BMP);
  Common_FileType_all_enum_values.insert(Common_FileType::GRAPHIC_JPEG);
  Common_FileType_all_enum_values.insert(Common_FileType::GRAPHIC_PNG);
  Common_FileType_all_enum_values.insert(Common_FileType::AUDIO_WAVE);
  Common_FileType_all_enum_values.insert(Common_FileType::AUDIO_MP3);
  Common_FileType_all_enum_values.insert(Common_FileType::AUDIO_AAC);
  Common_FileType_all_enum_values.insert(Common_FileType::BINARY);
  Common_FileType_all_enum_values.insert(Common_FileType::JSON);

  // Struct member name.
  //
  // The name that identifies the field. See ImageFieldName.
  std::shared_ptr<ISchemaItem> name_SchemaItem = TEnumSchemaItem<Common_ImageFieldName::eType>::create(Common_ImageFieldName_all_enum_values, TSchemaItemParameter<Common_ImageFieldName::eType>());

  // Struct member imageTypeSupported.
  //
  // The image types that are supported in this field. See FileType.
  std::shared_ptr<ISchemaItem> imageTypeSupported_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<Common_FileType::eType>::create(Common_FileType_all_enum_values, TSchemaItemParameter<Common_FileType::eType>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member imageResolution.
  //
  // The image resolution of this field.
  std::shared_ptr<ISchemaItem> imageResolution_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ImageResolution);CObjectSchemaItem::Members schema_members;

  schema_members["name"] = CObjectSchemaItem::SMember(name_SchemaItem, true);
  schema_members["imageTypeSupported"] = CObjectSchemaItem::SMember(imageTypeSupported_SchemaItem, false);
  schema_members["imageResolution"] = CObjectSchemaItem::SMember(imageResolution_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_VideoStreamingFormat(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_VideoStreamingProtocol::eType> Common_VideoStreamingProtocol_all_enum_values;
  Common_VideoStreamingProtocol_all_enum_values.insert(Common_VideoStreamingProtocol::RAW);
  Common_VideoStreamingProtocol_all_enum_values.insert(Common_VideoStreamingProtocol::RTP);
  Common_VideoStreamingProtocol_all_enum_values.insert(Common_VideoStreamingProtocol::RTSP);
  Common_VideoStreamingProtocol_all_enum_values.insert(Common_VideoStreamingProtocol::RTMP);
  Common_VideoStreamingProtocol_all_enum_values.insert(Common_VideoStreamingProtocol::WEBM);

  std::set<Common_VideoStreamingCodec::eType> Common_VideoStreamingCodec_all_enum_values;
  Common_VideoStreamingCodec_all_enum_values.insert(Common_VideoStreamingCodec::H264);
  Common_VideoStreamingCodec_all_enum_values.insert(Common_VideoStreamingCodec::H265);
  Common_VideoStreamingCodec_all_enum_values.insert(Common_VideoStreamingCodec::Theora);
  Common_VideoStreamingCodec_all_enum_values.insert(Common_VideoStreamingCodec::VP8);
  Common_VideoStreamingCodec_all_enum_values.insert(Common_VideoStreamingCodec::VP9);

  // Struct member protocol.
  //
  // Protocol type, see VideoStreamingProtocol
  std::shared_ptr<ISchemaItem> protocol_SchemaItem = TEnumSchemaItem<Common_VideoStreamingProtocol::eType>::create(Common_VideoStreamingProtocol_all_enum_values, TSchemaItemParameter<Common_VideoStreamingProtocol::eType>());

  // Struct member codec.
  //
  // Codec type, see VideoStreamingCodec
  std::shared_ptr<ISchemaItem> codec_SchemaItem = TEnumSchemaItem<Common_VideoStreamingCodec::eType>::create(Common_VideoStreamingCodec_all_enum_values, TSchemaItemParameter<Common_VideoStreamingCodec::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["protocol"] = CObjectSchemaItem::SMember(protocol_SchemaItem, true);
  schema_members["codec"] = CObjectSchemaItem::SMember(codec_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_VideoConfig(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_VideoStreamingProtocol::eType> Common_VideoStreamingProtocol_all_enum_values;
  Common_VideoStreamingProtocol_all_enum_values.insert(Common_VideoStreamingProtocol::RAW);
  Common_VideoStreamingProtocol_all_enum_values.insert(Common_VideoStreamingProtocol::RTP);
  Common_VideoStreamingProtocol_all_enum_values.insert(Common_VideoStreamingProtocol::RTSP);
  Common_VideoStreamingProtocol_all_enum_values.insert(Common_VideoStreamingProtocol::RTMP);
  Common_VideoStreamingProtocol_all_enum_values.insert(Common_VideoStreamingProtocol::WEBM);

  std::set<Common_VideoStreamingCodec::eType> Common_VideoStreamingCodec_all_enum_values;
  Common_VideoStreamingCodec_all_enum_values.insert(Common_VideoStreamingCodec::H264);
  Common_VideoStreamingCodec_all_enum_values.insert(Common_VideoStreamingCodec::H265);
  Common_VideoStreamingCodec_all_enum_values.insert(Common_VideoStreamingCodec::Theora);
  Common_VideoStreamingCodec_all_enum_values.insert(Common_VideoStreamingCodec::VP8);
  Common_VideoStreamingCodec_all_enum_values.insert(Common_VideoStreamingCodec::VP9);

  // Struct member protocol.
  //
  // The video protocol configuration
  std::shared_ptr<ISchemaItem> protocol_SchemaItem = TEnumSchemaItem<Common_VideoStreamingProtocol::eType>::create(Common_VideoStreamingProtocol_all_enum_values, TSchemaItemParameter<Common_VideoStreamingProtocol::eType>());

  // Struct member codec.
  //
  // The video codec configuration
  std::shared_ptr<ISchemaItem> codec_SchemaItem = TEnumSchemaItem<Common_VideoStreamingCodec::eType>::create(Common_VideoStreamingCodec_all_enum_values, TSchemaItemParameter<Common_VideoStreamingCodec::eType>());

  // Struct member width.
  //
  // Width of the video stream, in pixels.
  std::shared_ptr<ISchemaItem> width_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member height.
  //
  // Height of the video stream, in pixels.
  std::shared_ptr<ISchemaItem> height_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["protocol"] = CObjectSchemaItem::SMember(protocol_SchemaItem, false);
  schema_members["codec"] = CObjectSchemaItem::SMember(codec_SchemaItem, false);
  schema_members["width"] = CObjectSchemaItem::SMember(width_SchemaItem, false);
  schema_members["height"] = CObjectSchemaItem::SMember(height_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_DisplayCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_DisplayType::eType> Common_DisplayType_all_enum_values;
  Common_DisplayType_all_enum_values.insert(Common_DisplayType::CID);
  Common_DisplayType_all_enum_values.insert(Common_DisplayType::TYPE2);
  Common_DisplayType_all_enum_values.insert(Common_DisplayType::TYPE5);
  Common_DisplayType_all_enum_values.insert(Common_DisplayType::NGN);
  Common_DisplayType_all_enum_values.insert(Common_DisplayType::GEN2_8_DMA);
  Common_DisplayType_all_enum_values.insert(Common_DisplayType::GEN2_6_DMA);
  Common_DisplayType_all_enum_values.insert(Common_DisplayType::MFD3);
  Common_DisplayType_all_enum_values.insert(Common_DisplayType::MFD4);
  Common_DisplayType_all_enum_values.insert(Common_DisplayType::MFD5);
  Common_DisplayType_all_enum_values.insert(Common_DisplayType::GEN3_8_INCH);
  Common_DisplayType_all_enum_values.insert(Common_DisplayType::SDL_GENERIC);

  std::set<Common_MediaClockFormat::eType> Common_MediaClockFormat_all_enum_values;
  Common_MediaClockFormat_all_enum_values.insert(Common_MediaClockFormat::CLOCK1);
  Common_MediaClockFormat_all_enum_values.insert(Common_MediaClockFormat::CLOCK2);
  Common_MediaClockFormat_all_enum_values.insert(Common_MediaClockFormat::CLOCK3);
  Common_MediaClockFormat_all_enum_values.insert(Common_MediaClockFormat::CLOCKTEXT1);
  Common_MediaClockFormat_all_enum_values.insert(Common_MediaClockFormat::CLOCKTEXT2);
  Common_MediaClockFormat_all_enum_values.insert(Common_MediaClockFormat::CLOCKTEXT3);
  Common_MediaClockFormat_all_enum_values.insert(Common_MediaClockFormat::CLOCKTEXT4);

  std::set<Common_ImageType::eType> Common_ImageType_all_enum_values;
  Common_ImageType_all_enum_values.insert(Common_ImageType::STATIC);
  Common_ImageType_all_enum_values.insert(Common_ImageType::DYNAMIC);

  // Struct member displayType.
  //
  // The type of the display. See DisplayType
  std::shared_ptr<ISchemaItem> displayType_SchemaItem = TEnumSchemaItem<Common_DisplayType::eType>::create(Common_DisplayType_all_enum_values, TSchemaItemParameter<Common_DisplayType::eType>());

  // Struct member displayName.
  //
  // The name of the display the app is connected to.
  std::shared_ptr<ISchemaItem> displayName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member textFields.
  //
  // A set of all fields for text displaying supported by HU. See TextFieldName.
  // If there are no textfields supported, the empty array must be returned
  std::shared_ptr<ISchemaItem> textFields_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TextField), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));

  // Struct member imageFields.
  //
  // A set of all fields that support images. See ImageField
  std::shared_ptr<ISchemaItem> imageFields_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ImageField), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member mediaClockFormats.
  //
  // A set of all supported formats of the media clock. See MediaClockFormat
  std::shared_ptr<ISchemaItem> mediaClockFormats_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<Common_MediaClockFormat::eType>::create(Common_MediaClockFormat_all_enum_values, TSchemaItemParameter<Common_MediaClockFormat::eType>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));

  // Struct member imageCapabilities.
  std::shared_ptr<ISchemaItem> imageCapabilities_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<Common_ImageType::eType>::create(Common_ImageType_all_enum_values, TSchemaItemParameter<Common_ImageType::eType>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(2));

  // Struct member graphicSupported.
  //
  // The display's persistent screen supports referencing a static or dynamic image.
  std::shared_ptr<ISchemaItem> graphicSupported_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member templatesAvailable.
  //
  // A set of all predefined persistent display templates available on headunit.  To be referenced in SetDisplayLayout.
  std::shared_ptr<ISchemaItem> templatesAvailable_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));

  // Struct member screenParams.
  //
  // A set of all parameters related to a prescribed screen area (e.g. for video / touch input).
  std::shared_ptr<ISchemaItem> screenParams_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ScreenParams);

  // Struct member numCustomPresetsAvailable.
  //
  // The number of on-screen custom presets available (if any); otherwise omitted.
  std::shared_ptr<ISchemaItem> numCustomPresetsAvailable_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["displayType"] = CObjectSchemaItem::SMember(displayType_SchemaItem, true);
  schema_members["displayName"] = CObjectSchemaItem::SMember(displayName_SchemaItem, false);
  schema_members["textFields"] = CObjectSchemaItem::SMember(textFields_SchemaItem, true);
  schema_members["imageFields"] = CObjectSchemaItem::SMember(imageFields_SchemaItem, false);
  schema_members["mediaClockFormats"] = CObjectSchemaItem::SMember(mediaClockFormats_SchemaItem, true);
  schema_members["imageCapabilities"] = CObjectSchemaItem::SMember(imageCapabilities_SchemaItem, false);
  schema_members["graphicSupported"] = CObjectSchemaItem::SMember(graphicSupported_SchemaItem, true);
  schema_members["templatesAvailable"] = CObjectSchemaItem::SMember(templatesAvailable_SchemaItem, true);
  schema_members["screenParams"] = CObjectSchemaItem::SMember(screenParams_SchemaItem, false);
  schema_members["numCustomPresetsAvailable"] = CObjectSchemaItem::SMember(numCustomPresetsAvailable_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_SoftButtonCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member shortPressAvailable.
  //
  // The button supports a short press.
  // Whenever the button is pressed short, onButtonPressed( SHORT) must be invoked.
  std::shared_ptr<ISchemaItem> shortPressAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member longPressAvailable.
  //
  // The button supports a LONG press.
  // Whenever the button is pressed long, onButtonPressed( LONG) must be invoked.
  std::shared_ptr<ISchemaItem> longPressAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member upDownAvailable.
  //
  // The button supports "button down" and "button up".
  // Whenever the button is pressed, onButtonEvent( DOWN) must be invoked.
  // Whenever the button is released, onButtonEvent( UP) must be invoked.
  std::shared_ptr<ISchemaItem> upDownAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member imageSupported.
  //
  // Must be true if the button supports referencing a static or dynamic image.
  std::shared_ptr<ISchemaItem> imageSupported_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["shortPressAvailable"] = CObjectSchemaItem::SMember(shortPressAvailable_SchemaItem, true);
  schema_members["longPressAvailable"] = CObjectSchemaItem::SMember(longPressAvailable_SchemaItem, true);
  schema_members["upDownAvailable"] = CObjectSchemaItem::SMember(upDownAvailable_SchemaItem, true);
  schema_members["imageSupported"] = CObjectSchemaItem::SMember(imageSupported_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_HMICapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member navigation.
  //
  // Availability of build in Nav. True: Available, False: Not Available
  std::shared_ptr<ISchemaItem> navigation_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member phoneCall.
  //
  // Availability of build in phone. True: Available, False: Not Available
  std::shared_ptr<ISchemaItem> phoneCall_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member videoStreaming.
  //
  // Availability of built-in video streaming. True: Available, False: Not Available
  std::shared_ptr<ISchemaItem> videoStreaming_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["navigation"] = CObjectSchemaItem::SMember(navigation_SchemaItem, false);
  schema_members["phoneCall"] = CObjectSchemaItem::SMember(phoneCall_SchemaItem, false);
  schema_members["videoStreaming"] = CObjectSchemaItem::SMember(videoStreaming_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_AudioPassThruCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_SamplingRate::eType> Common_SamplingRate_all_enum_values;
  Common_SamplingRate_all_enum_values.insert(Common_SamplingRate::RATE_8KHZ);
  Common_SamplingRate_all_enum_values.insert(Common_SamplingRate::RATE_16KHZ);
  Common_SamplingRate_all_enum_values.insert(Common_SamplingRate::RATE_22KHZ);
  Common_SamplingRate_all_enum_values.insert(Common_SamplingRate::RATE_44KHZ);

  std::set<Common_BitsPerSample::eType> Common_BitsPerSample_all_enum_values;
  Common_BitsPerSample_all_enum_values.insert(Common_BitsPerSample::RATE_8_BIT);
  Common_BitsPerSample_all_enum_values.insert(Common_BitsPerSample::RATE_16_BIT);

  std::set<Common_AudioType::eType> Common_AudioType_all_enum_values;
  Common_AudioType_all_enum_values.insert(Common_AudioType::PCM);

  // Struct member samplingRate.
  std::shared_ptr<ISchemaItem> samplingRate_SchemaItem = TEnumSchemaItem<Common_SamplingRate::eType>::create(Common_SamplingRate_all_enum_values, TSchemaItemParameter<Common_SamplingRate::eType>());

  // Struct member bitsPerSample.
  std::shared_ptr<ISchemaItem> bitsPerSample_SchemaItem = TEnumSchemaItem<Common_BitsPerSample::eType>::create(Common_BitsPerSample_all_enum_values, TSchemaItemParameter<Common_BitsPerSample::eType>());

  // Struct member audioType.
  std::shared_ptr<ISchemaItem> audioType_SchemaItem = TEnumSchemaItem<Common_AudioType::eType>::create(Common_AudioType_all_enum_values, TSchemaItemParameter<Common_AudioType::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["samplingRate"] = CObjectSchemaItem::SMember(samplingRate_SchemaItem, true);
  schema_members["bitsPerSample"] = CObjectSchemaItem::SMember(bitsPerSample_SchemaItem, true);
  schema_members["audioType"] = CObjectSchemaItem::SMember(audioType_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_TextFieldStruct(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_TextFieldName::eType> Common_TextFieldName_all_enum_values;
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::mainField1);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::mainField2);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::mainField3);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::mainField4);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::statusBar);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::mediaClock);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::mediaTrack);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::alertText1);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::alertText2);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::alertText3);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::scrollableMessageBody);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::initialInteractionText);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::navigationText1);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::navigationText2);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::ETA);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::totalDistance);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::audioPassThruDisplayText1);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::audioPassThruDisplayText2);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::sliderHeader);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::sliderFooter);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::menuName);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::secondaryText);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::tertiaryText);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::menuTitle);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::navigationText);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::notificationText);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::locationName);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::locationDescription);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::addressLines);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::phoneNumber);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::timeToDestination);
  Common_TextFieldName_all_enum_values.insert(Common_TextFieldName::turnText);

  std::set<Common_MetadataType::eType> Common_MetadataType_all_enum_values;
  Common_MetadataType_all_enum_values.insert(Common_MetadataType::mediaTitle);
  Common_MetadataType_all_enum_values.insert(Common_MetadataType::mediaArtist);
  Common_MetadataType_all_enum_values.insert(Common_MetadataType::mediaAlbum);
  Common_MetadataType_all_enum_values.insert(Common_MetadataType::mediaYear);
  Common_MetadataType_all_enum_values.insert(Common_MetadataType::mediaGenre);
  Common_MetadataType_all_enum_values.insert(Common_MetadataType::mediaStation);
  Common_MetadataType_all_enum_values.insert(Common_MetadataType::rating);
  Common_MetadataType_all_enum_values.insert(Common_MetadataType::currentTemperature);
  Common_MetadataType_all_enum_values.insert(Common_MetadataType::maximumTemperature);
  Common_MetadataType_all_enum_values.insert(Common_MetadataType::minimumTemperature);
  Common_MetadataType_all_enum_values.insert(Common_MetadataType::weatherTerm);
  Common_MetadataType_all_enum_values.insert(Common_MetadataType::humidity);

  // Struct member fieldName.
  //
  // The name of the field for displaying the text.
  std::shared_ptr<ISchemaItem> fieldName_SchemaItem = TEnumSchemaItem<Common_TextFieldName::eType>::create(Common_TextFieldName_all_enum_values, TSchemaItemParameter<Common_TextFieldName::eType>());

  // Struct member fieldText.
  //
  // The  text itself.
  std::shared_ptr<ISchemaItem> fieldText_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member fieldTypes.
  //
  // The type of data contained in the field.
  std::shared_ptr<ISchemaItem> fieldTypes_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<Common_MetadataType::eType>::create(Common_MetadataType_all_enum_values, TSchemaItemParameter<Common_MetadataType::eType>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(5));CObjectSchemaItem::Members schema_members;

  schema_members["fieldName"] = CObjectSchemaItem::SMember(fieldName_SchemaItem, true);
  schema_members["fieldText"] = CObjectSchemaItem::SMember(fieldText_SchemaItem, true);
  schema_members["fieldTypes"] = CObjectSchemaItem::SMember(fieldTypes_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_KeyboardProperties(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_Language::eType> Common_Language_all_enum_values;
  Common_Language_all_enum_values.insert(Common_Language::EN_US);
  Common_Language_all_enum_values.insert(Common_Language::ES_MX);
  Common_Language_all_enum_values.insert(Common_Language::FR_CA);
  Common_Language_all_enum_values.insert(Common_Language::DE_DE);
  Common_Language_all_enum_values.insert(Common_Language::ES_ES);
  Common_Language_all_enum_values.insert(Common_Language::EN_GB);
  Common_Language_all_enum_values.insert(Common_Language::RU_RU);
  Common_Language_all_enum_values.insert(Common_Language::TR_TR);
  Common_Language_all_enum_values.insert(Common_Language::PL_PL);
  Common_Language_all_enum_values.insert(Common_Language::FR_FR);
  Common_Language_all_enum_values.insert(Common_Language::IT_IT);
  Common_Language_all_enum_values.insert(Common_Language::SV_SE);
  Common_Language_all_enum_values.insert(Common_Language::PT_PT);
  Common_Language_all_enum_values.insert(Common_Language::NL_NL);
  Common_Language_all_enum_values.insert(Common_Language::EN_AU);
  Common_Language_all_enum_values.insert(Common_Language::ZH_CN);
  Common_Language_all_enum_values.insert(Common_Language::ZH_TW);
  Common_Language_all_enum_values.insert(Common_Language::JA_JP);
  Common_Language_all_enum_values.insert(Common_Language::AR_SA);
  Common_Language_all_enum_values.insert(Common_Language::KO_KR);
  Common_Language_all_enum_values.insert(Common_Language::PT_BR);
  Common_Language_all_enum_values.insert(Common_Language::CS_CZ);
  Common_Language_all_enum_values.insert(Common_Language::DA_DK);
  Common_Language_all_enum_values.insert(Common_Language::NO_NO);
  Common_Language_all_enum_values.insert(Common_Language::NL_BE);
  Common_Language_all_enum_values.insert(Common_Language::EL_GR);
  Common_Language_all_enum_values.insert(Common_Language::HU_HU);
  Common_Language_all_enum_values.insert(Common_Language::FI_FI);
  Common_Language_all_enum_values.insert(Common_Language::SK_SK);
  Common_Language_all_enum_values.insert(Common_Language::EN_IN);
  Common_Language_all_enum_values.insert(Common_Language::TH_TH);
  Common_Language_all_enum_values.insert(Common_Language::EN_SA);
  Common_Language_all_enum_values.insert(Common_Language::HE_IL);
  Common_Language_all_enum_values.insert(Common_Language::RO_RO);
  Common_Language_all_enum_values.insert(Common_Language::UK_UA);
  Common_Language_all_enum_values.insert(Common_Language::ID_ID);
  Common_Language_all_enum_values.insert(Common_Language::VI_VN);
  Common_Language_all_enum_values.insert(Common_Language::MS_MY);
  Common_Language_all_enum_values.insert(Common_Language::HI_IN);

  std::set<Common_KeyboardLayout::eType> Common_KeyboardLayout_all_enum_values;
  Common_KeyboardLayout_all_enum_values.insert(Common_KeyboardLayout::QWERTY);
  Common_KeyboardLayout_all_enum_values.insert(Common_KeyboardLayout::QWERTZ);
  Common_KeyboardLayout_all_enum_values.insert(Common_KeyboardLayout::AZERTY);

  std::set<Common_KeypressMode::eType> Common_KeypressMode_all_enum_values;
  Common_KeypressMode_all_enum_values.insert(Common_KeypressMode::SINGLE_KEYPRESS);
  Common_KeypressMode_all_enum_values.insert(Common_KeypressMode::QUEUE_KEYPRESSES);
  Common_KeypressMode_all_enum_values.insert(Common_KeypressMode::RESEND_CURRENT_ENTRY);

  // Struct member language.
  //
  // The keyboard language.
  std::shared_ptr<ISchemaItem> language_SchemaItem = TEnumSchemaItem<Common_Language::eType>::create(Common_Language_all_enum_values, TSchemaItemParameter<Common_Language::eType>());

  // Struct member keyboardLayout.
  //
  // Desired keyboard layout.
  std::shared_ptr<ISchemaItem> keyboardLayout_SchemaItem = TEnumSchemaItem<Common_KeyboardLayout::eType>::create(Common_KeyboardLayout_all_enum_values, TSchemaItemParameter<Common_KeyboardLayout::eType>());

  // Struct member keypressMode.
  //
  // 
  //         Desired keypress mode.
  //         If omitted, this value will be set to RESEND_CURRENT_ENTRY.
  //     
  std::shared_ptr<ISchemaItem> keypressMode_SchemaItem = TEnumSchemaItem<Common_KeypressMode::eType>::create(Common_KeypressMode_all_enum_values, TSchemaItemParameter<Common_KeypressMode::eType>());

  // Struct member limitedCharacterList.
  //
  // Array of keyboard characters to enable.
  // All omitted characters will be greyed out (disabled) on the keyboard.
  // If omitted, the entire keyboard will be enabled.
  std::shared_ptr<ISchemaItem> limitedCharacterList_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member autoCompleteText.
  //
  // Allows an app to prepopulate the text field with a suggested or completed entry as the user types
  std::shared_ptr<ISchemaItem> autoCompleteText_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["language"] = CObjectSchemaItem::SMember(language_SchemaItem, false);
  schema_members["keyboardLayout"] = CObjectSchemaItem::SMember(keyboardLayout_SchemaItem, false);
  schema_members["keypressMode"] = CObjectSchemaItem::SMember(keypressMode_SchemaItem, false);
  schema_members["limitedCharacterList"] = CObjectSchemaItem::SMember(limitedCharacterList_SchemaItem, false);
  schema_members["autoCompleteText"] = CObjectSchemaItem::SMember(autoCompleteText_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_Turn(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member navigationText.
  //
  // Uses navigationText from TextFieldStruct.
  std::shared_ptr<ISchemaItem> navigationText_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_TextFieldStruct);

  // Struct member turnIcon.
  std::shared_ptr<ISchemaItem> turnIcon_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Image);CObjectSchemaItem::Members schema_members;

  schema_members["navigationText"] = CObjectSchemaItem::SMember(navigationText_SchemaItem, false);
  schema_members["turnIcon"] = CObjectSchemaItem::SMember(turnIcon_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_VehicleType(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member make.
  //
  // Make of the vehicle
  // e.g. Ford
  std::shared_ptr<ISchemaItem> make_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member model.
  //
  // Model of the vehicle
  // e.g. Fiesta
  std::shared_ptr<ISchemaItem> model_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member modelYear.
  //
  // Model Year of the vehicle
  // e.g. 2013
  std::shared_ptr<ISchemaItem> modelYear_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member trim.
  //
  // Trim of the vehicle
  // e.g. SE
  std::shared_ptr<ISchemaItem> trim_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["make"] = CObjectSchemaItem::SMember(make_SchemaItem, false);
  schema_members["model"] = CObjectSchemaItem::SMember(model_SchemaItem, false);
  schema_members["modelYear"] = CObjectSchemaItem::SMember(modelYear_SchemaItem, false);
  schema_members["trim"] = CObjectSchemaItem::SMember(trim_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_SingleTireStatus(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_ComponentVolumeStatus::eType> Common_ComponentVolumeStatus_all_enum_values;
  Common_ComponentVolumeStatus_all_enum_values.insert(Common_ComponentVolumeStatus::CVS_UNKNOWN);
  Common_ComponentVolumeStatus_all_enum_values.insert(Common_ComponentVolumeStatus::CVS_NORMAL);
  Common_ComponentVolumeStatus_all_enum_values.insert(Common_ComponentVolumeStatus::CVS_LOW);
  Common_ComponentVolumeStatus_all_enum_values.insert(Common_ComponentVolumeStatus::CVS_FAULT);
  Common_ComponentVolumeStatus_all_enum_values.insert(Common_ComponentVolumeStatus::CVS_ALERT);
  Common_ComponentVolumeStatus_all_enum_values.insert(Common_ComponentVolumeStatus::CVS_NOT_SUPPORTED);

  std::set<Common_TPMS::eType> Common_TPMS_all_enum_values;
  Common_TPMS_all_enum_values.insert(Common_TPMS::UNKNOWN);
  Common_TPMS_all_enum_values.insert(Common_TPMS::SYSTEM_FAULT);
  Common_TPMS_all_enum_values.insert(Common_TPMS::SENSOR_FAULT);
  Common_TPMS_all_enum_values.insert(Common_TPMS::LOW);
  Common_TPMS_all_enum_values.insert(Common_TPMS::SYSTEM_ACTIVE);
  Common_TPMS_all_enum_values.insert(Common_TPMS::TRAIN);
  Common_TPMS_all_enum_values.insert(Common_TPMS::TRAINING_COMPLETE);
  Common_TPMS_all_enum_values.insert(Common_TPMS::NOT_TRAINED);

  // Struct member status.
  //
  // The status of component volume. See ComponentVolumeStatus.
  std::shared_ptr<ISchemaItem> status_SchemaItem = TEnumSchemaItem<Common_ComponentVolumeStatus::eType>::create(Common_ComponentVolumeStatus_all_enum_values, TSchemaItemParameter<Common_ComponentVolumeStatus::eType>());

  // Struct member tpms.
  //
  // The status of TPMS according to the particular tire.
  std::shared_ptr<ISchemaItem> tpms_SchemaItem = TEnumSchemaItem<Common_TPMS::eType>::create(Common_TPMS_all_enum_values, TSchemaItemParameter<Common_TPMS::eType>());

  // Struct member pressure.
  //
  // The pressure value of the particular tire in kilo pascal.
  std::shared_ptr<ISchemaItem> pressure_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(2000.0), TSchemaItemParameter<double>());CObjectSchemaItem::Members schema_members;

  schema_members["status"] = CObjectSchemaItem::SMember(status_SchemaItem, true);
  schema_members["tpms"] = CObjectSchemaItem::SMember(tpms_SchemaItem, false);
  schema_members["pressure"] = CObjectSchemaItem::SMember(pressure_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_DIDResult(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_VehicleDataResultCode::eType> Common_VehicleDataResultCode_all_enum_values;
  Common_VehicleDataResultCode_all_enum_values.insert(Common_VehicleDataResultCode::VDRC_SUCCESS);
  Common_VehicleDataResultCode_all_enum_values.insert(Common_VehicleDataResultCode::VDRC_TRUNCATED_DATA);
  Common_VehicleDataResultCode_all_enum_values.insert(Common_VehicleDataResultCode::VDRC_DISALLOWED);
  Common_VehicleDataResultCode_all_enum_values.insert(Common_VehicleDataResultCode::VDRC_USER_DISALLOWED);
  Common_VehicleDataResultCode_all_enum_values.insert(Common_VehicleDataResultCode::VDRC_INVALID_ID);
  Common_VehicleDataResultCode_all_enum_values.insert(Common_VehicleDataResultCode::VDRC_DATA_NOT_AVAILABLE);
  Common_VehicleDataResultCode_all_enum_values.insert(Common_VehicleDataResultCode::VDRC_DATA_ALREADY_SUBSCRIBED);
  Common_VehicleDataResultCode_all_enum_values.insert(Common_VehicleDataResultCode::VDRC_DATA_NOT_SUBSCRIBED);
  Common_VehicleDataResultCode_all_enum_values.insert(Common_VehicleDataResultCode::VDRC_IGNORED);

  // Struct member resultCode.
  //
  // Individual DID result code.
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Common_VehicleDataResultCode::eType>::create(Common_VehicleDataResultCode_all_enum_values, TSchemaItemParameter<Common_VehicleDataResultCode::eType>());

  // Struct member didLocation.
  //
  // Location of raw data (the address from ReadDID request)
  std::shared_ptr<ISchemaItem> didLocation_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>());

  // Struct member data.
  //
  // Raw DID-based data returned for requested element.
  std::shared_ptr<ISchemaItem> data_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(5000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true);
  schema_members["didLocation"] = CObjectSchemaItem::SMember(didLocation_SchemaItem, true);
  schema_members["data"] = CObjectSchemaItem::SMember(data_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_HeadLampStatus(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_AmbientLightStatus::eType> Common_AmbientLightStatus_all_enum_values;
  Common_AmbientLightStatus_all_enum_values.insert(Common_AmbientLightStatus::NIGHT);
  Common_AmbientLightStatus_all_enum_values.insert(Common_AmbientLightStatus::TWILIGHT_1);
  Common_AmbientLightStatus_all_enum_values.insert(Common_AmbientLightStatus::TWILIGHT_2);
  Common_AmbientLightStatus_all_enum_values.insert(Common_AmbientLightStatus::TWILIGHT_3);
  Common_AmbientLightStatus_all_enum_values.insert(Common_AmbientLightStatus::TWILIGHT_4);
  Common_AmbientLightStatus_all_enum_values.insert(Common_AmbientLightStatus::DAY);
  Common_AmbientLightStatus_all_enum_values.insert(Common_AmbientLightStatus::UNKNOWN);
  Common_AmbientLightStatus_all_enum_values.insert(Common_AmbientLightStatus::INVALID);

  // Struct member lowBeamsOn.
  //
  // Status of the low beam lamps.
  std::shared_ptr<ISchemaItem> lowBeamsOn_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member highBeamsOn.
  //
  // Status of the high beam lamps.
  std::shared_ptr<ISchemaItem> highBeamsOn_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member ambientLightSensorStatus.
  //
  // Status of the ambient light sensor.
  std::shared_ptr<ISchemaItem> ambientLightSensorStatus_SchemaItem = TEnumSchemaItem<Common_AmbientLightStatus::eType>::create(Common_AmbientLightStatus_all_enum_values, TSchemaItemParameter<Common_AmbientLightStatus::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["lowBeamsOn"] = CObjectSchemaItem::SMember(lowBeamsOn_SchemaItem, true);
  schema_members["highBeamsOn"] = CObjectSchemaItem::SMember(highBeamsOn_SchemaItem, true);
  schema_members["ambientLightSensorStatus"] = CObjectSchemaItem::SMember(ambientLightSensorStatus_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_TireStatus(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_WarningLightStatus::eType> Common_WarningLightStatus_all_enum_values;
  Common_WarningLightStatus_all_enum_values.insert(Common_WarningLightStatus::WLS_OFF);
  Common_WarningLightStatus_all_enum_values.insert(Common_WarningLightStatus::WLS_ON);
  Common_WarningLightStatus_all_enum_values.insert(Common_WarningLightStatus::WLS_FLASH);
  Common_WarningLightStatus_all_enum_values.insert(Common_WarningLightStatus::WLS_NOT_USED);

  // Struct member pressureTelltale.
  //
  // Status of the Tire Pressure Telltale. See WarningLightStatus.
  std::shared_ptr<ISchemaItem> pressureTelltale_SchemaItem = TEnumSchemaItem<Common_WarningLightStatus::eType>::create(Common_WarningLightStatus_all_enum_values, TSchemaItemParameter<Common_WarningLightStatus::eType>());

  // Struct member leftFront.
  //
  // The status of the left front tire.
  std::shared_ptr<ISchemaItem> leftFront_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SingleTireStatus);

  // Struct member rightFront.
  //
  // The status of the right front tire.
  std::shared_ptr<ISchemaItem> rightFront_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SingleTireStatus);

  // Struct member leftRear.
  //
  // The status of the left rear tire.
  std::shared_ptr<ISchemaItem> leftRear_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SingleTireStatus);

  // Struct member rightRear.
  //
  // The status of the right rear tire.
  std::shared_ptr<ISchemaItem> rightRear_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SingleTireStatus);

  // Struct member innerLeftRear.
  //
  // The status of the inner left rear.
  std::shared_ptr<ISchemaItem> innerLeftRear_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SingleTireStatus);

  // Struct member innerRightRear.
  //
  // The status of the inner right rear.
  std::shared_ptr<ISchemaItem> innerRightRear_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SingleTireStatus);CObjectSchemaItem::Members schema_members;

  schema_members["pressureTelltale"] = CObjectSchemaItem::SMember(pressureTelltale_SchemaItem, false);
  schema_members["leftFront"] = CObjectSchemaItem::SMember(leftFront_SchemaItem, false);
  schema_members["rightFront"] = CObjectSchemaItem::SMember(rightFront_SchemaItem, false);
  schema_members["leftRear"] = CObjectSchemaItem::SMember(leftRear_SchemaItem, false);
  schema_members["rightRear"] = CObjectSchemaItem::SMember(rightRear_SchemaItem, false);
  schema_members["innerLeftRear"] = CObjectSchemaItem::SMember(innerLeftRear_SchemaItem, false);
  schema_members["innerRightRear"] = CObjectSchemaItem::SMember(innerRightRear_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_BeltStatus(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_VehicleDataEventStatus::eType> Common_VehicleDataEventStatus_all_enum_values;
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_NO_EVENT);
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_NO);
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_YES);
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_NOT_SUPPORTED);
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_FAULT);

  // Struct member driverBeltDeployed.
  //
  // See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> driverBeltDeployed_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member passengerBeltDeployed.
  //
  // See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> passengerBeltDeployed_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member passengerBuckleBelted.
  //
  // See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> passengerBuckleBelted_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member driverBuckleBelted.
  //
  // See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> driverBuckleBelted_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member leftRow2BuckleBelted.
  //
  // See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> leftRow2BuckleBelted_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member passengerChildDetected.
  //
  // See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> passengerChildDetected_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member rightRow2BuckleBelted.
  //
  // See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> rightRow2BuckleBelted_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member middleRow2BuckleBelted.
  //
  // See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> middleRow2BuckleBelted_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member middleRow3BuckleBelted.
  //
  // See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> middleRow3BuckleBelted_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member leftRow3BuckleBelted.
  //
  // See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> leftRow3BuckleBelted_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member rightRow3BuckleBelted.
  //
  // See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> rightRow3BuckleBelted_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member leftRearInflatableBelted.
  //
  // See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> leftRearInflatableBelted_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member rightRearInflatableBelted.
  //
  // See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> rightRearInflatableBelted_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member middleRow1BeltDeployed.
  //
  // See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> middleRow1BeltDeployed_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member middleRow1BuckleBelted.
  //
  // See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> middleRow1BuckleBelted_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["driverBeltDeployed"] = CObjectSchemaItem::SMember(driverBeltDeployed_SchemaItem, false);
  schema_members["passengerBeltDeployed"] = CObjectSchemaItem::SMember(passengerBeltDeployed_SchemaItem, false);
  schema_members["passengerBuckleBelted"] = CObjectSchemaItem::SMember(passengerBuckleBelted_SchemaItem, false);
  schema_members["driverBuckleBelted"] = CObjectSchemaItem::SMember(driverBuckleBelted_SchemaItem, false);
  schema_members["leftRow2BuckleBelted"] = CObjectSchemaItem::SMember(leftRow2BuckleBelted_SchemaItem, false);
  schema_members["passengerChildDetected"] = CObjectSchemaItem::SMember(passengerChildDetected_SchemaItem, false);
  schema_members["rightRow2BuckleBelted"] = CObjectSchemaItem::SMember(rightRow2BuckleBelted_SchemaItem, false);
  schema_members["middleRow2BuckleBelted"] = CObjectSchemaItem::SMember(middleRow2BuckleBelted_SchemaItem, false);
  schema_members["middleRow3BuckleBelted"] = CObjectSchemaItem::SMember(middleRow3BuckleBelted_SchemaItem, false);
  schema_members["leftRow3BuckleBelted"] = CObjectSchemaItem::SMember(leftRow3BuckleBelted_SchemaItem, false);
  schema_members["rightRow3BuckleBelted"] = CObjectSchemaItem::SMember(rightRow3BuckleBelted_SchemaItem, false);
  schema_members["leftRearInflatableBelted"] = CObjectSchemaItem::SMember(leftRearInflatableBelted_SchemaItem, false);
  schema_members["rightRearInflatableBelted"] = CObjectSchemaItem::SMember(rightRearInflatableBelted_SchemaItem, false);
  schema_members["middleRow1BeltDeployed"] = CObjectSchemaItem::SMember(middleRow1BeltDeployed_SchemaItem, false);
  schema_members["middleRow1BuckleBelted"] = CObjectSchemaItem::SMember(middleRow1BuckleBelted_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_BodyInformation(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_IgnitionStableStatus::eType> Common_IgnitionStableStatus_all_enum_values;
  Common_IgnitionStableStatus_all_enum_values.insert(Common_IgnitionStableStatus::IGNITION_SWITCH_NOT_STABLE);
  Common_IgnitionStableStatus_all_enum_values.insert(Common_IgnitionStableStatus::IGNITION_SWITCH_STABLE);
  Common_IgnitionStableStatus_all_enum_values.insert(Common_IgnitionStableStatus::MISSING_FROM_TRANSMITTER);

  std::set<Common_IgnitionStatus::eType> Common_IgnitionStatus_all_enum_values;
  Common_IgnitionStatus_all_enum_values.insert(Common_IgnitionStatus::IS_UNKNOWN);
  Common_IgnitionStatus_all_enum_values.insert(Common_IgnitionStatus::IS_OFF);
  Common_IgnitionStatus_all_enum_values.insert(Common_IgnitionStatus::IS_ACCESSORY);
  Common_IgnitionStatus_all_enum_values.insert(Common_IgnitionStatus::IS_RUN);
  Common_IgnitionStatus_all_enum_values.insert(Common_IgnitionStatus::IS_START);
  Common_IgnitionStatus_all_enum_values.insert(Common_IgnitionStatus::IS_INVALID);

  // Struct member parkBrakeActive.
  //
  // Must be true if the park brake is active
  std::shared_ptr<ISchemaItem> parkBrakeActive_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member ignitionStableStatus.
  //
  // Information about the ignition switch. See IgnitionStableStatus.
  std::shared_ptr<ISchemaItem> ignitionStableStatus_SchemaItem = TEnumSchemaItem<Common_IgnitionStableStatus::eType>::create(Common_IgnitionStableStatus_all_enum_values, TSchemaItemParameter<Common_IgnitionStableStatus::eType>());

  // Struct member ignitionStatus.
  //
  // The status of the ignition. See IgnitionStatus.
  std::shared_ptr<ISchemaItem> ignitionStatus_SchemaItem = TEnumSchemaItem<Common_IgnitionStatus::eType>::create(Common_IgnitionStatus_all_enum_values, TSchemaItemParameter<Common_IgnitionStatus::eType>());

  // Struct member driverDoorAjar.
  //
  // References signal "DrStatDrv_B_Actl".
  std::shared_ptr<ISchemaItem> driverDoorAjar_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member passengerDoorAjar.
  //
  // References signal "DrStatPsngr_B_Actl".
  std::shared_ptr<ISchemaItem> passengerDoorAjar_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member rearLeftDoorAjar.
  //
  // References signal "DrStatRl_B_Actl".
  std::shared_ptr<ISchemaItem> rearLeftDoorAjar_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member rearRightDoorAjar.
  //
  // References signal "DrStatRr_B_Actl".
  std::shared_ptr<ISchemaItem> rearRightDoorAjar_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["parkBrakeActive"] = CObjectSchemaItem::SMember(parkBrakeActive_SchemaItem, true);
  schema_members["ignitionStableStatus"] = CObjectSchemaItem::SMember(ignitionStableStatus_SchemaItem, true);
  schema_members["ignitionStatus"] = CObjectSchemaItem::SMember(ignitionStatus_SchemaItem, true);
  schema_members["driverDoorAjar"] = CObjectSchemaItem::SMember(driverDoorAjar_SchemaItem, false);
  schema_members["passengerDoorAjar"] = CObjectSchemaItem::SMember(passengerDoorAjar_SchemaItem, false);
  schema_members["rearLeftDoorAjar"] = CObjectSchemaItem::SMember(rearLeftDoorAjar_SchemaItem, false);
  schema_members["rearRightDoorAjar"] = CObjectSchemaItem::SMember(rearRightDoorAjar_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_DeviceStatus(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_DeviceLevelStatus::eType> Common_DeviceLevelStatus_all_enum_values;
  Common_DeviceLevelStatus_all_enum_values.insert(Common_DeviceLevelStatus::ZERO_LEVEL_BARS);
  Common_DeviceLevelStatus_all_enum_values.insert(Common_DeviceLevelStatus::ONE_LEVEL_BARS);
  Common_DeviceLevelStatus_all_enum_values.insert(Common_DeviceLevelStatus::TWO_LEVEL_BARS);
  Common_DeviceLevelStatus_all_enum_values.insert(Common_DeviceLevelStatus::THREE_LEVEL_BARS);
  Common_DeviceLevelStatus_all_enum_values.insert(Common_DeviceLevelStatus::FOUR_LEVEL_BARS);
  Common_DeviceLevelStatus_all_enum_values.insert(Common_DeviceLevelStatus::NOT_PROVIDED);

  std::set<Common_PrimaryAudioSource::eType> Common_PrimaryAudioSource_all_enum_values;
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::NO_SOURCE_SELECTED);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::CD);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::USB);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::USB2);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::BLUETOOTH_STEREO_BTST);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::LINE_IN);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::IPOD);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::MOBILE_APP);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::AM);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::FM);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::XM);
  Common_PrimaryAudioSource_all_enum_values.insert(Common_PrimaryAudioSource::DAB);

  // Struct member voiceRecOn.
  //
  // Must be true if the voice recording is on.
  std::shared_ptr<ISchemaItem> voiceRecOn_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member btIconOn.
  //
  // Must be true if Bluetooth icon is displayed.
  std::shared_ptr<ISchemaItem> btIconOn_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member callActive.
  //
  // Must be true if there is an active call..
  std::shared_ptr<ISchemaItem> callActive_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member phoneRoaming.
  //
  // Must be true if ther is a phone roaming.
  std::shared_ptr<ISchemaItem> phoneRoaming_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member textMsgAvailable.
  //
  // Must be true if the text message is available.
  std::shared_ptr<ISchemaItem> textMsgAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member battLevelStatus.
  //
  // Device battery level status. See DeviceLevelStatus.
  std::shared_ptr<ISchemaItem> battLevelStatus_SchemaItem = TEnumSchemaItem<Common_DeviceLevelStatus::eType>::create(Common_DeviceLevelStatus_all_enum_values, TSchemaItemParameter<Common_DeviceLevelStatus::eType>());

  // Struct member stereoAudioOutputMuted.
  //
  // Must be true if stereo audio output is muted.
  std::shared_ptr<ISchemaItem> stereoAudioOutputMuted_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member monoAudioOutputMuted.
  //
  // Must be true if mono audio output is muted.
  std::shared_ptr<ISchemaItem> monoAudioOutputMuted_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member signalLevelStatus.
  //
  // Device signal level status. See DeviceLevelStatus.
  std::shared_ptr<ISchemaItem> signalLevelStatus_SchemaItem = TEnumSchemaItem<Common_DeviceLevelStatus::eType>::create(Common_DeviceLevelStatus_all_enum_values, TSchemaItemParameter<Common_DeviceLevelStatus::eType>());

  // Struct member primaryAudioSource.
  //
  // See PrimaryAudioSource.
  std::shared_ptr<ISchemaItem> primaryAudioSource_SchemaItem = TEnumSchemaItem<Common_PrimaryAudioSource::eType>::create(Common_PrimaryAudioSource_all_enum_values, TSchemaItemParameter<Common_PrimaryAudioSource::eType>());

  // Struct member eCallEventActive.
  //
  // Must be true if emergency call event is active.
  std::shared_ptr<ISchemaItem> eCallEventActive_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["voiceRecOn"] = CObjectSchemaItem::SMember(voiceRecOn_SchemaItem, false);
  schema_members["btIconOn"] = CObjectSchemaItem::SMember(btIconOn_SchemaItem, false);
  schema_members["callActive"] = CObjectSchemaItem::SMember(callActive_SchemaItem, false);
  schema_members["phoneRoaming"] = CObjectSchemaItem::SMember(phoneRoaming_SchemaItem, false);
  schema_members["textMsgAvailable"] = CObjectSchemaItem::SMember(textMsgAvailable_SchemaItem, false);
  schema_members["battLevelStatus"] = CObjectSchemaItem::SMember(battLevelStatus_SchemaItem, false);
  schema_members["stereoAudioOutputMuted"] = CObjectSchemaItem::SMember(stereoAudioOutputMuted_SchemaItem, false);
  schema_members["monoAudioOutputMuted"] = CObjectSchemaItem::SMember(monoAudioOutputMuted_SchemaItem, false);
  schema_members["signalLevelStatus"] = CObjectSchemaItem::SMember(signalLevelStatus_SchemaItem, false);
  schema_members["primaryAudioSource"] = CObjectSchemaItem::SMember(primaryAudioSource_SchemaItem, false);
  schema_members["eCallEventActive"] = CObjectSchemaItem::SMember(eCallEventActive_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_ECallInfo(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_VehicleDataNotificationStatus::eType> Common_VehicleDataNotificationStatus_all_enum_values;
  Common_VehicleDataNotificationStatus_all_enum_values.insert(Common_VehicleDataNotificationStatus::VDNS_NOT_SUPPORTED);
  Common_VehicleDataNotificationStatus_all_enum_values.insert(Common_VehicleDataNotificationStatus::VDNS_NORMAL);
  Common_VehicleDataNotificationStatus_all_enum_values.insert(Common_VehicleDataNotificationStatus::VDNS_ACTIVE);
  Common_VehicleDataNotificationStatus_all_enum_values.insert(Common_VehicleDataNotificationStatus::VDNS_NOT_USED);

  std::set<Common_ECallConfirmationStatus::eType> Common_ECallConfirmationStatus_all_enum_values;
  Common_ECallConfirmationStatus_all_enum_values.insert(Common_ECallConfirmationStatus::ECCS_NORMAL);
  Common_ECallConfirmationStatus_all_enum_values.insert(Common_ECallConfirmationStatus::ECCS_CALL_IN_PROGRESS);
  Common_ECallConfirmationStatus_all_enum_values.insert(Common_ECallConfirmationStatus::ECCS_CALL_CANCELLED);
  Common_ECallConfirmationStatus_all_enum_values.insert(Common_ECallConfirmationStatus::CALL_COMPLETED);
  Common_ECallConfirmationStatus_all_enum_values.insert(Common_ECallConfirmationStatus::ECCS_CALL_UNSUCCESSFUL);
  Common_ECallConfirmationStatus_all_enum_values.insert(Common_ECallConfirmationStatus::ECCS_ECALL_CONFIGURED_OFF);
  Common_ECallConfirmationStatus_all_enum_values.insert(Common_ECallConfirmationStatus::ECCS_CALL_COMPLETE_DTMF_TIMEOUT);

  // Struct member eCallNotificationStatus.
  //
  // References signal "eCallNotification_4A". See VehicleDataNotificationStatus.
  std::shared_ptr<ISchemaItem> eCallNotificationStatus_SchemaItem = TEnumSchemaItem<Common_VehicleDataNotificationStatus::eType>::create(Common_VehicleDataNotificationStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataNotificationStatus::eType>());

  // Struct member auxECallNotificationStatus.
  //
  // References signal "eCallNotification". See VehicleDataNotificationStatus.
  std::shared_ptr<ISchemaItem> auxECallNotificationStatus_SchemaItem = TEnumSchemaItem<Common_VehicleDataNotificationStatus::eType>::create(Common_VehicleDataNotificationStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataNotificationStatus::eType>());

  // Struct member eCallConfirmationStatus.
  //
  // References signal "eCallConfirmation". See ECallConfirmationStatus.
  std::shared_ptr<ISchemaItem> eCallConfirmationStatus_SchemaItem = TEnumSchemaItem<Common_ECallConfirmationStatus::eType>::create(Common_ECallConfirmationStatus_all_enum_values, TSchemaItemParameter<Common_ECallConfirmationStatus::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["eCallNotificationStatus"] = CObjectSchemaItem::SMember(eCallNotificationStatus_SchemaItem, true);
  schema_members["auxECallNotificationStatus"] = CObjectSchemaItem::SMember(auxECallNotificationStatus_SchemaItem, true);
  schema_members["eCallConfirmationStatus"] = CObjectSchemaItem::SMember(eCallConfirmationStatus_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_AirbagStatus(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_VehicleDataEventStatus::eType> Common_VehicleDataEventStatus_all_enum_values;
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_NO_EVENT);
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_NO);
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_YES);
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_NOT_SUPPORTED);
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_FAULT);

  // Struct member driverAirbagDeployed.
  //
  // References signal "VedsDrvBag_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> driverAirbagDeployed_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member driverSideAirbagDeployed.
  //
  // References signal "VedsDrvSideBag_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> driverSideAirbagDeployed_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member driverCurtainAirbagDeployed.
  //
  // References signal "VedsDrvCrtnBag_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> driverCurtainAirbagDeployed_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member passengerAirbagDeployed.
  //
  // References signal "VedsPasBag_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> passengerAirbagDeployed_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member passengerCurtainAirbagDeployed.
  //
  // References signal "VedsPasCrtnBag_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> passengerCurtainAirbagDeployed_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member driverKneeAirbagDeployed.
  //
  // References signal "VedsKneeDrvBag_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> driverKneeAirbagDeployed_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member passengerSideAirbagDeployed.
  //
  // References signal "VedsPasSideBag_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> passengerSideAirbagDeployed_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member passengerKneeAirbagDeployed.
  //
  // References signal "VedsKneePasBag_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> passengerKneeAirbagDeployed_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["driverAirbagDeployed"] = CObjectSchemaItem::SMember(driverAirbagDeployed_SchemaItem, true);
  schema_members["driverSideAirbagDeployed"] = CObjectSchemaItem::SMember(driverSideAirbagDeployed_SchemaItem, true);
  schema_members["driverCurtainAirbagDeployed"] = CObjectSchemaItem::SMember(driverCurtainAirbagDeployed_SchemaItem, true);
  schema_members["passengerAirbagDeployed"] = CObjectSchemaItem::SMember(passengerAirbagDeployed_SchemaItem, true);
  schema_members["passengerCurtainAirbagDeployed"] = CObjectSchemaItem::SMember(passengerCurtainAirbagDeployed_SchemaItem, true);
  schema_members["driverKneeAirbagDeployed"] = CObjectSchemaItem::SMember(driverKneeAirbagDeployed_SchemaItem, true);
  schema_members["passengerSideAirbagDeployed"] = CObjectSchemaItem::SMember(passengerSideAirbagDeployed_SchemaItem, true);
  schema_members["passengerKneeAirbagDeployed"] = CObjectSchemaItem::SMember(passengerKneeAirbagDeployed_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_EmergencyEvent(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_EmergencyEventType::eType> Common_EmergencyEventType_all_enum_values;
  Common_EmergencyEventType_all_enum_values.insert(Common_EmergencyEventType::EET_NO_EVENT);
  Common_EmergencyEventType_all_enum_values.insert(Common_EmergencyEventType::EET_FRONTAL);
  Common_EmergencyEventType_all_enum_values.insert(Common_EmergencyEventType::EET_SIDE);
  Common_EmergencyEventType_all_enum_values.insert(Common_EmergencyEventType::EET_REAR);
  Common_EmergencyEventType_all_enum_values.insert(Common_EmergencyEventType::EET_ROLLOVER);
  Common_EmergencyEventType_all_enum_values.insert(Common_EmergencyEventType::EET_NOT_SUPPORTED);
  Common_EmergencyEventType_all_enum_values.insert(Common_EmergencyEventType::EET_FAULT);

  std::set<Common_FuelCutoffStatus::eType> Common_FuelCutoffStatus_all_enum_values;
  Common_FuelCutoffStatus_all_enum_values.insert(Common_FuelCutoffStatus::FCS_TERMINATE_FUEL);
  Common_FuelCutoffStatus_all_enum_values.insert(Common_FuelCutoffStatus::FCS_NORMAL_OPERATION);
  Common_FuelCutoffStatus_all_enum_values.insert(Common_FuelCutoffStatus::FCS_FAULT);

  std::set<Common_VehicleDataEventStatus::eType> Common_VehicleDataEventStatus_all_enum_values;
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_NO_EVENT);
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_NO);
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_YES);
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_NOT_SUPPORTED);
  Common_VehicleDataEventStatus_all_enum_values.insert(Common_VehicleDataEventStatus::VDES_FAULT);

  // Struct member emergencyEventType.
  //
  // References signal "VedsEvntType_D_Ltchd". See EmergencyEventType.
  std::shared_ptr<ISchemaItem> emergencyEventType_SchemaItem = TEnumSchemaItem<Common_EmergencyEventType::eType>::create(Common_EmergencyEventType_all_enum_values, TSchemaItemParameter<Common_EmergencyEventType::eType>());

  // Struct member fuelCutoffStatus.
  //
  // References signal "RCM_FuelCutoff". See FuelCutoffStatus.
  std::shared_ptr<ISchemaItem> fuelCutoffStatus_SchemaItem = TEnumSchemaItem<Common_FuelCutoffStatus::eType>::create(Common_FuelCutoffStatus_all_enum_values, TSchemaItemParameter<Common_FuelCutoffStatus::eType>());

  // Struct member rolloverEvent.
  //
  // References signal "VedsEvntRoll_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> rolloverEvent_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member maximumChangeVelocity.
  //
  // References signal "VedsMaxDeltaV_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> maximumChangeVelocity_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());

  // Struct member multipleEvents.
  //
  // References signal "VedsMultiEvnt_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> multipleEvents_SchemaItem = TEnumSchemaItem<Common_VehicleDataEventStatus::eType>::create(Common_VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataEventStatus::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["emergencyEventType"] = CObjectSchemaItem::SMember(emergencyEventType_SchemaItem, true);
  schema_members["fuelCutoffStatus"] = CObjectSchemaItem::SMember(fuelCutoffStatus_SchemaItem, true);
  schema_members["rolloverEvent"] = CObjectSchemaItem::SMember(rolloverEvent_SchemaItem, true);
  schema_members["maximumChangeVelocity"] = CObjectSchemaItem::SMember(maximumChangeVelocity_SchemaItem, true);
  schema_members["multipleEvents"] = CObjectSchemaItem::SMember(multipleEvents_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_ClusterModeStatus(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_PowerModeQualificationStatus::eType> Common_PowerModeQualificationStatus_all_enum_values;
  Common_PowerModeQualificationStatus_all_enum_values.insert(Common_PowerModeQualificationStatus::POWER_MODE_UNDEFINED);
  Common_PowerModeQualificationStatus_all_enum_values.insert(Common_PowerModeQualificationStatus::POWER_MODE_EVALUATION_IN_PROGRESS);
  Common_PowerModeQualificationStatus_all_enum_values.insert(Common_PowerModeQualificationStatus::NOT_DEFINED);
  Common_PowerModeQualificationStatus_all_enum_values.insert(Common_PowerModeQualificationStatus::POWER_MODE_OK);

  std::set<Common_CarModeStatus::eType> Common_CarModeStatus_all_enum_values;
  Common_CarModeStatus_all_enum_values.insert(Common_CarModeStatus::CMS_NORMAL);
  Common_CarModeStatus_all_enum_values.insert(Common_CarModeStatus::CMS_FACTORY);
  Common_CarModeStatus_all_enum_values.insert(Common_CarModeStatus::CMS_TRANSPORT);
  Common_CarModeStatus_all_enum_values.insert(Common_CarModeStatus::CMS_CRASH);

  std::set<Common_PowerModeStatus::eType> Common_PowerModeStatus_all_enum_values;
  Common_PowerModeStatus_all_enum_values.insert(Common_PowerModeStatus::KEY_OUT);
  Common_PowerModeStatus_all_enum_values.insert(Common_PowerModeStatus::KEY_RECENTLY_OUT);
  Common_PowerModeStatus_all_enum_values.insert(Common_PowerModeStatus::KEY_APPROVED_0);
  Common_PowerModeStatus_all_enum_values.insert(Common_PowerModeStatus::POST_ACCESORY_0);
  Common_PowerModeStatus_all_enum_values.insert(Common_PowerModeStatus::ACCESORY_1);
  Common_PowerModeStatus_all_enum_values.insert(Common_PowerModeStatus::POST_IGNITION_1);
  Common_PowerModeStatus_all_enum_values.insert(Common_PowerModeStatus::IGNITION_ON_2);
  Common_PowerModeStatus_all_enum_values.insert(Common_PowerModeStatus::RUNNING_2);
  Common_PowerModeStatus_all_enum_values.insert(Common_PowerModeStatus::CRANK_3);

  // Struct member powerModeActive.
  //
  // References signal "PowerMode_UB".
  std::shared_ptr<ISchemaItem> powerModeActive_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member powerModeQualificationStatus.
  //
  // References signal "PowerModeQF". See PowerModeQualificationStatus.
  std::shared_ptr<ISchemaItem> powerModeQualificationStatus_SchemaItem = TEnumSchemaItem<Common_PowerModeQualificationStatus::eType>::create(Common_PowerModeQualificationStatus_all_enum_values, TSchemaItemParameter<Common_PowerModeQualificationStatus::eType>());

  // Struct member carModeStatus.
  //
  // References signal "CarMode". See CarMode.
  std::shared_ptr<ISchemaItem> carModeStatus_SchemaItem = TEnumSchemaItem<Common_CarModeStatus::eType>::create(Common_CarModeStatus_all_enum_values, TSchemaItemParameter<Common_CarModeStatus::eType>());

  // Struct member powerModeStatus.
  //
  // References signal "PowerMode". See PowerMode.
  std::shared_ptr<ISchemaItem> powerModeStatus_SchemaItem = TEnumSchemaItem<Common_PowerModeStatus::eType>::create(Common_PowerModeStatus_all_enum_values, TSchemaItemParameter<Common_PowerModeStatus::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["powerModeActive"] = CObjectSchemaItem::SMember(powerModeActive_SchemaItem, true);
  schema_members["powerModeQualificationStatus"] = CObjectSchemaItem::SMember(powerModeQualificationStatus_SchemaItem, true);
  schema_members["carModeStatus"] = CObjectSchemaItem::SMember(carModeStatus_SchemaItem, true);
  schema_members["powerModeStatus"] = CObjectSchemaItem::SMember(powerModeStatus_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_MyKey(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_VehicleDataStatus::eType> Common_VehicleDataStatus_all_enum_values;
  Common_VehicleDataStatus_all_enum_values.insert(Common_VehicleDataStatus::VDS_NO_DATA_EXISTS);
  Common_VehicleDataStatus_all_enum_values.insert(Common_VehicleDataStatus::VDS_OFF);
  Common_VehicleDataStatus_all_enum_values.insert(Common_VehicleDataStatus::VDS_ON);

  // Struct member e911Override.
  //
  // Indicates whether e911 override is on. See VehicleDataStatus.
  std::shared_ptr<ISchemaItem> e911Override_SchemaItem = TEnumSchemaItem<Common_VehicleDataStatus::eType>::create(Common_VehicleDataStatus_all_enum_values, TSchemaItemParameter<Common_VehicleDataStatus::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["e911Override"] = CObjectSchemaItem::SMember(e911Override_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_DateTime(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member millisecond.
  //
  // Milliseconds 
  std::shared_ptr<ISchemaItem> millisecond_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(999), TSchemaItemParameter<int32_t>());

  // Struct member second.
  //
  // Seconds part of time
  std::shared_ptr<ISchemaItem> second_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(60), TSchemaItemParameter<int32_t>());

  // Struct member minute.
  //
  // Minutes part of time
  std::shared_ptr<ISchemaItem> minute_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(59), TSchemaItemParameter<int32_t>());

  // Struct member hour.
  //
  // Hours part of time. Note that this structure accepts time only in 24 Hr format
  std::shared_ptr<ISchemaItem> hour_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(23), TSchemaItemParameter<int32_t>());

  // Struct member day.
  //
  // Day of the month
  std::shared_ptr<ISchemaItem> day_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(31), TSchemaItemParameter<int32_t>());

  // Struct member month.
  //
  // Month of the year
  std::shared_ptr<ISchemaItem> month_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(12), TSchemaItemParameter<int32_t>());

  // Struct member year.
  //
  // The year in YYYY format
  std::shared_ptr<ISchemaItem> year_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(4095), TSchemaItemParameter<int32_t>());

  // Struct member tz_hour.
  //
  // Time zone offset in Hours wrt UTC.
  std::shared_ptr<ISchemaItem> tz_hour_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(-12), TSchemaItemParameter<int32_t>(14), TSchemaItemParameter<int32_t>(0));

  // Struct member tz_minute.
  //
  // Time zone offset in Min wrt UTC.
  std::shared_ptr<ISchemaItem> tz_minute_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(59), TSchemaItemParameter<int32_t>(0));CObjectSchemaItem::Members schema_members;

  schema_members["millisecond"] = CObjectSchemaItem::SMember(millisecond_SchemaItem, false);
  schema_members["second"] = CObjectSchemaItem::SMember(second_SchemaItem, false);
  schema_members["minute"] = CObjectSchemaItem::SMember(minute_SchemaItem, false);
  schema_members["hour"] = CObjectSchemaItem::SMember(hour_SchemaItem, false);
  schema_members["day"] = CObjectSchemaItem::SMember(day_SchemaItem, false);
  schema_members["month"] = CObjectSchemaItem::SMember(month_SchemaItem, false);
  schema_members["year"] = CObjectSchemaItem::SMember(year_SchemaItem, false);
  schema_members["tz_hour"] = CObjectSchemaItem::SMember(tz_hour_SchemaItem, false);
  schema_members["tz_minute"] = CObjectSchemaItem::SMember(tz_minute_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_OASISAddress(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member countryName.
  //
  // Name of the country (localized)
  std::shared_ptr<ISchemaItem> countryName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(200), TSchemaItemParameter<std::string>());

  // Struct member countryCode.
  //
  // Name of country (ISO 3166-2)
  std::shared_ptr<ISchemaItem> countryCode_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(50), TSchemaItemParameter<std::string>());

  // Struct member postalCode.
  //
  // (PLZ, ZIP, PIN, CAP etc.)
  std::shared_ptr<ISchemaItem> postalCode_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(16), TSchemaItemParameter<std::string>());

  // Struct member administrativeArea.
  //
  // Portion of country (e.g. state)
  std::shared_ptr<ISchemaItem> administrativeArea_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(200), TSchemaItemParameter<std::string>());

  // Struct member subAdministrativeArea.
  //
  // Portion of e.g. state (e.g. county)
  std::shared_ptr<ISchemaItem> subAdministrativeArea_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(200), TSchemaItemParameter<std::string>());

  // Struct member locality.
  //
  // Hypernym for e.g. city/village
  std::shared_ptr<ISchemaItem> locality_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(200), TSchemaItemParameter<std::string>());

  // Struct member subLocality.
  //
  // Hypernym for e.g. district
  std::shared_ptr<ISchemaItem> subLocality_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(200), TSchemaItemParameter<std::string>());

  // Struct member thoroughfare.
  //
  // Hypernym for street, road etc.
  std::shared_ptr<ISchemaItem> thoroughfare_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(200), TSchemaItemParameter<std::string>());

  // Struct member subThoroughfare.
  //
  // Portion of thoroughfare e.g. house number
  std::shared_ptr<ISchemaItem> subThoroughfare_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(200), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["countryName"] = CObjectSchemaItem::SMember(countryName_SchemaItem, false);
  schema_members["countryCode"] = CObjectSchemaItem::SMember(countryCode_SchemaItem, false);
  schema_members["postalCode"] = CObjectSchemaItem::SMember(postalCode_SchemaItem, false);
  schema_members["administrativeArea"] = CObjectSchemaItem::SMember(administrativeArea_SchemaItem, false);
  schema_members["subAdministrativeArea"] = CObjectSchemaItem::SMember(subAdministrativeArea_SchemaItem, false);
  schema_members["locality"] = CObjectSchemaItem::SMember(locality_SchemaItem, false);
  schema_members["subLocality"] = CObjectSchemaItem::SMember(subLocality_SchemaItem, false);
  schema_members["thoroughfare"] = CObjectSchemaItem::SMember(thoroughfare_SchemaItem, false);
  schema_members["subThoroughfare"] = CObjectSchemaItem::SMember(subThoroughfare_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_LocationDetails(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member coordinate.
  //
  // Latitude/Longitude of the location.
  std::shared_ptr<ISchemaItem> coordinate_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Coordinate);

  // Struct member locationName.
  //
  // Name of location.
  std::shared_ptr<ISchemaItem> locationName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member addressLines.
  //
  // Location address for display purposes only
  std::shared_ptr<ISchemaItem> addressLines_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(4));

  // Struct member locationDescription.
  //
  // Description intended location / establishment (if applicable)
  std::shared_ptr<ISchemaItem> locationDescription_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member phoneNumber.
  //
  // Phone number of location / establishment.
  std::shared_ptr<ISchemaItem> phoneNumber_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member locationImage.
  //
  // Image / icon of intended location.
  std::shared_ptr<ISchemaItem> locationImage_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Image);

  // Struct member searchAddress.
  //
  // Address to be used by navigation engines for search
  std::shared_ptr<ISchemaItem> searchAddress_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_OASISAddress);CObjectSchemaItem::Members schema_members;

  schema_members["coordinate"] = CObjectSchemaItem::SMember(coordinate_SchemaItem, false);
  schema_members["locationName"] = CObjectSchemaItem::SMember(locationName_SchemaItem, false);
  schema_members["addressLines"] = CObjectSchemaItem::SMember(addressLines_SchemaItem, false);
  schema_members["locationDescription"] = CObjectSchemaItem::SMember(locationDescription_SchemaItem, false);
  schema_members["phoneNumber"] = CObjectSchemaItem::SMember(phoneNumber_SchemaItem, false);
  schema_members["locationImage"] = CObjectSchemaItem::SMember(locationImage_SchemaItem, false);
  schema_members["searchAddress"] = CObjectSchemaItem::SMember(searchAddress_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_NavigationCapability(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member sendLocationEnabled.
  //
  // If the module has the ability to add locations to the onboard nav
  std::shared_ptr<ISchemaItem> sendLocationEnabled_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member getWayPointsEnabled.
  //
  // If the module has the ability to return way points from onboard nav
  std::shared_ptr<ISchemaItem> getWayPointsEnabled_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["sendLocationEnabled"] = CObjectSchemaItem::SMember(sendLocationEnabled_SchemaItem, false);
  schema_members["getWayPointsEnabled"] = CObjectSchemaItem::SMember(getWayPointsEnabled_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_PhoneCapability(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member dialNumberEnabled.
  //
  // If the module has the abiulity to perform dial number
  std::shared_ptr<ISchemaItem> dialNumberEnabled_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["dialNumberEnabled"] = CObjectSchemaItem::SMember(dialNumberEnabled_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_VideoStreamingCapability(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member preferredResolution.
  //
  // The preferred resolution of a video stream for decoding and rendering on HMI.
  std::shared_ptr<ISchemaItem> preferredResolution_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ImageResolution);

  // Struct member maxBitrate.
  //
  // The maximum bitrate of video stream that is supported, in kbps.
  std::shared_ptr<ISchemaItem> maxBitrate_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2147483647), TSchemaItemParameter<int32_t>());

  // Struct member supportedFormats.
  //
  // 
  //         Detailed information on each format supported by this system, in its preferred order
  //         (i.e. the first element in the array is most preferable to the system).
  //         Each object will contain a VideoStreamingFormat that describes what can be expected.
  //       
  std::shared_ptr<ISchemaItem> supportedFormats_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VideoStreamingFormat), TSchemaItemParameter<size_t>(), TSchemaItemParameter<size_t>());

  // Struct member hapticSpatialDataSupported.
  //
  // True if the system can utilize the haptic spatial data from the source being streamed. 
  std::shared_ptr<ISchemaItem> hapticSpatialDataSupported_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["preferredResolution"] = CObjectSchemaItem::SMember(preferredResolution_SchemaItem, false);
  schema_members["maxBitrate"] = CObjectSchemaItem::SMember(maxBitrate_SchemaItem, false);
  schema_members["supportedFormats"] = CObjectSchemaItem::SMember(supportedFormats_SchemaItem, false);
  schema_members["hapticSpatialDataSupported"] = CObjectSchemaItem::SMember(hapticSpatialDataSupported_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_SystemCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member navigationCapability.
  std::shared_ptr<ISchemaItem> navigationCapability_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_NavigationCapability);

  // Struct member phoneCapability.
  std::shared_ptr<ISchemaItem> phoneCapability_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_PhoneCapability);

  // Struct member videoStreamingCapability.
  std::shared_ptr<ISchemaItem> videoStreamingCapability_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VideoStreamingCapability);CObjectSchemaItem::Members schema_members;

  schema_members["navigationCapability"] = CObjectSchemaItem::SMember(navigationCapability_SchemaItem, false);
  schema_members["phoneCapability"] = CObjectSchemaItem::SMember(phoneCapability_SchemaItem, false);
  schema_members["videoStreamingCapability"] = CObjectSchemaItem::SMember(videoStreamingCapability_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_RemoteControlCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member climateControlCapabilities.
  //
  // If included, the platform supports RC climate controls. For this baseline version, maxsize=1. i.e. only one climate control module is supported.
  std::shared_ptr<ISchemaItem> climateControlCapabilities_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ClimateControlCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member radioControlCapabilities.
  //
  // If included, the platform supports RC radio controls. For this baseline version, maxsize=1. i.e. only one climate control module is supported.
  std::shared_ptr<ISchemaItem> radioControlCapabilities_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_RadioControlCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member buttonCapabilities.
  //
  // If included, the platform supports RC button controls with the included button names.
  std::shared_ptr<ISchemaItem> buttonCapabilities_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_ButtonCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member seatControlCapabilities.
  //
  // 
  //       If included, the platform supports seat controls.
  //       
  std::shared_ptr<ISchemaItem> seatControlCapabilities_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SeatControlCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member audioControlCapabilities.
  //
  //  If included, the platform supports audio controls. 
  std::shared_ptr<ISchemaItem> audioControlCapabilities_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_AudioControlCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member hmiSettingsControlCapabilities.
  //
  //  If included, the platform supports hmi setting controls. 
  std::shared_ptr<ISchemaItem> hmiSettingsControlCapabilities_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_HMISettingsControlCapabilities);

  // Struct member lightControlCapabilities.
  //
  //  If included, the platform supports light controls. 
  std::shared_ptr<ISchemaItem> lightControlCapabilities_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_LightControlCapabilities);CObjectSchemaItem::Members schema_members;

  schema_members["climateControlCapabilities"] = CObjectSchemaItem::SMember(climateControlCapabilities_SchemaItem, false);
  schema_members["radioControlCapabilities"] = CObjectSchemaItem::SMember(radioControlCapabilities_SchemaItem, false);
  schema_members["buttonCapabilities"] = CObjectSchemaItem::SMember(buttonCapabilities_SchemaItem, false);
  schema_members["seatControlCapabilities"] = CObjectSchemaItem::SMember(seatControlCapabilities_SchemaItem, false);
  schema_members["audioControlCapabilities"] = CObjectSchemaItem::SMember(audioControlCapabilities_SchemaItem, false);
  schema_members["hmiSettingsControlCapabilities"] = CObjectSchemaItem::SMember(hmiSettingsControlCapabilities_SchemaItem, false);
  schema_members["lightControlCapabilities"] = CObjectSchemaItem::SMember(lightControlCapabilities_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_Rectangle(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member x.
  //
  // The X-coordinate of the user control
  std::shared_ptr<ISchemaItem> x_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());

  // Struct member y.
  //
  // The Y-coordinate of the user control
  std::shared_ptr<ISchemaItem> y_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());

  // Struct member width.
  //
  // The width of the user control's bounding rectangle
  std::shared_ptr<ISchemaItem> width_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());

  // Struct member height.
  //
  // The height of the user control's bounding rectangle
  std::shared_ptr<ISchemaItem> height_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());CObjectSchemaItem::Members schema_members;

  schema_members["x"] = CObjectSchemaItem::SMember(x_SchemaItem, true);
  schema_members["y"] = CObjectSchemaItem::SMember(y_SchemaItem, true);
  schema_members["width"] = CObjectSchemaItem::SMember(width_SchemaItem, true);
  schema_members["height"] = CObjectSchemaItem::SMember(height_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_HapticRect(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member id.
  //
  // A user control spatial identifier
  std::shared_ptr<ISchemaItem> id_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Struct member rect.
  //
  // The position of the haptic rectangle to be highlighted. The center of this rectangle will be "touched" when a press occurs.
  std::shared_ptr<ISchemaItem> rect_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Rectangle);CObjectSchemaItem::Members schema_members;

  schema_members["id"] = CObjectSchemaItem::SMember(id_SchemaItem, true);
  schema_members["rect"] = CObjectSchemaItem::SMember(rect_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_SyncMsgVersion(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member majorVersion.
  //
  // The major version indicates versions that is not-compatible to previous versions.
  std::shared_ptr<ISchemaItem> majorVersion_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(10), TSchemaItemParameter<int32_t>());

  // Struct member minorVersion.
  //
  // The minor version indicates a change to a previous version that should still allow to be run on an older version (with limited functionality)
  std::shared_ptr<ISchemaItem> minorVersion_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(1000), TSchemaItemParameter<int32_t>());

  // Struct member patchVersion.
  //
  // The patch version indicates a fix to existing functionality in a previous version that should still be able to be run on an older version 
  std::shared_ptr<ISchemaItem> patchVersion_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(1000), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["majorVersion"] = CObjectSchemaItem::SMember(majorVersion_SchemaItem, true);
  schema_members["minorVersion"] = CObjectSchemaItem::SMember(minorVersion_SchemaItem, true);
  schema_members["patchVersion"] = CObjectSchemaItem::SMember(patchVersion_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_MediaServiceManifest(
    const TStructsSchemaItems &struct_schema_items) {
  CObjectSchemaItem::Members schema_members;

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_MediaServiceData(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_MediaType::eType> Common_MediaType_all_enum_values;
  Common_MediaType_all_enum_values.insert(Common_MediaType::MUSIC);
  Common_MediaType_all_enum_values.insert(Common_MediaType::PODCAST);
  Common_MediaType_all_enum_values.insert(Common_MediaType::AUDIOBOOK);
  Common_MediaType_all_enum_values.insert(Common_MediaType::OTHER);

  // Struct member mediaType.
  //
  // The type of the currently playing or paused track.
  std::shared_ptr<ISchemaItem> mediaType_SchemaItem = TEnumSchemaItem<Common_MediaType::eType>::create(Common_MediaType_all_enum_values, TSchemaItemParameter<Common_MediaType::eType>());

  // Struct member mediaTitle.
  //
  // 
  //                 Music: The name of the current track
  //                 Podcast: The name of the current episode
  //                 Audiobook: The name of the current chapter
  //             
  std::shared_ptr<ISchemaItem> mediaTitle_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member mediaArtist.
  //
  // 
  //                 Music: The name of the current album artist
  //                 Podcast: The provider of the podcast (hosts, network, company)
  //                 Audiobook: The book author's name
  //             
  std::shared_ptr<ISchemaItem> mediaArtist_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member mediaAlbum.
  //
  // 
  //                 Music: The name of the current album
  //                 Podcast: The name of the current podcast show
  //                 Audiobook: The name of the current book
  //             
  std::shared_ptr<ISchemaItem> mediaAlbum_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member playlistName.
  //
  // 
  //                 Music: The name of the playlist or radio station, if the user is playing from a playlist, otherwise, Null
  //                 Podcast: The name of the playlist, if the user is playing from a playlist, otherwise, Null
  //                 Audiobook: Likely not applicable, possibly a collection or "playlist" of books
  //             
  std::shared_ptr<ISchemaItem> playlistName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member isExplicit.
  //
  //  Whether or not the content currently playing (e.g. the track, episode, or book) contains explicit content
  std::shared_ptr<ISchemaItem> isExplicit_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member trackPlaybackProgress.
  //
  // 
  //                 Music: The current progress of the track in seconds
  //                 Podcast: The current progress of the episode in seconds
  //                 Audiobook: The current progress of the current segment (e.g. the chapter) in seconds
  //             
  std::shared_ptr<ISchemaItem> trackPlaybackProgress_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member trackPlaybackDuration.
  //
  // 
  //                 Music: The total duration of the track in seconds
  //                 Podcast: The total duration of the episode in seconds
  //                 Audiobook: The total duration of the current segment (e.g. the chapter) in seconds
  //             
  std::shared_ptr<ISchemaItem> trackPlaybackDuration_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member queuePlaybackProgress.
  //
  // 
  //                 Music: The current progress of the playback queue in seconds
  //                 Podcast: The current progress of the playback queue in seconds
  //                 Audiobook: The current progress of the playback queue (e.g. the book) in seconds
  //             
  std::shared_ptr<ISchemaItem> queuePlaybackProgress_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member queuePlaybackDuration.
  //
  // 
  //                 Music: The total duration of the playback queue in seconds
  //                 Podcast: The total duration of the playback queue in seconds
  //                 Audiobook: The total duration of the playback queue (e.g. the book) in seconds
  //             
  std::shared_ptr<ISchemaItem> queuePlaybackDuration_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member queueCurrentTrackNumber.
  //
  // 
  //                 Music: The current number (1 based) of the track in the playback queue
  //                 Podcast: The current number (1 based) of the episode in the playback queue
  //                 Audiobook: The current number (1 based) of the episode in the playback queue (e.g. the chapter number in the book)
  //             
  std::shared_ptr<ISchemaItem> queueCurrentTrackNumber_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member queueTotalTrackCount.
  //
  // 
  //                 Music: The total number of tracks in the playback queue
  //                 Podcast: The total number of episodes in the playback queue
  //                 Audiobook: The total number of sections in the playback queue (e.g. the number of chapters in the book)
  //             
  std::shared_ptr<ISchemaItem> queueTotalTrackCount_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member mediaImage.
  //
  // 
  //                 Music: The album art of the current track
  //                 Podcast: The podcast or chapter artwork of the current podcast episode
  //                 Audiobook: The book or chapter artwork of the current audiobook
  //             
  std::shared_ptr<ISchemaItem> mediaImage_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Image);CObjectSchemaItem::Members schema_members;

  schema_members["mediaType"] = CObjectSchemaItem::SMember(mediaType_SchemaItem, false);
  schema_members["mediaTitle"] = CObjectSchemaItem::SMember(mediaTitle_SchemaItem, false);
  schema_members["mediaArtist"] = CObjectSchemaItem::SMember(mediaArtist_SchemaItem, false);
  schema_members["mediaAlbum"] = CObjectSchemaItem::SMember(mediaAlbum_SchemaItem, false);
  schema_members["playlistName"] = CObjectSchemaItem::SMember(playlistName_SchemaItem, false);
  schema_members["isExplicit"] = CObjectSchemaItem::SMember(isExplicit_SchemaItem, false);
  schema_members["trackPlaybackProgress"] = CObjectSchemaItem::SMember(trackPlaybackProgress_SchemaItem, false);
  schema_members["trackPlaybackDuration"] = CObjectSchemaItem::SMember(trackPlaybackDuration_SchemaItem, false);
  schema_members["queuePlaybackProgress"] = CObjectSchemaItem::SMember(queuePlaybackProgress_SchemaItem, false);
  schema_members["queuePlaybackDuration"] = CObjectSchemaItem::SMember(queuePlaybackDuration_SchemaItem, false);
  schema_members["queueCurrentTrackNumber"] = CObjectSchemaItem::SMember(queueCurrentTrackNumber_SchemaItem, false);
  schema_members["queueTotalTrackCount"] = CObjectSchemaItem::SMember(queueTotalTrackCount_SchemaItem, false);
  schema_members["mediaImage"] = CObjectSchemaItem::SMember(mediaImage_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_WeatherServiceManifest(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member currentForecastSupported.
  std::shared_ptr<ISchemaItem> currentForecastSupported_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member maxMultidayForecastAmount.
  std::shared_ptr<ISchemaItem> maxMultidayForecastAmount_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member maxHourlyForecastAmount.
  std::shared_ptr<ISchemaItem> maxHourlyForecastAmount_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member maxMinutelyForecastAmount.
  std::shared_ptr<ISchemaItem> maxMinutelyForecastAmount_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member weatherForLocationSupported.
  std::shared_ptr<ISchemaItem> weatherForLocationSupported_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["currentForecastSupported"] = CObjectSchemaItem::SMember(currentForecastSupported_SchemaItem, false);
  schema_members["maxMultidayForecastAmount"] = CObjectSchemaItem::SMember(maxMultidayForecastAmount_SchemaItem, false);
  schema_members["maxHourlyForecastAmount"] = CObjectSchemaItem::SMember(maxHourlyForecastAmount_SchemaItem, false);
  schema_members["maxMinutelyForecastAmount"] = CObjectSchemaItem::SMember(maxMinutelyForecastAmount_SchemaItem, false);
  schema_members["weatherForLocationSupported"] = CObjectSchemaItem::SMember(weatherForLocationSupported_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_WeatherAlert(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member title.
  std::shared_ptr<ISchemaItem> title_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member summary.
  std::shared_ptr<ISchemaItem> summary_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member expires.
  std::shared_ptr<ISchemaItem> expires_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DateTime);

  // Struct member regions.
  std::shared_ptr<ISchemaItem> regions_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(99));

  // Struct member severity.
  std::shared_ptr<ISchemaItem> severity_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member timeIssued.
  std::shared_ptr<ISchemaItem> timeIssued_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DateTime);CObjectSchemaItem::Members schema_members;

  schema_members["title"] = CObjectSchemaItem::SMember(title_SchemaItem, false);
  schema_members["summary"] = CObjectSchemaItem::SMember(summary_SchemaItem, false);
  schema_members["expires"] = CObjectSchemaItem::SMember(expires_SchemaItem, false);
  schema_members["regions"] = CObjectSchemaItem::SMember(regions_SchemaItem, false);
  schema_members["severity"] = CObjectSchemaItem::SMember(severity_SchemaItem, false);
  schema_members["timeIssued"] = CObjectSchemaItem::SMember(timeIssued_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_WeatherData(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member currentTemperature.
  std::shared_ptr<ISchemaItem> currentTemperature_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Temperature);

  // Struct member temperatureHigh.
  std::shared_ptr<ISchemaItem> temperatureHigh_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Temperature);

  // Struct member temperatureLow.
  std::shared_ptr<ISchemaItem> temperatureLow_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Temperature);

  // Struct member apparentTemperature.
  std::shared_ptr<ISchemaItem> apparentTemperature_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Temperature);

  // Struct member apparentTemperatureHigh.
  std::shared_ptr<ISchemaItem> apparentTemperatureHigh_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Temperature);

  // Struct member apparentTemperatureLow.
  std::shared_ptr<ISchemaItem> apparentTemperatureLow_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Temperature);

  // Struct member weatherSummary.
  std::shared_ptr<ISchemaItem> weatherSummary_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member time.
  std::shared_ptr<ISchemaItem> time_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DateTime);

  // Struct member humidity.
  //
  //  0 to 1, percentage humidity 
  std::shared_ptr<ISchemaItem> humidity_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(1.0), TSchemaItemParameter<double>());

  // Struct member cloudCover.
  //
  //  0 to 1, percentage cloud cover 
  std::shared_ptr<ISchemaItem> cloudCover_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(1.0), TSchemaItemParameter<double>());

  // Struct member moonPhase.
  //
  //  0 to 1, percentage of the moon seen, e.g. 0 = no moon, 0.25 = quarter moon 
  std::shared_ptr<ISchemaItem> moonPhase_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(1.0), TSchemaItemParameter<double>());

  // Struct member windBearing.
  //
  //  In degrees, true north at 0 degrees 
  std::shared_ptr<ISchemaItem> windBearing_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member windGust.
  //
  //  km/hr 
  std::shared_ptr<ISchemaItem> windGust_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());

  // Struct member windSpeed.
  //
  //  km/hr 
  std::shared_ptr<ISchemaItem> windSpeed_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());

  // Struct member nearestStormBearing.
  //
  //  In degrees, true north at 0 degrees 
  std::shared_ptr<ISchemaItem> nearestStormBearing_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member nearestStormDistance.
  //
  //  In km 
  std::shared_ptr<ISchemaItem> nearestStormDistance_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member precipAccumulation.
  //
  //  cm 
  std::shared_ptr<ISchemaItem> precipAccumulation_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());

  // Struct member precipIntensity.
  //
  //  cm of water per hour 
  std::shared_ptr<ISchemaItem> precipIntensity_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());

  // Struct member precipProbability.
  //
  //  0 to 1, percentage chance 
  std::shared_ptr<ISchemaItem> precipProbability_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(1.0), TSchemaItemParameter<double>());

  // Struct member precipType.
  //
  //  e.g. "rain", "snow", "sleet", "hail" 
  std::shared_ptr<ISchemaItem> precipType_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member visibility.
  //
  //  In km 
  std::shared_ptr<ISchemaItem> visibility_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());

  // Struct member weatherIcon.
  std::shared_ptr<ISchemaItem> weatherIcon_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Image);CObjectSchemaItem::Members schema_members;

  schema_members["currentTemperature"] = CObjectSchemaItem::SMember(currentTemperature_SchemaItem, false);
  schema_members["temperatureHigh"] = CObjectSchemaItem::SMember(temperatureHigh_SchemaItem, false);
  schema_members["temperatureLow"] = CObjectSchemaItem::SMember(temperatureLow_SchemaItem, false);
  schema_members["apparentTemperature"] = CObjectSchemaItem::SMember(apparentTemperature_SchemaItem, false);
  schema_members["apparentTemperatureHigh"] = CObjectSchemaItem::SMember(apparentTemperatureHigh_SchemaItem, false);
  schema_members["apparentTemperatureLow"] = CObjectSchemaItem::SMember(apparentTemperatureLow_SchemaItem, false);
  schema_members["weatherSummary"] = CObjectSchemaItem::SMember(weatherSummary_SchemaItem, false);
  schema_members["time"] = CObjectSchemaItem::SMember(time_SchemaItem, false);
  schema_members["humidity"] = CObjectSchemaItem::SMember(humidity_SchemaItem, false);
  schema_members["cloudCover"] = CObjectSchemaItem::SMember(cloudCover_SchemaItem, false);
  schema_members["moonPhase"] = CObjectSchemaItem::SMember(moonPhase_SchemaItem, false);
  schema_members["windBearing"] = CObjectSchemaItem::SMember(windBearing_SchemaItem, false);
  schema_members["windGust"] = CObjectSchemaItem::SMember(windGust_SchemaItem, false);
  schema_members["windSpeed"] = CObjectSchemaItem::SMember(windSpeed_SchemaItem, false);
  schema_members["nearestStormBearing"] = CObjectSchemaItem::SMember(nearestStormBearing_SchemaItem, false);
  schema_members["nearestStormDistance"] = CObjectSchemaItem::SMember(nearestStormDistance_SchemaItem, false);
  schema_members["precipAccumulation"] = CObjectSchemaItem::SMember(precipAccumulation_SchemaItem, false);
  schema_members["precipIntensity"] = CObjectSchemaItem::SMember(precipIntensity_SchemaItem, false);
  schema_members["precipProbability"] = CObjectSchemaItem::SMember(precipProbability_SchemaItem, false);
  schema_members["precipType"] = CObjectSchemaItem::SMember(precipType_SchemaItem, false);
  schema_members["visibility"] = CObjectSchemaItem::SMember(visibility_SchemaItem, false);
  schema_members["weatherIcon"] = CObjectSchemaItem::SMember(weatherIcon_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_WeatherServiceData(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member location.
  std::shared_ptr<ISchemaItem> location_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_LocationDetails);

  // Struct member currentForecast.
  std::shared_ptr<ISchemaItem> currentForecast_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_WeatherData);

  // Struct member minuteForecast.
  std::shared_ptr<ISchemaItem> minuteForecast_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_WeatherData), TSchemaItemParameter<size_t>(15), TSchemaItemParameter<size_t>(60));

  // Struct member hourlyForecast.
  std::shared_ptr<ISchemaItem> hourlyForecast_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_WeatherData), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(96));

  // Struct member multidayForecast.
  std::shared_ptr<ISchemaItem> multidayForecast_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_WeatherData), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(30));

  // Struct member alerts.
  //
  //  This array should be ordered with the first object being the current day
  std::shared_ptr<ISchemaItem> alerts_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_WeatherAlert), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(10));CObjectSchemaItem::Members schema_members;

  schema_members["location"] = CObjectSchemaItem::SMember(location_SchemaItem, true);
  schema_members["currentForecast"] = CObjectSchemaItem::SMember(currentForecast_SchemaItem, false);
  schema_members["minuteForecast"] = CObjectSchemaItem::SMember(minuteForecast_SchemaItem, false);
  schema_members["hourlyForecast"] = CObjectSchemaItem::SMember(hourlyForecast_SchemaItem, false);
  schema_members["multidayForecast"] = CObjectSchemaItem::SMember(multidayForecast_SchemaItem, false);
  schema_members["alerts"] = CObjectSchemaItem::SMember(alerts_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_NavigationServiceManifest(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member acceptsWayPoints.
  //
  //  Informs the subscriber if this service can actually accept way points. 
  std::shared_ptr<ISchemaItem> acceptsWayPoints_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["acceptsWayPoints"] = CObjectSchemaItem::SMember(acceptsWayPoints_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_NavigationInstruction(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_NavigationAction::eType> Common_NavigationAction_all_enum_values;
  Common_NavigationAction_all_enum_values.insert(Common_NavigationAction::TURN);
  Common_NavigationAction_all_enum_values.insert(Common_NavigationAction::EXIT);
  Common_NavigationAction_all_enum_values.insert(Common_NavigationAction::STAY);
  Common_NavigationAction_all_enum_values.insert(Common_NavigationAction::MERGE);
  Common_NavigationAction_all_enum_values.insert(Common_NavigationAction::FERRY);
  Common_NavigationAction_all_enum_values.insert(Common_NavigationAction::CAR_SHUTTLE_TRAIN);
  Common_NavigationAction_all_enum_values.insert(Common_NavigationAction::WAYPOINT);

  std::set<Common_NavigationJunction::eType> Common_NavigationJunction_all_enum_values;
  Common_NavigationJunction_all_enum_values.insert(Common_NavigationJunction::REGULAR);
  Common_NavigationJunction_all_enum_values.insert(Common_NavigationJunction::BIFURCATION);
  Common_NavigationJunction_all_enum_values.insert(Common_NavigationJunction::MULTI_CARRIAGEWAY);
  Common_NavigationJunction_all_enum_values.insert(Common_NavigationJunction::ROUNDABOUT);
  Common_NavigationJunction_all_enum_values.insert(Common_NavigationJunction::TRAVERSABLE_ROUNDABOUT);
  Common_NavigationJunction_all_enum_values.insert(Common_NavigationJunction::JUGHANDLE);
  Common_NavigationJunction_all_enum_values.insert(Common_NavigationJunction::ALL_WAY_YIELD);
  Common_NavigationJunction_all_enum_values.insert(Common_NavigationJunction::TURN_AROUND);

  std::set<Common_Direction::eType> Common_Direction_all_enum_values;
  Common_Direction_all_enum_values.insert(Common_Direction::LEFT);
  Common_Direction_all_enum_values.insert(Common_Direction::RIGHT);

  // Struct member locationDetails.
  std::shared_ptr<ISchemaItem> locationDetails_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_LocationDetails);

  // Struct member action.
  std::shared_ptr<ISchemaItem> action_SchemaItem = TEnumSchemaItem<Common_NavigationAction::eType>::create(Common_NavigationAction_all_enum_values, TSchemaItemParameter<Common_NavigationAction::eType>());

  // Struct member eta.
  std::shared_ptr<ISchemaItem> eta_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DateTime);

  // Struct member bearing.
  //
  //  The angle at which this instruction takes place. For example, 0 would mean straight, less than 45 is bearing right, greater than 135 is sharp right, between 45 and 135 is a regular right, and 180 is a U-Turn, etc. 
  std::shared_ptr<ISchemaItem> bearing_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(359), TSchemaItemParameter<int32_t>());

  // Struct member junctionType.
  std::shared_ptr<ISchemaItem> junctionType_SchemaItem = TEnumSchemaItem<Common_NavigationJunction::eType>::create(Common_NavigationJunction_all_enum_values, TSchemaItemParameter<Common_NavigationJunction::eType>());

  // Struct member drivingSide.
  //
  //  Used to infer which side of the road this instruction takes place. For a U-Turn (action=TURN, bearing=180) this will determine which direction the turn should take place. 
  std::shared_ptr<ISchemaItem> drivingSide_SchemaItem = TEnumSchemaItem<Common_Direction::eType>::create(Common_Direction_all_enum_values, TSchemaItemParameter<Common_Direction::eType>());

  // Struct member details.
  //
  //  This is a string representation of this instruction, used to display instructions to the users. This is not intended to be read aloud to the users, see the param prompt in NavigationServiceData for that. 
  std::shared_ptr<ISchemaItem> details_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member image.
  //
  //  An image representation of this instruction. 
  std::shared_ptr<ISchemaItem> image_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Image);CObjectSchemaItem::Members schema_members;

  schema_members["locationDetails"] = CObjectSchemaItem::SMember(locationDetails_SchemaItem, true);
  schema_members["action"] = CObjectSchemaItem::SMember(action_SchemaItem, true);
  schema_members["eta"] = CObjectSchemaItem::SMember(eta_SchemaItem, false);
  schema_members["bearing"] = CObjectSchemaItem::SMember(bearing_SchemaItem, false);
  schema_members["junctionType"] = CObjectSchemaItem::SMember(junctionType_SchemaItem, false);
  schema_members["drivingSide"] = CObjectSchemaItem::SMember(drivingSide_SchemaItem, false);
  schema_members["details"] = CObjectSchemaItem::SMember(details_SchemaItem, false);
  schema_members["image"] = CObjectSchemaItem::SMember(image_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_NavigationServiceData(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member timeStamp.
  //
  //  This is the timestamp of when the data was generated. This is to ensure any time or distance given in the data can accurately be adjusted if necessary. 
  std::shared_ptr<ISchemaItem> timeStamp_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DateTime);

  // Struct member origin.
  std::shared_ptr<ISchemaItem> origin_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_LocationDetails);

  // Struct member destination.
  std::shared_ptr<ISchemaItem> destination_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_LocationDetails);

  // Struct member destinationETA.
  std::shared_ptr<ISchemaItem> destinationETA_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DateTime);

  // Struct member instructions.
  //
  //  This array should be ordered with all remaining instructions. The start of this array should always contain the next instruction.
  std::shared_ptr<ISchemaItem> instructions_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_NavigationInstruction), TSchemaItemParameter<size_t>(), TSchemaItemParameter<size_t>());

  // Struct member nextInstructionETA.
  std::shared_ptr<ISchemaItem> nextInstructionETA_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_DateTime);

  // Struct member nextInstructionDistance.
  //
  // The distance to this instruction from current location. This should only be updated ever .1 unit of distance. For more accuracy the consumer can use the GPS location of itself and the next instruction. 
  std::shared_ptr<ISchemaItem> nextInstructionDistance_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());

  // Struct member nextInstructionDistanceScale.
  //
  // Distance till next maneuver (starting from) from previous maneuver.
  std::shared_ptr<ISchemaItem> nextInstructionDistanceScale_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());

  // Struct member prompt.
  //
  // This is a prompt message that should be conveyed to the user through either display or voice (TTS). This param will change often as it should represent the following: approaching instruction, post instruction, alerts that affect the current navigation session, etc.
  std::shared_ptr<ISchemaItem> prompt_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["timeStamp"] = CObjectSchemaItem::SMember(timeStamp_SchemaItem, true);
  schema_members["origin"] = CObjectSchemaItem::SMember(origin_SchemaItem, false);
  schema_members["destination"] = CObjectSchemaItem::SMember(destination_SchemaItem, false);
  schema_members["destinationETA"] = CObjectSchemaItem::SMember(destinationETA_SchemaItem, false);
  schema_members["instructions"] = CObjectSchemaItem::SMember(instructions_SchemaItem, false);
  schema_members["nextInstructionETA"] = CObjectSchemaItem::SMember(nextInstructionETA_SchemaItem, false);
  schema_members["nextInstructionDistance"] = CObjectSchemaItem::SMember(nextInstructionDistance_SchemaItem, false);
  schema_members["nextInstructionDistanceScale"] = CObjectSchemaItem::SMember(nextInstructionDistanceScale_SchemaItem, false);
  schema_members["prompt"] = CObjectSchemaItem::SMember(prompt_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_AppServiceManifest(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member serviceName.
  //
  //  Unique name of this service 
  std::shared_ptr<ISchemaItem> serviceName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member serviceType.
  //
  //  The type of service that is to be offered by this app. See AppServiceType for known enum equivalent types. Parameter is a string to allow for new service types to be used by apps on older versions of SDL Core. 
  std::shared_ptr<ISchemaItem> serviceType_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member serviceIcon.
  //
  //  The icon to be associated with this service. Most likely the same as the appIcon.
  std::shared_ptr<ISchemaItem> serviceIcon_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_Image);

  // Struct member allowAppConsumers.
  //
  //  If true, app service consumers beyond the IVI system will be able to access this service. If false, only the IVI system will be able consume the service. If not provided, it is assumed to be false. 
  std::shared_ptr<ISchemaItem> allowAppConsumers_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>(false));

  // Struct member rpcSpecVersion.
  //
  //  This is the max RPC Spec version the app service understands. This is important during the RPC passthrough functionality. If not included, it is assumed the max version of the module is acceptable. 
  std::shared_ptr<ISchemaItem> rpcSpecVersion_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_SyncMsgVersion);

  // Struct member handledRPCs.
  //
  //  This field contains the Function IDs for the RPCs that this service intends to handle correctly. This means the service will provide meaningful responses. 
  std::shared_ptr<ISchemaItem> handledRPCs_SchemaItem = CArraySchemaItem::create(TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>()), TSchemaItemParameter<size_t>(), TSchemaItemParameter<size_t>());

  // Struct member mediaServiceManifest.
  std::shared_ptr<ISchemaItem> mediaServiceManifest_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_MediaServiceManifest);

  // Struct member weatherServiceManifest.
  std::shared_ptr<ISchemaItem> weatherServiceManifest_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_WeatherServiceManifest);

  // Struct member navigationServiceManifest.
  std::shared_ptr<ISchemaItem> navigationServiceManifest_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_NavigationServiceManifest);CObjectSchemaItem::Members schema_members;

  schema_members["serviceName"] = CObjectSchemaItem::SMember(serviceName_SchemaItem, false);
  schema_members["serviceType"] = CObjectSchemaItem::SMember(serviceType_SchemaItem, true);
  schema_members["serviceIcon"] = CObjectSchemaItem::SMember(serviceIcon_SchemaItem, false);
  schema_members["allowAppConsumers"] = CObjectSchemaItem::SMember(allowAppConsumers_SchemaItem, false);
  schema_members["rpcSpecVersion"] = CObjectSchemaItem::SMember(rpcSpecVersion_SchemaItem, false);
  schema_members["handledRPCs"] = CObjectSchemaItem::SMember(handledRPCs_SchemaItem, false);
  schema_members["mediaServiceManifest"] = CObjectSchemaItem::SMember(mediaServiceManifest_SchemaItem, false);
  schema_members["weatherServiceManifest"] = CObjectSchemaItem::SMember(weatherServiceManifest_SchemaItem, false);
  schema_members["navigationServiceManifest"] = CObjectSchemaItem::SMember(navigationServiceManifest_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_AppServiceRecord(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member serviceID.
  //
  //  A unique ID tied to this specific service record. The ID is supplied by the module that services publish themselves. 
  std::shared_ptr<ISchemaItem> serviceID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member serviceManifest.
  //
  //  Manifest for the service that this record is for.
  std::shared_ptr<ISchemaItem> serviceManifest_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_AppServiceManifest);

  // Struct member servicePublished.
  //
  //  If true, the service is published and available. If false, the service has likely just been unpublished, and should be considered unavailable.
  std::shared_ptr<ISchemaItem> servicePublished_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member serviceActive.
  //
  //  If true, the service is the active primary service of the supplied service type. It will receive all potential RPCs that are passed through to that service type. If false, it is not the primary service of the supplied type. See servicePublished for its availability. 
  std::shared_ptr<ISchemaItem> serviceActive_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["serviceID"] = CObjectSchemaItem::SMember(serviceID_SchemaItem, true);
  schema_members["serviceManifest"] = CObjectSchemaItem::SMember(serviceManifest_SchemaItem, true);
  schema_members["servicePublished"] = CObjectSchemaItem::SMember(servicePublished_SchemaItem, true);
  schema_members["serviceActive"] = CObjectSchemaItem::SMember(serviceActive_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_AppServiceData(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member serviceType.
  //
  // The type of service that is to be offered by this app. See AppServiceType for known enum equivalent types. Parameter is a string to allow for new service types to be used by apps on older versions of SDL Core.
  std::shared_ptr<ISchemaItem> serviceType_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member serviceID.
  std::shared_ptr<ISchemaItem> serviceID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member mediaServiceData.
  std::shared_ptr<ISchemaItem> mediaServiceData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_MediaServiceData);

  // Struct member weatherServiceData.
  std::shared_ptr<ISchemaItem> weatherServiceData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_WeatherServiceData);

  // Struct member navigationServiceData.
  std::shared_ptr<ISchemaItem> navigationServiceData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_NavigationServiceData);CObjectSchemaItem::Members schema_members;

  schema_members["serviceType"] = CObjectSchemaItem::SMember(serviceType_SchemaItem, true);
  schema_members["serviceID"] = CObjectSchemaItem::SMember(serviceID_SchemaItem, true);
  schema_members["mediaServiceData"] = CObjectSchemaItem::SMember(mediaServiceData_SchemaItem, false);
  schema_members["weatherServiceData"] = CObjectSchemaItem::SMember(weatherServiceData_SchemaItem, false);
  schema_members["navigationServiceData"] = CObjectSchemaItem::SMember(navigationServiceData_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_AppServiceCapability(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_ServiceUpdateReason::eType> Common_ServiceUpdateReason_all_enum_values;
  Common_ServiceUpdateReason_all_enum_values.insert(Common_ServiceUpdateReason::PUBLISHED);
  Common_ServiceUpdateReason_all_enum_values.insert(Common_ServiceUpdateReason::REMOVED);
  Common_ServiceUpdateReason_all_enum_values.insert(Common_ServiceUpdateReason::ACTIVATED);
  Common_ServiceUpdateReason_all_enum_values.insert(Common_ServiceUpdateReason::DEACTIVATED);
  Common_ServiceUpdateReason_all_enum_values.insert(Common_ServiceUpdateReason::MANIFEST_UPDATE);

  // Struct member updateReason.
  //
  //  Only included in OnSystemCapabilityUpdated. Update reason for service record.
  std::shared_ptr<ISchemaItem> updateReason_SchemaItem = TEnumSchemaItem<Common_ServiceUpdateReason::eType>::create(Common_ServiceUpdateReason_all_enum_values, TSchemaItemParameter<Common_ServiceUpdateReason::eType>());

  // Struct member updatedAppServiceRecord.
  //
  // Service record for a specific app service provider
  std::shared_ptr<ISchemaItem> updatedAppServiceRecord_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_AppServiceRecord);CObjectSchemaItem::Members schema_members;

  schema_members["updateReason"] = CObjectSchemaItem::SMember(updateReason_SchemaItem, false);
  schema_members["updatedAppServiceRecord"] = CObjectSchemaItem::SMember(updatedAppServiceRecord_SchemaItem, true);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_AppServicesCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member appServices.
  //
  // An array of currently available services. If this is an update to the capability the affected services will include an update reason in that item
  std::shared_ptr<ISchemaItem> appServices_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_AppServiceCapability), TSchemaItemParameter<size_t>(), TSchemaItemParameter<size_t>());CObjectSchemaItem::Members schema_members;

  schema_members["appServices"] = CObjectSchemaItem::SMember(appServices_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> hmi_apis::HMI_API::InitStructSchemaItem_Common_SystemCapability(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Common_SystemCapabilityType::eType> Common_SystemCapabilityType_all_enum_values;
  Common_SystemCapabilityType_all_enum_values.insert(Common_SystemCapabilityType::NAVIGATION);
  Common_SystemCapabilityType_all_enum_values.insert(Common_SystemCapabilityType::PHONE_CALL);
  Common_SystemCapabilityType_all_enum_values.insert(Common_SystemCapabilityType::VIDEO_STREAMING);
  Common_SystemCapabilityType_all_enum_values.insert(Common_SystemCapabilityType::REMOTE_CONTROL);
  Common_SystemCapabilityType_all_enum_values.insert(Common_SystemCapabilityType::APP_SERVICES);

  // Struct member systemCapabilityType.
  //
  // Used as a descriptor of what data to expect in this struct. The corresponding param to this enum should be included and the only other param included.
  std::shared_ptr<ISchemaItem> systemCapabilityType_SchemaItem = TEnumSchemaItem<Common_SystemCapabilityType::eType>::create(Common_SystemCapabilityType_all_enum_values, TSchemaItemParameter<Common_SystemCapabilityType::eType>());

  // Struct member navigationCapability.
  //
  // Describes extended capabilities for onboard navigation system 
  std::shared_ptr<ISchemaItem> navigationCapability_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_NavigationCapability);

  // Struct member phoneCapability.
  //
  // Describes extended capabilities of the module's phone feature
  std::shared_ptr<ISchemaItem> phoneCapability_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_PhoneCapability);

  // Struct member videoStreamingCapability.
  //
  // Describes extended capabilities of the module's phone feature
  std::shared_ptr<ISchemaItem> videoStreamingCapability_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_VideoStreamingCapability);

  // Struct member remoteControlCapability.
  //
  // Describes extended capabilities of the module's phone feature
  std::shared_ptr<ISchemaItem> remoteControlCapability_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_RemoteControlCapabilities);

  // Struct member appServicesCapabilities.
  //
  // An array of currently available services. If this is an update to the capability the affected services will include an update reason in that item
  std::shared_ptr<ISchemaItem> appServicesCapabilities_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Common_AppServicesCapabilities);CObjectSchemaItem::Members schema_members;

  schema_members["systemCapabilityType"] = CObjectSchemaItem::SMember(systemCapabilityType_SchemaItem, true);
  schema_members["navigationCapability"] = CObjectSchemaItem::SMember(navigationCapability_SchemaItem, false);
  schema_members["phoneCapability"] = CObjectSchemaItem::SMember(phoneCapability_SchemaItem, false);
  schema_members["videoStreamingCapability"] = CObjectSchemaItem::SMember(videoStreamingCapability_SchemaItem, false);
  schema_members["remoteControlCapability"] = CObjectSchemaItem::SMember(remoteControlCapability_SchemaItem, false);
  schema_members["appServicesCapabilities"] = CObjectSchemaItem::SMember(appServicesCapabilities_SchemaItem, false);

  return CObjectSchemaItem::create(schema_members);
}

//-------------- String to value enum mapping ----------------

namespace ns_smart_device_link {
namespace ns_smart_objects {

template<>
const EnumConversionHelper<hmi_apis::FunctionID::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::FunctionID::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::FunctionID::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::FunctionID::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::FunctionID::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::FunctionID::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::FunctionID::eType>::cstring_values_[] = {
    "Buttons.GetCapabilities",
    "Buttons.ButtonPress",
    "Buttons.OnButtonEvent",
    "Buttons.OnButtonPress",
    "Buttons.OnButtonSubscription",
    "BasicCommunication.GetSystemTime",
    "BasicCommunication.OnSystemTimeReady",
    "BasicCommunication.OnReady",
    "BasicCommunication.OnStartDeviceDiscovery",
    "BasicCommunication.OnUpdateDeviceList",
    "BasicCommunication.OnResumeAudioSource",
    "BasicCommunication.OnSDLPersistenceComplete",
    "BasicCommunication.UpdateAppList",
    "BasicCommunication.UpdateDeviceList",
    "BasicCommunication.OnFileRemoved",
    "BasicCommunication.OnDeviceChosen",
    "BasicCommunication.OnFindApplications",
    "BasicCommunication.ActivateApp",
    "BasicCommunication.CloseApplication",
    "BasicCommunication.OnAppActivated",
    "BasicCommunication.OnAppDeactivated",
    "BasicCommunication.OnAppRegistered",
    "BasicCommunication.OnAppUnregistered",
    "BasicCommunication.OnExitApplication",
    "BasicCommunication.OnExitAllApplications",
    "BasicCommunication.OnAwakeSDL",
    "BasicCommunication.MixingAudioSupported",
    "BasicCommunication.DialNumber",
    "BasicCommunication.OnSystemRequest",
    "BasicCommunication.SystemRequest",
    "BasicCommunication.PolicyUpdate",
    "BasicCommunication.OnSDLClose",
    "BasicCommunication.OnPutFile",
    "BasicCommunication.GetFilePath",
    "BasicCommunication.GetSystemInfo",
    "BasicCommunication.OnSystemInfoChanged",
    "BasicCommunication.OnIgnitionCycleOver",
    "BasicCommunication.DecryptCertificate",
    "BasicCommunication.OnEventChanged",
    "BasicCommunication.OnSystemCapabilityUpdated",
    "VR.IsReady",
    "VR.Started",
    "VR.Stopped",
    "VR.AddCommand",
    "VR.DeleteCommand",
    "VR.PerformInteraction",
    "VR.OnCommand",
    "VR.ChangeRegistration",
    "VR.OnLanguageChange",
    "VR.GetSupportedLanguages",
    "VR.GetLanguage",
    "VR.GetCapabilities",
    "TTS.GetCapabilities",
    "TTS.Started",
    "TTS.Stopped",
    "TTS.IsReady",
    "TTS.Speak",
    "TTS.StopSpeaking",
    "TTS.ChangeRegistration",
    "TTS.OnLanguageChange",
    "TTS.GetSupportedLanguages",
    "TTS.GetLanguage",
    "TTS.SetGlobalProperties",
    "TTS.OnResetTimeout",
    "UI.Alert",
    "UI.Show",
    "UI.AddCommand",
    "UI.DeleteCommand",
    "UI.AddSubMenu",
    "UI.DeleteSubMenu",
    "UI.PerformInteraction",
    "UI.SetMediaClockTimer",
    "UI.SetGlobalProperties",
    "UI.OnCommand",
    "UI.OnSystemContext",
    "UI.GetCapabilities",
    "UI.ChangeRegistration",
    "UI.OnLanguageChange",
    "UI.GetSupportedLanguages",
    "UI.GetLanguage",
    "UI.OnDriverDistraction",
    "UI.SetAppIcon",
    "UI.SetDisplayLayout",
    "UI.ShowCustomForm",
    "UI.OnKeyboardInput",
    "UI.OnTouchEvent",
    "UI.Slider",
    "UI.ScrollableMessage",
    "UI.PerformAudioPassThru",
    "UI.EndAudioPassThru",
    "UI.IsReady",
    "UI.ClosePopUp",
    "UI.OnResetTimeout",
    "UI.OnRecordStart",
    "UI.SendHapticData",
    "Navigation.IsReady",
    "Navigation.SendLocation",
    "Navigation.ShowConstantTBT",
    "Navigation.AlertManeuver",
    "Navigation.UpdateTurnList",
    "Navigation.OnTBTClientState",
    "Navigation.SetVideoConfig",
    "Navigation.StartStream",
    "Navigation.StopStream",
    "Navigation.StartAudioStream",
    "Navigation.StopAudioStream",
    "Navigation.OnAudioDataStreaming",
    "Navigation.OnVideoDataStreaming",
    "Navigation.GetWayPoints",
    "Navigation.OnWayPointChange",
    "Navigation.SubscribeWayPoints",
    "Navigation.UnsubscribeWayPoints",
    "VehicleInfo.IsReady",
    "VehicleInfo.GetVehicleType",
    "VehicleInfo.ReadDID",
    "VehicleInfo.GetDTCs",
    "VehicleInfo.DiagnosticMessage",
    "VehicleInfo.SubscribeVehicleData",
    "VehicleInfo.UnsubscribeVehicleData",
    "VehicleInfo.GetVehicleData",
    "VehicleInfo.OnVehicleData",
    "SDL.ActivateApp",
    "SDL.GetUserFriendlyMessage",
    "SDL.OnAllowSDLFunctionality",
    "SDL.OnReceivedPolicyUpdate",
    "SDL.OnPolicyUpdate",
    "SDL.GetListOfPermissions",
    "SDL.OnAppPermissionConsent",
    "SDL.OnAppPermissionChanged",
    "SDL.OnSDLConsentNeeded",
    "SDL.UpdateSDL",
    "SDL.GetStatusUpdate",
    "SDL.OnStatusUpdate",
    "SDL.OnSystemError",
    "SDL.AddStatisticsInfo",
    "SDL.GetURLS",
    "SDL.OnDeviceStateChanged",
    "RC.IsReady",
    "RC.GetCapabilities",
    "RC.SetInteriorVehicleData",
    "RC.GetInteriorVehicleData",
    "RC.GetInteriorVehicleDataConsent",
    "RC.OnInteriorVehicleData",
    "RC.OnRemoteControlSettings",
    "RC.OnRCStatus",
    "AppService.PublishAppService",
    "AppService.OnAppServiceData",
    "AppService.GetAppServiceData",
    "AppService.PerformAppServiceInteraction",
    "AppService.GetAppServiceRecords",
    "AppService.AppServiceActivation",
    "AppService.GetActiveServiceConsent"
};

template<>
const hmi_apis::FunctionID::eType
EnumConversionHelper<hmi_apis::FunctionID::eType>::enum_values_[] = {
    hmi_apis::FunctionID::Buttons_GetCapabilities,
    hmi_apis::FunctionID::Buttons_ButtonPress,
    hmi_apis::FunctionID::Buttons_OnButtonEvent,
    hmi_apis::FunctionID::Buttons_OnButtonPress,
    hmi_apis::FunctionID::Buttons_OnButtonSubscription,
    hmi_apis::FunctionID::BasicCommunication_GetSystemTime,
    hmi_apis::FunctionID::BasicCommunication_OnSystemTimeReady,
    hmi_apis::FunctionID::BasicCommunication_OnReady,
    hmi_apis::FunctionID::BasicCommunication_OnStartDeviceDiscovery,
    hmi_apis::FunctionID::BasicCommunication_OnUpdateDeviceList,
    hmi_apis::FunctionID::BasicCommunication_OnResumeAudioSource,
    hmi_apis::FunctionID::BasicCommunication_OnSDLPersistenceComplete,
    hmi_apis::FunctionID::BasicCommunication_UpdateAppList,
    hmi_apis::FunctionID::BasicCommunication_UpdateDeviceList,
    hmi_apis::FunctionID::BasicCommunication_OnFileRemoved,
    hmi_apis::FunctionID::BasicCommunication_OnDeviceChosen,
    hmi_apis::FunctionID::BasicCommunication_OnFindApplications,
    hmi_apis::FunctionID::BasicCommunication_ActivateApp,
    hmi_apis::FunctionID::BasicCommunication_CloseApplication,
    hmi_apis::FunctionID::BasicCommunication_OnAppActivated,
    hmi_apis::FunctionID::BasicCommunication_OnAppDeactivated,
    hmi_apis::FunctionID::BasicCommunication_OnAppRegistered,
    hmi_apis::FunctionID::BasicCommunication_OnAppUnregistered,
    hmi_apis::FunctionID::BasicCommunication_OnExitApplication,
    hmi_apis::FunctionID::BasicCommunication_OnExitAllApplications,
    hmi_apis::FunctionID::BasicCommunication_OnAwakeSDL,
    hmi_apis::FunctionID::BasicCommunication_MixingAudioSupported,
    hmi_apis::FunctionID::BasicCommunication_DialNumber,
    hmi_apis::FunctionID::BasicCommunication_OnSystemRequest,
    hmi_apis::FunctionID::BasicCommunication_SystemRequest,
    hmi_apis::FunctionID::BasicCommunication_PolicyUpdate,
    hmi_apis::FunctionID::BasicCommunication_OnSDLClose,
    hmi_apis::FunctionID::BasicCommunication_OnPutFile,
    hmi_apis::FunctionID::BasicCommunication_GetFilePath,
    hmi_apis::FunctionID::BasicCommunication_GetSystemInfo,
    hmi_apis::FunctionID::BasicCommunication_OnSystemInfoChanged,
    hmi_apis::FunctionID::BasicCommunication_OnIgnitionCycleOver,
    hmi_apis::FunctionID::BasicCommunication_DecryptCertificate,
    hmi_apis::FunctionID::BasicCommunication_OnEventChanged,
    hmi_apis::FunctionID::BasicCommunication_OnSystemCapabilityUpdated,
    hmi_apis::FunctionID::VR_IsReady,
    hmi_apis::FunctionID::VR_Started,
    hmi_apis::FunctionID::VR_Stopped,
    hmi_apis::FunctionID::VR_AddCommand,
    hmi_apis::FunctionID::VR_DeleteCommand,
    hmi_apis::FunctionID::VR_PerformInteraction,
    hmi_apis::FunctionID::VR_OnCommand,
    hmi_apis::FunctionID::VR_ChangeRegistration,
    hmi_apis::FunctionID::VR_OnLanguageChange,
    hmi_apis::FunctionID::VR_GetSupportedLanguages,
    hmi_apis::FunctionID::VR_GetLanguage,
    hmi_apis::FunctionID::VR_GetCapabilities,
    hmi_apis::FunctionID::TTS_GetCapabilities,
    hmi_apis::FunctionID::TTS_Started,
    hmi_apis::FunctionID::TTS_Stopped,
    hmi_apis::FunctionID::TTS_IsReady,
    hmi_apis::FunctionID::TTS_Speak,
    hmi_apis::FunctionID::TTS_StopSpeaking,
    hmi_apis::FunctionID::TTS_ChangeRegistration,
    hmi_apis::FunctionID::TTS_OnLanguageChange,
    hmi_apis::FunctionID::TTS_GetSupportedLanguages,
    hmi_apis::FunctionID::TTS_GetLanguage,
    hmi_apis::FunctionID::TTS_SetGlobalProperties,
    hmi_apis::FunctionID::TTS_OnResetTimeout,
    hmi_apis::FunctionID::UI_Alert,
    hmi_apis::FunctionID::UI_Show,
    hmi_apis::FunctionID::UI_AddCommand,
    hmi_apis::FunctionID::UI_DeleteCommand,
    hmi_apis::FunctionID::UI_AddSubMenu,
    hmi_apis::FunctionID::UI_DeleteSubMenu,
    hmi_apis::FunctionID::UI_PerformInteraction,
    hmi_apis::FunctionID::UI_SetMediaClockTimer,
    hmi_apis::FunctionID::UI_SetGlobalProperties,
    hmi_apis::FunctionID::UI_OnCommand,
    hmi_apis::FunctionID::UI_OnSystemContext,
    hmi_apis::FunctionID::UI_GetCapabilities,
    hmi_apis::FunctionID::UI_ChangeRegistration,
    hmi_apis::FunctionID::UI_OnLanguageChange,
    hmi_apis::FunctionID::UI_GetSupportedLanguages,
    hmi_apis::FunctionID::UI_GetLanguage,
    hmi_apis::FunctionID::UI_OnDriverDistraction,
    hmi_apis::FunctionID::UI_SetAppIcon,
    hmi_apis::FunctionID::UI_SetDisplayLayout,
    hmi_apis::FunctionID::UI_ShowCustomForm,
    hmi_apis::FunctionID::UI_OnKeyboardInput,
    hmi_apis::FunctionID::UI_OnTouchEvent,
    hmi_apis::FunctionID::UI_Slider,
    hmi_apis::FunctionID::UI_ScrollableMessage,
    hmi_apis::FunctionID::UI_PerformAudioPassThru,
    hmi_apis::FunctionID::UI_EndAudioPassThru,
    hmi_apis::FunctionID::UI_IsReady,
    hmi_apis::FunctionID::UI_ClosePopUp,
    hmi_apis::FunctionID::UI_OnResetTimeout,
    hmi_apis::FunctionID::UI_OnRecordStart,
    hmi_apis::FunctionID::UI_SendHapticData,
    hmi_apis::FunctionID::Navigation_IsReady,
    hmi_apis::FunctionID::Navigation_SendLocation,
    hmi_apis::FunctionID::Navigation_ShowConstantTBT,
    hmi_apis::FunctionID::Navigation_AlertManeuver,
    hmi_apis::FunctionID::Navigation_UpdateTurnList,
    hmi_apis::FunctionID::Navigation_OnTBTClientState,
    hmi_apis::FunctionID::Navigation_SetVideoConfig,
    hmi_apis::FunctionID::Navigation_StartStream,
    hmi_apis::FunctionID::Navigation_StopStream,
    hmi_apis::FunctionID::Navigation_StartAudioStream,
    hmi_apis::FunctionID::Navigation_StopAudioStream,
    hmi_apis::FunctionID::Navigation_OnAudioDataStreaming,
    hmi_apis::FunctionID::Navigation_OnVideoDataStreaming,
    hmi_apis::FunctionID::Navigation_GetWayPoints,
    hmi_apis::FunctionID::Navigation_OnWayPointChange,
    hmi_apis::FunctionID::Navigation_SubscribeWayPoints,
    hmi_apis::FunctionID::Navigation_UnsubscribeWayPoints,
    hmi_apis::FunctionID::VehicleInfo_IsReady,
    hmi_apis::FunctionID::VehicleInfo_GetVehicleType,
    hmi_apis::FunctionID::VehicleInfo_ReadDID,
    hmi_apis::FunctionID::VehicleInfo_GetDTCs,
    hmi_apis::FunctionID::VehicleInfo_DiagnosticMessage,
    hmi_apis::FunctionID::VehicleInfo_SubscribeVehicleData,
    hmi_apis::FunctionID::VehicleInfo_UnsubscribeVehicleData,
    hmi_apis::FunctionID::VehicleInfo_GetVehicleData,
    hmi_apis::FunctionID::VehicleInfo_OnVehicleData,
    hmi_apis::FunctionID::SDL_ActivateApp,
    hmi_apis::FunctionID::SDL_GetUserFriendlyMessage,
    hmi_apis::FunctionID::SDL_OnAllowSDLFunctionality,
    hmi_apis::FunctionID::SDL_OnReceivedPolicyUpdate,
    hmi_apis::FunctionID::SDL_OnPolicyUpdate,
    hmi_apis::FunctionID::SDL_GetListOfPermissions,
    hmi_apis::FunctionID::SDL_OnAppPermissionConsent,
    hmi_apis::FunctionID::SDL_OnAppPermissionChanged,
    hmi_apis::FunctionID::SDL_OnSDLConsentNeeded,
    hmi_apis::FunctionID::SDL_UpdateSDL,
    hmi_apis::FunctionID::SDL_GetStatusUpdate,
    hmi_apis::FunctionID::SDL_OnStatusUpdate,
    hmi_apis::FunctionID::SDL_OnSystemError,
    hmi_apis::FunctionID::SDL_AddStatisticsInfo,
    hmi_apis::FunctionID::SDL_GetURLS,
    hmi_apis::FunctionID::SDL_OnDeviceStateChanged,
    hmi_apis::FunctionID::RC_IsReady,
    hmi_apis::FunctionID::RC_GetCapabilities,
    hmi_apis::FunctionID::RC_SetInteriorVehicleData,
    hmi_apis::FunctionID::RC_GetInteriorVehicleData,
    hmi_apis::FunctionID::RC_GetInteriorVehicleDataConsent,
    hmi_apis::FunctionID::RC_OnInteriorVehicleData,
    hmi_apis::FunctionID::RC_OnRemoteControlSettings,
    hmi_apis::FunctionID::RC_OnRCStatus,
    hmi_apis::FunctionID::AppService_PublishAppService,
    hmi_apis::FunctionID::AppService_OnAppServiceData,
    hmi_apis::FunctionID::AppService_GetAppServiceData,
    hmi_apis::FunctionID::AppService_PerformAppServiceInteraction,
    hmi_apis::FunctionID::AppService_GetAppServiceRecords,
    hmi_apis::FunctionID::AppService_AppServiceActivation,
    hmi_apis::FunctionID::AppService_GetActiveServiceConsent
};


template<>
const EnumConversionHelper<hmi_apis::messageType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::messageType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::messageType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::messageType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::messageType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::messageType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::messageType::eType>::cstring_values_[] = {
    "request",
    "response",
    "notification",
    "error_response"
};

template<>
const hmi_apis::messageType::eType
EnumConversionHelper<hmi_apis::messageType::eType>::enum_values_[] = {
    hmi_apis::messageType::request,
    hmi_apis::messageType::response,
    hmi_apis::messageType::notification,
    hmi_apis::messageType::error_response
};


template<>
const EnumConversionHelper<hmi_apis::Common_Result::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_Result::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_Result::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_Result::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_Result::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_Result::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_Result::eType>::cstring_values_[] = {
    "SUCCESS",
    "UNSUPPORTED_REQUEST",
    "UNSUPPORTED_RESOURCE",
    "DISALLOWED",
    "REJECTED",
    "ABORTED",
    "IGNORED",
    "RETRY",
    "IN_USE",
    "DATA_NOT_AVAILABLE",
    "TIMED_OUT",
    "INVALID_DATA",
    "CHAR_LIMIT_EXCEEDED",
    "INVALID_ID",
    "DUPLICATE_NAME",
    "APPLICATION_NOT_REGISTERED",
    "WRONG_LANGUAGE",
    "OUT_OF_MEMORY",
    "TOO_MANY_PENDING_REQUESTS",
    "NO_APPS_REGISTERED",
    "NO_DEVICES_CONNECTED",
    "WARNINGS",
    "GENERIC_ERROR",
    "USER_DISALLOWED",
    "TRUNCATED_DATA",
    "SAVED",
    "READ_ONLY"
};

template<>
const hmi_apis::Common_Result::eType
EnumConversionHelper<hmi_apis::Common_Result::eType>::enum_values_[] = {
    hmi_apis::Common_Result::SUCCESS,
    hmi_apis::Common_Result::UNSUPPORTED_REQUEST,
    hmi_apis::Common_Result::UNSUPPORTED_RESOURCE,
    hmi_apis::Common_Result::DISALLOWED,
    hmi_apis::Common_Result::REJECTED,
    hmi_apis::Common_Result::ABORTED,
    hmi_apis::Common_Result::IGNORED,
    hmi_apis::Common_Result::RETRY,
    hmi_apis::Common_Result::IN_USE,
    hmi_apis::Common_Result::DATA_NOT_AVAILABLE,
    hmi_apis::Common_Result::TIMED_OUT,
    hmi_apis::Common_Result::INVALID_DATA,
    hmi_apis::Common_Result::CHAR_LIMIT_EXCEEDED,
    hmi_apis::Common_Result::INVALID_ID,
    hmi_apis::Common_Result::DUPLICATE_NAME,
    hmi_apis::Common_Result::APPLICATION_NOT_REGISTERED,
    hmi_apis::Common_Result::WRONG_LANGUAGE,
    hmi_apis::Common_Result::OUT_OF_MEMORY,
    hmi_apis::Common_Result::TOO_MANY_PENDING_REQUESTS,
    hmi_apis::Common_Result::NO_APPS_REGISTERED,
    hmi_apis::Common_Result::NO_DEVICES_CONNECTED,
    hmi_apis::Common_Result::WARNINGS,
    hmi_apis::Common_Result::GENERIC_ERROR,
    hmi_apis::Common_Result::USER_DISALLOWED,
    hmi_apis::Common_Result::TRUNCATED_DATA,
    hmi_apis::Common_Result::SAVED,
    hmi_apis::Common_Result::READ_ONLY
};


template<>
const EnumConversionHelper<hmi_apis::Common_TransportType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_TransportType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_TransportType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_TransportType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_TransportType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_TransportType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_TransportType::eType>::cstring_values_[] = {
    "BLUETOOTH",
    "USB_IOS",
    "USB_AOA",
    "WIFI",
    "CLOUD_WEBSOCKET"
};

template<>
const hmi_apis::Common_TransportType::eType
EnumConversionHelper<hmi_apis::Common_TransportType::eType>::enum_values_[] = {
    hmi_apis::Common_TransportType::BLUETOOTH,
    hmi_apis::Common_TransportType::USB_IOS,
    hmi_apis::Common_TransportType::USB_AOA,
    hmi_apis::Common_TransportType::WIFI,
    hmi_apis::Common_TransportType::CLOUD_WEBSOCKET
};


template<>
const EnumConversionHelper<hmi_apis::Common_ButtonName::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_ButtonName::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_ButtonName::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_ButtonName::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_ButtonName::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_ButtonName::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_ButtonName::eType>::cstring_values_[] = {
    "OK",
    "PLAY_PAUSE",
    "SEEKLEFT",
    "SEEKRIGHT",
    "TUNEUP",
    "TUNEDOWN",
    "PRESET_0",
    "PRESET_1",
    "PRESET_2",
    "PRESET_3",
    "PRESET_4",
    "PRESET_5",
    "PRESET_6",
    "PRESET_7",
    "PRESET_8",
    "PRESET_9",
    "CUSTOM_BUTTON",
    "SEARCH",
    "AC_MAX",
    "AC",
    "RECIRCULATE",
    "FAN_UP",
    "FAN_DOWN",
    "TEMP_UP",
    "TEMP_DOWN",
    "DEFROST_MAX",
    "DEFROST",
    "DEFROST_REAR",
    "UPPER_VENT",
    "LOWER_VENT",
    "VOLUME_UP",
    "VOLUME_DOWN",
    "EJECT",
    "SOURCE",
    "SHUFFLE",
    "REPEAT"
};

template<>
const hmi_apis::Common_ButtonName::eType
EnumConversionHelper<hmi_apis::Common_ButtonName::eType>::enum_values_[] = {
    hmi_apis::Common_ButtonName::OK,
    hmi_apis::Common_ButtonName::PLAY_PAUSE,
    hmi_apis::Common_ButtonName::SEEKLEFT,
    hmi_apis::Common_ButtonName::SEEKRIGHT,
    hmi_apis::Common_ButtonName::TUNEUP,
    hmi_apis::Common_ButtonName::TUNEDOWN,
    hmi_apis::Common_ButtonName::PRESET_0,
    hmi_apis::Common_ButtonName::PRESET_1,
    hmi_apis::Common_ButtonName::PRESET_2,
    hmi_apis::Common_ButtonName::PRESET_3,
    hmi_apis::Common_ButtonName::PRESET_4,
    hmi_apis::Common_ButtonName::PRESET_5,
    hmi_apis::Common_ButtonName::PRESET_6,
    hmi_apis::Common_ButtonName::PRESET_7,
    hmi_apis::Common_ButtonName::PRESET_8,
    hmi_apis::Common_ButtonName::PRESET_9,
    hmi_apis::Common_ButtonName::CUSTOM_BUTTON,
    hmi_apis::Common_ButtonName::SEARCH,
    hmi_apis::Common_ButtonName::AC_MAX,
    hmi_apis::Common_ButtonName::AC,
    hmi_apis::Common_ButtonName::RECIRCULATE,
    hmi_apis::Common_ButtonName::FAN_UP,
    hmi_apis::Common_ButtonName::FAN_DOWN,
    hmi_apis::Common_ButtonName::TEMP_UP,
    hmi_apis::Common_ButtonName::TEMP_DOWN,
    hmi_apis::Common_ButtonName::DEFROST_MAX,
    hmi_apis::Common_ButtonName::DEFROST,
    hmi_apis::Common_ButtonName::DEFROST_REAR,
    hmi_apis::Common_ButtonName::UPPER_VENT,
    hmi_apis::Common_ButtonName::LOWER_VENT,
    hmi_apis::Common_ButtonName::VOLUME_UP,
    hmi_apis::Common_ButtonName::VOLUME_DOWN,
    hmi_apis::Common_ButtonName::EJECT,
    hmi_apis::Common_ButtonName::SOURCE,
    hmi_apis::Common_ButtonName::SHUFFLE,
    hmi_apis::Common_ButtonName::REPEAT
};


template<>
const EnumConversionHelper<hmi_apis::Common_ButtonEventMode::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_ButtonEventMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_ButtonEventMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_ButtonEventMode::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_ButtonEventMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_ButtonEventMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_ButtonEventMode::eType>::cstring_values_[] = {
    "BUTTONUP",
    "BUTTONDOWN"
};

template<>
const hmi_apis::Common_ButtonEventMode::eType
EnumConversionHelper<hmi_apis::Common_ButtonEventMode::eType>::enum_values_[] = {
    hmi_apis::Common_ButtonEventMode::BUTTONUP,
    hmi_apis::Common_ButtonEventMode::BUTTONDOWN
};


template<>
const EnumConversionHelper<hmi_apis::Common_ButtonPressMode::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_ButtonPressMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_ButtonPressMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_ButtonPressMode::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_ButtonPressMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_ButtonPressMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_ButtonPressMode::eType>::cstring_values_[] = {
    "LONG",
    "SHORT"
};

template<>
const hmi_apis::Common_ButtonPressMode::eType
EnumConversionHelper<hmi_apis::Common_ButtonPressMode::eType>::enum_values_[] = {
    hmi_apis::Common_ButtonPressMode::LONG,
    hmi_apis::Common_ButtonPressMode::SHORT
};


template<>
const EnumConversionHelper<hmi_apis::Common_Language::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_Language::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_Language::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_Language::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_Language::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_Language::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_Language::eType>::cstring_values_[] = {
    "EN-US",
    "ES-MX",
    "FR-CA",
    "DE-DE",
    "ES-ES",
    "EN-GB",
    "RU-RU",
    "TR-TR",
    "PL-PL",
    "FR-FR",
    "IT-IT",
    "SV-SE",
    "PT-PT",
    "NL-NL",
    "EN-AU",
    "ZH-CN",
    "ZH-TW",
    "JA-JP",
    "AR-SA",
    "KO-KR",
    "PT-BR",
    "CS-CZ",
    "DA-DK",
    "NO-NO",
    "NL-BE",
    "EL-GR",
    "HU-HU",
    "FI-FI",
    "SK-SK",
    "EN-IN",
    "TH-TH",
    "EN-SA",
    "HE-IL",
    "RO-RO",
    "UK-UA",
    "ID-ID",
    "VI-VN",
    "MS-MY",
    "HI-IN"
};

template<>
const hmi_apis::Common_Language::eType
EnumConversionHelper<hmi_apis::Common_Language::eType>::enum_values_[] = {
    hmi_apis::Common_Language::EN_US,
    hmi_apis::Common_Language::ES_MX,
    hmi_apis::Common_Language::FR_CA,
    hmi_apis::Common_Language::DE_DE,
    hmi_apis::Common_Language::ES_ES,
    hmi_apis::Common_Language::EN_GB,
    hmi_apis::Common_Language::RU_RU,
    hmi_apis::Common_Language::TR_TR,
    hmi_apis::Common_Language::PL_PL,
    hmi_apis::Common_Language::FR_FR,
    hmi_apis::Common_Language::IT_IT,
    hmi_apis::Common_Language::SV_SE,
    hmi_apis::Common_Language::PT_PT,
    hmi_apis::Common_Language::NL_NL,
    hmi_apis::Common_Language::EN_AU,
    hmi_apis::Common_Language::ZH_CN,
    hmi_apis::Common_Language::ZH_TW,
    hmi_apis::Common_Language::JA_JP,
    hmi_apis::Common_Language::AR_SA,
    hmi_apis::Common_Language::KO_KR,
    hmi_apis::Common_Language::PT_BR,
    hmi_apis::Common_Language::CS_CZ,
    hmi_apis::Common_Language::DA_DK,
    hmi_apis::Common_Language::NO_NO,
    hmi_apis::Common_Language::NL_BE,
    hmi_apis::Common_Language::EL_GR,
    hmi_apis::Common_Language::HU_HU,
    hmi_apis::Common_Language::FI_FI,
    hmi_apis::Common_Language::SK_SK,
    hmi_apis::Common_Language::EN_IN,
    hmi_apis::Common_Language::TH_TH,
    hmi_apis::Common_Language::EN_SA,
    hmi_apis::Common_Language::HE_IL,
    hmi_apis::Common_Language::RO_RO,
    hmi_apis::Common_Language::UK_UA,
    hmi_apis::Common_Language::ID_ID,
    hmi_apis::Common_Language::VI_VN,
    hmi_apis::Common_Language::MS_MY,
    hmi_apis::Common_Language::HI_IN
};


template<>
const EnumConversionHelper<hmi_apis::Common_SoftButtonType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_SoftButtonType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_SoftButtonType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_SoftButtonType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_SoftButtonType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_SoftButtonType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_SoftButtonType::eType>::cstring_values_[] = {
    "TEXT",
    "IMAGE",
    "BOTH"
};

template<>
const hmi_apis::Common_SoftButtonType::eType
EnumConversionHelper<hmi_apis::Common_SoftButtonType::eType>::enum_values_[] = {
    hmi_apis::Common_SoftButtonType::SBT_TEXT,
    hmi_apis::Common_SoftButtonType::SBT_IMAGE,
    hmi_apis::Common_SoftButtonType::SBT_BOTH
};


template<>
const EnumConversionHelper<hmi_apis::Common_SystemAction::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_SystemAction::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_SystemAction::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_SystemAction::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_SystemAction::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_SystemAction::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_SystemAction::eType>::cstring_values_[] = {
    "DEFAULT_ACTION",
    "STEAL_FOCUS",
    "KEEP_CONTEXT"
};

template<>
const hmi_apis::Common_SystemAction::eType
EnumConversionHelper<hmi_apis::Common_SystemAction::eType>::enum_values_[] = {
    hmi_apis::Common_SystemAction::DEFAULT_ACTION,
    hmi_apis::Common_SystemAction::STEAL_FOCUS,
    hmi_apis::Common_SystemAction::KEEP_CONTEXT
};


template<>
const EnumConversionHelper<hmi_apis::Common_AppHMIType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_AppHMIType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_AppHMIType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_AppHMIType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_AppHMIType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_AppHMIType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_AppHMIType::eType>::cstring_values_[] = {
    "DEFAULT",
    "COMMUNICATION",
    "MEDIA",
    "MESSAGING",
    "NAVIGATION",
    "INFORMATION",
    "SOCIAL",
    "BACKGROUND_PROCESS",
    "TESTING",
    "SYSTEM",
    "PROJECTION",
    "REMOTE_CONTROL"
};

template<>
const hmi_apis::Common_AppHMIType::eType
EnumConversionHelper<hmi_apis::Common_AppHMIType::eType>::enum_values_[] = {
    hmi_apis::Common_AppHMIType::DEFAULT,
    hmi_apis::Common_AppHMIType::COMMUNICATION,
    hmi_apis::Common_AppHMIType::MEDIA,
    hmi_apis::Common_AppHMIType::MESSAGING,
    hmi_apis::Common_AppHMIType::NAVIGATION,
    hmi_apis::Common_AppHMIType::INFORMATION,
    hmi_apis::Common_AppHMIType::SOCIAL,
    hmi_apis::Common_AppHMIType::BACKGROUND_PROCESS,
    hmi_apis::Common_AppHMIType::TESTING,
    hmi_apis::Common_AppHMIType::SYSTEM,
    hmi_apis::Common_AppHMIType::PROJECTION,
    hmi_apis::Common_AppHMIType::REMOTE_CONTROL
};


template<>
const EnumConversionHelper<hmi_apis::Common_CloudConnectionStatus::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_CloudConnectionStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_CloudConnectionStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_CloudConnectionStatus::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_CloudConnectionStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_CloudConnectionStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_CloudConnectionStatus::eType>::cstring_values_[] = {
    "NOT_CONNECTED",
    "CONNECTED",
    "RETRY"
};

template<>
const hmi_apis::Common_CloudConnectionStatus::eType
EnumConversionHelper<hmi_apis::Common_CloudConnectionStatus::eType>::enum_values_[] = {
    hmi_apis::Common_CloudConnectionStatus::NOT_CONNECTED,
    hmi_apis::Common_CloudConnectionStatus::CONNECTED,
    hmi_apis::Common_CloudConnectionStatus::RETRY
};


template<>
const EnumConversionHelper<hmi_apis::Common_WayPointType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_WayPointType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_WayPointType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_WayPointType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_WayPointType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_WayPointType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_WayPointType::eType>::cstring_values_[] = {
    "ALL",
    "DESTINATION"
};

template<>
const hmi_apis::Common_WayPointType::eType
EnumConversionHelper<hmi_apis::Common_WayPointType::eType>::enum_values_[] = {
    hmi_apis::Common_WayPointType::ALL,
    hmi_apis::Common_WayPointType::DESTINATION
};


template<>
const EnumConversionHelper<hmi_apis::Common_LayoutMode::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_LayoutMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_LayoutMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_LayoutMode::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_LayoutMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_LayoutMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_LayoutMode::eType>::cstring_values_[] = {
    "ICON_ONLY",
    "ICON_WITH_SEARCH",
    "LIST_ONLY",
    "LIST_WITH_SEARCH",
    "KEYBOARD"
};

template<>
const hmi_apis::Common_LayoutMode::eType
EnumConversionHelper<hmi_apis::Common_LayoutMode::eType>::enum_values_[] = {
    hmi_apis::Common_LayoutMode::ICON_ONLY,
    hmi_apis::Common_LayoutMode::ICON_WITH_SEARCH,
    hmi_apis::Common_LayoutMode::LIST_ONLY,
    hmi_apis::Common_LayoutMode::LIST_WITH_SEARCH,
    hmi_apis::Common_LayoutMode::KEYBOARD
};


template<>
const EnumConversionHelper<hmi_apis::Common_ClockUpdateMode::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_ClockUpdateMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_ClockUpdateMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_ClockUpdateMode::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_ClockUpdateMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_ClockUpdateMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_ClockUpdateMode::eType>::cstring_values_[] = {
    "COUNTUP",
    "COUNTDOWN",
    "PAUSE",
    "RESUME",
    "CLEAR"
};

template<>
const hmi_apis::Common_ClockUpdateMode::eType
EnumConversionHelper<hmi_apis::Common_ClockUpdateMode::eType>::enum_values_[] = {
    hmi_apis::Common_ClockUpdateMode::COUNTUP,
    hmi_apis::Common_ClockUpdateMode::COUNTDOWN,
    hmi_apis::Common_ClockUpdateMode::PAUSE,
    hmi_apis::Common_ClockUpdateMode::RESUME,
    hmi_apis::Common_ClockUpdateMode::CLEAR
};


template<>
const EnumConversionHelper<hmi_apis::Common_AudioStreamingIndicator::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_AudioStreamingIndicator::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_AudioStreamingIndicator::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_AudioStreamingIndicator::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_AudioStreamingIndicator::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_AudioStreamingIndicator::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_AudioStreamingIndicator::eType>::cstring_values_[] = {
    "PLAY_PAUSE",
    "PLAY",
    "PAUSE",
    "STOP"
};

template<>
const hmi_apis::Common_AudioStreamingIndicator::eType
EnumConversionHelper<hmi_apis::Common_AudioStreamingIndicator::eType>::enum_values_[] = {
    hmi_apis::Common_AudioStreamingIndicator::PLAY_PAUSE,
    hmi_apis::Common_AudioStreamingIndicator::PLAY,
    hmi_apis::Common_AudioStreamingIndicator::PAUSE,
    hmi_apis::Common_AudioStreamingIndicator::STOP
};


template<>
const EnumConversionHelper<hmi_apis::Common_SystemContext::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_SystemContext::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_SystemContext::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_SystemContext::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_SystemContext::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_SystemContext::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_SystemContext::eType>::cstring_values_[] = {
    "MAIN",
    "VRSESSION",
    "MENU",
    "HMI_OBSCURED",
    "ALERT"
};

template<>
const hmi_apis::Common_SystemContext::eType
EnumConversionHelper<hmi_apis::Common_SystemContext::eType>::enum_values_[] = {
    hmi_apis::Common_SystemContext::SYSCTXT_MAIN,
    hmi_apis::Common_SystemContext::SYSCTXT_VRSESSION,
    hmi_apis::Common_SystemContext::SYSCTXT_MENU,
    hmi_apis::Common_SystemContext::SYSCTXT_HMI_OBSCURED,
    hmi_apis::Common_SystemContext::SYSCTXT_ALERT
};


template<>
const EnumConversionHelper<hmi_apis::Common_HmiZoneCapabilities::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_HmiZoneCapabilities::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_HmiZoneCapabilities::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_HmiZoneCapabilities::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_HmiZoneCapabilities::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_HmiZoneCapabilities::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_HmiZoneCapabilities::eType>::cstring_values_[] = {
    "FRONT",
    "BACK"
};

template<>
const hmi_apis::Common_HmiZoneCapabilities::eType
EnumConversionHelper<hmi_apis::Common_HmiZoneCapabilities::eType>::enum_values_[] = {
    hmi_apis::Common_HmiZoneCapabilities::FRONT,
    hmi_apis::Common_HmiZoneCapabilities::BACK
};


template<>
const EnumConversionHelper<hmi_apis::Common_SpeechCapabilities::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_SpeechCapabilities::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_SpeechCapabilities::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_SpeechCapabilities::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_SpeechCapabilities::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_SpeechCapabilities::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_SpeechCapabilities::eType>::cstring_values_[] = {
    "TEXT",
    "SAPI_PHONEMES",
    "LHPLUS_PHONEMES",
    "PRE_RECORDED",
    "SILENCE",
    "FILE"
};

template<>
const hmi_apis::Common_SpeechCapabilities::eType
EnumConversionHelper<hmi_apis::Common_SpeechCapabilities::eType>::enum_values_[] = {
    hmi_apis::Common_SpeechCapabilities::SC_TEXT,
    hmi_apis::Common_SpeechCapabilities::SAPI_PHONEMES,
    hmi_apis::Common_SpeechCapabilities::LHPLUS_PHONEMES,
    hmi_apis::Common_SpeechCapabilities::PRE_RECORDED,
    hmi_apis::Common_SpeechCapabilities::SILENCE,
    hmi_apis::Common_SpeechCapabilities::FILE
};


template<>
const EnumConversionHelper<hmi_apis::Common_VrCapabilities::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_VrCapabilities::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_VrCapabilities::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_VrCapabilities::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_VrCapabilities::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_VrCapabilities::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_VrCapabilities::eType>::cstring_values_[] = {
    "TEXT"
};

template<>
const hmi_apis::Common_VrCapabilities::eType
EnumConversionHelper<hmi_apis::Common_VrCapabilities::eType>::enum_values_[] = {
    hmi_apis::Common_VrCapabilities::VR_TEXT
};


template<>
const EnumConversionHelper<hmi_apis::Common_PrerecordedSpeech::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_PrerecordedSpeech::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_PrerecordedSpeech::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_PrerecordedSpeech::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_PrerecordedSpeech::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_PrerecordedSpeech::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_PrerecordedSpeech::eType>::cstring_values_[] = {
    "HELP_JINGLE",
    "INITIAL_JINGLE",
    "LISTEN_JINGLE",
    "POSITIVE_JINGLE",
    "NEGATIVE_JINGLE"
};

template<>
const hmi_apis::Common_PrerecordedSpeech::eType
EnumConversionHelper<hmi_apis::Common_PrerecordedSpeech::eType>::enum_values_[] = {
    hmi_apis::Common_PrerecordedSpeech::HELP_JINGLE,
    hmi_apis::Common_PrerecordedSpeech::INITIAL_JINGLE,
    hmi_apis::Common_PrerecordedSpeech::LISTEN_JINGLE,
    hmi_apis::Common_PrerecordedSpeech::POSITIVE_JINGLE,
    hmi_apis::Common_PrerecordedSpeech::NEGATIVE_JINGLE
};


template<>
const EnumConversionHelper<hmi_apis::Common_TBTState::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_TBTState::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_TBTState::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_TBTState::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_TBTState::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_TBTState::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_TBTState::eType>::cstring_values_[] = {
    "ROUTE_UPDATE_REQUEST",
    "ROUTE_ACCEPTED",
    "ROUTE_REFUSED",
    "ROUTE_CANCELLED",
    "ETA_REQUEST",
    "NEXT_TURN_REQUEST",
    "ROUTE_STATUS_REQUEST",
    "ROUTE_SUMMARY_REQUEST",
    "TRIP_STATUS_REQUEST",
    "ROUTE_UPDATE_REQUEST_TIMEOUT"
};

template<>
const hmi_apis::Common_TBTState::eType
EnumConversionHelper<hmi_apis::Common_TBTState::eType>::enum_values_[] = {
    hmi_apis::Common_TBTState::ROUTE_UPDATE_REQUEST,
    hmi_apis::Common_TBTState::ROUTE_ACCEPTED,
    hmi_apis::Common_TBTState::ROUTE_REFUSED,
    hmi_apis::Common_TBTState::ROUTE_CANCELLED,
    hmi_apis::Common_TBTState::ETA_REQUEST,
    hmi_apis::Common_TBTState::NEXT_TURN_REQUEST,
    hmi_apis::Common_TBTState::ROUTE_STATUS_REQUEST,
    hmi_apis::Common_TBTState::ROUTE_SUMMARY_REQUEST,
    hmi_apis::Common_TBTState::TRIP_STATUS_REQUEST,
    hmi_apis::Common_TBTState::ROUTE_UPDATE_REQUEST_TIMEOUT
};


template<>
const EnumConversionHelper<hmi_apis::Common_ApplicationsCloseReason::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_ApplicationsCloseReason::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_ApplicationsCloseReason::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_ApplicationsCloseReason::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_ApplicationsCloseReason::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_ApplicationsCloseReason::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_ApplicationsCloseReason::eType>::cstring_values_[] = {
    "IGNITION_OFF",
    "MASTER_RESET",
    "FACTORY_DEFAULTS",
    "SUSPEND"
};

template<>
const hmi_apis::Common_ApplicationsCloseReason::eType
EnumConversionHelper<hmi_apis::Common_ApplicationsCloseReason::eType>::enum_values_[] = {
    hmi_apis::Common_ApplicationsCloseReason::IGNITION_OFF,
    hmi_apis::Common_ApplicationsCloseReason::MASTER_RESET,
    hmi_apis::Common_ApplicationsCloseReason::FACTORY_DEFAULTS,
    hmi_apis::Common_ApplicationsCloseReason::SUSPEND
};


template<>
const EnumConversionHelper<hmi_apis::Common_DisplayType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_DisplayType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_DisplayType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_DisplayType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_DisplayType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_DisplayType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_DisplayType::eType>::cstring_values_[] = {
    "CID",
    "TYPE2",
    "TYPE5",
    "NGN",
    "GEN2_8_DMA",
    "GEN2_6_DMA",
    "MFD3",
    "MFD4",
    "MFD5",
    "GEN3_8_INCH",
    "SDL_GENERIC"
};

template<>
const hmi_apis::Common_DisplayType::eType
EnumConversionHelper<hmi_apis::Common_DisplayType::eType>::enum_values_[] = {
    hmi_apis::Common_DisplayType::CID,
    hmi_apis::Common_DisplayType::TYPE2,
    hmi_apis::Common_DisplayType::TYPE5,
    hmi_apis::Common_DisplayType::NGN,
    hmi_apis::Common_DisplayType::GEN2_8_DMA,
    hmi_apis::Common_DisplayType::GEN2_6_DMA,
    hmi_apis::Common_DisplayType::MFD3,
    hmi_apis::Common_DisplayType::MFD4,
    hmi_apis::Common_DisplayType::MFD5,
    hmi_apis::Common_DisplayType::GEN3_8_INCH,
    hmi_apis::Common_DisplayType::SDL_GENERIC
};


template<>
const EnumConversionHelper<hmi_apis::Common_ImageType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_ImageType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_ImageType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_ImageType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_ImageType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_ImageType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_ImageType::eType>::cstring_values_[] = {
    "STATIC",
    "DYNAMIC"
};

template<>
const hmi_apis::Common_ImageType::eType
EnumConversionHelper<hmi_apis::Common_ImageType::eType>::enum_values_[] = {
    hmi_apis::Common_ImageType::STATIC,
    hmi_apis::Common_ImageType::DYNAMIC
};


template<>
const EnumConversionHelper<hmi_apis::Common_ApplicationExitReason::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_ApplicationExitReason::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_ApplicationExitReason::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_ApplicationExitReason::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_ApplicationExitReason::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_ApplicationExitReason::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_ApplicationExitReason::eType>::cstring_values_[] = {
    "DRIVER_DISTRACTION_VIOLATION",
    "USER_EXIT",
    "UNAUTHORIZED_TRANSPORT_REGISTRATION",
    "UNSUPPORTED_HMI_RESOURCE",
    "CLOSE_CLOUD_CONNECTION"
};

template<>
const hmi_apis::Common_ApplicationExitReason::eType
EnumConversionHelper<hmi_apis::Common_ApplicationExitReason::eType>::enum_values_[] = {
    hmi_apis::Common_ApplicationExitReason::DRIVER_DISTRACTION_VIOLATION,
    hmi_apis::Common_ApplicationExitReason::USER_EXIT,
    hmi_apis::Common_ApplicationExitReason::UNAUTHORIZED_TRANSPORT_REGISTRATION,
    hmi_apis::Common_ApplicationExitReason::UNSUPPORTED_HMI_RESOURCE,
    hmi_apis::Common_ApplicationExitReason::CLOSE_CLOUD_CONNECTION
};


template<>
const EnumConversionHelper<hmi_apis::Common_TextFieldName::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_TextFieldName::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_TextFieldName::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_TextFieldName::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_TextFieldName::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_TextFieldName::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_TextFieldName::eType>::cstring_values_[] = {
    "mainField1",
    "mainField2",
    "mainField3",
    "mainField4",
    "statusBar",
    "mediaClock",
    "mediaTrack",
    "alertText1",
    "alertText2",
    "alertText3",
    "scrollableMessageBody",
    "initialInteractionText",
    "navigationText1",
    "navigationText2",
    "ETA",
    "totalDistance",
    "audioPassThruDisplayText1",
    "audioPassThruDisplayText2",
    "sliderHeader",
    "sliderFooter",
    "menuName",
    "secondaryText",
    "tertiaryText",
    "menuTitle",
    "navigationText",
    "notificationText",
    "locationName",
    "locationDescription",
    "addressLines",
    "phoneNumber",
    "timeToDestination",
    "turnText"
};

template<>
const hmi_apis::Common_TextFieldName::eType
EnumConversionHelper<hmi_apis::Common_TextFieldName::eType>::enum_values_[] = {
    hmi_apis::Common_TextFieldName::mainField1,
    hmi_apis::Common_TextFieldName::mainField2,
    hmi_apis::Common_TextFieldName::mainField3,
    hmi_apis::Common_TextFieldName::mainField4,
    hmi_apis::Common_TextFieldName::statusBar,
    hmi_apis::Common_TextFieldName::mediaClock,
    hmi_apis::Common_TextFieldName::mediaTrack,
    hmi_apis::Common_TextFieldName::alertText1,
    hmi_apis::Common_TextFieldName::alertText2,
    hmi_apis::Common_TextFieldName::alertText3,
    hmi_apis::Common_TextFieldName::scrollableMessageBody,
    hmi_apis::Common_TextFieldName::initialInteractionText,
    hmi_apis::Common_TextFieldName::navigationText1,
    hmi_apis::Common_TextFieldName::navigationText2,
    hmi_apis::Common_TextFieldName::ETA,
    hmi_apis::Common_TextFieldName::totalDistance,
    hmi_apis::Common_TextFieldName::audioPassThruDisplayText1,
    hmi_apis::Common_TextFieldName::audioPassThruDisplayText2,
    hmi_apis::Common_TextFieldName::sliderHeader,
    hmi_apis::Common_TextFieldName::sliderFooter,
    hmi_apis::Common_TextFieldName::menuName,
    hmi_apis::Common_TextFieldName::secondaryText,
    hmi_apis::Common_TextFieldName::tertiaryText,
    hmi_apis::Common_TextFieldName::menuTitle,
    hmi_apis::Common_TextFieldName::navigationText,
    hmi_apis::Common_TextFieldName::notificationText,
    hmi_apis::Common_TextFieldName::locationName,
    hmi_apis::Common_TextFieldName::locationDescription,
    hmi_apis::Common_TextFieldName::addressLines,
    hmi_apis::Common_TextFieldName::phoneNumber,
    hmi_apis::Common_TextFieldName::timeToDestination,
    hmi_apis::Common_TextFieldName::turnText
};


template<>
const EnumConversionHelper<hmi_apis::Common_MetadataType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_MetadataType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_MetadataType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_MetadataType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_MetadataType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_MetadataType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_MetadataType::eType>::cstring_values_[] = {
    "mediaTitle",
    "mediaArtist",
    "mediaAlbum",
    "mediaYear",
    "mediaGenre",
    "mediaStation",
    "rating",
    "currentTemperature",
    "maximumTemperature",
    "minimumTemperature",
    "weatherTerm",
    "humidity"
};

template<>
const hmi_apis::Common_MetadataType::eType
EnumConversionHelper<hmi_apis::Common_MetadataType::eType>::enum_values_[] = {
    hmi_apis::Common_MetadataType::mediaTitle,
    hmi_apis::Common_MetadataType::mediaArtist,
    hmi_apis::Common_MetadataType::mediaAlbum,
    hmi_apis::Common_MetadataType::mediaYear,
    hmi_apis::Common_MetadataType::mediaGenre,
    hmi_apis::Common_MetadataType::mediaStation,
    hmi_apis::Common_MetadataType::rating,
    hmi_apis::Common_MetadataType::currentTemperature,
    hmi_apis::Common_MetadataType::maximumTemperature,
    hmi_apis::Common_MetadataType::minimumTemperature,
    hmi_apis::Common_MetadataType::weatherTerm,
    hmi_apis::Common_MetadataType::humidity
};


template<>
const EnumConversionHelper<hmi_apis::Common_ImageFieldName::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_ImageFieldName::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_ImageFieldName::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_ImageFieldName::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_ImageFieldName::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_ImageFieldName::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_ImageFieldName::eType>::cstring_values_[] = {
    "softButtonImage",
    "choiceImage",
    "choiceSecondaryImage",
    "vrHelpItem",
    "turnIcon",
    "menuIcon",
    "cmdIcon",
    "appIcon",
    "graphic",
    "secondaryGraphic",
    "showConstantTBTIcon",
    "showConstantTBTNextTurnIcon",
    "locationImage"
};

template<>
const hmi_apis::Common_ImageFieldName::eType
EnumConversionHelper<hmi_apis::Common_ImageFieldName::eType>::enum_values_[] = {
    hmi_apis::Common_ImageFieldName::softButtonImage,
    hmi_apis::Common_ImageFieldName::choiceImage,
    hmi_apis::Common_ImageFieldName::choiceSecondaryImage,
    hmi_apis::Common_ImageFieldName::vrHelpItem,
    hmi_apis::Common_ImageFieldName::turnIcon,
    hmi_apis::Common_ImageFieldName::menuIcon,
    hmi_apis::Common_ImageFieldName::cmdIcon,
    hmi_apis::Common_ImageFieldName::appIcon,
    hmi_apis::Common_ImageFieldName::graphic,
    hmi_apis::Common_ImageFieldName::secondaryGraphic,
    hmi_apis::Common_ImageFieldName::showConstantTBTIcon,
    hmi_apis::Common_ImageFieldName::showConstantTBTNextTurnIcon,
    hmi_apis::Common_ImageFieldName::locationImage
};


template<>
const EnumConversionHelper<hmi_apis::Common_TextAlignment::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_TextAlignment::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_TextAlignment::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_TextAlignment::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_TextAlignment::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_TextAlignment::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_TextAlignment::eType>::cstring_values_[] = {
    "LEFT_ALIGNED",
    "RIGHT_ALIGNED",
    "CENTERED"
};

template<>
const hmi_apis::Common_TextAlignment::eType
EnumConversionHelper<hmi_apis::Common_TextAlignment::eType>::enum_values_[] = {
    hmi_apis::Common_TextAlignment::LEFT_ALIGNED,
    hmi_apis::Common_TextAlignment::RIGHT_ALIGNED,
    hmi_apis::Common_TextAlignment::CENTERED
};


template<>
const EnumConversionHelper<hmi_apis::Common_DriverDistractionState::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_DriverDistractionState::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_DriverDistractionState::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_DriverDistractionState::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_DriverDistractionState::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_DriverDistractionState::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_DriverDistractionState::eType>::cstring_values_[] = {
    "DD_ON",
    "DD_OFF"
};

template<>
const hmi_apis::Common_DriverDistractionState::eType
EnumConversionHelper<hmi_apis::Common_DriverDistractionState::eType>::enum_values_[] = {
    hmi_apis::Common_DriverDistractionState::DD_ON,
    hmi_apis::Common_DriverDistractionState::DD_OFF
};


template<>
const EnumConversionHelper<hmi_apis::Common_EmergencyState::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_EmergencyState::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_EmergencyState::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_EmergencyState::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_EmergencyState::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_EmergencyState::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_EmergencyState::eType>::cstring_values_[] = {
    "EMERGENCY_ON",
    "EMERGENCY_OFF"
};

template<>
const hmi_apis::Common_EmergencyState::eType
EnumConversionHelper<hmi_apis::Common_EmergencyState::eType>::enum_values_[] = {
    hmi_apis::Common_EmergencyState::EMERGENCY_ON,
    hmi_apis::Common_EmergencyState::EMERGENCY_OFF
};


template<>
const EnumConversionHelper<hmi_apis::Common_MediaClockFormat::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_MediaClockFormat::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_MediaClockFormat::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_MediaClockFormat::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_MediaClockFormat::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_MediaClockFormat::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_MediaClockFormat::eType>::cstring_values_[] = {
    "CLOCK1",
    "CLOCK2",
    "CLOCK3",
    "CLOCKTEXT1",
    "CLOCKTEXT2",
    "CLOCKTEXT3",
    "CLOCKTEXT4"
};

template<>
const hmi_apis::Common_MediaClockFormat::eType
EnumConversionHelper<hmi_apis::Common_MediaClockFormat::eType>::enum_values_[] = {
    hmi_apis::Common_MediaClockFormat::CLOCK1,
    hmi_apis::Common_MediaClockFormat::CLOCK2,
    hmi_apis::Common_MediaClockFormat::CLOCK3,
    hmi_apis::Common_MediaClockFormat::CLOCKTEXT1,
    hmi_apis::Common_MediaClockFormat::CLOCKTEXT2,
    hmi_apis::Common_MediaClockFormat::CLOCKTEXT3,
    hmi_apis::Common_MediaClockFormat::CLOCKTEXT4
};


template<>
const EnumConversionHelper<hmi_apis::Common_VRCommandType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_VRCommandType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_VRCommandType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_VRCommandType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_VRCommandType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_VRCommandType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_VRCommandType::eType>::cstring_values_[] = {
    "Choice",
    "Command"
};

template<>
const hmi_apis::Common_VRCommandType::eType
EnumConversionHelper<hmi_apis::Common_VRCommandType::eType>::enum_values_[] = {
    hmi_apis::Common_VRCommandType::Choice,
    hmi_apis::Common_VRCommandType::Command
};


template<>
const EnumConversionHelper<hmi_apis::Common_ElectronicParkBrakeStatus::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_ElectronicParkBrakeStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_ElectronicParkBrakeStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_ElectronicParkBrakeStatus::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_ElectronicParkBrakeStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_ElectronicParkBrakeStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_ElectronicParkBrakeStatus::eType>::cstring_values_[] = {
    "CLOSED",
    "TRANSITION",
    "OPEN",
    "DRIVE_ACTIVE",
    "FAULT"
};

template<>
const hmi_apis::Common_ElectronicParkBrakeStatus::eType
EnumConversionHelper<hmi_apis::Common_ElectronicParkBrakeStatus::eType>::enum_values_[] = {
    hmi_apis::Common_ElectronicParkBrakeStatus::CLOSED,
    hmi_apis::Common_ElectronicParkBrakeStatus::TRANSITION,
    hmi_apis::Common_ElectronicParkBrakeStatus::OPEN,
    hmi_apis::Common_ElectronicParkBrakeStatus::DRIVE_ACTIVE,
    hmi_apis::Common_ElectronicParkBrakeStatus::FAULT
};


template<>
const EnumConversionHelper<hmi_apis::Common_FuelType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_FuelType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_FuelType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_FuelType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_FuelType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_FuelType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_FuelType::eType>::cstring_values_[] = {
    "GASOLINE",
    "DIESEL",
    "CNG",
    "LPG",
    "HYDROGEN",
    "BATTERY"
};

template<>
const hmi_apis::Common_FuelType::eType
EnumConversionHelper<hmi_apis::Common_FuelType::eType>::enum_values_[] = {
    hmi_apis::Common_FuelType::GASOLINE,
    hmi_apis::Common_FuelType::DIESEL,
    hmi_apis::Common_FuelType::CNG,
    hmi_apis::Common_FuelType::LPG,
    hmi_apis::Common_FuelType::HYDROGEN,
    hmi_apis::Common_FuelType::BATTERY
};


template<>
const EnumConversionHelper<hmi_apis::Common_ComponentVolumeStatus::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_ComponentVolumeStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_ComponentVolumeStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_ComponentVolumeStatus::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_ComponentVolumeStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_ComponentVolumeStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_ComponentVolumeStatus::eType>::cstring_values_[] = {
    "UNKNOWN",
    "NORMAL",
    "LOW",
    "FAULT",
    "ALERT",
    "NOT_SUPPORTED"
};

template<>
const hmi_apis::Common_ComponentVolumeStatus::eType
EnumConversionHelper<hmi_apis::Common_ComponentVolumeStatus::eType>::enum_values_[] = {
    hmi_apis::Common_ComponentVolumeStatus::CVS_UNKNOWN,
    hmi_apis::Common_ComponentVolumeStatus::CVS_NORMAL,
    hmi_apis::Common_ComponentVolumeStatus::CVS_LOW,
    hmi_apis::Common_ComponentVolumeStatus::CVS_FAULT,
    hmi_apis::Common_ComponentVolumeStatus::CVS_ALERT,
    hmi_apis::Common_ComponentVolumeStatus::CVS_NOT_SUPPORTED
};


template<>
const EnumConversionHelper<hmi_apis::Common_TPMS::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_TPMS::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_TPMS::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_TPMS::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_TPMS::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_TPMS::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_TPMS::eType>::cstring_values_[] = {
    "UNKNOWN",
    "SYSTEM_FAULT",
    "SENSOR_FAULT",
    "LOW",
    "SYSTEM_ACTIVE",
    "TRAIN",
    "TRAINING_COMPLETE",
    "NOT_TRAINED"
};

template<>
const hmi_apis::Common_TPMS::eType
EnumConversionHelper<hmi_apis::Common_TPMS::eType>::enum_values_[] = {
    hmi_apis::Common_TPMS::UNKNOWN,
    hmi_apis::Common_TPMS::SYSTEM_FAULT,
    hmi_apis::Common_TPMS::SENSOR_FAULT,
    hmi_apis::Common_TPMS::LOW,
    hmi_apis::Common_TPMS::SYSTEM_ACTIVE,
    hmi_apis::Common_TPMS::TRAIN,
    hmi_apis::Common_TPMS::TRAINING_COMPLETE,
    hmi_apis::Common_TPMS::NOT_TRAINED
};


template<>
const EnumConversionHelper<hmi_apis::Common_PRNDL::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_PRNDL::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_PRNDL::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_PRNDL::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_PRNDL::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_PRNDL::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_PRNDL::eType>::cstring_values_[] = {
    "PARK",
    "REVERSE",
    "NEUTRAL",
    "DRIVE",
    "SPORT",
    "LOWGEAR",
    "FIRST",
    "SECOND",
    "THIRD",
    "FOURTH",
    "FIFTH",
    "SIXTH",
    "SEVENTH",
    "EIGHTH",
    "UNKNOWN",
    "FAULT"
};

template<>
const hmi_apis::Common_PRNDL::eType
EnumConversionHelper<hmi_apis::Common_PRNDL::eType>::enum_values_[] = {
    hmi_apis::Common_PRNDL::PARK,
    hmi_apis::Common_PRNDL::REVERSE,
    hmi_apis::Common_PRNDL::NEUTRAL,
    hmi_apis::Common_PRNDL::DRIVE,
    hmi_apis::Common_PRNDL::SPORT,
    hmi_apis::Common_PRNDL::LOWGEAR,
    hmi_apis::Common_PRNDL::FIRST,
    hmi_apis::Common_PRNDL::SECOND,
    hmi_apis::Common_PRNDL::THIRD,
    hmi_apis::Common_PRNDL::FOURTH,
    hmi_apis::Common_PRNDL::FIFTH,
    hmi_apis::Common_PRNDL::SIXTH,
    hmi_apis::Common_PRNDL::SEVENTH,
    hmi_apis::Common_PRNDL::EIGHTH,
    hmi_apis::Common_PRNDL::UNKNOWN,
    hmi_apis::Common_PRNDL::FAULT
};


template<>
const EnumConversionHelper<hmi_apis::Common_VehicleDataEventStatus::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_VehicleDataEventStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_VehicleDataEventStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_VehicleDataEventStatus::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_VehicleDataEventStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_VehicleDataEventStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_VehicleDataEventStatus::eType>::cstring_values_[] = {
    "NO_EVENT",
    "NO",
    "YES",
    "NOT_SUPPORTED",
    "FAULT"
};

template<>
const hmi_apis::Common_VehicleDataEventStatus::eType
EnumConversionHelper<hmi_apis::Common_VehicleDataEventStatus::eType>::enum_values_[] = {
    hmi_apis::Common_VehicleDataEventStatus::VDES_NO_EVENT,
    hmi_apis::Common_VehicleDataEventStatus::VDES_NO,
    hmi_apis::Common_VehicleDataEventStatus::VDES_YES,
    hmi_apis::Common_VehicleDataEventStatus::VDES_NOT_SUPPORTED,
    hmi_apis::Common_VehicleDataEventStatus::VDES_FAULT
};


template<>
const EnumConversionHelper<hmi_apis::Common_VehicleDataStatus::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_VehicleDataStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_VehicleDataStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_VehicleDataStatus::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_VehicleDataStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_VehicleDataStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_VehicleDataStatus::eType>::cstring_values_[] = {
    "NO_DATA_EXISTS",
    "OFF",
    "ON"
};

template<>
const hmi_apis::Common_VehicleDataStatus::eType
EnumConversionHelper<hmi_apis::Common_VehicleDataStatus::eType>::enum_values_[] = {
    hmi_apis::Common_VehicleDataStatus::VDS_NO_DATA_EXISTS,
    hmi_apis::Common_VehicleDataStatus::VDS_OFF,
    hmi_apis::Common_VehicleDataStatus::VDS_ON
};


template<>
const EnumConversionHelper<hmi_apis::Common_IgnitionStableStatus::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_IgnitionStableStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_IgnitionStableStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_IgnitionStableStatus::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_IgnitionStableStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_IgnitionStableStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_IgnitionStableStatus::eType>::cstring_values_[] = {
    "IGNITION_SWITCH_NOT_STABLE",
    "IGNITION_SWITCH_STABLE",
    "MISSING_FROM_TRANSMITTER"
};

template<>
const hmi_apis::Common_IgnitionStableStatus::eType
EnumConversionHelper<hmi_apis::Common_IgnitionStableStatus::eType>::enum_values_[] = {
    hmi_apis::Common_IgnitionStableStatus::IGNITION_SWITCH_NOT_STABLE,
    hmi_apis::Common_IgnitionStableStatus::IGNITION_SWITCH_STABLE,
    hmi_apis::Common_IgnitionStableStatus::MISSING_FROM_TRANSMITTER
};


template<>
const EnumConversionHelper<hmi_apis::Common_IgnitionStatus::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_IgnitionStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_IgnitionStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_IgnitionStatus::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_IgnitionStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_IgnitionStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_IgnitionStatus::eType>::cstring_values_[] = {
    "UNKNOWN",
    "OFF",
    "ACCESSORY",
    "RUN",
    "START",
    "INVALID"
};

template<>
const hmi_apis::Common_IgnitionStatus::eType
EnumConversionHelper<hmi_apis::Common_IgnitionStatus::eType>::enum_values_[] = {
    hmi_apis::Common_IgnitionStatus::IS_UNKNOWN,
    hmi_apis::Common_IgnitionStatus::IS_OFF,
    hmi_apis::Common_IgnitionStatus::IS_ACCESSORY,
    hmi_apis::Common_IgnitionStatus::IS_RUN,
    hmi_apis::Common_IgnitionStatus::IS_START,
    hmi_apis::Common_IgnitionStatus::IS_INVALID
};


template<>
const EnumConversionHelper<hmi_apis::Common_DeviceLevelStatus::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_DeviceLevelStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_DeviceLevelStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_DeviceLevelStatus::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_DeviceLevelStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_DeviceLevelStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_DeviceLevelStatus::eType>::cstring_values_[] = {
    "ZERO_LEVEL_BARS",
    "ONE_LEVEL_BARS",
    "TWO_LEVEL_BARS",
    "THREE_LEVEL_BARS",
    "FOUR_LEVEL_BARS",
    "NOT_PROVIDED"
};

template<>
const hmi_apis::Common_DeviceLevelStatus::eType
EnumConversionHelper<hmi_apis::Common_DeviceLevelStatus::eType>::enum_values_[] = {
    hmi_apis::Common_DeviceLevelStatus::ZERO_LEVEL_BARS,
    hmi_apis::Common_DeviceLevelStatus::ONE_LEVEL_BARS,
    hmi_apis::Common_DeviceLevelStatus::TWO_LEVEL_BARS,
    hmi_apis::Common_DeviceLevelStatus::THREE_LEVEL_BARS,
    hmi_apis::Common_DeviceLevelStatus::FOUR_LEVEL_BARS,
    hmi_apis::Common_DeviceLevelStatus::NOT_PROVIDED
};


template<>
const EnumConversionHelper<hmi_apis::Common_PrimaryAudioSource::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_PrimaryAudioSource::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_PrimaryAudioSource::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_PrimaryAudioSource::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_PrimaryAudioSource::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_PrimaryAudioSource::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_PrimaryAudioSource::eType>::cstring_values_[] = {
    "NO_SOURCE_SELECTED",
    "CD",
    "USB",
    "USB2",
    "BLUETOOTH_STEREO_BTST",
    "LINE_IN",
    "IPOD",
    "MOBILE_APP",
    "AM",
    "FM",
    "XM",
    "DAB"
};

template<>
const hmi_apis::Common_PrimaryAudioSource::eType
EnumConversionHelper<hmi_apis::Common_PrimaryAudioSource::eType>::enum_values_[] = {
    hmi_apis::Common_PrimaryAudioSource::NO_SOURCE_SELECTED,
    hmi_apis::Common_PrimaryAudioSource::CD,
    hmi_apis::Common_PrimaryAudioSource::USB,
    hmi_apis::Common_PrimaryAudioSource::USB2,
    hmi_apis::Common_PrimaryAudioSource::BLUETOOTH_STEREO_BTST,
    hmi_apis::Common_PrimaryAudioSource::LINE_IN,
    hmi_apis::Common_PrimaryAudioSource::IPOD,
    hmi_apis::Common_PrimaryAudioSource::MOBILE_APP,
    hmi_apis::Common_PrimaryAudioSource::AM,
    hmi_apis::Common_PrimaryAudioSource::FM,
    hmi_apis::Common_PrimaryAudioSource::XM,
    hmi_apis::Common_PrimaryAudioSource::DAB
};


template<>
const EnumConversionHelper<hmi_apis::Common_CompassDirection::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_CompassDirection::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_CompassDirection::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_CompassDirection::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_CompassDirection::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_CompassDirection::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_CompassDirection::eType>::cstring_values_[] = {
    "NORTH",
    "NORTHWEST",
    "WEST",
    "SOUTHWEST",
    "SOUTH",
    "SOUTHEAST",
    "EAST",
    "NORTHEAST"
};

template<>
const hmi_apis::Common_CompassDirection::eType
EnumConversionHelper<hmi_apis::Common_CompassDirection::eType>::enum_values_[] = {
    hmi_apis::Common_CompassDirection::NORTH,
    hmi_apis::Common_CompassDirection::NORTHWEST,
    hmi_apis::Common_CompassDirection::WEST,
    hmi_apis::Common_CompassDirection::SOUTHWEST,
    hmi_apis::Common_CompassDirection::SOUTH,
    hmi_apis::Common_CompassDirection::SOUTHEAST,
    hmi_apis::Common_CompassDirection::EAST,
    hmi_apis::Common_CompassDirection::NORTHEAST
};


template<>
const EnumConversionHelper<hmi_apis::Common_Dimension::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_Dimension::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_Dimension::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_Dimension::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_Dimension::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_Dimension::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_Dimension::eType>::cstring_values_[] = {
    "NO_FIX",
    "2D",
    "3D"
};

template<>
const hmi_apis::Common_Dimension::eType
EnumConversionHelper<hmi_apis::Common_Dimension::eType>::enum_values_[] = {
    hmi_apis::Common_Dimension::Dimension_NO_FIX,
    hmi_apis::Common_Dimension::Dimension_2D,
    hmi_apis::Common_Dimension::Dimension_3D
};


template<>
const EnumConversionHelper<hmi_apis::Common_TouchType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_TouchType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_TouchType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_TouchType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_TouchType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_TouchType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_TouchType::eType>::cstring_values_[] = {
    "BEGIN",
    "MOVE",
    "END",
    "CANCEL"
};

template<>
const hmi_apis::Common_TouchType::eType
EnumConversionHelper<hmi_apis::Common_TouchType::eType>::enum_values_[] = {
    hmi_apis::Common_TouchType::BEGIN,
    hmi_apis::Common_TouchType::MOVE,
    hmi_apis::Common_TouchType::END,
    hmi_apis::Common_TouchType::CANCEL
};


template<>
const EnumConversionHelper<hmi_apis::Common_WarningLightStatus::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_WarningLightStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_WarningLightStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_WarningLightStatus::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_WarningLightStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_WarningLightStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_WarningLightStatus::eType>::cstring_values_[] = {
    "OFF",
    "ON",
    "FLASH",
    "NOT_USED"
};

template<>
const hmi_apis::Common_WarningLightStatus::eType
EnumConversionHelper<hmi_apis::Common_WarningLightStatus::eType>::enum_values_[] = {
    hmi_apis::Common_WarningLightStatus::WLS_OFF,
    hmi_apis::Common_WarningLightStatus::WLS_ON,
    hmi_apis::Common_WarningLightStatus::WLS_FLASH,
    hmi_apis::Common_WarningLightStatus::WLS_NOT_USED
};


template<>
const EnumConversionHelper<hmi_apis::Common_VehicleDataResultCode::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_VehicleDataResultCode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_VehicleDataResultCode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_VehicleDataResultCode::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_VehicleDataResultCode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_VehicleDataResultCode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_VehicleDataResultCode::eType>::cstring_values_[] = {
    "SUCCESS",
    "TRUNCATED_DATA",
    "DISALLOWED",
    "USER_DISALLOWED",
    "INVALID_ID",
    "VEHICLE_DATA_NOT_AVAILABLE",
    "DATA_ALREADY_SUBSCRIBED",
    "DATA_NOT_SUBSCRIBED",
    "IGNORED"
};

template<>
const hmi_apis::Common_VehicleDataResultCode::eType
EnumConversionHelper<hmi_apis::Common_VehicleDataResultCode::eType>::enum_values_[] = {
    hmi_apis::Common_VehicleDataResultCode::VDRC_SUCCESS,
    hmi_apis::Common_VehicleDataResultCode::VDRC_TRUNCATED_DATA,
    hmi_apis::Common_VehicleDataResultCode::VDRC_DISALLOWED,
    hmi_apis::Common_VehicleDataResultCode::VDRC_USER_DISALLOWED,
    hmi_apis::Common_VehicleDataResultCode::VDRC_INVALID_ID,
    hmi_apis::Common_VehicleDataResultCode::VDRC_DATA_NOT_AVAILABLE,
    hmi_apis::Common_VehicleDataResultCode::VDRC_DATA_ALREADY_SUBSCRIBED,
    hmi_apis::Common_VehicleDataResultCode::VDRC_DATA_NOT_SUBSCRIBED,
    hmi_apis::Common_VehicleDataResultCode::VDRC_IGNORED
};


template<>
const EnumConversionHelper<hmi_apis::Common_VehicleDataType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_VehicleDataType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_VehicleDataType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_VehicleDataType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_VehicleDataType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_VehicleDataType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_VehicleDataType::eType>::cstring_values_[] = {
    "VEHICLEDATA_GPS",
    "VEHICLEDATA_SPEED",
    "VEHICLEDATA_RPM",
    "VEHICLEDATA_FUELLEVEL",
    "VEHICLEDATA_FUELLEVEL_STATE",
    "VEHICLEDATA_FUELCONSUMPTION",
    "VEHICLEDATA_EXTERNTEMP",
    "VEHICLEDATA_VIN",
    "VEHICLEDATA_PRNDL",
    "VEHICLEDATA_TIREPRESSURE",
    "VEHICLEDATA_ODOMETER",
    "VEHICLEDATA_BELTSTATUS",
    "VEHICLEDATA_BODYINFO",
    "VEHICLEDATA_DEVICESTATUS",
    "VEHICLEDATA_ECALLINFO",
    "VEHICLEDATA_AIRBAGSTATUS",
    "VEHICLEDATA_EMERGENCYEVENT",
    "VEHICLEDATA_CLUSTERMODESTATUS",
    "VEHICLEDATA_MYKEY",
    "VEHICLEDATA_BRAKING",
    "VEHICLEDATA_WIPERSTATUS",
    "VEHICLEDATA_HEADLAMPSTATUS",
    "VEHICLEDATA_BATTVOLTAGE",
    "VEHICLEDATA_ENGINETORQUE",
    "VEHICLEDATA_ACCPEDAL",
    "VEHICLEDATA_STEERINGWHEEL",
    "VEHICLEDATA_TURNSIGNAL",
    "VEHICLEDATA_FUELRANGE",
    "VEHICLEDATA_ENGINEOILLIFE",
    "VEHICLEDATA_ELECTRONICPARKBRAKESTATUS",
    "VEHICLEDATA_CLOUDAPPVEHICLEID"
};

template<>
const hmi_apis::Common_VehicleDataType::eType
EnumConversionHelper<hmi_apis::Common_VehicleDataType::eType>::enum_values_[] = {
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_GPS,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_SPEED,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_RPM,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_FUELLEVEL,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_FUELLEVEL_STATE,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_FUELCONSUMPTION,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_EXTERNTEMP,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_VIN,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_PRNDL,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_TIREPRESSURE,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_ODOMETER,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_BELTSTATUS,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_BODYINFO,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_DEVICESTATUS,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_ECALLINFO,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_AIRBAGSTATUS,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_EMERGENCYEVENT,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_CLUSTERMODESTATUS,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_MYKEY,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_BRAKING,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_WIPERSTATUS,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_HEADLAMPSTATUS,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_BATTVOLTAGE,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_ENGINETORQUE,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_ACCPEDAL,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_STEERINGWHEEL,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_TURNSIGNAL,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_FUELRANGE,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_ENGINEOILLIFE,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_ELECTRONICPARKBRAKESTATUS,
    hmi_apis::Common_VehicleDataType::VEHICLEDATA_CLOUDAPPVEHICLEID
};


template<>
const EnumConversionHelper<hmi_apis::Common_WiperStatus::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_WiperStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_WiperStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_WiperStatus::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_WiperStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_WiperStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_WiperStatus::eType>::cstring_values_[] = {
    "OFF",
    "AUTO_OFF",
    "OFF_MOVING",
    "MAN_INT_OFF",
    "MAN_INT_ON",
    "MAN_LOW",
    "MAN_HIGH",
    "MAN_FLICK",
    "WASH",
    "AUTO_LOW",
    "AUTO_HIGH",
    "COURTESYWIPE",
    "AUTO_ADJUST",
    "STALLED",
    "NO_DATA_EXISTS"
};

template<>
const hmi_apis::Common_WiperStatus::eType
EnumConversionHelper<hmi_apis::Common_WiperStatus::eType>::enum_values_[] = {
    hmi_apis::Common_WiperStatus::OFF,
    hmi_apis::Common_WiperStatus::AUTO_OFF,
    hmi_apis::Common_WiperStatus::OFF_MOVING,
    hmi_apis::Common_WiperStatus::MAN_INT_OFF,
    hmi_apis::Common_WiperStatus::MAN_INT_ON,
    hmi_apis::Common_WiperStatus::MAN_LOW,
    hmi_apis::Common_WiperStatus::MAN_HIGH,
    hmi_apis::Common_WiperStatus::MAN_FLICK,
    hmi_apis::Common_WiperStatus::WASH,
    hmi_apis::Common_WiperStatus::AUTO_LOW,
    hmi_apis::Common_WiperStatus::AUTO_HIGH,
    hmi_apis::Common_WiperStatus::COURTESYWIPE,
    hmi_apis::Common_WiperStatus::AUTO_ADJUST,
    hmi_apis::Common_WiperStatus::STALLED,
    hmi_apis::Common_WiperStatus::NO_DATA_EXISTS
};


template<>
const EnumConversionHelper<hmi_apis::Common_SamplingRate::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_SamplingRate::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_SamplingRate::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_SamplingRate::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_SamplingRate::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_SamplingRate::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_SamplingRate::eType>::cstring_values_[] = {
    "8KHZ",
    "16KHZ",
    "22KHZ",
    "44KHZ"
};

template<>
const hmi_apis::Common_SamplingRate::eType
EnumConversionHelper<hmi_apis::Common_SamplingRate::eType>::enum_values_[] = {
    hmi_apis::Common_SamplingRate::RATE_8KHZ,
    hmi_apis::Common_SamplingRate::RATE_16KHZ,
    hmi_apis::Common_SamplingRate::RATE_22KHZ,
    hmi_apis::Common_SamplingRate::RATE_44KHZ
};


template<>
const EnumConversionHelper<hmi_apis::Common_BitsPerSample::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_BitsPerSample::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_BitsPerSample::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_BitsPerSample::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_BitsPerSample::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_BitsPerSample::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_BitsPerSample::eType>::cstring_values_[] = {
    "8_BIT",
    "16_BIT"
};

template<>
const hmi_apis::Common_BitsPerSample::eType
EnumConversionHelper<hmi_apis::Common_BitsPerSample::eType>::enum_values_[] = {
    hmi_apis::Common_BitsPerSample::RATE_8_BIT,
    hmi_apis::Common_BitsPerSample::RATE_16_BIT
};


template<>
const EnumConversionHelper<hmi_apis::Common_AudioType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_AudioType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_AudioType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_AudioType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_AudioType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_AudioType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_AudioType::eType>::cstring_values_[] = {
    "PCM"
};

template<>
const hmi_apis::Common_AudioType::eType
EnumConversionHelper<hmi_apis::Common_AudioType::eType>::enum_values_[] = {
    hmi_apis::Common_AudioType::PCM
};


template<>
const EnumConversionHelper<hmi_apis::Common_KeyboardLayout::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_KeyboardLayout::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_KeyboardLayout::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_KeyboardLayout::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_KeyboardLayout::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_KeyboardLayout::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_KeyboardLayout::eType>::cstring_values_[] = {
    "QWERTY",
    "QWERTZ",
    "AZERTY"
};

template<>
const hmi_apis::Common_KeyboardLayout::eType
EnumConversionHelper<hmi_apis::Common_KeyboardLayout::eType>::enum_values_[] = {
    hmi_apis::Common_KeyboardLayout::QWERTY,
    hmi_apis::Common_KeyboardLayout::QWERTZ,
    hmi_apis::Common_KeyboardLayout::AZERTY
};


template<>
const EnumConversionHelper<hmi_apis::Common_KeyboardEvent::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_KeyboardEvent::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_KeyboardEvent::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_KeyboardEvent::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_KeyboardEvent::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_KeyboardEvent::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_KeyboardEvent::eType>::cstring_values_[] = {
    "KEYPRESS",
    "ENTRY_SUBMITTED",
    "ENTRY_VOICE",
    "ENTRY_CANCELLED",
    "ENTRY_ABORTED"
};

template<>
const hmi_apis::Common_KeyboardEvent::eType
EnumConversionHelper<hmi_apis::Common_KeyboardEvent::eType>::enum_values_[] = {
    hmi_apis::Common_KeyboardEvent::KEYPRESS,
    hmi_apis::Common_KeyboardEvent::ENTRY_SUBMITTED,
    hmi_apis::Common_KeyboardEvent::ENTRY_VOICE,
    hmi_apis::Common_KeyboardEvent::ENTRY_CANCELLED,
    hmi_apis::Common_KeyboardEvent::ENTRY_ABORTED
};


template<>
const EnumConversionHelper<hmi_apis::Common_KeypressMode::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_KeypressMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_KeypressMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_KeypressMode::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_KeypressMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_KeypressMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_KeypressMode::eType>::cstring_values_[] = {
    "SINGLE_KEYPRESS",
    "QUEUE_KEYPRESSES",
    "RESEND_CURRENT_ENTRY"
};

template<>
const hmi_apis::Common_KeypressMode::eType
EnumConversionHelper<hmi_apis::Common_KeypressMode::eType>::enum_values_[] = {
    hmi_apis::Common_KeypressMode::SINGLE_KEYPRESS,
    hmi_apis::Common_KeypressMode::QUEUE_KEYPRESSES,
    hmi_apis::Common_KeypressMode::RESEND_CURRENT_ENTRY
};


template<>
const EnumConversionHelper<hmi_apis::Common_AmbientLightStatus::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_AmbientLightStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_AmbientLightStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_AmbientLightStatus::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_AmbientLightStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_AmbientLightStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_AmbientLightStatus::eType>::cstring_values_[] = {
    "NIGHT",
    "TWILIGHT_1",
    "TWILIGHT_2",
    "TWILIGHT_3",
    "TWILIGHT_4",
    "DAY",
    "UNKNOWN",
    "INVALID"
};

template<>
const hmi_apis::Common_AmbientLightStatus::eType
EnumConversionHelper<hmi_apis::Common_AmbientLightStatus::eType>::enum_values_[] = {
    hmi_apis::Common_AmbientLightStatus::NIGHT,
    hmi_apis::Common_AmbientLightStatus::TWILIGHT_1,
    hmi_apis::Common_AmbientLightStatus::TWILIGHT_2,
    hmi_apis::Common_AmbientLightStatus::TWILIGHT_3,
    hmi_apis::Common_AmbientLightStatus::TWILIGHT_4,
    hmi_apis::Common_AmbientLightStatus::DAY,
    hmi_apis::Common_AmbientLightStatus::UNKNOWN,
    hmi_apis::Common_AmbientLightStatus::INVALID
};


template<>
const EnumConversionHelper<hmi_apis::Common_FileType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_FileType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_FileType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_FileType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_FileType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_FileType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_FileType::eType>::cstring_values_[] = {
    "GRAPHIC_BMP",
    "GRAPHIC_JPEG",
    "GRAPHIC_PNG",
    "AUDIO_WAVE",
    "AUDIO_MP3",
    "AUDIO_AAC",
    "BINARY",
    "JSON"
};

template<>
const hmi_apis::Common_FileType::eType
EnumConversionHelper<hmi_apis::Common_FileType::eType>::enum_values_[] = {
    hmi_apis::Common_FileType::GRAPHIC_BMP,
    hmi_apis::Common_FileType::GRAPHIC_JPEG,
    hmi_apis::Common_FileType::GRAPHIC_PNG,
    hmi_apis::Common_FileType::AUDIO_WAVE,
    hmi_apis::Common_FileType::AUDIO_MP3,
    hmi_apis::Common_FileType::AUDIO_AAC,
    hmi_apis::Common_FileType::BINARY,
    hmi_apis::Common_FileType::JSON
};


template<>
const EnumConversionHelper<hmi_apis::Common_RequestType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_RequestType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_RequestType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_RequestType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_RequestType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_RequestType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_RequestType::eType>::cstring_values_[] = {
    "HTTP",
    "FILE_RESUME",
    "AUTH_REQUEST",
    "AUTH_CHALLENGE",
    "AUTH_ACK",
    "PROPRIETARY",
    "QUERY_APPS",
    "LAUNCH_APP",
    "LOCK_SCREEN_ICON_URL",
    "TRAFFIC_MESSAGE_CHANNEL",
    "DRIVER_PROFILE",
    "VOICE_SEARCH",
    "NAVIGATION",
    "PHONE",
    "CLIMATE",
    "SETTINGS",
    "VEHICLE_DIAGNOSTICS",
    "EMERGENCY",
    "MEDIA",
    "FOTA",
    "OEM_SPECIFIC",
    "ICON_URL"
};

template<>
const hmi_apis::Common_RequestType::eType
EnumConversionHelper<hmi_apis::Common_RequestType::eType>::enum_values_[] = {
    hmi_apis::Common_RequestType::HTTP,
    hmi_apis::Common_RequestType::FILE_RESUME,
    hmi_apis::Common_RequestType::AUTH_REQUEST,
    hmi_apis::Common_RequestType::AUTH_CHALLENGE,
    hmi_apis::Common_RequestType::AUTH_ACK,
    hmi_apis::Common_RequestType::PROPRIETARY,
    hmi_apis::Common_RequestType::QUERY_APPS,
    hmi_apis::Common_RequestType::LAUNCH_APP,
    hmi_apis::Common_RequestType::LOCK_SCREEN_ICON_URL,
    hmi_apis::Common_RequestType::TRAFFIC_MESSAGE_CHANNEL,
    hmi_apis::Common_RequestType::DRIVER_PROFILE,
    hmi_apis::Common_RequestType::VOICE_SEARCH,
    hmi_apis::Common_RequestType::NAVIGATION,
    hmi_apis::Common_RequestType::PHONE,
    hmi_apis::Common_RequestType::CLIMATE,
    hmi_apis::Common_RequestType::SETTINGS,
    hmi_apis::Common_RequestType::VEHICLE_DIAGNOSTICS,
    hmi_apis::Common_RequestType::EMERGENCY,
    hmi_apis::Common_RequestType::MEDIA,
    hmi_apis::Common_RequestType::FOTA,
    hmi_apis::Common_RequestType::OEM_SPECIFIC,
    hmi_apis::Common_RequestType::ICON_URL
};


template<>
const EnumConversionHelper<hmi_apis::Common_ECallConfirmationStatus::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_ECallConfirmationStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_ECallConfirmationStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_ECallConfirmationStatus::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_ECallConfirmationStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_ECallConfirmationStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_ECallConfirmationStatus::eType>::cstring_values_[] = {
    "NORMAL",
    "CALL_IN_PROGRESS",
    "CALL_CANCELLED",
    "CALL_COMPLETED",
    "CALL_UNSUCCESSFUL",
    "ECALL_CONFIGURED_OFF",
    "CALL_COMPLETE_DTMF_TIMEOUT"
};

template<>
const hmi_apis::Common_ECallConfirmationStatus::eType
EnumConversionHelper<hmi_apis::Common_ECallConfirmationStatus::eType>::enum_values_[] = {
    hmi_apis::Common_ECallConfirmationStatus::ECCS_NORMAL,
    hmi_apis::Common_ECallConfirmationStatus::ECCS_CALL_IN_PROGRESS,
    hmi_apis::Common_ECallConfirmationStatus::ECCS_CALL_CANCELLED,
    hmi_apis::Common_ECallConfirmationStatus::CALL_COMPLETED,
    hmi_apis::Common_ECallConfirmationStatus::ECCS_CALL_UNSUCCESSFUL,
    hmi_apis::Common_ECallConfirmationStatus::ECCS_ECALL_CONFIGURED_OFF,
    hmi_apis::Common_ECallConfirmationStatus::ECCS_CALL_COMPLETE_DTMF_TIMEOUT
};


template<>
const EnumConversionHelper<hmi_apis::Common_VehicleDataNotificationStatus::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_VehicleDataNotificationStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_VehicleDataNotificationStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_VehicleDataNotificationStatus::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_VehicleDataNotificationStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_VehicleDataNotificationStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_VehicleDataNotificationStatus::eType>::cstring_values_[] = {
    "NOT_SUPPORTED",
    "NORMAL",
    "ACTIVE",
    "NOT_USED"
};

template<>
const hmi_apis::Common_VehicleDataNotificationStatus::eType
EnumConversionHelper<hmi_apis::Common_VehicleDataNotificationStatus::eType>::enum_values_[] = {
    hmi_apis::Common_VehicleDataNotificationStatus::VDNS_NOT_SUPPORTED,
    hmi_apis::Common_VehicleDataNotificationStatus::VDNS_NORMAL,
    hmi_apis::Common_VehicleDataNotificationStatus::VDNS_ACTIVE,
    hmi_apis::Common_VehicleDataNotificationStatus::VDNS_NOT_USED
};


template<>
const EnumConversionHelper<hmi_apis::Common_EmergencyEventType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_EmergencyEventType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_EmergencyEventType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_EmergencyEventType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_EmergencyEventType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_EmergencyEventType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_EmergencyEventType::eType>::cstring_values_[] = {
    "NO_EVENT",
    "FRONTAL",
    "SIDE",
    "REAR",
    "ROLLOVER",
    "NOT_SUPPORTED",
    "FAULT"
};

template<>
const hmi_apis::Common_EmergencyEventType::eType
EnumConversionHelper<hmi_apis::Common_EmergencyEventType::eType>::enum_values_[] = {
    hmi_apis::Common_EmergencyEventType::EET_NO_EVENT,
    hmi_apis::Common_EmergencyEventType::EET_FRONTAL,
    hmi_apis::Common_EmergencyEventType::EET_SIDE,
    hmi_apis::Common_EmergencyEventType::EET_REAR,
    hmi_apis::Common_EmergencyEventType::EET_ROLLOVER,
    hmi_apis::Common_EmergencyEventType::EET_NOT_SUPPORTED,
    hmi_apis::Common_EmergencyEventType::EET_FAULT
};


template<>
const EnumConversionHelper<hmi_apis::Common_FuelCutoffStatus::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_FuelCutoffStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_FuelCutoffStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_FuelCutoffStatus::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_FuelCutoffStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_FuelCutoffStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_FuelCutoffStatus::eType>::cstring_values_[] = {
    "TERMINATE_FUEL",
    "NORMAL_OPERATION",
    "FAULT"
};

template<>
const hmi_apis::Common_FuelCutoffStatus::eType
EnumConversionHelper<hmi_apis::Common_FuelCutoffStatus::eType>::enum_values_[] = {
    hmi_apis::Common_FuelCutoffStatus::FCS_TERMINATE_FUEL,
    hmi_apis::Common_FuelCutoffStatus::FCS_NORMAL_OPERATION,
    hmi_apis::Common_FuelCutoffStatus::FCS_FAULT
};


template<>
const EnumConversionHelper<hmi_apis::Common_PowerModeQualificationStatus::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_PowerModeQualificationStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_PowerModeQualificationStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_PowerModeQualificationStatus::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_PowerModeQualificationStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_PowerModeQualificationStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_PowerModeQualificationStatus::eType>::cstring_values_[] = {
    "POWER_MODE_UNDEFINED",
    "POWER_MODE_EVALUATION_IN_PROGRESS",
    "NOT_DEFINED",
    "POWER_MODE_OK"
};

template<>
const hmi_apis::Common_PowerModeQualificationStatus::eType
EnumConversionHelper<hmi_apis::Common_PowerModeQualificationStatus::eType>::enum_values_[] = {
    hmi_apis::Common_PowerModeQualificationStatus::POWER_MODE_UNDEFINED,
    hmi_apis::Common_PowerModeQualificationStatus::POWER_MODE_EVALUATION_IN_PROGRESS,
    hmi_apis::Common_PowerModeQualificationStatus::NOT_DEFINED,
    hmi_apis::Common_PowerModeQualificationStatus::POWER_MODE_OK
};


template<>
const EnumConversionHelper<hmi_apis::Common_CarModeStatus::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_CarModeStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_CarModeStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_CarModeStatus::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_CarModeStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_CarModeStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_CarModeStatus::eType>::cstring_values_[] = {
    "NORMAL",
    "FACTORY",
    "TRANSPORT",
    "CRASH"
};

template<>
const hmi_apis::Common_CarModeStatus::eType
EnumConversionHelper<hmi_apis::Common_CarModeStatus::eType>::enum_values_[] = {
    hmi_apis::Common_CarModeStatus::CMS_NORMAL,
    hmi_apis::Common_CarModeStatus::CMS_FACTORY,
    hmi_apis::Common_CarModeStatus::CMS_TRANSPORT,
    hmi_apis::Common_CarModeStatus::CMS_CRASH
};


template<>
const EnumConversionHelper<hmi_apis::Common_PowerModeStatus::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_PowerModeStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_PowerModeStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_PowerModeStatus::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_PowerModeStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_PowerModeStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_PowerModeStatus::eType>::cstring_values_[] = {
    "KEY_OUT",
    "KEY_RECENTLY_OUT",
    "KEY_APPROVED_0",
    "POST_ACCESORY_0",
    "ACCESORY_1",
    "POST_IGNITION_1",
    "IGNITION_ON_2",
    "RUNNING_2",
    "CRANK_3"
};

template<>
const hmi_apis::Common_PowerModeStatus::eType
EnumConversionHelper<hmi_apis::Common_PowerModeStatus::eType>::enum_values_[] = {
    hmi_apis::Common_PowerModeStatus::KEY_OUT,
    hmi_apis::Common_PowerModeStatus::KEY_RECENTLY_OUT,
    hmi_apis::Common_PowerModeStatus::KEY_APPROVED_0,
    hmi_apis::Common_PowerModeStatus::POST_ACCESORY_0,
    hmi_apis::Common_PowerModeStatus::ACCESORY_1,
    hmi_apis::Common_PowerModeStatus::POST_IGNITION_1,
    hmi_apis::Common_PowerModeStatus::IGNITION_ON_2,
    hmi_apis::Common_PowerModeStatus::RUNNING_2,
    hmi_apis::Common_PowerModeStatus::CRANK_3
};


template<>
const EnumConversionHelper<hmi_apis::Common_CharacterSet::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_CharacterSet::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_CharacterSet::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_CharacterSet::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_CharacterSet::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_CharacterSet::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_CharacterSet::eType>::cstring_values_[] = {
    "TYPE2SET",
    "TYPE5SET",
    "CID1SET",
    "CID2SET"
};

template<>
const hmi_apis::Common_CharacterSet::eType
EnumConversionHelper<hmi_apis::Common_CharacterSet::eType>::enum_values_[] = {
    hmi_apis::Common_CharacterSet::TYPE2SET,
    hmi_apis::Common_CharacterSet::TYPE5SET,
    hmi_apis::Common_CharacterSet::CID1SET,
    hmi_apis::Common_CharacterSet::CID2SET
};


template<>
const EnumConversionHelper<hmi_apis::Common_AppPriority::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_AppPriority::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_AppPriority::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_AppPriority::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_AppPriority::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_AppPriority::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_AppPriority::eType>::cstring_values_[] = {
    "EMERGENCY",
    "NAVIGATION",
    "VOICE_COMMUNICATION",
    "COMMUNICATION",
    "NORMAL",
    "NONE"
};

template<>
const hmi_apis::Common_AppPriority::eType
EnumConversionHelper<hmi_apis::Common_AppPriority::eType>::enum_values_[] = {
    hmi_apis::Common_AppPriority::EMERGENCY,
    hmi_apis::Common_AppPriority::NAVIGATION,
    hmi_apis::Common_AppPriority::VOICE_COMMUNICATION,
    hmi_apis::Common_AppPriority::COMMUNICATION,
    hmi_apis::Common_AppPriority::NORMAL,
    hmi_apis::Common_AppPriority::NONE
};


template<>
const EnumConversionHelper<hmi_apis::Common_MethodName::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_MethodName::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_MethodName::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_MethodName::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_MethodName::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_MethodName::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_MethodName::eType>::cstring_values_[] = {
    "ALERT",
    "SPEAK",
    "AUDIO_PASS_THRU",
    "ALERT_MANEUVER"
};

template<>
const hmi_apis::Common_MethodName::eType
EnumConversionHelper<hmi_apis::Common_MethodName::eType>::enum_values_[] = {
    hmi_apis::Common_MethodName::ALERT,
    hmi_apis::Common_MethodName::SPEAK,
    hmi_apis::Common_MethodName::AUDIO_PASS_THRU,
    hmi_apis::Common_MethodName::ALERT_MANEUVER
};


template<>
const EnumConversionHelper<hmi_apis::Common_AlertType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_AlertType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_AlertType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_AlertType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_AlertType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_AlertType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_AlertType::eType>::cstring_values_[] = {
    "UI",
    "BOTH"
};

template<>
const hmi_apis::Common_AlertType::eType
EnumConversionHelper<hmi_apis::Common_AlertType::eType>::enum_values_[] = {
    hmi_apis::Common_AlertType::UI,
    hmi_apis::Common_AlertType::BOTH
};


template<>
const EnumConversionHelper<hmi_apis::Common_HMILevel::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_HMILevel::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_HMILevel::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_HMILevel::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_HMILevel::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_HMILevel::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_HMILevel::eType>::cstring_values_[] = {
    "FULL",
    "LIMITED",
    "BACKGROUND",
    "NONE"
};

template<>
const hmi_apis::Common_HMILevel::eType
EnumConversionHelper<hmi_apis::Common_HMILevel::eType>::enum_values_[] = {
    hmi_apis::Common_HMILevel::FULL,
    hmi_apis::Common_HMILevel::LIMITED,
    hmi_apis::Common_HMILevel::BACKGROUND,
    hmi_apis::Common_HMILevel::NONE
};


template<>
const EnumConversionHelper<hmi_apis::Common_EventTypes::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_EventTypes::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_EventTypes::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_EventTypes::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_EventTypes::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_EventTypes::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_EventTypes::eType>::cstring_values_[] = {
    "AUDIO_SOURCE",
    "EMBEDDED_NAVI",
    "PHONE_CALL",
    "EMERGENCY_EVENT",
    "DEACTIVATE_HMI"
};

template<>
const hmi_apis::Common_EventTypes::eType
EnumConversionHelper<hmi_apis::Common_EventTypes::eType>::enum_values_[] = {
    hmi_apis::Common_EventTypes::AUDIO_SOURCE,
    hmi_apis::Common_EventTypes::EMBEDDED_NAVI,
    hmi_apis::Common_EventTypes::PHONE_CALL,
    hmi_apis::Common_EventTypes::EMERGENCY_EVENT,
    hmi_apis::Common_EventTypes::DEACTIVATE_HMI
};


template<>
const EnumConversionHelper<hmi_apis::Common_DeliveryMode::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_DeliveryMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_DeliveryMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_DeliveryMode::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_DeliveryMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_DeliveryMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_DeliveryMode::eType>::cstring_values_[] = {
    "PROMPT",
    "DESTINATION",
    "QUEUE"
};

template<>
const hmi_apis::Common_DeliveryMode::eType
EnumConversionHelper<hmi_apis::Common_DeliveryMode::eType>::enum_values_[] = {
    hmi_apis::Common_DeliveryMode::PROMPT,
    hmi_apis::Common_DeliveryMode::DESTINATION,
    hmi_apis::Common_DeliveryMode::QUEUE
};


template<>
const EnumConversionHelper<hmi_apis::Common_VideoStreamingProtocol::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_VideoStreamingProtocol::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_VideoStreamingProtocol::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_VideoStreamingProtocol::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_VideoStreamingProtocol::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_VideoStreamingProtocol::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_VideoStreamingProtocol::eType>::cstring_values_[] = {
    "RAW",
    "RTP",
    "RTSP",
    "RTMP",
    "WEBM"
};

template<>
const hmi_apis::Common_VideoStreamingProtocol::eType
EnumConversionHelper<hmi_apis::Common_VideoStreamingProtocol::eType>::enum_values_[] = {
    hmi_apis::Common_VideoStreamingProtocol::RAW,
    hmi_apis::Common_VideoStreamingProtocol::RTP,
    hmi_apis::Common_VideoStreamingProtocol::RTSP,
    hmi_apis::Common_VideoStreamingProtocol::RTMP,
    hmi_apis::Common_VideoStreamingProtocol::WEBM
};


template<>
const EnumConversionHelper<hmi_apis::Common_VideoStreamingCodec::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_VideoStreamingCodec::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_VideoStreamingCodec::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_VideoStreamingCodec::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_VideoStreamingCodec::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_VideoStreamingCodec::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_VideoStreamingCodec::eType>::cstring_values_[] = {
    "H264",
    "H265",
    "Theora",
    "VP8",
    "VP9"
};

template<>
const hmi_apis::Common_VideoStreamingCodec::eType
EnumConversionHelper<hmi_apis::Common_VideoStreamingCodec::eType>::enum_values_[] = {
    hmi_apis::Common_VideoStreamingCodec::H264,
    hmi_apis::Common_VideoStreamingCodec::H265,
    hmi_apis::Common_VideoStreamingCodec::Theora,
    hmi_apis::Common_VideoStreamingCodec::VP8,
    hmi_apis::Common_VideoStreamingCodec::VP9
};


template<>
const EnumConversionHelper<hmi_apis::Common_UpdateResult::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_UpdateResult::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_UpdateResult::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_UpdateResult::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_UpdateResult::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_UpdateResult::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_UpdateResult::eType>::cstring_values_[] = {
    "UP_TO_DATE",
    "UPDATING",
    "UPDATE_NEEDED"
};

template<>
const hmi_apis::Common_UpdateResult::eType
EnumConversionHelper<hmi_apis::Common_UpdateResult::eType>::enum_values_[] = {
    hmi_apis::Common_UpdateResult::UP_TO_DATE,
    hmi_apis::Common_UpdateResult::UPDATING,
    hmi_apis::Common_UpdateResult::UPDATE_NEEDED
};


template<>
const EnumConversionHelper<hmi_apis::Common_SystemError::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_SystemError::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_SystemError::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_SystemError::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_SystemError::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_SystemError::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_SystemError::eType>::cstring_values_[] = {
    "SYNC_REBOOTED",
    "SYNC_OUT_OF_MEMMORY"
};

template<>
const hmi_apis::Common_SystemError::eType
EnumConversionHelper<hmi_apis::Common_SystemError::eType>::enum_values_[] = {
    hmi_apis::Common_SystemError::SYNC_REBOOTED,
    hmi_apis::Common_SystemError::SYNC_OUT_OF_MEMMORY
};


template<>
const EnumConversionHelper<hmi_apis::Common_StatisticsType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_StatisticsType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_StatisticsType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_StatisticsType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_StatisticsType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_StatisticsType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_StatisticsType::eType>::cstring_values_[] = {
    "iAPP_BUFFER_FULL"
};

template<>
const hmi_apis::Common_StatisticsType::eType
EnumConversionHelper<hmi_apis::Common_StatisticsType::eType>::enum_values_[] = {
    hmi_apis::Common_StatisticsType::iAPP_BUFFER_FULL
};


template<>
const EnumConversionHelper<hmi_apis::Common_ConsentSource::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_ConsentSource::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_ConsentSource::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_ConsentSource::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_ConsentSource::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_ConsentSource::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_ConsentSource::eType>::cstring_values_[] = {
    "GUI",
    "VUI"
};

template<>
const hmi_apis::Common_ConsentSource::eType
EnumConversionHelper<hmi_apis::Common_ConsentSource::eType>::enum_values_[] = {
    hmi_apis::Common_ConsentSource::GUI,
    hmi_apis::Common_ConsentSource::VUI
};


template<>
const EnumConversionHelper<hmi_apis::Common_DeviceState::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_DeviceState::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_DeviceState::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_DeviceState::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_DeviceState::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_DeviceState::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_DeviceState::eType>::cstring_values_[] = {
    "UNKNOWN",
    "UNPAIRED"
};

template<>
const hmi_apis::Common_DeviceState::eType
EnumConversionHelper<hmi_apis::Common_DeviceState::eType>::enum_values_[] = {
    hmi_apis::Common_DeviceState::UNKNOWN,
    hmi_apis::Common_DeviceState::UNPAIRED
};


template<>
const EnumConversionHelper<hmi_apis::Common_EntityStatus::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_EntityStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_EntityStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_EntityStatus::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_EntityStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_EntityStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_EntityStatus::eType>::cstring_values_[] = {
    "ON",
    "OFF"
};

template<>
const hmi_apis::Common_EntityStatus::eType
EnumConversionHelper<hmi_apis::Common_EntityStatus::eType>::enum_values_[] = {
    hmi_apis::Common_EntityStatus::ON,
    hmi_apis::Common_EntityStatus::OFF
};


template<>
const EnumConversionHelper<hmi_apis::Common_ModuleType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_ModuleType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_ModuleType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_ModuleType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_ModuleType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_ModuleType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_ModuleType::eType>::cstring_values_[] = {
    "CLIMATE",
    "RADIO",
    "SEAT",
    "AUDIO",
    "LIGHT",
    "HMI_SETTINGS"
};

template<>
const hmi_apis::Common_ModuleType::eType
EnumConversionHelper<hmi_apis::Common_ModuleType::eType>::enum_values_[] = {
    hmi_apis::Common_ModuleType::CLIMATE,
    hmi_apis::Common_ModuleType::RADIO,
    hmi_apis::Common_ModuleType::SEAT,
    hmi_apis::Common_ModuleType::AUDIO,
    hmi_apis::Common_ModuleType::LIGHT,
    hmi_apis::Common_ModuleType::HMI_SETTINGS
};


template<>
const EnumConversionHelper<hmi_apis::Common_MassageZone::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_MassageZone::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_MassageZone::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_MassageZone::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_MassageZone::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_MassageZone::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_MassageZone::eType>::cstring_values_[] = {
    "LUMBAR",
    "SEAT_CUSHION"
};

template<>
const hmi_apis::Common_MassageZone::eType
EnumConversionHelper<hmi_apis::Common_MassageZone::eType>::enum_values_[] = {
    hmi_apis::Common_MassageZone::LUMBAR,
    hmi_apis::Common_MassageZone::SEAT_CUSHION
};


template<>
const EnumConversionHelper<hmi_apis::Common_MassageMode::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_MassageMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_MassageMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_MassageMode::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_MassageMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_MassageMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_MassageMode::eType>::cstring_values_[] = {
    "OFF",
    "LOW",
    "HIGH"
};

template<>
const hmi_apis::Common_MassageMode::eType
EnumConversionHelper<hmi_apis::Common_MassageMode::eType>::enum_values_[] = {
    hmi_apis::Common_MassageMode::OFF,
    hmi_apis::Common_MassageMode::LOW,
    hmi_apis::Common_MassageMode::HIGH
};


template<>
const EnumConversionHelper<hmi_apis::Common_MassageCushion::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_MassageCushion::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_MassageCushion::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_MassageCushion::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_MassageCushion::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_MassageCushion::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_MassageCushion::eType>::cstring_values_[] = {
    "TOP_LUMBAR",
    "MIDDLE_LUMBAR",
    "BOTTOM_LUMBAR",
    "BACK_BOLSTERS",
    "SEAT_BOLSTERS"
};

template<>
const hmi_apis::Common_MassageCushion::eType
EnumConversionHelper<hmi_apis::Common_MassageCushion::eType>::enum_values_[] = {
    hmi_apis::Common_MassageCushion::TOP_LUMBAR,
    hmi_apis::Common_MassageCushion::MIDDLE_LUMBAR,
    hmi_apis::Common_MassageCushion::BOTTOM_LUMBAR,
    hmi_apis::Common_MassageCushion::BACK_BOLSTERS,
    hmi_apis::Common_MassageCushion::SEAT_BOLSTERS
};


template<>
const EnumConversionHelper<hmi_apis::Common_SeatMemoryActionType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_SeatMemoryActionType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_SeatMemoryActionType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_SeatMemoryActionType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_SeatMemoryActionType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_SeatMemoryActionType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_SeatMemoryActionType::eType>::cstring_values_[] = {
    "SAVE",
    "RESTORE",
    "NONE"
};

template<>
const hmi_apis::Common_SeatMemoryActionType::eType
EnumConversionHelper<hmi_apis::Common_SeatMemoryActionType::eType>::enum_values_[] = {
    hmi_apis::Common_SeatMemoryActionType::SAVE,
    hmi_apis::Common_SeatMemoryActionType::RESTORE,
    hmi_apis::Common_SeatMemoryActionType::NONE
};


template<>
const EnumConversionHelper<hmi_apis::Common_SupportedSeat::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_SupportedSeat::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_SupportedSeat::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_SupportedSeat::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_SupportedSeat::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_SupportedSeat::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_SupportedSeat::eType>::cstring_values_[] = {
    "DRIVER",
    "FRONT_PASSENGER"
};

template<>
const hmi_apis::Common_SupportedSeat::eType
EnumConversionHelper<hmi_apis::Common_SupportedSeat::eType>::enum_values_[] = {
    hmi_apis::Common_SupportedSeat::DRIVER,
    hmi_apis::Common_SupportedSeat::FRONT_PASSENGER
};


template<>
const EnumConversionHelper<hmi_apis::Common_RadioBand::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_RadioBand::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_RadioBand::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_RadioBand::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_RadioBand::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_RadioBand::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_RadioBand::eType>::cstring_values_[] = {
    "AM",
    "FM",
    "XM"
};

template<>
const hmi_apis::Common_RadioBand::eType
EnumConversionHelper<hmi_apis::Common_RadioBand::eType>::enum_values_[] = {
    hmi_apis::Common_RadioBand::AM,
    hmi_apis::Common_RadioBand::FM,
    hmi_apis::Common_RadioBand::XM
};


template<>
const EnumConversionHelper<hmi_apis::Common_RadioState::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_RadioState::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_RadioState::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_RadioState::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_RadioState::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_RadioState::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_RadioState::eType>::cstring_values_[] = {
    "ACQUIRING",
    "ACQUIRED",
    "MULTICAST",
    "NOT_FOUND"
};

template<>
const hmi_apis::Common_RadioState::eType
EnumConversionHelper<hmi_apis::Common_RadioState::eType>::enum_values_[] = {
    hmi_apis::Common_RadioState::ACQUIRING,
    hmi_apis::Common_RadioState::ACQUIRED,
    hmi_apis::Common_RadioState::MULTICAST,
    hmi_apis::Common_RadioState::NOT_FOUND
};


template<>
const EnumConversionHelper<hmi_apis::Common_DefrostZone::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_DefrostZone::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_DefrostZone::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_DefrostZone::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_DefrostZone::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_DefrostZone::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_DefrostZone::eType>::cstring_values_[] = {
    "FRONT",
    "REAR",
    "ALL",
    "NONE"
};

template<>
const hmi_apis::Common_DefrostZone::eType
EnumConversionHelper<hmi_apis::Common_DefrostZone::eType>::enum_values_[] = {
    hmi_apis::Common_DefrostZone::FRONT,
    hmi_apis::Common_DefrostZone::REAR,
    hmi_apis::Common_DefrostZone::ALL,
    hmi_apis::Common_DefrostZone::NONE
};


template<>
const EnumConversionHelper<hmi_apis::Common_VentilationMode::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_VentilationMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_VentilationMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_VentilationMode::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_VentilationMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_VentilationMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_VentilationMode::eType>::cstring_values_[] = {
    "UPPER",
    "LOWER",
    "BOTH",
    "NONE"
};

template<>
const hmi_apis::Common_VentilationMode::eType
EnumConversionHelper<hmi_apis::Common_VentilationMode::eType>::enum_values_[] = {
    hmi_apis::Common_VentilationMode::UPPER,
    hmi_apis::Common_VentilationMode::LOWER,
    hmi_apis::Common_VentilationMode::BOTH,
    hmi_apis::Common_VentilationMode::NONE
};


template<>
const EnumConversionHelper<hmi_apis::Common_TemperatureUnit::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_TemperatureUnit::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_TemperatureUnit::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_TemperatureUnit::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_TemperatureUnit::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_TemperatureUnit::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_TemperatureUnit::eType>::cstring_values_[] = {
    "FAHRENHEIT",
    "CELSIUS"
};

template<>
const hmi_apis::Common_TemperatureUnit::eType
EnumConversionHelper<hmi_apis::Common_TemperatureUnit::eType>::enum_values_[] = {
    hmi_apis::Common_TemperatureUnit::FAHRENHEIT,
    hmi_apis::Common_TemperatureUnit::CELSIUS
};


template<>
const EnumConversionHelper<hmi_apis::Common_LightName::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_LightName::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_LightName::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_LightName::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_LightName::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_LightName::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_LightName::eType>::cstring_values_[] = {
    "FRONT_LEFT_HIGH_BEAM",
    "FRONT_RIGHT_HIGH_BEAM",
    "FRONT_LEFT_LOW_BEAM",
    "FRONT_RIGHT_LOW_BEAM",
    "FRONT_LEFT_PARKING_LIGHT",
    "FRONT_RIGHT_PARKING_LIGHT",
    "FRONT_LEFT_FOG_LIGHT",
    "FRONT_RIGHT_FOG_LIGHT",
    "FRONT_LEFT_DAYTIME_RUNNING_LIGHT",
    "FRONT_RIGHT_DAYTIME_RUNNING_LIGHT",
    "FRONT_LEFT_TURN_LIGHT",
    "FRONT_RIGHT_TURN_LIGHT",
    "REAR_LEFT_FOG_LIGHT",
    "REAR_RIGHT_FOG_LIGHT",
    "REAR_LEFT_TAIL_LIGHT",
    "REAR_RIGHT_TAIL_LIGHT",
    "REAR_LEFT_BRAKE_LIGHT",
    "REAR_RIGHT_BRAKE_LIGHT",
    "REAR_LEFT_TURN_LIGHT",
    "REAR_RIGHT_TURN_LIGHT",
    "REAR_REGISTRATION_PLATE_LIGHT",
    "HIGH_BEAMS",
    "LOW_BEAMS",
    "FOG_LIGHTS",
    "RUNNING_LIGHTS",
    "PARKING_LIGHTS",
    "BRAKE_LIGHTS",
    "REAR_REVERSING_LIGHTS",
    "SIDE_MARKER_LIGHTS",
    "LEFT_TURN_LIGHTS",
    "RIGHT_TURN_LIGHTS",
    "HAZARD_LIGHTS",
    "REAR_CARGO_LIGHTS",
    "REAR_TRUCK_BED_LIGHTS",
    "REAR_TRAILER_LIGHTS",
    "LEFT_SPOT_LIGHTS",
    "RIGHT_SPOT_LIGHTS",
    "LEFT_PUDDLE_LIGHTS",
    "RIGHT_PUDDLE_LIGHTS",
    "AMBIENT_LIGHTS",
    "OVERHEAD_LIGHTS",
    "READING_LIGHTS",
    "TRUNK_LIGHTS",
    "EXTERIOR_FRONT_LIGHTS",
    "EXTERIOR_REAR_LIGHTS",
    "EXTERIOR_LEFT_LIGHTS",
    "EXTERIOR_RIGHT_LIGHTS",
    "EXTERIOR_ALL_LIGHTS"
};

template<>
const hmi_apis::Common_LightName::eType
EnumConversionHelper<hmi_apis::Common_LightName::eType>::enum_values_[] = {
    hmi_apis::Common_LightName::FRONT_LEFT_HIGH_BEAM,
    hmi_apis::Common_LightName::FRONT_RIGHT_HIGH_BEAM,
    hmi_apis::Common_LightName::FRONT_LEFT_LOW_BEAM,
    hmi_apis::Common_LightName::FRONT_RIGHT_LOW_BEAM,
    hmi_apis::Common_LightName::FRONT_LEFT_PARKING_LIGHT,
    hmi_apis::Common_LightName::FRONT_RIGHT_PARKING_LIGHT,
    hmi_apis::Common_LightName::FRONT_LEFT_FOG_LIGHT,
    hmi_apis::Common_LightName::FRONT_RIGHT_FOG_LIGHT,
    hmi_apis::Common_LightName::FRONT_LEFT_DAYTIME_RUNNING_LIGHT,
    hmi_apis::Common_LightName::FRONT_RIGHT_DAYTIME_RUNNING_LIGHT,
    hmi_apis::Common_LightName::FRONT_LEFT_TURN_LIGHT,
    hmi_apis::Common_LightName::FRONT_RIGHT_TURN_LIGHT,
    hmi_apis::Common_LightName::REAR_LEFT_FOG_LIGHT,
    hmi_apis::Common_LightName::REAR_RIGHT_FOG_LIGHT,
    hmi_apis::Common_LightName::REAR_LEFT_TAIL_LIGHT,
    hmi_apis::Common_LightName::REAR_RIGHT_TAIL_LIGHT,
    hmi_apis::Common_LightName::REAR_LEFT_BRAKE_LIGHT,
    hmi_apis::Common_LightName::REAR_RIGHT_BRAKE_LIGHT,
    hmi_apis::Common_LightName::REAR_LEFT_TURN_LIGHT,
    hmi_apis::Common_LightName::REAR_RIGHT_TURN_LIGHT,
    hmi_apis::Common_LightName::REAR_REGISTRATION_PLATE_LIGHT,
    hmi_apis::Common_LightName::HIGH_BEAMS,
    hmi_apis::Common_LightName::LOW_BEAMS,
    hmi_apis::Common_LightName::FOG_LIGHTS,
    hmi_apis::Common_LightName::RUNNING_LIGHTS,
    hmi_apis::Common_LightName::PARKING_LIGHTS,
    hmi_apis::Common_LightName::BRAKE_LIGHTS,
    hmi_apis::Common_LightName::REAR_REVERSING_LIGHTS,
    hmi_apis::Common_LightName::SIDE_MARKER_LIGHTS,
    hmi_apis::Common_LightName::LEFT_TURN_LIGHTS,
    hmi_apis::Common_LightName::RIGHT_TURN_LIGHTS,
    hmi_apis::Common_LightName::HAZARD_LIGHTS,
    hmi_apis::Common_LightName::REAR_CARGO_LIGHTS,
    hmi_apis::Common_LightName::REAR_TRUCK_BED_LIGHTS,
    hmi_apis::Common_LightName::REAR_TRAILER_LIGHTS,
    hmi_apis::Common_LightName::LEFT_SPOT_LIGHTS,
    hmi_apis::Common_LightName::RIGHT_SPOT_LIGHTS,
    hmi_apis::Common_LightName::LEFT_PUDDLE_LIGHTS,
    hmi_apis::Common_LightName::RIGHT_PUDDLE_LIGHTS,
    hmi_apis::Common_LightName::AMBIENT_LIGHTS,
    hmi_apis::Common_LightName::OVERHEAD_LIGHTS,
    hmi_apis::Common_LightName::READING_LIGHTS,
    hmi_apis::Common_LightName::TRUNK_LIGHTS,
    hmi_apis::Common_LightName::EXTERIOR_FRONT_LIGHTS,
    hmi_apis::Common_LightName::EXTERIOR_REAR_LIGHTS,
    hmi_apis::Common_LightName::EXTERIOR_LEFT_LIGHTS,
    hmi_apis::Common_LightName::EXTERIOR_RIGHT_LIGHTS,
    hmi_apis::Common_LightName::EXTERIOR_ALL_LIGHTS
};


template<>
const EnumConversionHelper<hmi_apis::Common_LightStatus::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_LightStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_LightStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_LightStatus::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_LightStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_LightStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_LightStatus::eType>::cstring_values_[] = {
    "ON",
    "OFF",
    "RAMP_UP",
    "RAMP_DOWN",
    "UNKNOWN",
    "INVALID"
};

template<>
const hmi_apis::Common_LightStatus::eType
EnumConversionHelper<hmi_apis::Common_LightStatus::eType>::enum_values_[] = {
    hmi_apis::Common_LightStatus::ON,
    hmi_apis::Common_LightStatus::OFF,
    hmi_apis::Common_LightStatus::RAMP_UP,
    hmi_apis::Common_LightStatus::RAMP_DOWN,
    hmi_apis::Common_LightStatus::UNKNOWN,
    hmi_apis::Common_LightStatus::INVALID
};


template<>
const EnumConversionHelper<hmi_apis::Common_DisplayMode::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_DisplayMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_DisplayMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_DisplayMode::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_DisplayMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_DisplayMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_DisplayMode::eType>::cstring_values_[] = {
    "DAY",
    "NIGHT",
    "AUTO"
};

template<>
const hmi_apis::Common_DisplayMode::eType
EnumConversionHelper<hmi_apis::Common_DisplayMode::eType>::enum_values_[] = {
    hmi_apis::Common_DisplayMode::DAY,
    hmi_apis::Common_DisplayMode::NIGHT,
    hmi_apis::Common_DisplayMode::AUTO
};


template<>
const EnumConversionHelper<hmi_apis::Common_DistanceUnit::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_DistanceUnit::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_DistanceUnit::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_DistanceUnit::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_DistanceUnit::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_DistanceUnit::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_DistanceUnit::eType>::cstring_values_[] = {
    "MILES",
    "KILOMETERS"
};

template<>
const hmi_apis::Common_DistanceUnit::eType
EnumConversionHelper<hmi_apis::Common_DistanceUnit::eType>::enum_values_[] = {
    hmi_apis::Common_DistanceUnit::MILES,
    hmi_apis::Common_DistanceUnit::KILOMETERS
};


template<>
const EnumConversionHelper<hmi_apis::Common_RCAccessMode::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_RCAccessMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_RCAccessMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_RCAccessMode::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_RCAccessMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_RCAccessMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_RCAccessMode::eType>::cstring_values_[] = {
    "AUTO_ALLOW",
    "AUTO_DENY",
    "ASK_DRIVER"
};

template<>
const hmi_apis::Common_RCAccessMode::eType
EnumConversionHelper<hmi_apis::Common_RCAccessMode::eType>::enum_values_[] = {
    hmi_apis::Common_RCAccessMode::AUTO_ALLOW,
    hmi_apis::Common_RCAccessMode::AUTO_DENY,
    hmi_apis::Common_RCAccessMode::ASK_DRIVER
};


template<>
const EnumConversionHelper<hmi_apis::Common_TurnSignal::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_TurnSignal::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_TurnSignal::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_TurnSignal::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_TurnSignal::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_TurnSignal::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_TurnSignal::eType>::cstring_values_[] = {
    "OFF",
    "LEFT",
    "RIGHT",
    "BOTH"
};

template<>
const hmi_apis::Common_TurnSignal::eType
EnumConversionHelper<hmi_apis::Common_TurnSignal::eType>::enum_values_[] = {
    hmi_apis::Common_TurnSignal::OFF,
    hmi_apis::Common_TurnSignal::LEFT,
    hmi_apis::Common_TurnSignal::RIGHT,
    hmi_apis::Common_TurnSignal::BOTH
};


template<>
const EnumConversionHelper<hmi_apis::Common_AppServiceType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_AppServiceType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_AppServiceType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_AppServiceType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_AppServiceType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_AppServiceType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_AppServiceType::eType>::cstring_values_[] = {
    "MEDIA",
    "WEATHER",
    "NAVIGATION"
};

template<>
const hmi_apis::Common_AppServiceType::eType
EnumConversionHelper<hmi_apis::Common_AppServiceType::eType>::enum_values_[] = {
    hmi_apis::Common_AppServiceType::MEDIA,
    hmi_apis::Common_AppServiceType::WEATHER,
    hmi_apis::Common_AppServiceType::NAVIGATION
};


template<>
const EnumConversionHelper<hmi_apis::Common_MediaType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_MediaType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_MediaType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_MediaType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_MediaType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_MediaType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_MediaType::eType>::cstring_values_[] = {
    "MUSIC",
    "PODCAST",
    "AUDIOBOOK",
    "OTHER"
};

template<>
const hmi_apis::Common_MediaType::eType
EnumConversionHelper<hmi_apis::Common_MediaType::eType>::enum_values_[] = {
    hmi_apis::Common_MediaType::MUSIC,
    hmi_apis::Common_MediaType::PODCAST,
    hmi_apis::Common_MediaType::AUDIOBOOK,
    hmi_apis::Common_MediaType::OTHER
};


template<>
const EnumConversionHelper<hmi_apis::Common_NavigationAction::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_NavigationAction::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_NavigationAction::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_NavigationAction::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_NavigationAction::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_NavigationAction::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_NavigationAction::eType>::cstring_values_[] = {
    "TURN",
    "EXIT",
    "STAY",
    "MERGE",
    "FERRY",
    "CAR_SHUTTLE_TRAIN",
    "WAYPOINT"
};

template<>
const hmi_apis::Common_NavigationAction::eType
EnumConversionHelper<hmi_apis::Common_NavigationAction::eType>::enum_values_[] = {
    hmi_apis::Common_NavigationAction::TURN,
    hmi_apis::Common_NavigationAction::EXIT,
    hmi_apis::Common_NavigationAction::STAY,
    hmi_apis::Common_NavigationAction::MERGE,
    hmi_apis::Common_NavigationAction::FERRY,
    hmi_apis::Common_NavigationAction::CAR_SHUTTLE_TRAIN,
    hmi_apis::Common_NavigationAction::WAYPOINT
};


template<>
const EnumConversionHelper<hmi_apis::Common_NavigationJunction::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_NavigationJunction::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_NavigationJunction::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_NavigationJunction::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_NavigationJunction::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_NavigationJunction::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_NavigationJunction::eType>::cstring_values_[] = {
    "REGULAR",
    "BIFURCATION",
    "MULTI_CARRIAGEWAY",
    "ROUNDABOUT",
    "TRAVERSABLE_ROUNDABOUT",
    "JUGHANDLE",
    "ALL_WAY_YIELD",
    "TURN_AROUND"
};

template<>
const hmi_apis::Common_NavigationJunction::eType
EnumConversionHelper<hmi_apis::Common_NavigationJunction::eType>::enum_values_[] = {
    hmi_apis::Common_NavigationJunction::REGULAR,
    hmi_apis::Common_NavigationJunction::BIFURCATION,
    hmi_apis::Common_NavigationJunction::MULTI_CARRIAGEWAY,
    hmi_apis::Common_NavigationJunction::ROUNDABOUT,
    hmi_apis::Common_NavigationJunction::TRAVERSABLE_ROUNDABOUT,
    hmi_apis::Common_NavigationJunction::JUGHANDLE,
    hmi_apis::Common_NavigationJunction::ALL_WAY_YIELD,
    hmi_apis::Common_NavigationJunction::TURN_AROUND
};


template<>
const EnumConversionHelper<hmi_apis::Common_Direction::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_Direction::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_Direction::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_Direction::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_Direction::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_Direction::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_Direction::eType>::cstring_values_[] = {
    "LEFT",
    "RIGHT"
};

template<>
const hmi_apis::Common_Direction::eType
EnumConversionHelper<hmi_apis::Common_Direction::eType>::enum_values_[] = {
    hmi_apis::Common_Direction::LEFT,
    hmi_apis::Common_Direction::RIGHT
};


template<>
const EnumConversionHelper<hmi_apis::Common_ServiceUpdateReason::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_ServiceUpdateReason::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_ServiceUpdateReason::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_ServiceUpdateReason::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_ServiceUpdateReason::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_ServiceUpdateReason::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_ServiceUpdateReason::eType>::cstring_values_[] = {
    "PUBLISHED",
    "REMOVED",
    "ACTIVATED",
    "DEACTIVATED",
    "MANIFEST_UPDATE"
};

template<>
const hmi_apis::Common_ServiceUpdateReason::eType
EnumConversionHelper<hmi_apis::Common_ServiceUpdateReason::eType>::enum_values_[] = {
    hmi_apis::Common_ServiceUpdateReason::PUBLISHED,
    hmi_apis::Common_ServiceUpdateReason::REMOVED,
    hmi_apis::Common_ServiceUpdateReason::ACTIVATED,
    hmi_apis::Common_ServiceUpdateReason::DEACTIVATED,
    hmi_apis::Common_ServiceUpdateReason::MANIFEST_UPDATE
};


template<>
const EnumConversionHelper<hmi_apis::Common_SystemCapabilityType::eType>::EnumToCStringMap
EnumConversionHelper<hmi_apis::Common_SystemCapabilityType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<hmi_apis::Common_SystemCapabilityType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<hmi_apis::Common_SystemCapabilityType::eType>::CStringToEnumMap
EnumConversionHelper<hmi_apis::Common_SystemCapabilityType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<hmi_apis::Common_SystemCapabilityType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<hmi_apis::Common_SystemCapabilityType::eType>::cstring_values_[] = {
    "NAVIGATION",
    "PHONE_CALL",
    "VIDEO_STREAMING",
    "REMOTE_CONTROL",
    "APP_SERVICES"
};

template<>
const hmi_apis::Common_SystemCapabilityType::eType
EnumConversionHelper<hmi_apis::Common_SystemCapabilityType::eType>::enum_values_[] = {
    hmi_apis::Common_SystemCapabilityType::NAVIGATION,
    hmi_apis::Common_SystemCapabilityType::PHONE_CALL,
    hmi_apis::Common_SystemCapabilityType::VIDEO_STREAMING,
    hmi_apis::Common_SystemCapabilityType::REMOTE_CONTROL,
    hmi_apis::Common_SystemCapabilityType::APP_SERVICES
};


} // ns_smart_objects
} // ns_smart_device_link

