/**
 * @file MOBILE_API.cc
 * @brief Generated class MOBILE_API source file.
 *
 * This class is a part of SmartObjects solution. It provides
 * factory functionallity which allows client to use SmartSchemas
 * in accordance with definitions from MOBILE_API.xml file
 */
// Copyright (c) 2013, Ford Motor Company
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
//
// Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following
// disclaimer in the documentation and/or other materials provided with the
// distribution.
//
// Neither the name of the Ford Motor Company nor the names of its contributors
// may be used to endorse or promote products derived from this software
// without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 'A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

#include <map>
#include <set>

#include "MOBILE_API_schema.h"
#include "smart_objects/always_true_schema_item.h"
#include "smart_objects/always_false_schema_item.h"
#include "smart_objects/array_schema_item.h"
#include "smart_objects/bool_schema_item.h"
#include "smart_objects/object_schema_item.h"
#include "smart_objects/string_schema_item.h"
#include "smart_objects/enum_schema_item.h"
#include "smart_objects/number_schema_item.h"
#include "smart_objects/schema_item_parameter.h"

using namespace ns_smart_device_link::ns_smart_objects;

mobile_apis::MOBILE_API::MOBILE_API()
 : ns_smart_device_link::ns_json_handler::CSmartFactory<FunctionID::eType, messageType::eType, StructIdentifiers::eType>() {
  TStructsSchemaItems struct_schema_items;
  InitStructSchemes(struct_schema_items);

  std::set<FunctionID::eType> function_id_items;
  function_id_items.insert(FunctionID::RESERVED);
  function_id_items.insert(FunctionID::RegisterAppInterfaceID);
  function_id_items.insert(FunctionID::UnregisterAppInterfaceID);
  function_id_items.insert(FunctionID::SetGlobalPropertiesID);
  function_id_items.insert(FunctionID::ResetGlobalPropertiesID);
  function_id_items.insert(FunctionID::AddCommandID);
  function_id_items.insert(FunctionID::DeleteCommandID);
  function_id_items.insert(FunctionID::AddSubMenuID);
  function_id_items.insert(FunctionID::DeleteSubMenuID);
  function_id_items.insert(FunctionID::CreateInteractionChoiceSetID);
  function_id_items.insert(FunctionID::PerformInteractionID);
  function_id_items.insert(FunctionID::DeleteInteractionChoiceSetID);
  function_id_items.insert(FunctionID::AlertID);
  function_id_items.insert(FunctionID::ShowID);
  function_id_items.insert(FunctionID::SpeakID);
  function_id_items.insert(FunctionID::SetMediaClockTimerID);
  function_id_items.insert(FunctionID::PerformAudioPassThruID);
  function_id_items.insert(FunctionID::EndAudioPassThruID);
  function_id_items.insert(FunctionID::SubscribeButtonID);
  function_id_items.insert(FunctionID::UnsubscribeButtonID);
  function_id_items.insert(FunctionID::SubscribeVehicleDataID);
  function_id_items.insert(FunctionID::UnsubscribeVehicleDataID);
  function_id_items.insert(FunctionID::GetVehicleDataID);
  function_id_items.insert(FunctionID::ReadDIDID);
  function_id_items.insert(FunctionID::GetDTCsID);
  function_id_items.insert(FunctionID::ScrollableMessageID);
  function_id_items.insert(FunctionID::SliderID);
  function_id_items.insert(FunctionID::ShowConstantTBTID);
  function_id_items.insert(FunctionID::AlertManeuverID);
  function_id_items.insert(FunctionID::UpdateTurnListID);
  function_id_items.insert(FunctionID::ChangeRegistrationID);
  function_id_items.insert(FunctionID::GenericResponseID);
  function_id_items.insert(FunctionID::PutFileID);
  function_id_items.insert(FunctionID::DeleteFileID);
  function_id_items.insert(FunctionID::ListFilesID);
  function_id_items.insert(FunctionID::SetAppIconID);
  function_id_items.insert(FunctionID::SetDisplayLayoutID);
  function_id_items.insert(FunctionID::DiagnosticMessageID);
  function_id_items.insert(FunctionID::SystemRequestID);
  function_id_items.insert(FunctionID::SendLocationID);
  function_id_items.insert(FunctionID::DialNumberID);
  function_id_items.insert(FunctionID::ButtonPressID);
  function_id_items.insert(FunctionID::GetInteriorVehicleDataID);
  function_id_items.insert(FunctionID::SetInteriorVehicleDataID);
  function_id_items.insert(FunctionID::GetWayPointsID);
  function_id_items.insert(FunctionID::SubscribeWayPointsID);
  function_id_items.insert(FunctionID::UnsubscribeWayPointsID);
  function_id_items.insert(FunctionID::GetSystemCapabilityID);
  function_id_items.insert(FunctionID::SendHapticDataID);
  function_id_items.insert(FunctionID::SetCloudAppPropertiesID);
  function_id_items.insert(FunctionID::GetCloudAppPropertiesID);
  function_id_items.insert(FunctionID::PublishAppServiceID);
  function_id_items.insert(FunctionID::GetAppServiceDataID);
  function_id_items.insert(FunctionID::GetFileID);
  function_id_items.insert(FunctionID::PerformAppServiceInteractionID);
  function_id_items.insert(FunctionID::CloseApplicationID);
  function_id_items.insert(FunctionID::OnHMIStatusID);
  function_id_items.insert(FunctionID::OnAppInterfaceUnregisteredID);
  function_id_items.insert(FunctionID::OnButtonEventID);
  function_id_items.insert(FunctionID::OnButtonPressID);
  function_id_items.insert(FunctionID::OnVehicleDataID);
  function_id_items.insert(FunctionID::OnCommandID);
  function_id_items.insert(FunctionID::OnTBTClientStateID);
  function_id_items.insert(FunctionID::OnDriverDistractionID);
  function_id_items.insert(FunctionID::OnPermissionsChangeID);
  function_id_items.insert(FunctionID::OnAudioPassThruID);
  function_id_items.insert(FunctionID::OnLanguageChangeID);
  function_id_items.insert(FunctionID::OnKeyboardInputID);
  function_id_items.insert(FunctionID::OnTouchEventID);
  function_id_items.insert(FunctionID::OnSystemRequestID);
  function_id_items.insert(FunctionID::OnHashChangeID);
  function_id_items.insert(FunctionID::OnInteriorVehicleDataID);
  function_id_items.insert(FunctionID::OnWayPointChangeID);
  function_id_items.insert(FunctionID::OnRCStatusID);
  function_id_items.insert(FunctionID::OnAppServiceDataID);
  function_id_items.insert(FunctionID::OnSystemCapabilityUpdatedID);
  function_id_items.insert(FunctionID::EncodedSyncPDataID);
  function_id_items.insert(FunctionID::SyncPDataID);
  function_id_items.insert(FunctionID::OnEncodedSyncPDataID);
  function_id_items.insert(FunctionID::OnSyncPDataID);

  std::set<messageType::eType> message_type_items;
  message_type_items.insert(messageType::request);
  message_type_items.insert(messageType::response);
  message_type_items.insert(messageType::notification);

  InitFunctionSchemes(struct_schema_items, function_id_items, message_type_items);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::ProvideObjectSchemaItemForStruct(
    const TStructsSchemaItems &struct_schema_items,
    const StructIdentifiers::eType struct_id) {
  const TStructsSchemaItems::const_iterator it = struct_schema_items.find(struct_id);
  if (it != struct_schema_items.end()) {
    return it->second;
  }

  return ns_smart_device_link::ns_smart_objects::CAlwaysFalseSchemaItem::create();
}

void mobile_apis::MOBILE_API::InitStructSchemes(
    TStructsSchemaItems &struct_schema_items) {
  std::shared_ptr<ISchemaItem> struct_schema_item_AudioPassThruCapabilities = InitStructSchemaItem_AudioPassThruCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::AudioPassThruCapabilities, struct_schema_item_AudioPassThruCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::AudioPassThruCapabilities, CSmartSchema(struct_schema_item_AudioPassThruCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_CloudAppProperties = InitStructSchemaItem_CloudAppProperties(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::CloudAppProperties, struct_schema_item_CloudAppProperties));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::CloudAppProperties, CSmartSchema(struct_schema_item_CloudAppProperties)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Image = InitStructSchemaItem_Image(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Image, struct_schema_item_Image));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Image, CSmartSchema(struct_schema_item_Image)));

  std::shared_ptr<ISchemaItem> struct_schema_item_SoftButton = InitStructSchemaItem_SoftButton(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::SoftButton, struct_schema_item_SoftButton));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::SoftButton, CSmartSchema(struct_schema_item_SoftButton)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Choice = InitStructSchemaItem_Choice(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Choice, struct_schema_item_Choice));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Choice, CSmartSchema(struct_schema_item_Choice)));

  std::shared_ptr<ISchemaItem> struct_schema_item_VrHelpItem = InitStructSchemaItem_VrHelpItem(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::VrHelpItem, struct_schema_item_VrHelpItem));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::VrHelpItem, CSmartSchema(struct_schema_item_VrHelpItem)));

  std::shared_ptr<ISchemaItem> struct_schema_item_SyncMsgVersion = InitStructSchemaItem_SyncMsgVersion(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::SyncMsgVersion, struct_schema_item_SyncMsgVersion));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::SyncMsgVersion, CSmartSchema(struct_schema_item_SyncMsgVersion)));

  std::shared_ptr<ISchemaItem> struct_schema_item_FuelRange = InitStructSchemaItem_FuelRange(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::FuelRange, struct_schema_item_FuelRange));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::FuelRange, CSmartSchema(struct_schema_item_FuelRange)));

  std::shared_ptr<ISchemaItem> struct_schema_item_SingleTireStatus = InitStructSchemaItem_SingleTireStatus(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::SingleTireStatus, struct_schema_item_SingleTireStatus));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::SingleTireStatus, CSmartSchema(struct_schema_item_SingleTireStatus)));

  std::shared_ptr<ISchemaItem> struct_schema_item_BeltStatus = InitStructSchemaItem_BeltStatus(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::BeltStatus, struct_schema_item_BeltStatus));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::BeltStatus, CSmartSchema(struct_schema_item_BeltStatus)));

  std::shared_ptr<ISchemaItem> struct_schema_item_BodyInformation = InitStructSchemaItem_BodyInformation(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::BodyInformation, struct_schema_item_BodyInformation));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::BodyInformation, CSmartSchema(struct_schema_item_BodyInformation)));

  std::shared_ptr<ISchemaItem> struct_schema_item_DeviceStatus = InitStructSchemaItem_DeviceStatus(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::DeviceStatus, struct_schema_item_DeviceStatus));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::DeviceStatus, CSmartSchema(struct_schema_item_DeviceStatus)));

  std::shared_ptr<ISchemaItem> struct_schema_item_HeadLampStatus = InitStructSchemaItem_HeadLampStatus(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::HeadLampStatus, struct_schema_item_HeadLampStatus));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::HeadLampStatus, CSmartSchema(struct_schema_item_HeadLampStatus)));

  std::shared_ptr<ISchemaItem> struct_schema_item_AppInfo = InitStructSchemaItem_AppInfo(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::AppInfo, struct_schema_item_AppInfo));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::AppInfo, CSmartSchema(struct_schema_item_AppInfo)));

  std::shared_ptr<ISchemaItem> struct_schema_item_ECallInfo = InitStructSchemaItem_ECallInfo(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::ECallInfo, struct_schema_item_ECallInfo));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::ECallInfo, CSmartSchema(struct_schema_item_ECallInfo)));

  std::shared_ptr<ISchemaItem> struct_schema_item_AirbagStatus = InitStructSchemaItem_AirbagStatus(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::AirbagStatus, struct_schema_item_AirbagStatus));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::AirbagStatus, CSmartSchema(struct_schema_item_AirbagStatus)));

  std::shared_ptr<ISchemaItem> struct_schema_item_EmergencyEvent = InitStructSchemaItem_EmergencyEvent(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::EmergencyEvent, struct_schema_item_EmergencyEvent));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::EmergencyEvent, CSmartSchema(struct_schema_item_EmergencyEvent)));

  std::shared_ptr<ISchemaItem> struct_schema_item_ClusterModeStatus = InitStructSchemaItem_ClusterModeStatus(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::ClusterModeStatus, struct_schema_item_ClusterModeStatus));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::ClusterModeStatus, CSmartSchema(struct_schema_item_ClusterModeStatus)));

  std::shared_ptr<ISchemaItem> struct_schema_item_MyKey = InitStructSchemaItem_MyKey(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::MyKey, struct_schema_item_MyKey));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::MyKey, CSmartSchema(struct_schema_item_MyKey)));

  std::shared_ptr<ISchemaItem> struct_schema_item_TireStatus = InitStructSchemaItem_TireStatus(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::TireStatus, struct_schema_item_TireStatus));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::TireStatus, CSmartSchema(struct_schema_item_TireStatus)));

  std::shared_ptr<ISchemaItem> struct_schema_item_GPSData = InitStructSchemaItem_GPSData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::GPSData, struct_schema_item_GPSData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::GPSData, CSmartSchema(struct_schema_item_GPSData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_VehicleDataResult = InitStructSchemaItem_VehicleDataResult(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::VehicleDataResult, struct_schema_item_VehicleDataResult));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::VehicleDataResult, CSmartSchema(struct_schema_item_VehicleDataResult)));

  std::shared_ptr<ISchemaItem> struct_schema_item_DIDResult = InitStructSchemaItem_DIDResult(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::DIDResult, struct_schema_item_DIDResult));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::DIDResult, CSmartSchema(struct_schema_item_DIDResult)));

  std::shared_ptr<ISchemaItem> struct_schema_item_StartTime = InitStructSchemaItem_StartTime(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::StartTime, struct_schema_item_StartTime));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::StartTime, CSmartSchema(struct_schema_item_StartTime)));

  std::shared_ptr<ISchemaItem> struct_schema_item_TextField = InitStructSchemaItem_TextField(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::TextField, struct_schema_item_TextField));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::TextField, CSmartSchema(struct_schema_item_TextField)));

  std::shared_ptr<ISchemaItem> struct_schema_item_ImageResolution = InitStructSchemaItem_ImageResolution(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::ImageResolution, struct_schema_item_ImageResolution));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::ImageResolution, CSmartSchema(struct_schema_item_ImageResolution)));

  std::shared_ptr<ISchemaItem> struct_schema_item_ImageField = InitStructSchemaItem_ImageField(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::ImageField, struct_schema_item_ImageField));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::ImageField, CSmartSchema(struct_schema_item_ImageField)));

  std::shared_ptr<ISchemaItem> struct_schema_item_TouchCoord = InitStructSchemaItem_TouchCoord(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::TouchCoord, struct_schema_item_TouchCoord));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::TouchCoord, CSmartSchema(struct_schema_item_TouchCoord)));

  std::shared_ptr<ISchemaItem> struct_schema_item_TouchEvent = InitStructSchemaItem_TouchEvent(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::TouchEvent, struct_schema_item_TouchEvent));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::TouchEvent, CSmartSchema(struct_schema_item_TouchEvent)));

  std::shared_ptr<ISchemaItem> struct_schema_item_TouchEventCapabilities = InitStructSchemaItem_TouchEventCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::TouchEventCapabilities, struct_schema_item_TouchEventCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::TouchEventCapabilities, CSmartSchema(struct_schema_item_TouchEventCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_ScreenParams = InitStructSchemaItem_ScreenParams(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::ScreenParams, struct_schema_item_ScreenParams));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::ScreenParams, CSmartSchema(struct_schema_item_ScreenParams)));

  std::shared_ptr<ISchemaItem> struct_schema_item_HMIPermissions = InitStructSchemaItem_HMIPermissions(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::HMIPermissions, struct_schema_item_HMIPermissions));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::HMIPermissions, CSmartSchema(struct_schema_item_HMIPermissions)));

  std::shared_ptr<ISchemaItem> struct_schema_item_ParameterPermissions = InitStructSchemaItem_ParameterPermissions(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::ParameterPermissions, struct_schema_item_ParameterPermissions));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::ParameterPermissions, CSmartSchema(struct_schema_item_ParameterPermissions)));

  std::shared_ptr<ISchemaItem> struct_schema_item_PermissionItem = InitStructSchemaItem_PermissionItem(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::PermissionItem, struct_schema_item_PermissionItem));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::PermissionItem, CSmartSchema(struct_schema_item_PermissionItem)));

  std::shared_ptr<ISchemaItem> struct_schema_item_DisplayCapabilities = InitStructSchemaItem_DisplayCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::DisplayCapabilities, struct_schema_item_DisplayCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::DisplayCapabilities, CSmartSchema(struct_schema_item_DisplayCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_ButtonCapabilities = InitStructSchemaItem_ButtonCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::ButtonCapabilities, struct_schema_item_ButtonCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::ButtonCapabilities, CSmartSchema(struct_schema_item_ButtonCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_SoftButtonCapabilities = InitStructSchemaItem_SoftButtonCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::SoftButtonCapabilities, struct_schema_item_SoftButtonCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::SoftButtonCapabilities, CSmartSchema(struct_schema_item_SoftButtonCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_PresetBankCapabilities = InitStructSchemaItem_PresetBankCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::PresetBankCapabilities, struct_schema_item_PresetBankCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::PresetBankCapabilities, CSmartSchema(struct_schema_item_PresetBankCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_HMICapabilities = InitStructSchemaItem_HMICapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::HMICapabilities, struct_schema_item_HMICapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::HMICapabilities, CSmartSchema(struct_schema_item_HMICapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_MenuParams = InitStructSchemaItem_MenuParams(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::MenuParams, struct_schema_item_MenuParams));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::MenuParams, CSmartSchema(struct_schema_item_MenuParams)));

  std::shared_ptr<ISchemaItem> struct_schema_item_TTSChunk = InitStructSchemaItem_TTSChunk(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::TTSChunk, struct_schema_item_TTSChunk));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::TTSChunk, CSmartSchema(struct_schema_item_TTSChunk)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Turn = InitStructSchemaItem_Turn(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Turn, struct_schema_item_Turn));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Turn, CSmartSchema(struct_schema_item_Turn)));

  std::shared_ptr<ISchemaItem> struct_schema_item_VehicleType = InitStructSchemaItem_VehicleType(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::VehicleType, struct_schema_item_VehicleType));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::VehicleType, CSmartSchema(struct_schema_item_VehicleType)));

  std::shared_ptr<ISchemaItem> struct_schema_item_KeyboardProperties = InitStructSchemaItem_KeyboardProperties(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::KeyboardProperties, struct_schema_item_KeyboardProperties));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::KeyboardProperties, CSmartSchema(struct_schema_item_KeyboardProperties)));

  std::shared_ptr<ISchemaItem> struct_schema_item_DeviceInfo = InitStructSchemaItem_DeviceInfo(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::DeviceInfo, struct_schema_item_DeviceInfo));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::DeviceInfo, CSmartSchema(struct_schema_item_DeviceInfo)));

  std::shared_ptr<ISchemaItem> struct_schema_item_DateTime = InitStructSchemaItem_DateTime(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::DateTime, struct_schema_item_DateTime));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::DateTime, CSmartSchema(struct_schema_item_DateTime)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Coordinate = InitStructSchemaItem_Coordinate(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Coordinate, struct_schema_item_Coordinate));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Coordinate, CSmartSchema(struct_schema_item_Coordinate)));

  std::shared_ptr<ISchemaItem> struct_schema_item_OASISAddress = InitStructSchemaItem_OASISAddress(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::OASISAddress, struct_schema_item_OASISAddress));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::OASISAddress, CSmartSchema(struct_schema_item_OASISAddress)));

  std::shared_ptr<ISchemaItem> struct_schema_item_LocationDetails = InitStructSchemaItem_LocationDetails(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::LocationDetails, struct_schema_item_LocationDetails));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::LocationDetails, CSmartSchema(struct_schema_item_LocationDetails)));

  std::shared_ptr<ISchemaItem> struct_schema_item_NavigationCapability = InitStructSchemaItem_NavigationCapability(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::NavigationCapability, struct_schema_item_NavigationCapability));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::NavigationCapability, CSmartSchema(struct_schema_item_NavigationCapability)));

  std::shared_ptr<ISchemaItem> struct_schema_item_PhoneCapability = InitStructSchemaItem_PhoneCapability(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::PhoneCapability, struct_schema_item_PhoneCapability));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::PhoneCapability, CSmartSchema(struct_schema_item_PhoneCapability)));

  std::shared_ptr<ISchemaItem> struct_schema_item_VideoStreamingFormat = InitStructSchemaItem_VideoStreamingFormat(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::VideoStreamingFormat, struct_schema_item_VideoStreamingFormat));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::VideoStreamingFormat, CSmartSchema(struct_schema_item_VideoStreamingFormat)));

  std::shared_ptr<ISchemaItem> struct_schema_item_VideoStreamingCapability = InitStructSchemaItem_VideoStreamingCapability(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::VideoStreamingCapability, struct_schema_item_VideoStreamingCapability));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::VideoStreamingCapability, CSmartSchema(struct_schema_item_VideoStreamingCapability)));

  std::shared_ptr<ISchemaItem> struct_schema_item_RGBColor = InitStructSchemaItem_RGBColor(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::RGBColor, struct_schema_item_RGBColor));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::RGBColor, CSmartSchema(struct_schema_item_RGBColor)));

  std::shared_ptr<ISchemaItem> struct_schema_item_TemplateColorScheme = InitStructSchemaItem_TemplateColorScheme(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::TemplateColorScheme, struct_schema_item_TemplateColorScheme));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::TemplateColorScheme, CSmartSchema(struct_schema_item_TemplateColorScheme)));

  std::shared_ptr<ISchemaItem> struct_schema_item_MassageModeData = InitStructSchemaItem_MassageModeData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::MassageModeData, struct_schema_item_MassageModeData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::MassageModeData, CSmartSchema(struct_schema_item_MassageModeData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_MassageCushionFirmness = InitStructSchemaItem_MassageCushionFirmness(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::MassageCushionFirmness, struct_schema_item_MassageCushionFirmness));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::MassageCushionFirmness, CSmartSchema(struct_schema_item_MassageCushionFirmness)));

  std::shared_ptr<ISchemaItem> struct_schema_item_SeatMemoryAction = InitStructSchemaItem_SeatMemoryAction(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::SeatMemoryAction, struct_schema_item_SeatMemoryAction));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::SeatMemoryAction, CSmartSchema(struct_schema_item_SeatMemoryAction)));

  std::shared_ptr<ISchemaItem> struct_schema_item_SeatControlData = InitStructSchemaItem_SeatControlData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::SeatControlData, struct_schema_item_SeatControlData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::SeatControlData, CSmartSchema(struct_schema_item_SeatControlData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_SeatControlCapabilities = InitStructSchemaItem_SeatControlCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::SeatControlCapabilities, struct_schema_item_SeatControlCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::SeatControlCapabilities, CSmartSchema(struct_schema_item_SeatControlCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Temperature = InitStructSchemaItem_Temperature(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Temperature, struct_schema_item_Temperature));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Temperature, CSmartSchema(struct_schema_item_Temperature)));

  std::shared_ptr<ISchemaItem> struct_schema_item_RdsData = InitStructSchemaItem_RdsData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::RdsData, struct_schema_item_RdsData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::RdsData, CSmartSchema(struct_schema_item_RdsData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_StationIDNumber = InitStructSchemaItem_StationIDNumber(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::StationIDNumber, struct_schema_item_StationIDNumber));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::StationIDNumber, CSmartSchema(struct_schema_item_StationIDNumber)));

  std::shared_ptr<ISchemaItem> struct_schema_item_SisData = InitStructSchemaItem_SisData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::SisData, struct_schema_item_SisData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::SisData, CSmartSchema(struct_schema_item_SisData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_RadioControlData = InitStructSchemaItem_RadioControlData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::RadioControlData, struct_schema_item_RadioControlData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::RadioControlData, CSmartSchema(struct_schema_item_RadioControlData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_ClimateControlData = InitStructSchemaItem_ClimateControlData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::ClimateControlData, struct_schema_item_ClimateControlData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::ClimateControlData, CSmartSchema(struct_schema_item_ClimateControlData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_RadioControlCapabilities = InitStructSchemaItem_RadioControlCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::RadioControlCapabilities, struct_schema_item_RadioControlCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::RadioControlCapabilities, CSmartSchema(struct_schema_item_RadioControlCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_ClimateControlCapabilities = InitStructSchemaItem_ClimateControlCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::ClimateControlCapabilities, struct_schema_item_ClimateControlCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::ClimateControlCapabilities, CSmartSchema(struct_schema_item_ClimateControlCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_EqualizerSettings = InitStructSchemaItem_EqualizerSettings(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::EqualizerSettings, struct_schema_item_EqualizerSettings));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::EqualizerSettings, CSmartSchema(struct_schema_item_EqualizerSettings)));

  std::shared_ptr<ISchemaItem> struct_schema_item_AudioControlData = InitStructSchemaItem_AudioControlData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::AudioControlData, struct_schema_item_AudioControlData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::AudioControlData, CSmartSchema(struct_schema_item_AudioControlData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_AudioControlCapabilities = InitStructSchemaItem_AudioControlCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::AudioControlCapabilities, struct_schema_item_AudioControlCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::AudioControlCapabilities, CSmartSchema(struct_schema_item_AudioControlCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_LightCapabilities = InitStructSchemaItem_LightCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::LightCapabilities, struct_schema_item_LightCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::LightCapabilities, CSmartSchema(struct_schema_item_LightCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_LightControlCapabilities = InitStructSchemaItem_LightControlCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::LightControlCapabilities, struct_schema_item_LightControlCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::LightControlCapabilities, CSmartSchema(struct_schema_item_LightControlCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_LightState = InitStructSchemaItem_LightState(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::LightState, struct_schema_item_LightState));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::LightState, CSmartSchema(struct_schema_item_LightState)));

  std::shared_ptr<ISchemaItem> struct_schema_item_LightControlData = InitStructSchemaItem_LightControlData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::LightControlData, struct_schema_item_LightControlData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::LightControlData, CSmartSchema(struct_schema_item_LightControlData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_HMISettingsControlData = InitStructSchemaItem_HMISettingsControlData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::HMISettingsControlData, struct_schema_item_HMISettingsControlData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::HMISettingsControlData, CSmartSchema(struct_schema_item_HMISettingsControlData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_HMISettingsControlCapabilities = InitStructSchemaItem_HMISettingsControlCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::HMISettingsControlCapabilities, struct_schema_item_HMISettingsControlCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::HMISettingsControlCapabilities, CSmartSchema(struct_schema_item_HMISettingsControlCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_ModuleData = InitStructSchemaItem_ModuleData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::ModuleData, struct_schema_item_ModuleData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::ModuleData, CSmartSchema(struct_schema_item_ModuleData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_RemoteControlCapabilities = InitStructSchemaItem_RemoteControlCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::RemoteControlCapabilities, struct_schema_item_RemoteControlCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::RemoteControlCapabilities, CSmartSchema(struct_schema_item_RemoteControlCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_MetadataTags = InitStructSchemaItem_MetadataTags(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::MetadataTags, struct_schema_item_MetadataTags));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::MetadataTags, CSmartSchema(struct_schema_item_MetadataTags)));

  std::shared_ptr<ISchemaItem> struct_schema_item_Rectangle = InitStructSchemaItem_Rectangle(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::Rectangle, struct_schema_item_Rectangle));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::Rectangle, CSmartSchema(struct_schema_item_Rectangle)));

  std::shared_ptr<ISchemaItem> struct_schema_item_HapticRect = InitStructSchemaItem_HapticRect(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::HapticRect, struct_schema_item_HapticRect));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::HapticRect, CSmartSchema(struct_schema_item_HapticRect)));

  std::shared_ptr<ISchemaItem> struct_schema_item_MediaServiceManifest = InitStructSchemaItem_MediaServiceManifest(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::MediaServiceManifest, struct_schema_item_MediaServiceManifest));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::MediaServiceManifest, CSmartSchema(struct_schema_item_MediaServiceManifest)));

  std::shared_ptr<ISchemaItem> struct_schema_item_MediaServiceData = InitStructSchemaItem_MediaServiceData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::MediaServiceData, struct_schema_item_MediaServiceData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::MediaServiceData, CSmartSchema(struct_schema_item_MediaServiceData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_WeatherServiceManifest = InitStructSchemaItem_WeatherServiceManifest(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::WeatherServiceManifest, struct_schema_item_WeatherServiceManifest));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::WeatherServiceManifest, CSmartSchema(struct_schema_item_WeatherServiceManifest)));

  std::shared_ptr<ISchemaItem> struct_schema_item_WeatherAlert = InitStructSchemaItem_WeatherAlert(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::WeatherAlert, struct_schema_item_WeatherAlert));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::WeatherAlert, CSmartSchema(struct_schema_item_WeatherAlert)));

  std::shared_ptr<ISchemaItem> struct_schema_item_WeatherData = InitStructSchemaItem_WeatherData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::WeatherData, struct_schema_item_WeatherData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::WeatherData, CSmartSchema(struct_schema_item_WeatherData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_WeatherServiceData = InitStructSchemaItem_WeatherServiceData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::WeatherServiceData, struct_schema_item_WeatherServiceData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::WeatherServiceData, CSmartSchema(struct_schema_item_WeatherServiceData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_NavigationServiceManifest = InitStructSchemaItem_NavigationServiceManifest(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::NavigationServiceManifest, struct_schema_item_NavigationServiceManifest));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::NavigationServiceManifest, CSmartSchema(struct_schema_item_NavigationServiceManifest)));

  std::shared_ptr<ISchemaItem> struct_schema_item_NavigationInstruction = InitStructSchemaItem_NavigationInstruction(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::NavigationInstruction, struct_schema_item_NavigationInstruction));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::NavigationInstruction, CSmartSchema(struct_schema_item_NavigationInstruction)));

  std::shared_ptr<ISchemaItem> struct_schema_item_NavigationServiceData = InitStructSchemaItem_NavigationServiceData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::NavigationServiceData, struct_schema_item_NavigationServiceData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::NavigationServiceData, CSmartSchema(struct_schema_item_NavigationServiceData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_AppServiceManifest = InitStructSchemaItem_AppServiceManifest(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::AppServiceManifest, struct_schema_item_AppServiceManifest));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::AppServiceManifest, CSmartSchema(struct_schema_item_AppServiceManifest)));

  std::shared_ptr<ISchemaItem> struct_schema_item_AppServiceRecord = InitStructSchemaItem_AppServiceRecord(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::AppServiceRecord, struct_schema_item_AppServiceRecord));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::AppServiceRecord, CSmartSchema(struct_schema_item_AppServiceRecord)));

  std::shared_ptr<ISchemaItem> struct_schema_item_AppServiceData = InitStructSchemaItem_AppServiceData(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::AppServiceData, struct_schema_item_AppServiceData));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::AppServiceData, CSmartSchema(struct_schema_item_AppServiceData)));

  std::shared_ptr<ISchemaItem> struct_schema_item_AppServiceCapability = InitStructSchemaItem_AppServiceCapability(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::AppServiceCapability, struct_schema_item_AppServiceCapability));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::AppServiceCapability, CSmartSchema(struct_schema_item_AppServiceCapability)));

  std::shared_ptr<ISchemaItem> struct_schema_item_AppServicesCapabilities = InitStructSchemaItem_AppServicesCapabilities(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::AppServicesCapabilities, struct_schema_item_AppServicesCapabilities));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::AppServicesCapabilities, CSmartSchema(struct_schema_item_AppServicesCapabilities)));

  std::shared_ptr<ISchemaItem> struct_schema_item_SystemCapability = InitStructSchemaItem_SystemCapability(struct_schema_items);
  struct_schema_items.insert(std::make_pair(StructIdentifiers::SystemCapability, struct_schema_item_SystemCapability));
  structs_schemes_.insert(std::make_pair(StructIdentifiers::SystemCapability, CSmartSchema(struct_schema_item_SystemCapability)));
}

void mobile_apis::MOBILE_API::InitFunctionSchemes(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::RegisterAppInterfaceID, messageType::request), InitFunction_RegisterAppInterfaceID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::RegisterAppInterfaceID, messageType::response), InitFunction_RegisterAppInterfaceID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UnregisterAppInterfaceID, messageType::request), InitFunction_UnregisterAppInterfaceID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UnregisterAppInterfaceID, messageType::response), InitFunction_UnregisterAppInterfaceID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SetGlobalPropertiesID, messageType::request), InitFunction_SetGlobalPropertiesID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SetGlobalPropertiesID, messageType::response), InitFunction_SetGlobalPropertiesID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::ResetGlobalPropertiesID, messageType::request), InitFunction_ResetGlobalPropertiesID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::ResetGlobalPropertiesID, messageType::response), InitFunction_ResetGlobalPropertiesID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AddCommandID, messageType::request), InitFunction_AddCommandID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AddCommandID, messageType::response), InitFunction_AddCommandID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::DeleteCommandID, messageType::request), InitFunction_DeleteCommandID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::DeleteCommandID, messageType::response), InitFunction_DeleteCommandID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AddSubMenuID, messageType::request), InitFunction_AddSubMenuID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AddSubMenuID, messageType::response), InitFunction_AddSubMenuID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::DeleteSubMenuID, messageType::request), InitFunction_DeleteSubMenuID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::DeleteSubMenuID, messageType::response), InitFunction_DeleteSubMenuID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::CreateInteractionChoiceSetID, messageType::request), InitFunction_CreateInteractionChoiceSetID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::CreateInteractionChoiceSetID, messageType::response), InitFunction_CreateInteractionChoiceSetID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::PerformInteractionID, messageType::request), InitFunction_PerformInteractionID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::PerformInteractionID, messageType::response), InitFunction_PerformInteractionID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::DeleteInteractionChoiceSetID, messageType::request), InitFunction_DeleteInteractionChoiceSetID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::DeleteInteractionChoiceSetID, messageType::response), InitFunction_DeleteInteractionChoiceSetID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AlertID, messageType::request), InitFunction_AlertID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AlertID, messageType::response), InitFunction_AlertID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::ShowID, messageType::request), InitFunction_ShowID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::ShowID, messageType::response), InitFunction_ShowID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SpeakID, messageType::request), InitFunction_SpeakID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SpeakID, messageType::response), InitFunction_SpeakID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SetMediaClockTimerID, messageType::request), InitFunction_SetMediaClockTimerID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SetMediaClockTimerID, messageType::response), InitFunction_SetMediaClockTimerID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::PerformAudioPassThruID, messageType::request), InitFunction_PerformAudioPassThruID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::PerformAudioPassThruID, messageType::response), InitFunction_PerformAudioPassThruID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::EndAudioPassThruID, messageType::request), InitFunction_EndAudioPassThruID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::EndAudioPassThruID, messageType::response), InitFunction_EndAudioPassThruID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SubscribeButtonID, messageType::request), InitFunction_SubscribeButtonID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SubscribeButtonID, messageType::response), InitFunction_SubscribeButtonID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UnsubscribeButtonID, messageType::request), InitFunction_UnsubscribeButtonID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UnsubscribeButtonID, messageType::response), InitFunction_UnsubscribeButtonID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SubscribeVehicleDataID, messageType::request), InitFunction_SubscribeVehicleDataID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SubscribeVehicleDataID, messageType::response), InitFunction_SubscribeVehicleDataID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UnsubscribeVehicleDataID, messageType::request), InitFunction_UnsubscribeVehicleDataID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UnsubscribeVehicleDataID, messageType::response), InitFunction_UnsubscribeVehicleDataID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::GetVehicleDataID, messageType::request), InitFunction_GetVehicleDataID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::GetVehicleDataID, messageType::response), InitFunction_GetVehicleDataID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::ReadDIDID, messageType::request), InitFunction_ReadDIDID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::ReadDIDID, messageType::response), InitFunction_ReadDIDID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::GetDTCsID, messageType::request), InitFunction_GetDTCsID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::GetDTCsID, messageType::response), InitFunction_GetDTCsID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::DiagnosticMessageID, messageType::request), InitFunction_DiagnosticMessageID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::DiagnosticMessageID, messageType::response), InitFunction_DiagnosticMessageID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::ScrollableMessageID, messageType::request), InitFunction_ScrollableMessageID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::ScrollableMessageID, messageType::response), InitFunction_ScrollableMessageID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SliderID, messageType::request), InitFunction_SliderID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SliderID, messageType::response), InitFunction_SliderID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::ShowConstantTBTID, messageType::request), InitFunction_ShowConstantTBTID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::ShowConstantTBTID, messageType::response), InitFunction_ShowConstantTBTID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AlertManeuverID, messageType::request), InitFunction_AlertManeuverID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::AlertManeuverID, messageType::response), InitFunction_AlertManeuverID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UpdateTurnListID, messageType::request), InitFunction_UpdateTurnListID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UpdateTurnListID, messageType::response), InitFunction_UpdateTurnListID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::ChangeRegistrationID, messageType::request), InitFunction_ChangeRegistrationID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::ChangeRegistrationID, messageType::response), InitFunction_ChangeRegistrationID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::GenericResponseID, messageType::response), InitFunction_GenericResponseID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::PutFileID, messageType::request), InitFunction_PutFileID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::PutFileID, messageType::response), InitFunction_PutFileID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::GetFileID, messageType::request), InitFunction_GetFileID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::GetFileID, messageType::response), InitFunction_GetFileID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::DeleteFileID, messageType::request), InitFunction_DeleteFileID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::DeleteFileID, messageType::response), InitFunction_DeleteFileID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::ListFilesID, messageType::request), InitFunction_ListFilesID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::ListFilesID, messageType::response), InitFunction_ListFilesID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SetAppIconID, messageType::request), InitFunction_SetAppIconID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SetAppIconID, messageType::response), InitFunction_SetAppIconID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SetDisplayLayoutID, messageType::request), InitFunction_SetDisplayLayoutID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SetDisplayLayoutID, messageType::response), InitFunction_SetDisplayLayoutID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SystemRequestID, messageType::request), InitFunction_SystemRequestID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SystemRequestID, messageType::response), InitFunction_SystemRequestID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SendLocationID, messageType::request), InitFunction_SendLocationID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SendLocationID, messageType::response), InitFunction_SendLocationID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::DialNumberID, messageType::request), InitFunction_DialNumberID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::DialNumberID, messageType::response), InitFunction_DialNumberID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::ButtonPressID, messageType::request), InitFunction_ButtonPressID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::ButtonPressID, messageType::response), InitFunction_ButtonPressID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::GetInteriorVehicleDataID, messageType::request), InitFunction_GetInteriorVehicleDataID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::GetInteriorVehicleDataID, messageType::response), InitFunction_GetInteriorVehicleDataID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SetInteriorVehicleDataID, messageType::request), InitFunction_SetInteriorVehicleDataID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SetInteriorVehicleDataID, messageType::response), InitFunction_SetInteriorVehicleDataID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SubscribeWayPointsID, messageType::request), InitFunction_SubscribeWayPointsID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SubscribeWayPointsID, messageType::response), InitFunction_SubscribeWayPointsID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::GetWayPointsID, messageType::request), InitFunction_GetWayPointsID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::GetWayPointsID, messageType::response), InitFunction_GetWayPointsID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UnsubscribeWayPointsID, messageType::request), InitFunction_UnsubscribeWayPointsID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::UnsubscribeWayPointsID, messageType::response), InitFunction_UnsubscribeWayPointsID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::GetSystemCapabilityID, messageType::request), InitFunction_GetSystemCapabilityID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::GetSystemCapabilityID, messageType::response), InitFunction_GetSystemCapabilityID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SendHapticDataID, messageType::request), InitFunction_SendHapticDataID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SendHapticDataID, messageType::response), InitFunction_SendHapticDataID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SetCloudAppPropertiesID, messageType::request), InitFunction_SetCloudAppPropertiesID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::SetCloudAppPropertiesID, messageType::response), InitFunction_SetCloudAppPropertiesID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::GetCloudAppPropertiesID, messageType::request), InitFunction_GetCloudAppPropertiesID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::GetCloudAppPropertiesID, messageType::response), InitFunction_GetCloudAppPropertiesID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::PublishAppServiceID, messageType::request), InitFunction_PublishAppServiceID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::PublishAppServiceID, messageType::response), InitFunction_PublishAppServiceID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::GetAppServiceDataID, messageType::request), InitFunction_GetAppServiceDataID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::GetAppServiceDataID, messageType::response), InitFunction_GetAppServiceDataID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::PerformAppServiceInteractionID, messageType::request), InitFunction_PerformAppServiceInteractionID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::PerformAppServiceInteractionID, messageType::response), InitFunction_PerformAppServiceInteractionID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::CloseApplicationID, messageType::request), InitFunction_CloseApplicationID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::CloseApplicationID, messageType::response), InitFunction_CloseApplicationID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnHMIStatusID, messageType::notification), InitFunction_OnHMIStatusID_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnAppInterfaceUnregisteredID, messageType::notification), InitFunction_OnAppInterfaceUnregisteredID_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnButtonEventID, messageType::notification), InitFunction_OnButtonEventID_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnButtonPressID, messageType::notification), InitFunction_OnButtonPressID_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnVehicleDataID, messageType::notification), InitFunction_OnVehicleDataID_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnCommandID, messageType::notification), InitFunction_OnCommandID_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnTBTClientStateID, messageType::notification), InitFunction_OnTBTClientStateID_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnDriverDistractionID, messageType::notification), InitFunction_OnDriverDistractionID_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnPermissionsChangeID, messageType::notification), InitFunction_OnPermissionsChangeID_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnAudioPassThruID, messageType::notification), InitFunction_OnAudioPassThruID_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnLanguageChangeID, messageType::notification), InitFunction_OnLanguageChangeID_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnKeyboardInputID, messageType::notification), InitFunction_OnKeyboardInputID_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnTouchEventID, messageType::notification), InitFunction_OnTouchEventID_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnSystemRequestID, messageType::notification), InitFunction_OnSystemRequestID_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnHashChangeID, messageType::notification), InitFunction_OnHashChangeID_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnWayPointChangeID, messageType::notification), InitFunction_OnWayPointChangeID_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnInteriorVehicleDataID, messageType::notification), InitFunction_OnInteriorVehicleDataID_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnRCStatusID, messageType::notification), InitFunction_OnRCStatusID_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnAppServiceDataID, messageType::notification), InitFunction_OnAppServiceDataID_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnSystemCapabilityUpdatedID, messageType::notification), InitFunction_OnSystemCapabilityUpdatedID_notification(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::EncodedSyncPDataID, messageType::request), InitFunction_EncodedSyncPDataID_request(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::EncodedSyncPDataID, messageType::response), InitFunction_EncodedSyncPDataID_response(struct_schema_items, function_id_items, message_type_items)));
  functions_schemes_.insert(std::make_pair(ns_smart_device_link::ns_json_handler::SmartSchemaKey<FunctionID::eType, messageType::eType>(FunctionID::OnEncodedSyncPDataID, messageType::notification), InitFunction_OnEncodedSyncPDataID_notification(struct_schema_items, function_id_items, message_type_items)));
}

//------------- Functions schemes initialization -------------

CSmartSchema mobile_apis::MOBILE_API::InitFunction_RegisterAppInterfaceID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Language::eType> Language_all_enum_values;
  Language_all_enum_values.insert(Language::EN_US);
  Language_all_enum_values.insert(Language::ES_MX);
  Language_all_enum_values.insert(Language::FR_CA);
  Language_all_enum_values.insert(Language::DE_DE);
  Language_all_enum_values.insert(Language::ES_ES);
  Language_all_enum_values.insert(Language::EN_GB);
  Language_all_enum_values.insert(Language::RU_RU);
  Language_all_enum_values.insert(Language::TR_TR);
  Language_all_enum_values.insert(Language::PL_PL);
  Language_all_enum_values.insert(Language::FR_FR);
  Language_all_enum_values.insert(Language::IT_IT);
  Language_all_enum_values.insert(Language::SV_SE);
  Language_all_enum_values.insert(Language::PT_PT);
  Language_all_enum_values.insert(Language::NL_NL);
  Language_all_enum_values.insert(Language::EN_AU);
  Language_all_enum_values.insert(Language::ZH_CN);
  Language_all_enum_values.insert(Language::ZH_TW);
  Language_all_enum_values.insert(Language::JA_JP);
  Language_all_enum_values.insert(Language::AR_SA);
  Language_all_enum_values.insert(Language::KO_KR);
  Language_all_enum_values.insert(Language::PT_BR);
  Language_all_enum_values.insert(Language::CS_CZ);
  Language_all_enum_values.insert(Language::DA_DK);
  Language_all_enum_values.insert(Language::NO_NO);
  Language_all_enum_values.insert(Language::NL_BE);
  Language_all_enum_values.insert(Language::EL_GR);
  Language_all_enum_values.insert(Language::HU_HU);
  Language_all_enum_values.insert(Language::FI_FI);
  Language_all_enum_values.insert(Language::SK_SK);
  Language_all_enum_values.insert(Language::EN_IN);
  Language_all_enum_values.insert(Language::TH_TH);
  Language_all_enum_values.insert(Language::EN_SA);
  Language_all_enum_values.insert(Language::HE_IL);
  Language_all_enum_values.insert(Language::RO_RO);
  Language_all_enum_values.insert(Language::UK_UA);
  Language_all_enum_values.insert(Language::ID_ID);
  Language_all_enum_values.insert(Language::VI_VN);
  Language_all_enum_values.insert(Language::MS_MY);
  Language_all_enum_values.insert(Language::HI_IN);

  std::map<Language::eType, std::vector<ElementSignature>> Language_element_signatures;
  Language_element_signatures[Language::DE_DE] = std::vector<ElementSignature>();
  Language_element_signatures[Language::ES_ES] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EN_GB] = std::vector<ElementSignature>();
  Language_element_signatures[Language::RU_RU] = std::vector<ElementSignature>();
  Language_element_signatures[Language::TR_TR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::PL_PL] = std::vector<ElementSignature>();
  Language_element_signatures[Language::FR_FR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::IT_IT] = std::vector<ElementSignature>();
  Language_element_signatures[Language::SV_SE] = std::vector<ElementSignature>();
  Language_element_signatures[Language::PT_PT] = std::vector<ElementSignature>();
  Language_element_signatures[Language::NL_NL] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EN_AU] = std::vector<ElementSignature>();
  Language_element_signatures[Language::ZH_CN] = std::vector<ElementSignature>();
  Language_element_signatures[Language::ZH_TW] = std::vector<ElementSignature>();
  Language_element_signatures[Language::JA_JP] = std::vector<ElementSignature>();
  Language_element_signatures[Language::AR_SA] = std::vector<ElementSignature>();
  Language_element_signatures[Language::KO_KR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::PT_BR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::CS_CZ] = std::vector<ElementSignature>();
  Language_element_signatures[Language::DA_DK] = std::vector<ElementSignature>();
  Language_element_signatures[Language::NO_NO] = std::vector<ElementSignature>();
  Language_element_signatures[Language::NL_BE] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EL_GR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::HU_HU] = std::vector<ElementSignature>();
  Language_element_signatures[Language::FI_FI] = std::vector<ElementSignature>();
  Language_element_signatures[Language::SK_SK] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EN_IN] = std::vector<ElementSignature>();
  Language_element_signatures[Language::TH_TH] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EN_SA] = std::vector<ElementSignature>();
  Language_element_signatures[Language::HE_IL] = std::vector<ElementSignature>();
  Language_element_signatures[Language::RO_RO] = std::vector<ElementSignature>();
  Language_element_signatures[Language::UK_UA] = std::vector<ElementSignature>();
  Language_element_signatures[Language::ID_ID] = std::vector<ElementSignature>();
  Language_element_signatures[Language::VI_VN] = std::vector<ElementSignature>();
  Language_element_signatures[Language::MS_MY] = std::vector<ElementSignature>();
  Language_element_signatures[Language::HI_IN] = std::vector<ElementSignature>();
  Language_element_signatures[Language::DE_DE].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::ES_ES].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::EN_GB].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::RU_RU].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::TR_TR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::PL_PL].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::FR_FR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::IT_IT].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::SV_SE].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::PT_PT].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::NL_NL].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::EN_AU].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::ZH_CN].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::ZH_TW].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::JA_JP].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::AR_SA].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::KO_KR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::PT_BR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::CS_CZ].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::DA_DK].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::NO_NO].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::NL_BE].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::EL_GR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::HU_HU].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::FI_FI].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::SK_SK].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::EN_IN].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::TH_TH].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::EN_SA].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::HE_IL].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::RO_RO].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::UK_UA].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::ID_ID].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::VI_VN].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::MS_MY].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::HI_IN].push_back(ElementSignature("4.5.0", "", false));

  std::set<AppHMIType::eType> AppHMIType_all_enum_values;
  AppHMIType_all_enum_values.insert(AppHMIType::DEFAULT);
  AppHMIType_all_enum_values.insert(AppHMIType::COMMUNICATION);
  AppHMIType_all_enum_values.insert(AppHMIType::MEDIA);
  AppHMIType_all_enum_values.insert(AppHMIType::MESSAGING);
  AppHMIType_all_enum_values.insert(AppHMIType::NAVIGATION);
  AppHMIType_all_enum_values.insert(AppHMIType::INFORMATION);
  AppHMIType_all_enum_values.insert(AppHMIType::SOCIAL);
  AppHMIType_all_enum_values.insert(AppHMIType::BACKGROUND_PROCESS);
  AppHMIType_all_enum_values.insert(AppHMIType::TESTING);
  AppHMIType_all_enum_values.insert(AppHMIType::SYSTEM);
  AppHMIType_all_enum_values.insert(AppHMIType::PROJECTION);
  AppHMIType_all_enum_values.insert(AppHMIType::REMOTE_CONTROL);

  std::map<AppHMIType::eType, std::vector<ElementSignature>> AppHMIType_element_signatures;
  AppHMIType_element_signatures[AppHMIType::PROJECTION] = std::vector<ElementSignature>();
  AppHMIType_element_signatures[AppHMIType::REMOTE_CONTROL] = std::vector<ElementSignature>();
  AppHMIType_element_signatures[AppHMIType::PROJECTION].push_back(ElementSignature("4.5.0", "", false));
  AppHMIType_element_signatures[AppHMIType::REMOTE_CONTROL].push_back(ElementSignature("4.5.0", "", false));

  // Function parameter syncMsgVersion.
  //
  // See SyncMsgVersion
  std::shared_ptr<ISchemaItem> syncMsgVersion_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SyncMsgVersion);

  // Function parameter appName.
  //
  // 
  //                 The mobile application name, e.g. "Ford Drive Green".
  //                 Needs to be unique over all applications.
  //                 May not be empty.
  //                 May not start with a new line character.
  //                 May not interfere with any name or synonym of previously registered applications and any predefined blacklist of words (global commands)
  //                 Needs to be unique over all applications. Applications with the same name will be rejected.
  //                 Only characters from char set [@TODO: Create char set (character/hex value) for each ACM and refer to] are supported.
  //             
  std::shared_ptr<ISchemaItem> appName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Function parameter ttsName.
  //
  // 
  //                 TTS string for VR recognition of the mobile application name, e.g. "Ford Drive Green".
  //                 Meant to overcome any failing on speech engine in properly pronouncing / understanding app name.
  //                 Needs to be unique over all applications.
  //                 May not be empty.
  //                 May not start with a new line character.
  //                 Only characters from char set [@TODO: Create char set (character/hex value) for each ACM and refer to] are supported.
  //             
  std::shared_ptr<ISchemaItem> ttsName_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TTSChunk), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter ngnMediaScreenAppName.
  //
  // 
  //                 Provides an abbreviated version of the app name (if needed), that will be displayed on the NGN media screen.
  //                 If not provided, the appName is used instead (and will be truncated if too long)
  //                 Only characters from char set [@TODO: Create char set (character/hex value) for each ACM and refer to] are supported.
  //             
  std::shared_ptr<ISchemaItem> ngnMediaScreenAppName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Function parameter vrSynonyms.
  //
  // 
  //                 Defines an additional voice recognition command.
  //                 May not interfere with any app name of previously registered applications and any predefined blacklist of words (global commands)
  //                 Only characters from char set [@TODO: Create char set (character/hex value) for each ACM and refer to] are supported.
  //             
  std::shared_ptr<ISchemaItem> vrSynonyms_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(40), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter isMediaApplication.
  //
  // 
  //                 Indicates if the application is a media or a non-media application.
  //                 Only media applications will be able to stream audio to the module that is audible outside of the BT media source.
  //             
  std::shared_ptr<ISchemaItem> isMediaApplication_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter languageDesired.
  //
  // 
  //                 See Language
  //                 Current app's expected VR+TTS language
  //                 If there is a mismatch with the module, the app will be able to change this registration with changeRegistration prior to app being brought into focus.
  //             
  std::shared_ptr<ISchemaItem> languageDesired_SchemaItem = TEnumSchemaItem<Language::eType>::createWithSignatures(Language_all_enum_values, Language_element_signatures, TSchemaItemParameter<Language::eType>());

  // Function parameter hmiDisplayLanguageDesired.
  //
  // 
  //                 See Language
  //                 Current app's expected display language
  //                 If there is a mismatch with the module, the app will be able to change this registration with changeRegistration prior to app being brought into focus.
  //             
  std::shared_ptr<ISchemaItem> hmiDisplayLanguageDesired_SchemaItem = TEnumSchemaItem<Language::eType>::createWithSignatures(Language_all_enum_values, Language_element_signatures, TSchemaItemParameter<Language::eType>());

  // Function parameter appHMIType.
  //
  // 
  //                 See AppHMIType
  //                 List of all applicable app HMI types stating which HMI classifications to be given to the app.
  //             
  std::shared_ptr<ISchemaItem> appHMIType_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<AppHMIType::eType>::createWithSignatures(AppHMIType_all_enum_values, AppHMIType_element_signatures, TSchemaItemParameter<AppHMIType::eType>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter hashID.
  //
  // 
  //                 ID used to uniquely identify current state of all app data that can persist through connection cycles (e.g. ignition cycles).
  //                 This registered data (commands, submenus, choice sets, etc.) can be reestablished without needing to explicitly reregister each piece.
  //                 If omitted, then the previous state of an app's commands, etc. will not be restored.
  //                 When sending hashID, all RegisterAppInterface parameters should still be provided (e.g. ttsName, etc.).
  //             
  std::shared_ptr<ISchemaItem> hashID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Function parameter deviceInfo.
  //
  // 
  //                 See DeviceInfo.
  //             
  std::shared_ptr<ISchemaItem> deviceInfo_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::DeviceInfo);

  // Function parameter appID.
  //
  // ID used to validate app with policy table entries
  std::shared_ptr<ISchemaItem> appID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Function parameter fullAppID.
  //
  // ID used to validate app with policy table entries
  std::shared_ptr<ISchemaItem> fullAppID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Function parameter appInfo.
  //
  // 
  //                 See AppInfo.
  //             
  std::shared_ptr<ISchemaItem> appInfo_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::AppInfo);

  // Function parameter dayColorScheme.
  std::shared_ptr<ISchemaItem> dayColorScheme_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TemplateColorScheme);

  // Function parameter nightColorScheme.
  std::shared_ptr<ISchemaItem> nightColorScheme_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TemplateColorScheme);CObjectSchemaItem::Members schema_members;

  schema_members["syncMsgVersion"] = CObjectSchemaItem::SMember(syncMsgVersion_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["appName"] = CObjectSchemaItem::SMember(appName_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["ttsName"] = CObjectSchemaItem::SMember(ttsName_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["ngnMediaScreenAppName"] = CObjectSchemaItem::SMember(ngnMediaScreenAppName_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["vrSynonyms"] = CObjectSchemaItem::SMember(vrSynonyms_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["isMediaApplication"] = CObjectSchemaItem::SMember(isMediaApplication_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["languageDesired"] = CObjectSchemaItem::SMember(languageDesired_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["hmiDisplayLanguageDesired"] = CObjectSchemaItem::SMember(hmiDisplayLanguageDesired_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["appHMIType"] = CObjectSchemaItem::SMember(appHMIType_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["hashID"] = CObjectSchemaItem::SMember(hashID_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["deviceInfo"] = CObjectSchemaItem::SMember(deviceInfo_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["fullAppID"] = CObjectSchemaItem::SMember(fullAppID_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["appInfo"] = CObjectSchemaItem::SMember(appInfo_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["dayColorScheme"] = CObjectSchemaItem::SMember(dayColorScheme_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["nightColorScheme"] = CObjectSchemaItem::SMember(nightColorScheme_SchemaItem, false, "5.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_RegisterAppInterfaceID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::WARNINGS);
  resultCode_allowed_enum_subset_values.insert(Result::WRONG_LANGUAGE);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::RESUME_FAILED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_REGISTERED_ALREADY);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::DUPLICATE_NAME);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_VERSION);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_APPLICATIONS);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  std::set<Language::eType> Language_all_enum_values;
  Language_all_enum_values.insert(Language::EN_US);
  Language_all_enum_values.insert(Language::ES_MX);
  Language_all_enum_values.insert(Language::FR_CA);
  Language_all_enum_values.insert(Language::DE_DE);
  Language_all_enum_values.insert(Language::ES_ES);
  Language_all_enum_values.insert(Language::EN_GB);
  Language_all_enum_values.insert(Language::RU_RU);
  Language_all_enum_values.insert(Language::TR_TR);
  Language_all_enum_values.insert(Language::PL_PL);
  Language_all_enum_values.insert(Language::FR_FR);
  Language_all_enum_values.insert(Language::IT_IT);
  Language_all_enum_values.insert(Language::SV_SE);
  Language_all_enum_values.insert(Language::PT_PT);
  Language_all_enum_values.insert(Language::NL_NL);
  Language_all_enum_values.insert(Language::EN_AU);
  Language_all_enum_values.insert(Language::ZH_CN);
  Language_all_enum_values.insert(Language::ZH_TW);
  Language_all_enum_values.insert(Language::JA_JP);
  Language_all_enum_values.insert(Language::AR_SA);
  Language_all_enum_values.insert(Language::KO_KR);
  Language_all_enum_values.insert(Language::PT_BR);
  Language_all_enum_values.insert(Language::CS_CZ);
  Language_all_enum_values.insert(Language::DA_DK);
  Language_all_enum_values.insert(Language::NO_NO);
  Language_all_enum_values.insert(Language::NL_BE);
  Language_all_enum_values.insert(Language::EL_GR);
  Language_all_enum_values.insert(Language::HU_HU);
  Language_all_enum_values.insert(Language::FI_FI);
  Language_all_enum_values.insert(Language::SK_SK);
  Language_all_enum_values.insert(Language::EN_IN);
  Language_all_enum_values.insert(Language::TH_TH);
  Language_all_enum_values.insert(Language::EN_SA);
  Language_all_enum_values.insert(Language::HE_IL);
  Language_all_enum_values.insert(Language::RO_RO);
  Language_all_enum_values.insert(Language::UK_UA);
  Language_all_enum_values.insert(Language::ID_ID);
  Language_all_enum_values.insert(Language::VI_VN);
  Language_all_enum_values.insert(Language::MS_MY);
  Language_all_enum_values.insert(Language::HI_IN);

  std::map<Language::eType, std::vector<ElementSignature>> Language_element_signatures;
  Language_element_signatures[Language::DE_DE] = std::vector<ElementSignature>();
  Language_element_signatures[Language::ES_ES] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EN_GB] = std::vector<ElementSignature>();
  Language_element_signatures[Language::RU_RU] = std::vector<ElementSignature>();
  Language_element_signatures[Language::TR_TR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::PL_PL] = std::vector<ElementSignature>();
  Language_element_signatures[Language::FR_FR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::IT_IT] = std::vector<ElementSignature>();
  Language_element_signatures[Language::SV_SE] = std::vector<ElementSignature>();
  Language_element_signatures[Language::PT_PT] = std::vector<ElementSignature>();
  Language_element_signatures[Language::NL_NL] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EN_AU] = std::vector<ElementSignature>();
  Language_element_signatures[Language::ZH_CN] = std::vector<ElementSignature>();
  Language_element_signatures[Language::ZH_TW] = std::vector<ElementSignature>();
  Language_element_signatures[Language::JA_JP] = std::vector<ElementSignature>();
  Language_element_signatures[Language::AR_SA] = std::vector<ElementSignature>();
  Language_element_signatures[Language::KO_KR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::PT_BR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::CS_CZ] = std::vector<ElementSignature>();
  Language_element_signatures[Language::DA_DK] = std::vector<ElementSignature>();
  Language_element_signatures[Language::NO_NO] = std::vector<ElementSignature>();
  Language_element_signatures[Language::NL_BE] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EL_GR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::HU_HU] = std::vector<ElementSignature>();
  Language_element_signatures[Language::FI_FI] = std::vector<ElementSignature>();
  Language_element_signatures[Language::SK_SK] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EN_IN] = std::vector<ElementSignature>();
  Language_element_signatures[Language::TH_TH] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EN_SA] = std::vector<ElementSignature>();
  Language_element_signatures[Language::HE_IL] = std::vector<ElementSignature>();
  Language_element_signatures[Language::RO_RO] = std::vector<ElementSignature>();
  Language_element_signatures[Language::UK_UA] = std::vector<ElementSignature>();
  Language_element_signatures[Language::ID_ID] = std::vector<ElementSignature>();
  Language_element_signatures[Language::VI_VN] = std::vector<ElementSignature>();
  Language_element_signatures[Language::MS_MY] = std::vector<ElementSignature>();
  Language_element_signatures[Language::HI_IN] = std::vector<ElementSignature>();
  Language_element_signatures[Language::DE_DE].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::ES_ES].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::EN_GB].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::RU_RU].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::TR_TR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::PL_PL].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::FR_FR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::IT_IT].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::SV_SE].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::PT_PT].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::NL_NL].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::EN_AU].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::ZH_CN].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::ZH_TW].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::JA_JP].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::AR_SA].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::KO_KR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::PT_BR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::CS_CZ].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::DA_DK].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::NO_NO].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::NL_BE].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::EL_GR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::HU_HU].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::FI_FI].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::SK_SK].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::EN_IN].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::TH_TH].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::EN_SA].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::HE_IL].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::RO_RO].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::UK_UA].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::ID_ID].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::VI_VN].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::MS_MY].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::HI_IN].push_back(ElementSignature("4.5.0", "", false));

  std::set<HmiZoneCapabilities::eType> HmiZoneCapabilities_all_enum_values;
  HmiZoneCapabilities_all_enum_values.insert(HmiZoneCapabilities::FRONT);
  HmiZoneCapabilities_all_enum_values.insert(HmiZoneCapabilities::BACK);

  std::set<SpeechCapabilities::eType> SpeechCapabilities_all_enum_values;
  SpeechCapabilities_all_enum_values.insert(SpeechCapabilities::SC_TEXT);
  SpeechCapabilities_all_enum_values.insert(SpeechCapabilities::SAPI_PHONEMES);
  SpeechCapabilities_all_enum_values.insert(SpeechCapabilities::LHPLUS_PHONEMES);
  SpeechCapabilities_all_enum_values.insert(SpeechCapabilities::PRE_RECORDED);
  SpeechCapabilities_all_enum_values.insert(SpeechCapabilities::SILENCE);
  SpeechCapabilities_all_enum_values.insert(SpeechCapabilities::FILE);

  std::map<SpeechCapabilities::eType, std::vector<ElementSignature>> SpeechCapabilities_element_signatures;
  SpeechCapabilities_element_signatures[SpeechCapabilities::FILE] = std::vector<ElementSignature>();
  SpeechCapabilities_element_signatures[SpeechCapabilities::FILE].push_back(ElementSignature("5.0.0", "", false));

  std::set<PrerecordedSpeech::eType> PrerecordedSpeech_all_enum_values;
  PrerecordedSpeech_all_enum_values.insert(PrerecordedSpeech::HELP_JINGLE);
  PrerecordedSpeech_all_enum_values.insert(PrerecordedSpeech::INITIAL_JINGLE);
  PrerecordedSpeech_all_enum_values.insert(PrerecordedSpeech::LISTEN_JINGLE);
  PrerecordedSpeech_all_enum_values.insert(PrerecordedSpeech::POSITIVE_JINGLE);
  PrerecordedSpeech_all_enum_values.insert(PrerecordedSpeech::NEGATIVE_JINGLE);

  std::set<VrCapabilities::eType> VrCapabilities_all_enum_values;
  VrCapabilities_all_enum_values.insert(VrCapabilities::VR_TEXT);

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter syncMsgVersion.
  //
  // See SyncMsgVersion
  std::shared_ptr<ISchemaItem> syncMsgVersion_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SyncMsgVersion);

  // Function parameter language.
  //
  // The currently active VR+TTS language on the module. See "Language" for options.
  std::shared_ptr<ISchemaItem> language_SchemaItem = TEnumSchemaItem<Language::eType>::createWithSignatures(Language_all_enum_values, Language_element_signatures, TSchemaItemParameter<Language::eType>());

  // Function parameter hmiDisplayLanguage.
  //
  // The currently active display language on the module. See "Language" for options.
  std::shared_ptr<ISchemaItem> hmiDisplayLanguage_SchemaItem = TEnumSchemaItem<Language::eType>::createWithSignatures(Language_all_enum_values, Language_element_signatures, TSchemaItemParameter<Language::eType>());

  // Function parameter displayCapabilities.
  //
  // See DisplayCapabilities
  std::shared_ptr<ISchemaItem> displayCapabilities_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::DisplayCapabilities);

  // Function parameter buttonCapabilities.
  //
  // See ButtonCapabilities
  std::shared_ptr<ISchemaItem> buttonCapabilities_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ButtonCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter softButtonCapabilities.
  //
  // If returned, the platform supports on-screen SoftButtons; see SoftButtonCapabilities.
  std::shared_ptr<ISchemaItem> softButtonCapabilities_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SoftButtonCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter presetBankCapabilities.
  //
  // If returned, the platform supports custom on-screen Presets; see PresetBankCapabilities.
  std::shared_ptr<ISchemaItem> presetBankCapabilities_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::PresetBankCapabilities);

  // Function parameter hmiZoneCapabilities.
  //
  // See HmiZoneCapabilities
  std::shared_ptr<ISchemaItem> hmiZoneCapabilities_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<HmiZoneCapabilities::eType>::create(HmiZoneCapabilities_all_enum_values, TSchemaItemParameter<HmiZoneCapabilities::eType>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter speechCapabilities.
  //
  // See SpeechCapabilities
  std::shared_ptr<ISchemaItem> speechCapabilities_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<SpeechCapabilities::eType>::createWithSignatures(SpeechCapabilities_all_enum_values, SpeechCapabilities_element_signatures, TSchemaItemParameter<SpeechCapabilities::eType>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter prerecordedSpeech.
  //
  // See PrerecordedSpeech
  std::shared_ptr<ISchemaItem> prerecordedSpeech_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<PrerecordedSpeech::eType>::create(PrerecordedSpeech_all_enum_values, TSchemaItemParameter<PrerecordedSpeech::eType>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter vrCapabilities.
  //
  // See VrCapabilities
  std::shared_ptr<ISchemaItem> vrCapabilities_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<VrCapabilities::eType>::create(VrCapabilities_all_enum_values, TSchemaItemParameter<VrCapabilities::eType>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter audioPassThruCapabilities.
  //
  // See AudioPassThruCapability
  std::shared_ptr<ISchemaItem> audioPassThruCapabilities_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::AudioPassThruCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter pcmStreamCapabilities.
  //
  // See AudioPassThruCapability
  std::shared_ptr<ISchemaItem> pcmStreamCapabilities_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::AudioPassThruCapabilities);

  // Function parameter vehicleType.
  //
  // Specifies the vehicle's type. See VehicleType.
  std::shared_ptr<ISchemaItem> vehicleType_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleType);

  // Function parameter supportedDiagModes.
  //
  // 
  //                 Specifies the white-list of supported diagnostic modes (0x00-0xFF) capable for DiagnosticMessage requests.
  //                 If a mode outside this list is requested, it will be rejected.
  //             
  std::shared_ptr<ISchemaItem> supportedDiagModes_SchemaItem = CArraySchemaItem::create(TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(255), TSchemaItemParameter<int32_t>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter hmiCapabilities.
  //
  // Specifies the HMIÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢s capabilities. See HMICapabilities.
  std::shared_ptr<ISchemaItem> hmiCapabilities_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::HMICapabilities);

  // Function parameter sdlVersion.
  //
  // The SmartDeviceLink version.
  std::shared_ptr<ISchemaItem> sdlVersion_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Function parameter systemSoftwareVersion.
  //
  // The software version of the system that implements the SmartDeviceLink core.
  std::shared_ptr<ISchemaItem> systemSoftwareVersion_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Function parameter iconResumed.
  //
  // 
  //                 Existence of apps icon at system. If true, apps icon
  //                 was resumed at system. If false, apps icon is not resumed at system
  //             
  std::shared_ptr<ISchemaItem> iconResumed_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["syncMsgVersion"] = CObjectSchemaItem::SMember(syncMsgVersion_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["language"] = CObjectSchemaItem::SMember(language_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["hmiDisplayLanguage"] = CObjectSchemaItem::SMember(hmiDisplayLanguage_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["displayCapabilities"] = CObjectSchemaItem::SMember(displayCapabilities_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["buttonCapabilities"] = CObjectSchemaItem::SMember(buttonCapabilities_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["softButtonCapabilities"] = CObjectSchemaItem::SMember(softButtonCapabilities_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["presetBankCapabilities"] = CObjectSchemaItem::SMember(presetBankCapabilities_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["hmiZoneCapabilities"] = CObjectSchemaItem::SMember(hmiZoneCapabilities_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["speechCapabilities"] = CObjectSchemaItem::SMember(speechCapabilities_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["prerecordedSpeech"] = CObjectSchemaItem::SMember(prerecordedSpeech_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["vrCapabilities"] = CObjectSchemaItem::SMember(vrCapabilities_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["audioPassThruCapabilities"] = CObjectSchemaItem::SMember(audioPassThruCapabilities_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["pcmStreamCapabilities"] = CObjectSchemaItem::SMember(pcmStreamCapabilities_SchemaItem, false, "4.1.0", "", false, false);
  schema_members["vehicleType"] = CObjectSchemaItem::SMember(vehicleType_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["supportedDiagModes"] = CObjectSchemaItem::SMember(supportedDiagModes_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["hmiCapabilities"] = CObjectSchemaItem::SMember(hmiCapabilities_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["sdlVersion"] = CObjectSchemaItem::SMember(sdlVersion_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["systemSoftwareVersion"] = CObjectSchemaItem::SMember(systemSoftwareVersion_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["iconResumed"] = CObjectSchemaItem::SMember(iconResumed_SchemaItem, false, "5.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_UnregisterAppInterfaceID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_UnregisterAppInterfaceID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SetGlobalPropertiesID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter helpPrompt.
  //
  // 
  //                 The help prompt.
  //                 An array of text chunks of type TTSChunk. See TTSChunk.
  //                 The array must have at least one item.
  //             
  std::shared_ptr<ISchemaItem> helpPrompt_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TTSChunk), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter timeoutPrompt.
  //
  // 
  //                 Help text for a wait timeout.
  //                 An array of text chunks of type TTSChunk. See TTSChunk.
  //                 The array must have at least one item.
  //             
  std::shared_ptr<ISchemaItem> timeoutPrompt_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TTSChunk), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter vrHelpTitle.
  //
  // 
  //                 VR Help Title text.
  //                 If omitted on supported displays, the default module help title shall be used.
  //                 If omitted and one or more vrHelp items are provided, the request will be rejected.
  //             
  std::shared_ptr<ISchemaItem> vrHelpTitle_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter vrHelp.
  //
  // 
  //                 VR Help Items.
  //                 If omitted on supported displays, the default SmartDeviceLink VR help / What Can I Say? screen shall be used.
  //                 If the list of VR Help Items contains nonsequential positions (e.g. [1,2,4]), the RPC shall be rejected.
  //                 If omitted and a vrHelpTitle is provided, the request will be rejected.
  //             
  std::shared_ptr<ISchemaItem> vrHelp_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VrHelpItem), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter menuTitle.
  //
  // Optional text to label an app menu button (for certain touchscreen platforms).
  std::shared_ptr<ISchemaItem> menuTitle_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter menuIcon.
  //
  // Optional icon to draw on an app menu button (for certain touchscreen platforms).
  std::shared_ptr<ISchemaItem> menuIcon_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Image);

  // Function parameter keyboardProperties.
  //
  // On-screen keyboard configuration (if available).
  std::shared_ptr<ISchemaItem> keyboardProperties_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::KeyboardProperties);CObjectSchemaItem::Members schema_members;

  schema_members["helpPrompt"] = CObjectSchemaItem::SMember(helpPrompt_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["timeoutPrompt"] = CObjectSchemaItem::SMember(timeoutPrompt_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["vrHelpTitle"] = CObjectSchemaItem::SMember(vrHelpTitle_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["vrHelp"] = CObjectSchemaItem::SMember(vrHelp_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["menuTitle"] = CObjectSchemaItem::SMember(menuTitle_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["menuIcon"] = CObjectSchemaItem::SMember(menuIcon_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["keyboardProperties"] = CObjectSchemaItem::SMember(keyboardProperties_SchemaItem, false, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SetGlobalPropertiesID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::WARNINGS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_ResetGlobalPropertiesID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<GlobalProperty::eType> GlobalProperty_all_enum_values;
  GlobalProperty_all_enum_values.insert(GlobalProperty::HELPPROMPT);
  GlobalProperty_all_enum_values.insert(GlobalProperty::TIMEOUTPROMPT);
  GlobalProperty_all_enum_values.insert(GlobalProperty::VRHELPTITLE);
  GlobalProperty_all_enum_values.insert(GlobalProperty::VRHELPITEMS);
  GlobalProperty_all_enum_values.insert(GlobalProperty::MENUNAME);
  GlobalProperty_all_enum_values.insert(GlobalProperty::MENUICON);
  GlobalProperty_all_enum_values.insert(GlobalProperty::KEYBOARDPROPERTIES);

  std::map<GlobalProperty::eType, std::vector<ElementSignature>> GlobalProperty_element_signatures;
  GlobalProperty_element_signatures[GlobalProperty::HELPPROMPT] = std::vector<ElementSignature>();
  GlobalProperty_element_signatures[GlobalProperty::TIMEOUTPROMPT] = std::vector<ElementSignature>();
  GlobalProperty_element_signatures[GlobalProperty::VRHELPTITLE] = std::vector<ElementSignature>();
  GlobalProperty_element_signatures[GlobalProperty::VRHELPITEMS] = std::vector<ElementSignature>();
  GlobalProperty_element_signatures[GlobalProperty::MENUNAME] = std::vector<ElementSignature>();
  GlobalProperty_element_signatures[GlobalProperty::MENUICON] = std::vector<ElementSignature>();
  GlobalProperty_element_signatures[GlobalProperty::KEYBOARDPROPERTIES] = std::vector<ElementSignature>();
  GlobalProperty_element_signatures[GlobalProperty::HELPPROMPT].push_back(ElementSignature("1.0.0", "", false));
  GlobalProperty_element_signatures[GlobalProperty::TIMEOUTPROMPT].push_back(ElementSignature("1.0.0", "", false));
  GlobalProperty_element_signatures[GlobalProperty::VRHELPTITLE].push_back(ElementSignature("2.0.0", "", false));
  GlobalProperty_element_signatures[GlobalProperty::VRHELPITEMS].push_back(ElementSignature("2.0.0", "", false));
  GlobalProperty_element_signatures[GlobalProperty::MENUNAME].push_back(ElementSignature("3.0.0", "", false));
  GlobalProperty_element_signatures[GlobalProperty::MENUICON].push_back(ElementSignature("3.0.0", "", false));
  GlobalProperty_element_signatures[GlobalProperty::KEYBOARDPROPERTIES].push_back(ElementSignature("3.0.0", "", false));

  // Function parameter properties.
  //
  // Contains the names of all global properties (like timeoutPrompt) that should be unset. Resetting means, that they have the same value as at start up (default)
  std::shared_ptr<ISchemaItem> properties_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<GlobalProperty::eType>::createWithSignatures(GlobalProperty_all_enum_values, GlobalProperty_element_signatures, TSchemaItemParameter<GlobalProperty::eType>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["properties"] = CObjectSchemaItem::SMember(properties_SchemaItem, true, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_ResetGlobalPropertiesID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_AddCommandID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter cmdID.
  //
  // unique ID of the command to add.
  std::shared_ptr<ISchemaItem> cmdID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter menuParams.
  //
  // Optional sub value containing menu parameters
  std::shared_ptr<ISchemaItem> menuParams_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::MenuParams);

  // Function parameter vrCommands.
  //
  // 
  //                 An array of strings to be used as VR synonyms for this command.
  //                 If this array is provided, it may not be empty.
  //             
  std::shared_ptr<ISchemaItem> vrCommands_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(99), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter cmdIcon.
  //
  // 
  //                 Image struct determining whether static or dynamic icon.
  //                 If omitted on supported displays, no (or the default if applicable) icon shall be displayed.
  //             
  std::shared_ptr<ISchemaItem> cmdIcon_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Image);CObjectSchemaItem::Members schema_members;

  schema_members["cmdID"] = CObjectSchemaItem::SMember(cmdID_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["menuParams"] = CObjectSchemaItem::SMember(menuParams_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["vrCommands"] = CObjectSchemaItem::SMember(vrCommands_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["cmdIcon"] = CObjectSchemaItem::SMember(cmdIcon_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_AddCommandID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_ID);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::WARNINGS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::DUPLICATE_NAME);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_DeleteCommandID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter cmdID.
  //
  // ID of the command(s) to delete.
  std::shared_ptr<ISchemaItem> cmdID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["cmdID"] = CObjectSchemaItem::SMember(cmdID_SchemaItem, true, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_DeleteCommandID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_ID);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::IN_USE);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_AddSubMenuID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter menuID.
  //
  // unique ID of the sub menu to add.
  std::shared_ptr<ISchemaItem> menuID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter position.
  //
  // 
  //                 Position within the items that are are at top level of the in application menu.
  //                 0 will insert at the front.
  //                 1 will insert at the second position.
  //                 If position is greater or equal than the number of items on top level, the sub menu will be appended to the end.
  //                 Position of any submenu will always be located before the return and exit options
  //                 If this param was omitted the entry will be added at the end.
  //             
  std::shared_ptr<ISchemaItem> position_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(1000), TSchemaItemParameter<int32_t>(1000));

  // Function parameter menuName.
  //
  // Text to show in the menu for this sub menu.
  std::shared_ptr<ISchemaItem> menuName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter menuIcon.
  //
  // The image field for AddSubMenu
  std::shared_ptr<ISchemaItem> menuIcon_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Image);CObjectSchemaItem::Members schema_members;

  schema_members["menuID"] = CObjectSchemaItem::SMember(menuID_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["position"] = CObjectSchemaItem::SMember(position_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["menuName"] = CObjectSchemaItem::SMember(menuName_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["menuIcon"] = CObjectSchemaItem::SMember(menuIcon_SchemaItem, false, "5.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_AddSubMenuID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_ID);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::DUPLICATE_NAME);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_DeleteSubMenuID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter menuID.
  //
  // The "menuID" of the submenu to delete. (See addSubMenu.menuID)
  std::shared_ptr<ISchemaItem> menuID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["menuID"] = CObjectSchemaItem::SMember(menuID_SchemaItem, true, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_DeleteSubMenuID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_ID);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::IN_USE);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_CreateInteractionChoiceSetID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter interactionChoiceSetID.
  //
  // Unique ID used for this interaction choice set.
  std::shared_ptr<ISchemaItem> interactionChoiceSetID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter choiceSet.
  std::shared_ptr<ISchemaItem> choiceSet_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Choice), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["interactionChoiceSetID"] = CObjectSchemaItem::SMember(interactionChoiceSetID_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["choiceSet"] = CObjectSchemaItem::SMember(choiceSet_SchemaItem, true, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_CreateInteractionChoiceSetID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_ID);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::DUPLICATE_NAME);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_PerformInteractionID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<InteractionMode::eType> InteractionMode_all_enum_values;
  InteractionMode_all_enum_values.insert(InteractionMode::MANUAL_ONLY);
  InteractionMode_all_enum_values.insert(InteractionMode::VR_ONLY);
  InteractionMode_all_enum_values.insert(InteractionMode::BOTH);

  std::set<LayoutMode::eType> LayoutMode_all_enum_values;
  LayoutMode_all_enum_values.insert(LayoutMode::ICON_ONLY);
  LayoutMode_all_enum_values.insert(LayoutMode::ICON_WITH_SEARCH);
  LayoutMode_all_enum_values.insert(LayoutMode::LIST_ONLY);
  LayoutMode_all_enum_values.insert(LayoutMode::LIST_WITH_SEARCH);
  LayoutMode_all_enum_values.insert(LayoutMode::KEYBOARD);

  // Function parameter initialText.
  //
  // 
  //                 Text to be displayed first.
  //             
  std::shared_ptr<ISchemaItem> initialText_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter initialPrompt.
  //
  // 
  //                 This is the initial prompt spoken to the user at the start of an interaction.
  //                 An array of text chunks of type TTSChunk. See TTSChunk.
  //                 The array must have at least one item.
  //             
  std::shared_ptr<ISchemaItem> initialPrompt_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TTSChunk), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter interactionMode.
  //
  // See InteractionMode.
  std::shared_ptr<ISchemaItem> interactionMode_SchemaItem = TEnumSchemaItem<InteractionMode::eType>::create(InteractionMode_all_enum_values, TSchemaItemParameter<InteractionMode::eType>());

  // Function parameter interactionChoiceSetIDList.
  //
  // List of interaction choice set IDs to use with an interaction.
  std::shared_ptr<ISchemaItem> interactionChoiceSetIDList_SchemaItem = CArraySchemaItem::create(TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));

  // Function parameter helpPrompt.
  //
  // 
  //                 Help text. This is the spoken string when a user speaks "help" when the interaction is occurring.
  //                 An array of text chunks of type TTSChunk. See TTSChunk.
  //                 The array must have at least one item.
  //             
  std::shared_ptr<ISchemaItem> helpPrompt_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TTSChunk), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter timeoutPrompt.
  //
  // 
  //                 Timeout text. This text is spoken when a VR interaction times out.
  //                 An array of text chunks of type TTSChunk. See TTSChunk.
  //                 The array must have at least one item.
  //             
  std::shared_ptr<ISchemaItem> timeoutPrompt_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TTSChunk), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter timeout.
  //
  // 
  //                 Timeout in milliseconds.
  //                 If omitted a standard value of 10000 milliseconds is used.
  //                 Applies only to the menu portion of the interaction. The VR timeout will be handled by the platform.
  //             
  std::shared_ptr<ISchemaItem> timeout_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(5000), TSchemaItemParameter<int32_t>(100000), TSchemaItemParameter<int32_t>(10000));

  // Function parameter vrHelp.
  //
  // 
  //                 Ability to send suggested VR Help Items to display on-screen during Perform Interaction.
  //                 If omitted on supported displays, the default generated list of suggested choices shall be displayed.
  //             
  std::shared_ptr<ISchemaItem> vrHelp_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VrHelpItem), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter interactionLayout.
  //
  // See LayoutMode.
  std::shared_ptr<ISchemaItem> interactionLayout_SchemaItem = TEnumSchemaItem<LayoutMode::eType>::create(LayoutMode_all_enum_values, TSchemaItemParameter<LayoutMode::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["initialText"] = CObjectSchemaItem::SMember(initialText_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["initialPrompt"] = CObjectSchemaItem::SMember(initialPrompt_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["interactionMode"] = CObjectSchemaItem::SMember(interactionMode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["interactionChoiceSetIDList"] = CObjectSchemaItem::SMember(interactionChoiceSetIDList_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["helpPrompt"] = CObjectSchemaItem::SMember(helpPrompt_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["timeoutPrompt"] = CObjectSchemaItem::SMember(timeoutPrompt_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["timeout"] = CObjectSchemaItem::SMember(timeout_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["vrHelp"] = CObjectSchemaItem::SMember(vrHelp_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["interactionLayout"] = CObjectSchemaItem::SMember(interactionLayout_SchemaItem, false, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_PerformInteractionID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_ID);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::WARNINGS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::TIMED_OUT);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::DUPLICATE_NAME);
  resultCode_allowed_enum_subset_values.insert(Result::ABORTED);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);

  std::set<TriggerSource::eType> TriggerSource_all_enum_values;
  TriggerSource_all_enum_values.insert(TriggerSource::TS_MENU);
  TriggerSource_all_enum_values.insert(TriggerSource::TS_VR);
  TriggerSource_all_enum_values.insert(TriggerSource::TS_KEYBOARD);

  std::map<TriggerSource::eType, std::vector<ElementSignature>> TriggerSource_element_signatures;
  TriggerSource_element_signatures[TriggerSource::TS_KEYBOARD] = std::vector<ElementSignature>();
  TriggerSource_element_signatures[TriggerSource::TS_KEYBOARD].push_back(ElementSignature("3.0.0", "", false));

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter choiceID.
  //
  // 
  //                 ID of the choice that was selected in response to PerformInteraction.
  //                 Only is valid if general result is "success:true".
  //             
  std::shared_ptr<ISchemaItem> choiceID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter manualTextEntry.
  //
  // 
  //                 Manually entered text selection, e.g. through keyboard
  //                 Can be returned in lieu of choiceID, depending on trigger source
  //             
  std::shared_ptr<ISchemaItem> manualTextEntry_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter triggerSource.
  //
  // 
  //                 See TriggerSource
  //                 Only is valid if resultCode is SUCCESS.
  //             
  std::shared_ptr<ISchemaItem> triggerSource_SchemaItem = TEnumSchemaItem<TriggerSource::eType>::createWithSignatures(TriggerSource_all_enum_values, TriggerSource_element_signatures, TSchemaItemParameter<TriggerSource::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["choiceID"] = CObjectSchemaItem::SMember(choiceID_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["manualTextEntry"] = CObjectSchemaItem::SMember(manualTextEntry_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["triggerSource"] = CObjectSchemaItem::SMember(triggerSource_SchemaItem, false, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_DeleteInteractionChoiceSetID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter interactionChoiceSetID.
  //
  // ID of the interaction choice set to delete.
  std::shared_ptr<ISchemaItem> interactionChoiceSetID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["interactionChoiceSetID"] = CObjectSchemaItem::SMember(interactionChoiceSetID_SchemaItem, true, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_DeleteInteractionChoiceSetID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_ID);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::IN_USE);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_AlertID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter alertText1.
  //
  // The first line of the alert text field
  std::shared_ptr<ISchemaItem> alertText1_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter alertText2.
  //
  // The second line of the alert text field
  std::shared_ptr<ISchemaItem> alertText2_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter alertText3.
  //
  // The optional third line of the alert text field
  std::shared_ptr<ISchemaItem> alertText3_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter ttsChunks.
  //
  // 
  //                 An array of text chunks of type TTSChunk. See TTSChunk.
  //                 The array must have at least one item.
  //             
  std::shared_ptr<ISchemaItem> ttsChunks_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TTSChunk), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter duration.
  //
  // 
  //                 Timeout in milliseconds.
  //                 Typical timeouts are 3-5 seconds.
  //                 If omitted, timeout is set to 5s.
  //             
  std::shared_ptr<ISchemaItem> duration_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(3000), TSchemaItemParameter<int32_t>(10000), TSchemaItemParameter<int32_t>(5000));

  // Function parameter playTone.
  //
  // 
  //                 Defines if tone should be played. Tone is played before TTS.
  //                 If omitted, no tone is played.
  //             
  std::shared_ptr<ISchemaItem> playTone_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter progressIndicator.
  //
  // 
  //                 If supported on the given platform, the alert GUI will include some sort of animation indicating that loading of a feature is progressing.  e.g. a spinning wheel or hourglass, etc.
  //             
  std::shared_ptr<ISchemaItem> progressIndicator_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter softButtons.
  //
  // 
  //                 App defined SoftButtons.
  //                 If omitted on supported displays, the displayed alert shall not have any SoftButtons.
  //             
  std::shared_ptr<ISchemaItem> softButtons_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SoftButton), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(4));CObjectSchemaItem::Members schema_members;

  schema_members["alertText1"] = CObjectSchemaItem::SMember(alertText1_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["alertText2"] = CObjectSchemaItem::SMember(alertText2_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["alertText3"] = CObjectSchemaItem::SMember(alertText3_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["ttsChunks"] = CObjectSchemaItem::SMember(ttsChunks_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["duration"] = CObjectSchemaItem::SMember(duration_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["playTone"] = CObjectSchemaItem::SMember(playTone_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["progressIndicator"] = CObjectSchemaItem::SMember(progressIndicator_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["softButtons"] = CObjectSchemaItem::SMember(softButtons_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_AlertID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::WARNINGS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::ABORTED);
  resultCode_allowed_enum_subset_values.insert(Result::USER_DISALLOWED);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter tryAgainTime.
  //
  // 
  //                 Amount of time (in seconds) that an app must wait before resending an alert.
  //                 If provided, another system event or overlay currently has a higher priority than this alert.
  //                 An app must not send an alert without waiting at least the amount of time dictated.
  //             
  std::shared_ptr<ISchemaItem> tryAgainTime_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["tryAgainTime"] = CObjectSchemaItem::SMember(tryAgainTime_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_ShowID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<TextAlignment::eType> TextAlignment_all_enum_values;
  TextAlignment_all_enum_values.insert(TextAlignment::LEFT_ALIGNED);
  TextAlignment_all_enum_values.insert(TextAlignment::RIGHT_ALIGNED);
  TextAlignment_all_enum_values.insert(TextAlignment::CENTERED);

  // Function parameter mainField1.
  //
  // 
  //                 The text that should be displayed in a single or upper display line.
  //                 If this text is not set, the text of mainField1 stays unchanged.
  //                 If this text is empty "", the field will be cleared.
  //             
  std::shared_ptr<ISchemaItem> mainField1_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter mainField2.
  //
  // 
  //                 The text that should be displayed on the second display line.
  //                 If this text is not set, the text of mainField2 stays unchanged.
  //                 If this text is empty "", the field will be cleared.
  //             
  std::shared_ptr<ISchemaItem> mainField2_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter mainField3.
  //
  // 
  //                 The text that should be displayed on the second "page" first display line.
  //                 If this text is not set, the text of mainField3 stays unchanged.
  //                 If this text is empty "", the field will be cleared.
  //             
  std::shared_ptr<ISchemaItem> mainField3_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter mainField4.
  //
  // 
  //                 The text that should be displayed on the second "page" second display line.
  //                 If this text is not set, the text of mainField4 stays unchanged.
  //                 If this text is empty "", the field will be cleared.
  //             
  std::shared_ptr<ISchemaItem> mainField4_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter alignment.
  //
  // 
  //                 Specifies how mainField1 and mainField2 texts should be aligned on display.
  //                 If omitted, texts will be centered.
  //             
  std::shared_ptr<ISchemaItem> alignment_SchemaItem = TEnumSchemaItem<TextAlignment::eType>::create(TextAlignment_all_enum_values, TSchemaItemParameter<TextAlignment::eType>());

  // Function parameter statusBar.
  //
  // Requires investigation regarding the nav display capabilities. Potentially lower lowerStatusBar, upperStatusBar, titleBar, etc.
  std::shared_ptr<ISchemaItem> statusBar_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter mediaClock.
  //
  // 
  //                 Text value for MediaClock field. Has to be properly formatted by Mobile App according to the module's capabilities.
  //                 If this text is set, any automatic media clock updates previously set with SetMediaClockTimer will be stopped.
  //             
  std::shared_ptr<ISchemaItem> mediaClock_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter mediaTrack.
  //
  // 
  //                 The text that should be displayed in the track field.
  //                 If this text is not set, the text of mediaTrack stays unchanged.
  //                 If this text is empty "", the field will be cleared.
  //             
  std::shared_ptr<ISchemaItem> mediaTrack_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter graphic.
  //
  // 
  //                 Image struct determining whether static or dynamic image to display in app.
  //                 If omitted on supported displays, the displayed graphic shall not change.
  //             
  std::shared_ptr<ISchemaItem> graphic_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Image);

  // Function parameter secondaryGraphic.
  //
  // 
  //                 Image struct determining whether static or dynamic secondary image to display in app.
  //                 If omitted on supported displays, the displayed secondary graphic shall not change.
  //             
  std::shared_ptr<ISchemaItem> secondaryGraphic_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Image);

  // Function parameter softButtons.
  //
  // 
  //                 App defined SoftButtons.
  //                 If omitted on supported displays, the currently displayed SoftButton values will not change.
  //             
  std::shared_ptr<ISchemaItem> softButtons_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SoftButton), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(8));

  // Function parameter customPresets.
  //
  // 
  //                 App labeled on-screen presets (i.e. on-screen media presets or dynamic search suggestions).
  //                 If omitted on supported displays, the presets will be shown as not defined.
  //             
  std::shared_ptr<ISchemaItem> customPresets_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(10));

  // Function parameter metadataTags.
  //
  // App defined metadata information. See MetadataStruct. Uses mainField1, mainField2, mainField3, mainField4.
  //                 If omitted on supported displays, the currently set metadata tags will not change.
  //                 If any text field contains no tags or the none tag, the metadata tag for that textfield should be removed.
  std::shared_ptr<ISchemaItem> metadataTags_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::MetadataTags);CObjectSchemaItem::Members schema_members;

  schema_members["mainField1"] = CObjectSchemaItem::SMember(mainField1_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["mainField2"] = CObjectSchemaItem::SMember(mainField2_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["mainField3"] = CObjectSchemaItem::SMember(mainField3_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["mainField4"] = CObjectSchemaItem::SMember(mainField4_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["alignment"] = CObjectSchemaItem::SMember(alignment_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["statusBar"] = CObjectSchemaItem::SMember(statusBar_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["mediaClock"] = CObjectSchemaItem::SMember(mediaClock_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["mediaTrack"] = CObjectSchemaItem::SMember(mediaTrack_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["graphic"] = CObjectSchemaItem::SMember(graphic_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["secondaryGraphic"] = CObjectSchemaItem::SMember(secondaryGraphic_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["softButtons"] = CObjectSchemaItem::SMember(softButtons_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["customPresets"] = CObjectSchemaItem::SMember(customPresets_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["metadataTags"] = CObjectSchemaItem::SMember(metadataTags_SchemaItem, false, "4.5.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_ShowID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::WARNINGS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::ABORTED);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SpeakID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter ttsChunks.
  //
  // 
  //                 An array of text chunks of type TTSChunk. See TTSChunk.
  //                 The array must have at least one item.
  //             
  std::shared_ptr<ISchemaItem> ttsChunks_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TTSChunk), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["ttsChunks"] = CObjectSchemaItem::SMember(ttsChunks_SchemaItem, true, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SpeakID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::WARNINGS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::ABORTED);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SetMediaClockTimerID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<UpdateMode::eType> UpdateMode_all_enum_values;
  UpdateMode_all_enum_values.insert(UpdateMode::COUNTUP);
  UpdateMode_all_enum_values.insert(UpdateMode::COUNTDOWN);
  UpdateMode_all_enum_values.insert(UpdateMode::PAUSE);
  UpdateMode_all_enum_values.insert(UpdateMode::RESUME);
  UpdateMode_all_enum_values.insert(UpdateMode::CLEAR);

  std::set<AudioStreamingIndicator::eType> AudioStreamingIndicator_all_enum_values;
  AudioStreamingIndicator_all_enum_values.insert(AudioStreamingIndicator::PLAY_PAUSE);
  AudioStreamingIndicator_all_enum_values.insert(AudioStreamingIndicator::PLAY);
  AudioStreamingIndicator_all_enum_values.insert(AudioStreamingIndicator::PAUSE);
  AudioStreamingIndicator_all_enum_values.insert(AudioStreamingIndicator::STOP);

  // Function parameter startTime.
  //
  // 
  //                 See StartTime.
  //                 startTime must be provided for "COUNTUP" and "COUNTDOWN".
  //                 startTime will be ignored for "RESUME", and "CLEAR"
  //                 startTime can be sent for "PAUSE", in which case it will update the paused startTime
  //             
  std::shared_ptr<ISchemaItem> startTime_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::StartTime);

  // Function parameter endTime.
  //
  // 
  //                 See StartTime.
  //                 endTime can be provided for "COUNTUP" and "COUNTDOWN"; to be used to calculate any visual progress bar (if not provided, this feature is ignored)
  //                 If endTime is greater then startTime for COUNTDOWN or less than startTime for COUNTUP, then the request will return an INVALID_DATA.
  //                 endTime will be ignored for "RESUME", and "CLEAR"
  //                 endTime can be sent for "PAUSE", in which case it will update the paused endTime
  //             
  std::shared_ptr<ISchemaItem> endTime_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::StartTime);

  // Function parameter updateMode.
  //
  // 
  //                 Enumeration to control the media clock.
  //                 In case of pause, resume, or clear, the start time value is ignored and shall be left out.  For resume, the time continues with the same value as it was when paused.
  //             
  std::shared_ptr<ISchemaItem> updateMode_SchemaItem = TEnumSchemaItem<UpdateMode::eType>::create(UpdateMode_all_enum_values, TSchemaItemParameter<UpdateMode::eType>());

  // Function parameter audioStreamingIndicator.
  //
  // 
  //                 Enumeration for the indicator icon on a play/pause button. see AudioStreamingIndicator.
  //             
  std::shared_ptr<ISchemaItem> audioStreamingIndicator_SchemaItem = TEnumSchemaItem<AudioStreamingIndicator::eType>::create(AudioStreamingIndicator_all_enum_values, TSchemaItemParameter<AudioStreamingIndicator::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["startTime"] = CObjectSchemaItem::SMember(startTime_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["endTime"] = CObjectSchemaItem::SMember(endTime_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["updateMode"] = CObjectSchemaItem::SMember(updateMode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["audioStreamingIndicator"] = CObjectSchemaItem::SMember(audioStreamingIndicator_SchemaItem, false, "5.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SetMediaClockTimerID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::IGNORED);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_PerformAudioPassThruID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<SamplingRate::eType> SamplingRate_all_enum_values;
  SamplingRate_all_enum_values.insert(SamplingRate::SamplingRate_8KHZ);
  SamplingRate_all_enum_values.insert(SamplingRate::SamplingRate_16KHZ);
  SamplingRate_all_enum_values.insert(SamplingRate::SamplingRate_22KHZ);
  SamplingRate_all_enum_values.insert(SamplingRate::SamplingRate_44KHZ);

  std::set<BitsPerSample::eType> BitsPerSample_all_enum_values;
  BitsPerSample_all_enum_values.insert(BitsPerSample::BitsPerSample_8_BIT);
  BitsPerSample_all_enum_values.insert(BitsPerSample::BitsPerSample_16_BIT);

  std::set<AudioType::eType> AudioType_all_enum_values;
  AudioType_all_enum_values.insert(AudioType::PCM);

  // Function parameter initialPrompt.
  //
  // 
  //                 The module will speak this prompt before opening the audio pass thru session.
  //                 An array of text chunks of type TTSChunk. See TTSChunk.
  //                 The array must have at least one item.
  //                 If omitted, then no initial prompt is spoken.
  //             
  std::shared_ptr<ISchemaItem> initialPrompt_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TTSChunk), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter audioPassThruDisplayText1.
  //
  // First line of text displayed during audio capture.
  std::shared_ptr<ISchemaItem> audioPassThruDisplayText1_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter audioPassThruDisplayText2.
  //
  // Second line of text displayed during audio capture.
  std::shared_ptr<ISchemaItem> audioPassThruDisplayText2_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter samplingRate.
  //
  //  This value shall be allowed at 8 kHz or 16 or 22 or 44 kHz.
  std::shared_ptr<ISchemaItem> samplingRate_SchemaItem = TEnumSchemaItem<SamplingRate::eType>::create(SamplingRate_all_enum_values, TSchemaItemParameter<SamplingRate::eType>());

  // Function parameter maxDuration.
  //
  // The maximum duration of audio recording in milliseconds. 
  std::shared_ptr<ISchemaItem> maxDuration_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(1000000), TSchemaItemParameter<int32_t>());

  // Function parameter bitsPerSample.
  //
  // Specifies the quality the audio is recorded. Currently 8 bit or 16 bit.
  std::shared_ptr<ISchemaItem> bitsPerSample_SchemaItem = TEnumSchemaItem<BitsPerSample::eType>::create(BitsPerSample_all_enum_values, TSchemaItemParameter<BitsPerSample::eType>());

  // Function parameter audioType.
  //
  // Specifies the type of audio data being requested.
  std::shared_ptr<ISchemaItem> audioType_SchemaItem = TEnumSchemaItem<AudioType::eType>::create(AudioType_all_enum_values, TSchemaItemParameter<AudioType::eType>());

  // Function parameter muteAudio.
  //
  // 
  //                 Defines if the current audio source should be muted during the APT session.  If not, the audio source will play without interruption.
  //                 If omitted, the value is set to true.
  //             
  std::shared_ptr<ISchemaItem> muteAudio_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["initialPrompt"] = CObjectSchemaItem::SMember(initialPrompt_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["audioPassThruDisplayText1"] = CObjectSchemaItem::SMember(audioPassThruDisplayText1_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["audioPassThruDisplayText2"] = CObjectSchemaItem::SMember(audioPassThruDisplayText2_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["samplingRate"] = CObjectSchemaItem::SMember(samplingRate_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["maxDuration"] = CObjectSchemaItem::SMember(maxDuration_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["bitsPerSample"] = CObjectSchemaItem::SMember(bitsPerSample_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["audioType"] = CObjectSchemaItem::SMember(audioType_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["muteAudio"] = CObjectSchemaItem::SMember(muteAudio_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_PerformAudioPassThruID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::RETRY);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::WARNINGS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::ABORTED);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_EndAudioPassThruID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_EndAudioPassThruID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SubscribeButtonID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<ButtonName::eType> ButtonName_all_enum_values;
  ButtonName_all_enum_values.insert(ButtonName::OK);
  ButtonName_all_enum_values.insert(ButtonName::PLAY_PAUSE);
  ButtonName_all_enum_values.insert(ButtonName::SEEKLEFT);
  ButtonName_all_enum_values.insert(ButtonName::SEEKRIGHT);
  ButtonName_all_enum_values.insert(ButtonName::TUNEUP);
  ButtonName_all_enum_values.insert(ButtonName::TUNEDOWN);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_0);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_1);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_2);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_3);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_4);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_5);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_6);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_7);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_8);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_9);
  ButtonName_all_enum_values.insert(ButtonName::CUSTOM_BUTTON);
  ButtonName_all_enum_values.insert(ButtonName::SEARCH);
  ButtonName_all_enum_values.insert(ButtonName::AC_MAX);
  ButtonName_all_enum_values.insert(ButtonName::AC);
  ButtonName_all_enum_values.insert(ButtonName::RECIRCULATE);
  ButtonName_all_enum_values.insert(ButtonName::FAN_UP);
  ButtonName_all_enum_values.insert(ButtonName::FAN_DOWN);
  ButtonName_all_enum_values.insert(ButtonName::TEMP_UP);
  ButtonName_all_enum_values.insert(ButtonName::TEMP_DOWN);
  ButtonName_all_enum_values.insert(ButtonName::DEFROST_MAX);
  ButtonName_all_enum_values.insert(ButtonName::DEFROST);
  ButtonName_all_enum_values.insert(ButtonName::DEFROST_REAR);
  ButtonName_all_enum_values.insert(ButtonName::UPPER_VENT);
  ButtonName_all_enum_values.insert(ButtonName::LOWER_VENT);
  ButtonName_all_enum_values.insert(ButtonName::VOLUME_UP);
  ButtonName_all_enum_values.insert(ButtonName::VOLUME_DOWN);
  ButtonName_all_enum_values.insert(ButtonName::EJECT);
  ButtonName_all_enum_values.insert(ButtonName::SOURCE);
  ButtonName_all_enum_values.insert(ButtonName::SHUFFLE);
  ButtonName_all_enum_values.insert(ButtonName::REPEAT);

  std::map<ButtonName::eType, std::vector<ElementSignature>> ButtonName_element_signatures;
  ButtonName_element_signatures[ButtonName::PLAY_PAUSE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::AC_MAX] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::AC] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::RECIRCULATE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::FAN_UP] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::FAN_DOWN] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::TEMP_UP] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::TEMP_DOWN] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::DEFROST_MAX] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::DEFROST] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::DEFROST_REAR] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::UPPER_VENT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::LOWER_VENT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::VOLUME_UP] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::VOLUME_DOWN] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::EJECT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::SOURCE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::SHUFFLE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::REPEAT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::PLAY_PAUSE].push_back(ElementSignature("5.0.0", "", false));
  ButtonName_element_signatures[ButtonName::AC_MAX].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::AC].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::RECIRCULATE].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::FAN_UP].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::FAN_DOWN].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::TEMP_UP].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::TEMP_DOWN].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::DEFROST_MAX].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::DEFROST].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::DEFROST_REAR].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::UPPER_VENT].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::LOWER_VENT].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::VOLUME_UP].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::VOLUME_DOWN].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::EJECT].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::SOURCE].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::SHUFFLE].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::REPEAT].push_back(ElementSignature("4.5.0", "", false));

  // Function parameter buttonName.
  //
  // Name of the button to subscribe.
  std::shared_ptr<ISchemaItem> buttonName_SchemaItem = TEnumSchemaItem<ButtonName::eType>::createWithSignatures(ButtonName_all_enum_values, ButtonName_element_signatures, TSchemaItemParameter<ButtonName::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["buttonName"] = CObjectSchemaItem::SMember(buttonName_SchemaItem, true, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SubscribeButtonID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::IGNORED);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_UnsubscribeButtonID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<ButtonName::eType> ButtonName_all_enum_values;
  ButtonName_all_enum_values.insert(ButtonName::OK);
  ButtonName_all_enum_values.insert(ButtonName::PLAY_PAUSE);
  ButtonName_all_enum_values.insert(ButtonName::SEEKLEFT);
  ButtonName_all_enum_values.insert(ButtonName::SEEKRIGHT);
  ButtonName_all_enum_values.insert(ButtonName::TUNEUP);
  ButtonName_all_enum_values.insert(ButtonName::TUNEDOWN);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_0);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_1);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_2);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_3);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_4);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_5);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_6);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_7);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_8);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_9);
  ButtonName_all_enum_values.insert(ButtonName::CUSTOM_BUTTON);
  ButtonName_all_enum_values.insert(ButtonName::SEARCH);
  ButtonName_all_enum_values.insert(ButtonName::AC_MAX);
  ButtonName_all_enum_values.insert(ButtonName::AC);
  ButtonName_all_enum_values.insert(ButtonName::RECIRCULATE);
  ButtonName_all_enum_values.insert(ButtonName::FAN_UP);
  ButtonName_all_enum_values.insert(ButtonName::FAN_DOWN);
  ButtonName_all_enum_values.insert(ButtonName::TEMP_UP);
  ButtonName_all_enum_values.insert(ButtonName::TEMP_DOWN);
  ButtonName_all_enum_values.insert(ButtonName::DEFROST_MAX);
  ButtonName_all_enum_values.insert(ButtonName::DEFROST);
  ButtonName_all_enum_values.insert(ButtonName::DEFROST_REAR);
  ButtonName_all_enum_values.insert(ButtonName::UPPER_VENT);
  ButtonName_all_enum_values.insert(ButtonName::LOWER_VENT);
  ButtonName_all_enum_values.insert(ButtonName::VOLUME_UP);
  ButtonName_all_enum_values.insert(ButtonName::VOLUME_DOWN);
  ButtonName_all_enum_values.insert(ButtonName::EJECT);
  ButtonName_all_enum_values.insert(ButtonName::SOURCE);
  ButtonName_all_enum_values.insert(ButtonName::SHUFFLE);
  ButtonName_all_enum_values.insert(ButtonName::REPEAT);

  std::map<ButtonName::eType, std::vector<ElementSignature>> ButtonName_element_signatures;
  ButtonName_element_signatures[ButtonName::PLAY_PAUSE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::AC_MAX] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::AC] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::RECIRCULATE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::FAN_UP] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::FAN_DOWN] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::TEMP_UP] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::TEMP_DOWN] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::DEFROST_MAX] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::DEFROST] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::DEFROST_REAR] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::UPPER_VENT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::LOWER_VENT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::VOLUME_UP] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::VOLUME_DOWN] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::EJECT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::SOURCE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::SHUFFLE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::REPEAT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::PLAY_PAUSE].push_back(ElementSignature("5.0.0", "", false));
  ButtonName_element_signatures[ButtonName::AC_MAX].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::AC].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::RECIRCULATE].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::FAN_UP].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::FAN_DOWN].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::TEMP_UP].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::TEMP_DOWN].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::DEFROST_MAX].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::DEFROST].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::DEFROST_REAR].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::UPPER_VENT].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::LOWER_VENT].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::VOLUME_UP].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::VOLUME_DOWN].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::EJECT].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::SOURCE].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::SHUFFLE].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::REPEAT].push_back(ElementSignature("4.5.0", "", false));

  // Function parameter buttonName.
  //
  // Name of the button to unsubscribe.
  std::shared_ptr<ISchemaItem> buttonName_SchemaItem = TEnumSchemaItem<ButtonName::eType>::createWithSignatures(ButtonName_all_enum_values, ButtonName_element_signatures, TSchemaItemParameter<ButtonName::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["buttonName"] = CObjectSchemaItem::SMember(buttonName_SchemaItem, true, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_UnsubscribeButtonID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::IGNORED);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SubscribeVehicleDataID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter gps.
  //
  // See GPSData
  std::shared_ptr<ISchemaItem> gps_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter speed.
  //
  // The vehicle speed in kilometers per hour
  std::shared_ptr<ISchemaItem> speed_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter rpm.
  //
  // The number of revolutions per minute of the engine
  std::shared_ptr<ISchemaItem> rpm_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter fuelLevel.
  //
  // The fuel level in the tank (percentage)
  std::shared_ptr<ISchemaItem> fuelLevel_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter fuelLevel_State.
  //
  // The fuel level state
  std::shared_ptr<ISchemaItem> fuelLevel_State_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter instantFuelConsumption.
  //
  // The instantaneous fuel consumption in microlitres
  std::shared_ptr<ISchemaItem> instantFuelConsumption_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter fuelRange.
  //
  // The estimate range in KM the vehicle can travel based on fuel level and consumption
  std::shared_ptr<ISchemaItem> fuelRange_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter externalTemperature.
  //
  // The external temperature in degrees celsius
  std::shared_ptr<ISchemaItem> externalTemperature_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter turnSignal.
  //
  // See TurnSignal
  std::shared_ptr<ISchemaItem> turnSignal_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter prndl.
  //
  // See PRNDL
  std::shared_ptr<ISchemaItem> prndl_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter tirePressure.
  //
  // See TireStatus
  std::shared_ptr<ISchemaItem> tirePressure_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter odometer.
  //
  // Odometer in km
  std::shared_ptr<ISchemaItem> odometer_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter beltStatus.
  //
  // The status of the seat belts
  std::shared_ptr<ISchemaItem> beltStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter bodyInformation.
  //
  // The body information including power modes
  std::shared_ptr<ISchemaItem> bodyInformation_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter deviceStatus.
  //
  // The device status including signal and battery strength
  std::shared_ptr<ISchemaItem> deviceStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter driverBraking.
  //
  // The status of the brake pedal
  std::shared_ptr<ISchemaItem> driverBraking_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter wiperStatus.
  //
  // The status of the wipers
  std::shared_ptr<ISchemaItem> wiperStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter headLampStatus.
  //
  // Status of the head lamps
  std::shared_ptr<ISchemaItem> headLampStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter engineTorque.
  //
  // Torque value for engine (in Nm) on non-diesel variants
  std::shared_ptr<ISchemaItem> engineTorque_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter accPedalPosition.
  //
  // Accelerator pedal position (percentage depressed)
  std::shared_ptr<ISchemaItem> accPedalPosition_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter steeringWheelAngle.
  //
  // Current angle of the steering wheel (in deg)
  std::shared_ptr<ISchemaItem> steeringWheelAngle_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter engineOilLife.
  //
  // The estimated percentage of remaining oil life of the engine.
  std::shared_ptr<ISchemaItem> engineOilLife_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter electronicParkBrakeStatus.
  //
  // The status of the park brake as provided by Electric Park Brake (EPB) system.
  std::shared_ptr<ISchemaItem> electronicParkBrakeStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter cloudAppVehicleID.
  //
  // Parameter used by cloud apps to identify a head unit
  std::shared_ptr<ISchemaItem> cloudAppVehicleID_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter eCallInfo.
  //
  // Emergency Call notification and confirmation data
  std::shared_ptr<ISchemaItem> eCallInfo_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter airbagStatus.
  //
  // The status of the air bags
  std::shared_ptr<ISchemaItem> airbagStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter emergencyEvent.
  //
  // Information related to an emergency event (and if it occurred)
  std::shared_ptr<ISchemaItem> emergencyEvent_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter clusterModeStatus.
  //
  // The status modes of the cluster
  std::shared_ptr<ISchemaItem> clusterModeStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter myKey.
  //
  // Information related to the MyKey feature
  std::shared_ptr<ISchemaItem> myKey_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["gps"] = CObjectSchemaItem::SMember(gps_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["speed"] = CObjectSchemaItem::SMember(speed_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["rpm"] = CObjectSchemaItem::SMember(rpm_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelLevel"] = CObjectSchemaItem::SMember(fuelLevel_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelLevel_State"] = CObjectSchemaItem::SMember(fuelLevel_State_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["instantFuelConsumption"] = CObjectSchemaItem::SMember(instantFuelConsumption_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelRange"] = CObjectSchemaItem::SMember(fuelRange_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["externalTemperature"] = CObjectSchemaItem::SMember(externalTemperature_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["turnSignal"] = CObjectSchemaItem::SMember(turnSignal_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["prndl"] = CObjectSchemaItem::SMember(prndl_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["tirePressure"] = CObjectSchemaItem::SMember(tirePressure_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["odometer"] = CObjectSchemaItem::SMember(odometer_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["beltStatus"] = CObjectSchemaItem::SMember(beltStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["bodyInformation"] = CObjectSchemaItem::SMember(bodyInformation_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["deviceStatus"] = CObjectSchemaItem::SMember(deviceStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["driverBraking"] = CObjectSchemaItem::SMember(driverBraking_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["wiperStatus"] = CObjectSchemaItem::SMember(wiperStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["headLampStatus"] = CObjectSchemaItem::SMember(headLampStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["engineTorque"] = CObjectSchemaItem::SMember(engineTorque_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["accPedalPosition"] = CObjectSchemaItem::SMember(accPedalPosition_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["steeringWheelAngle"] = CObjectSchemaItem::SMember(steeringWheelAngle_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["engineOilLife"] = CObjectSchemaItem::SMember(engineOilLife_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["electronicParkBrakeStatus"] = CObjectSchemaItem::SMember(electronicParkBrakeStatus_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["cloudAppVehicleID"] = CObjectSchemaItem::SMember(cloudAppVehicleID_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["eCallInfo"] = CObjectSchemaItem::SMember(eCallInfo_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["airbagStatus"] = CObjectSchemaItem::SMember(airbagStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["emergencyEvent"] = CObjectSchemaItem::SMember(emergencyEvent_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["clusterModeStatus"] = CObjectSchemaItem::SMember(clusterModeStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["myKey"] = CObjectSchemaItem::SMember(myKey_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SubscribeVehicleDataID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::IGNORED);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::WARNINGS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::USER_DISALLOWED);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter gps.
  //
  // See GPSData
  std::shared_ptr<ISchemaItem> gps_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter speed.
  //
  // The vehicle speed in kilometers per hour
  std::shared_ptr<ISchemaItem> speed_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter rpm.
  //
  // The number of revolutions per minute of the engine
  std::shared_ptr<ISchemaItem> rpm_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter fuelLevel.
  //
  // The fuel level in the tank (percentage)
  std::shared_ptr<ISchemaItem> fuelLevel_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter fuelLevel_State.
  //
  // The fuel level state
  std::shared_ptr<ISchemaItem> fuelLevel_State_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter instantFuelConsumption.
  //
  // The instantaneous fuel consumption in microlitres
  std::shared_ptr<ISchemaItem> instantFuelConsumption_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter fuelRange.
  //
  // The estimate range in KM the vehicle can travel based on fuel level and consumption
  std::shared_ptr<ISchemaItem> fuelRange_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter externalTemperature.
  //
  // The external temperature in degrees celsius.
  std::shared_ptr<ISchemaItem> externalTemperature_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter turnSignal.
  //
  // See TurnSignal
  std::shared_ptr<ISchemaItem> turnSignal_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter prndl.
  //
  // See PRNDL
  std::shared_ptr<ISchemaItem> prndl_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter tirePressure.
  //
  // See TireStatus
  std::shared_ptr<ISchemaItem> tirePressure_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter odometer.
  //
  // Odometer in km
  std::shared_ptr<ISchemaItem> odometer_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter beltStatus.
  //
  // The status of the seat belts
  std::shared_ptr<ISchemaItem> beltStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter bodyInformation.
  //
  // The body information including power modes
  std::shared_ptr<ISchemaItem> bodyInformation_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter deviceStatus.
  //
  // The device status including signal and battery strength
  std::shared_ptr<ISchemaItem> deviceStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter driverBraking.
  //
  // The status of the brake pedal
  std::shared_ptr<ISchemaItem> driverBraking_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter wiperStatus.
  //
  // The status of the wipers
  std::shared_ptr<ISchemaItem> wiperStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter headLampStatus.
  //
  // Status of the head lamps
  std::shared_ptr<ISchemaItem> headLampStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter engineTorque.
  //
  // Torque value for engine (in Nm) on non-diesel variants
  std::shared_ptr<ISchemaItem> engineTorque_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter accPedalPosition.
  //
  // Accelerator pedal position (percentage depressed)
  std::shared_ptr<ISchemaItem> accPedalPosition_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter steeringWheelAngle.
  //
  // Current angle of the steering wheel (in deg)
  std::shared_ptr<ISchemaItem> steeringWheelAngle_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter engineOilLife.
  //
  // The estimated percentage of remaining oil life of the engine.
  std::shared_ptr<ISchemaItem> engineOilLife_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter electronicParkBrakeStatus.
  //
  // The status of the park brake as provided by Electric Park Brake (EPB) system.
  std::shared_ptr<ISchemaItem> electronicParkBrakeStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter cloudAppVehicleID.
  //
  // Parameter used by cloud apps to identify a head unit
  std::shared_ptr<ISchemaItem> cloudAppVehicleID_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter eCallInfo.
  //
  // Emergency Call notification and confirmation data
  std::shared_ptr<ISchemaItem> eCallInfo_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter airbagStatus.
  //
  // The status of the air bags
  std::shared_ptr<ISchemaItem> airbagStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter emergencyEvent.
  //
  // Information related to an emergency event (and if it occurred)
  std::shared_ptr<ISchemaItem> emergencyEvent_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter clusterModes.
  //
  // The status modes of the cluster
  std::shared_ptr<ISchemaItem> clusterModes_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter myKey.
  //
  // Information related to the MyKey feature
  std::shared_ptr<ISchemaItem> myKey_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["gps"] = CObjectSchemaItem::SMember(gps_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["speed"] = CObjectSchemaItem::SMember(speed_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["rpm"] = CObjectSchemaItem::SMember(rpm_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelLevel"] = CObjectSchemaItem::SMember(fuelLevel_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelLevel_State"] = CObjectSchemaItem::SMember(fuelLevel_State_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["instantFuelConsumption"] = CObjectSchemaItem::SMember(instantFuelConsumption_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelRange"] = CObjectSchemaItem::SMember(fuelRange_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["externalTemperature"] = CObjectSchemaItem::SMember(externalTemperature_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["turnSignal"] = CObjectSchemaItem::SMember(turnSignal_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["prndl"] = CObjectSchemaItem::SMember(prndl_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["tirePressure"] = CObjectSchemaItem::SMember(tirePressure_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["odometer"] = CObjectSchemaItem::SMember(odometer_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["beltStatus"] = CObjectSchemaItem::SMember(beltStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["bodyInformation"] = CObjectSchemaItem::SMember(bodyInformation_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["deviceStatus"] = CObjectSchemaItem::SMember(deviceStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["driverBraking"] = CObjectSchemaItem::SMember(driverBraking_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["wiperStatus"] = CObjectSchemaItem::SMember(wiperStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["headLampStatus"] = CObjectSchemaItem::SMember(headLampStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["engineTorque"] = CObjectSchemaItem::SMember(engineTorque_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["accPedalPosition"] = CObjectSchemaItem::SMember(accPedalPosition_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["steeringWheelAngle"] = CObjectSchemaItem::SMember(steeringWheelAngle_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["engineOilLife"] = CObjectSchemaItem::SMember(engineOilLife_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["electronicParkBrakeStatus"] = CObjectSchemaItem::SMember(electronicParkBrakeStatus_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["cloudAppVehicleID"] = CObjectSchemaItem::SMember(cloudAppVehicleID_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["eCallInfo"] = CObjectSchemaItem::SMember(eCallInfo_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["airbagStatus"] = CObjectSchemaItem::SMember(airbagStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["emergencyEvent"] = CObjectSchemaItem::SMember(emergencyEvent_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["clusterModes"] = CObjectSchemaItem::SMember(clusterModes_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["myKey"] = CObjectSchemaItem::SMember(myKey_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_UnsubscribeVehicleDataID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter gps.
  //
  // See GPSData
  std::shared_ptr<ISchemaItem> gps_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter speed.
  //
  // The vehicle speed in kilometers per hour
  std::shared_ptr<ISchemaItem> speed_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter rpm.
  //
  // The number of revolutions per minute of the engine
  std::shared_ptr<ISchemaItem> rpm_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter fuelLevel.
  //
  // The fuel level in the tank (percentage)
  std::shared_ptr<ISchemaItem> fuelLevel_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter fuelLevel_State.
  //
  // The fuel level state
  std::shared_ptr<ISchemaItem> fuelLevel_State_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter instantFuelConsumption.
  //
  // The instantaneous fuel consumption in microlitres
  std::shared_ptr<ISchemaItem> instantFuelConsumption_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter fuelRange.
  //
  // The estimate range in KM the vehicle can travel based on fuel level and consumption
  std::shared_ptr<ISchemaItem> fuelRange_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter externalTemperature.
  //
  // The external temperature in degrees celsius.
  std::shared_ptr<ISchemaItem> externalTemperature_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter turnSignal.
  //
  // See TurnSignal
  std::shared_ptr<ISchemaItem> turnSignal_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter prndl.
  //
  // See PRNDL
  std::shared_ptr<ISchemaItem> prndl_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter tirePressure.
  //
  // See TireStatus
  std::shared_ptr<ISchemaItem> tirePressure_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter odometer.
  //
  // Odometer in km
  std::shared_ptr<ISchemaItem> odometer_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter beltStatus.
  //
  // The status of the seat belts
  std::shared_ptr<ISchemaItem> beltStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter bodyInformation.
  //
  // The body information including power modes
  std::shared_ptr<ISchemaItem> bodyInformation_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter deviceStatus.
  //
  // The device status including signal and battery strength
  std::shared_ptr<ISchemaItem> deviceStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter driverBraking.
  //
  // The status of the brake pedal
  std::shared_ptr<ISchemaItem> driverBraking_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter wiperStatus.
  //
  // The status of the wipers
  std::shared_ptr<ISchemaItem> wiperStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter headLampStatus.
  //
  // Status of the head lamps
  std::shared_ptr<ISchemaItem> headLampStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter engineTorque.
  //
  // Torque value for engine (in Nm) on non-diesel variants
  std::shared_ptr<ISchemaItem> engineTorque_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter accPedalPosition.
  //
  // Accelerator pedal position (percentage depressed)
  std::shared_ptr<ISchemaItem> accPedalPosition_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter steeringWheelAngle.
  //
  // Current angle of the steering wheel (in deg)
  std::shared_ptr<ISchemaItem> steeringWheelAngle_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter engineOilLife.
  //
  // The estimated percentage of remaining oil life of the engine.
  std::shared_ptr<ISchemaItem> engineOilLife_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter electronicParkBrakeStatus.
  //
  // The status of the park brake as provided by Electric Park Brake (EPB) system.
  std::shared_ptr<ISchemaItem> electronicParkBrakeStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter cloudAppVehicleID.
  //
  // Parameter used by cloud apps to identify a head unit
  std::shared_ptr<ISchemaItem> cloudAppVehicleID_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter eCallInfo.
  //
  // Emergency Call notification and confirmation data
  std::shared_ptr<ISchemaItem> eCallInfo_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter airbagStatus.
  //
  // The status of the air bags
  std::shared_ptr<ISchemaItem> airbagStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter emergencyEvent.
  //
  // Information related to an emergency event (and if it occurred)
  std::shared_ptr<ISchemaItem> emergencyEvent_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter clusterModeStatus.
  //
  // The status modes of the cluster
  std::shared_ptr<ISchemaItem> clusterModeStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter myKey.
  //
  // Information related to the MyKey feature
  std::shared_ptr<ISchemaItem> myKey_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["gps"] = CObjectSchemaItem::SMember(gps_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["speed"] = CObjectSchemaItem::SMember(speed_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["rpm"] = CObjectSchemaItem::SMember(rpm_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelLevel"] = CObjectSchemaItem::SMember(fuelLevel_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelLevel_State"] = CObjectSchemaItem::SMember(fuelLevel_State_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["instantFuelConsumption"] = CObjectSchemaItem::SMember(instantFuelConsumption_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelRange"] = CObjectSchemaItem::SMember(fuelRange_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["externalTemperature"] = CObjectSchemaItem::SMember(externalTemperature_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["turnSignal"] = CObjectSchemaItem::SMember(turnSignal_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["prndl"] = CObjectSchemaItem::SMember(prndl_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["tirePressure"] = CObjectSchemaItem::SMember(tirePressure_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["odometer"] = CObjectSchemaItem::SMember(odometer_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["beltStatus"] = CObjectSchemaItem::SMember(beltStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["bodyInformation"] = CObjectSchemaItem::SMember(bodyInformation_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["deviceStatus"] = CObjectSchemaItem::SMember(deviceStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["driverBraking"] = CObjectSchemaItem::SMember(driverBraking_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["wiperStatus"] = CObjectSchemaItem::SMember(wiperStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["headLampStatus"] = CObjectSchemaItem::SMember(headLampStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["engineTorque"] = CObjectSchemaItem::SMember(engineTorque_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["accPedalPosition"] = CObjectSchemaItem::SMember(accPedalPosition_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["steeringWheelAngle"] = CObjectSchemaItem::SMember(steeringWheelAngle_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["engineOilLife"] = CObjectSchemaItem::SMember(engineOilLife_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["electronicParkBrakeStatus"] = CObjectSchemaItem::SMember(electronicParkBrakeStatus_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["cloudAppVehicleID"] = CObjectSchemaItem::SMember(cloudAppVehicleID_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["eCallInfo"] = CObjectSchemaItem::SMember(eCallInfo_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["airbagStatus"] = CObjectSchemaItem::SMember(airbagStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["emergencyEvent"] = CObjectSchemaItem::SMember(emergencyEvent_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["clusterModeStatus"] = CObjectSchemaItem::SMember(clusterModeStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["myKey"] = CObjectSchemaItem::SMember(myKey_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_UnsubscribeVehicleDataID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::IGNORED);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::WARNINGS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter gps.
  //
  // See GPSData
  std::shared_ptr<ISchemaItem> gps_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter speed.
  //
  // The vehicle speed in kilometers per hour
  std::shared_ptr<ISchemaItem> speed_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter rpm.
  //
  // The number of revolutions per minute of the engine
  std::shared_ptr<ISchemaItem> rpm_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter fuelLevel.
  //
  // The fuel level in the tank (percentage)
  std::shared_ptr<ISchemaItem> fuelLevel_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter fuelLevel_State.
  //
  // The fuel level state
  std::shared_ptr<ISchemaItem> fuelLevel_State_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter instantFuelConsumption.
  //
  // The instantaneous fuel consumption in microlitres
  std::shared_ptr<ISchemaItem> instantFuelConsumption_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter fuelRange.
  //
  // The estimate range in KM the vehicle can travel based on fuel level and consumption
  std::shared_ptr<ISchemaItem> fuelRange_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter externalTemperature.
  //
  // The external temperature in degrees celsius
  std::shared_ptr<ISchemaItem> externalTemperature_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter turnSignal.
  //
  // See TurnSignal
  std::shared_ptr<ISchemaItem> turnSignal_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter prndl.
  //
  // See PRNDL
  std::shared_ptr<ISchemaItem> prndl_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter tirePressure.
  //
  // See TireStatus
  std::shared_ptr<ISchemaItem> tirePressure_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter odometer.
  //
  // Odometer in km
  std::shared_ptr<ISchemaItem> odometer_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter beltStatus.
  //
  // The status of the seat belts
  std::shared_ptr<ISchemaItem> beltStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter bodyInformation.
  //
  // The body information including power modes
  std::shared_ptr<ISchemaItem> bodyInformation_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter deviceStatus.
  //
  // The device status including signal and battery strength
  std::shared_ptr<ISchemaItem> deviceStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter driverBraking.
  //
  // The status of the brake pedal
  std::shared_ptr<ISchemaItem> driverBraking_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter wiperStatus.
  //
  // The status of the wipers
  std::shared_ptr<ISchemaItem> wiperStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter headLampStatus.
  //
  // Status of the head lamps
  std::shared_ptr<ISchemaItem> headLampStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter engineTorque.
  //
  // Torque value for engine (in Nm) on non-diesel variants
  std::shared_ptr<ISchemaItem> engineTorque_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter accPedalPosition.
  //
  // Accelerator pedal position (percentage depressed)
  std::shared_ptr<ISchemaItem> accPedalPosition_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter steeringWheelAngle.
  //
  // Current angle of the steering wheel (in deg)
  std::shared_ptr<ISchemaItem> steeringWheelAngle_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter engineOilLife.
  //
  // The estimated percentage of remaining oil life of the engine.
  std::shared_ptr<ISchemaItem> engineOilLife_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter electronicParkBrakeStatus.
  //
  // The status of the park brake as provided by Electric Park Brake (EPB) system.
  std::shared_ptr<ISchemaItem> electronicParkBrakeStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter cloudAppVehicleID.
  //
  // Parameter used by cloud apps to identify a head unit
  std::shared_ptr<ISchemaItem> cloudAppVehicleID_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter eCallInfo.
  //
  // Emergency Call notification and confirmation data
  std::shared_ptr<ISchemaItem> eCallInfo_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter airbagStatus.
  //
  // The status of the air bags
  std::shared_ptr<ISchemaItem> airbagStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter emergencyEvent.
  //
  // Information related to an emergency event (and if it occurred)
  std::shared_ptr<ISchemaItem> emergencyEvent_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter clusterModes.
  //
  // The status modes of the cluster
  std::shared_ptr<ISchemaItem> clusterModes_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);

  // Function parameter myKey.
  //
  // Information related to the MyKey feature
  std::shared_ptr<ISchemaItem> myKey_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VehicleDataResult);CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["gps"] = CObjectSchemaItem::SMember(gps_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["speed"] = CObjectSchemaItem::SMember(speed_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["rpm"] = CObjectSchemaItem::SMember(rpm_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelLevel"] = CObjectSchemaItem::SMember(fuelLevel_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelLevel_State"] = CObjectSchemaItem::SMember(fuelLevel_State_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["instantFuelConsumption"] = CObjectSchemaItem::SMember(instantFuelConsumption_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelRange"] = CObjectSchemaItem::SMember(fuelRange_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["externalTemperature"] = CObjectSchemaItem::SMember(externalTemperature_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["turnSignal"] = CObjectSchemaItem::SMember(turnSignal_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["prndl"] = CObjectSchemaItem::SMember(prndl_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["tirePressure"] = CObjectSchemaItem::SMember(tirePressure_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["odometer"] = CObjectSchemaItem::SMember(odometer_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["beltStatus"] = CObjectSchemaItem::SMember(beltStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["bodyInformation"] = CObjectSchemaItem::SMember(bodyInformation_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["deviceStatus"] = CObjectSchemaItem::SMember(deviceStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["driverBraking"] = CObjectSchemaItem::SMember(driverBraking_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["wiperStatus"] = CObjectSchemaItem::SMember(wiperStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["headLampStatus"] = CObjectSchemaItem::SMember(headLampStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["engineTorque"] = CObjectSchemaItem::SMember(engineTorque_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["accPedalPosition"] = CObjectSchemaItem::SMember(accPedalPosition_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["steeringWheelAngle"] = CObjectSchemaItem::SMember(steeringWheelAngle_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["engineOilLife"] = CObjectSchemaItem::SMember(engineOilLife_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["electronicParkBrakeStatus"] = CObjectSchemaItem::SMember(electronicParkBrakeStatus_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["cloudAppVehicleID"] = CObjectSchemaItem::SMember(cloudAppVehicleID_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["eCallInfo"] = CObjectSchemaItem::SMember(eCallInfo_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["airbagStatus"] = CObjectSchemaItem::SMember(airbagStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["emergencyEvent"] = CObjectSchemaItem::SMember(emergencyEvent_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["clusterModes"] = CObjectSchemaItem::SMember(clusterModes_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["myKey"] = CObjectSchemaItem::SMember(myKey_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_GetVehicleDataID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter gps.
  //
  // See GPSData
  std::shared_ptr<ISchemaItem> gps_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter speed.
  //
  // The vehicle speed in kilometers per hour
  std::shared_ptr<ISchemaItem> speed_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter rpm.
  //
  // The number of revolutions per minute of the engine
  std::shared_ptr<ISchemaItem> rpm_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter fuelLevel.
  //
  // The fuel level in the tank (percentage)
  std::shared_ptr<ISchemaItem> fuelLevel_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter fuelLevel_State.
  //
  // The fuel level state
  std::shared_ptr<ISchemaItem> fuelLevel_State_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter instantFuelConsumption.
  //
  // The instantaneous fuel consumption in microlitres
  std::shared_ptr<ISchemaItem> instantFuelConsumption_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter fuelRange.
  //
  // The estimate range in KM the vehicle can travel based on fuel level and consumption
  std::shared_ptr<ISchemaItem> fuelRange_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter externalTemperature.
  //
  // The external temperature in degrees celsius
  std::shared_ptr<ISchemaItem> externalTemperature_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter turnSignal.
  //
  // See TurnSignal
  std::shared_ptr<ISchemaItem> turnSignal_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter vin.
  //
  // Vehicle identification number
  std::shared_ptr<ISchemaItem> vin_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter prndl.
  //
  // See PRNDL
  std::shared_ptr<ISchemaItem> prndl_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter tirePressure.
  //
  // See TireStatus
  std::shared_ptr<ISchemaItem> tirePressure_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter odometer.
  //
  // Odometer in km
  std::shared_ptr<ISchemaItem> odometer_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter beltStatus.
  //
  // The status of the seat belts
  std::shared_ptr<ISchemaItem> beltStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter bodyInformation.
  //
  // The body information including ignition status and internal temp
  std::shared_ptr<ISchemaItem> bodyInformation_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter deviceStatus.
  //
  // The device status including signal and battery strength
  std::shared_ptr<ISchemaItem> deviceStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter driverBraking.
  //
  // The status of the brake pedal
  std::shared_ptr<ISchemaItem> driverBraking_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter wiperStatus.
  //
  // The status of the wipers
  std::shared_ptr<ISchemaItem> wiperStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter headLampStatus.
  //
  // Status of the head lamps
  std::shared_ptr<ISchemaItem> headLampStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter engineTorque.
  //
  // Torque value for engine (in Nm) on non-diesel variants
  std::shared_ptr<ISchemaItem> engineTorque_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter accPedalPosition.
  //
  // Accelerator pedal position (percentage depressed)
  std::shared_ptr<ISchemaItem> accPedalPosition_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter steeringWheelAngle.
  //
  // Current angle of the steering wheel (in deg)
  std::shared_ptr<ISchemaItem> steeringWheelAngle_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter engineOilLife.
  //
  // The estimated percentage of remaining oil life of the engine.
  std::shared_ptr<ISchemaItem> engineOilLife_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter electronicParkBrakeStatus.
  //
  // The status of the park brake as provided by Electric Park Brake (EPB) system.
  std::shared_ptr<ISchemaItem> electronicParkBrakeStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter cloudAppVehicleID.
  //
  // Parameter used by cloud apps to identify a head unit
  std::shared_ptr<ISchemaItem> cloudAppVehicleID_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter eCallInfo.
  //
  // Emergency Call notification and confirmation data
  std::shared_ptr<ISchemaItem> eCallInfo_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter airbagStatus.
  //
  // The status of the air bags
  std::shared_ptr<ISchemaItem> airbagStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter emergencyEvent.
  //
  // Information related to an emergency event (and if it occurred)
  std::shared_ptr<ISchemaItem> emergencyEvent_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter clusterModeStatus.
  //
  // The status modes of the cluster
  std::shared_ptr<ISchemaItem> clusterModeStatus_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter myKey.
  //
  // Information related to the MyKey feature
  std::shared_ptr<ISchemaItem> myKey_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["gps"] = CObjectSchemaItem::SMember(gps_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["speed"] = CObjectSchemaItem::SMember(speed_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["rpm"] = CObjectSchemaItem::SMember(rpm_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelLevel"] = CObjectSchemaItem::SMember(fuelLevel_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelLevel_State"] = CObjectSchemaItem::SMember(fuelLevel_State_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["instantFuelConsumption"] = CObjectSchemaItem::SMember(instantFuelConsumption_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelRange"] = CObjectSchemaItem::SMember(fuelRange_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["externalTemperature"] = CObjectSchemaItem::SMember(externalTemperature_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["turnSignal"] = CObjectSchemaItem::SMember(turnSignal_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["vin"] = CObjectSchemaItem::SMember(vin_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["prndl"] = CObjectSchemaItem::SMember(prndl_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["tirePressure"] = CObjectSchemaItem::SMember(tirePressure_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["odometer"] = CObjectSchemaItem::SMember(odometer_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["beltStatus"] = CObjectSchemaItem::SMember(beltStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["bodyInformation"] = CObjectSchemaItem::SMember(bodyInformation_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["deviceStatus"] = CObjectSchemaItem::SMember(deviceStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["driverBraking"] = CObjectSchemaItem::SMember(driverBraking_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["wiperStatus"] = CObjectSchemaItem::SMember(wiperStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["headLampStatus"] = CObjectSchemaItem::SMember(headLampStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["engineTorque"] = CObjectSchemaItem::SMember(engineTorque_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["accPedalPosition"] = CObjectSchemaItem::SMember(accPedalPosition_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["steeringWheelAngle"] = CObjectSchemaItem::SMember(steeringWheelAngle_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["engineOilLife"] = CObjectSchemaItem::SMember(engineOilLife_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["electronicParkBrakeStatus"] = CObjectSchemaItem::SMember(electronicParkBrakeStatus_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["cloudAppVehicleID"] = CObjectSchemaItem::SMember(cloudAppVehicleID_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["eCallInfo"] = CObjectSchemaItem::SMember(eCallInfo_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["airbagStatus"] = CObjectSchemaItem::SMember(airbagStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["emergencyEvent"] = CObjectSchemaItem::SMember(emergencyEvent_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["clusterModeStatus"] = CObjectSchemaItem::SMember(clusterModeStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["myKey"] = CObjectSchemaItem::SMember(myKey_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_GetVehicleDataID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::VEHICLE_DATA_NOT_ALLOWED);
  resultCode_allowed_enum_subset_values.insert(Result::USER_DISALLOWED);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::VEHICLE_DATA_NOT_AVAILABLE);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);

  std::set<ComponentVolumeStatus::eType> ComponentVolumeStatus_all_enum_values;
  ComponentVolumeStatus_all_enum_values.insert(ComponentVolumeStatus::CVS_UNKNOWN);
  ComponentVolumeStatus_all_enum_values.insert(ComponentVolumeStatus::CVS_NORMAL);
  ComponentVolumeStatus_all_enum_values.insert(ComponentVolumeStatus::CVS_LOW);
  ComponentVolumeStatus_all_enum_values.insert(ComponentVolumeStatus::CVS_FAULT);
  ComponentVolumeStatus_all_enum_values.insert(ComponentVolumeStatus::CVS_ALERT);
  ComponentVolumeStatus_all_enum_values.insert(ComponentVolumeStatus::CVS_NOT_SUPPORTED);

  std::set<TurnSignal::eType> TurnSignal_all_enum_values;
  TurnSignal_all_enum_values.insert(TurnSignal::OFF);
  TurnSignal_all_enum_values.insert(TurnSignal::LEFT);
  TurnSignal_all_enum_values.insert(TurnSignal::RIGHT);
  TurnSignal_all_enum_values.insert(TurnSignal::BOTH);

  std::set<PRNDL::eType> PRNDL_all_enum_values;
  PRNDL_all_enum_values.insert(PRNDL::PARK);
  PRNDL_all_enum_values.insert(PRNDL::REVERSE);
  PRNDL_all_enum_values.insert(PRNDL::NEUTRAL);
  PRNDL_all_enum_values.insert(PRNDL::DRIVE);
  PRNDL_all_enum_values.insert(PRNDL::SPORT);
  PRNDL_all_enum_values.insert(PRNDL::LOWGEAR);
  PRNDL_all_enum_values.insert(PRNDL::FIRST);
  PRNDL_all_enum_values.insert(PRNDL::SECOND);
  PRNDL_all_enum_values.insert(PRNDL::THIRD);
  PRNDL_all_enum_values.insert(PRNDL::FOURTH);
  PRNDL_all_enum_values.insert(PRNDL::FIFTH);
  PRNDL_all_enum_values.insert(PRNDL::SIXTH);
  PRNDL_all_enum_values.insert(PRNDL::SEVENTH);
  PRNDL_all_enum_values.insert(PRNDL::EIGHTH);
  PRNDL_all_enum_values.insert(PRNDL::UNKNOWN);
  PRNDL_all_enum_values.insert(PRNDL::FAULT);

  std::set<VehicleDataEventStatus::eType> VehicleDataEventStatus_all_enum_values;
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_NO_EVENT);
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_NO);
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_YES);
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_NOT_SUPPORTED);
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_FAULT);

  std::set<WiperStatus::eType> WiperStatus_all_enum_values;
  WiperStatus_all_enum_values.insert(WiperStatus::OFF);
  WiperStatus_all_enum_values.insert(WiperStatus::AUTO_OFF);
  WiperStatus_all_enum_values.insert(WiperStatus::OFF_MOVING);
  WiperStatus_all_enum_values.insert(WiperStatus::MAN_INT_OFF);
  WiperStatus_all_enum_values.insert(WiperStatus::MAN_INT_ON);
  WiperStatus_all_enum_values.insert(WiperStatus::MAN_LOW);
  WiperStatus_all_enum_values.insert(WiperStatus::MAN_HIGH);
  WiperStatus_all_enum_values.insert(WiperStatus::MAN_FLICK);
  WiperStatus_all_enum_values.insert(WiperStatus::WASH);
  WiperStatus_all_enum_values.insert(WiperStatus::AUTO_LOW);
  WiperStatus_all_enum_values.insert(WiperStatus::AUTO_HIGH);
  WiperStatus_all_enum_values.insert(WiperStatus::COURTESYWIPE);
  WiperStatus_all_enum_values.insert(WiperStatus::AUTO_ADJUST);
  WiperStatus_all_enum_values.insert(WiperStatus::STALLED);
  WiperStatus_all_enum_values.insert(WiperStatus::NO_DATA_EXISTS);

  std::set<ElectronicParkBrakeStatus::eType> ElectronicParkBrakeStatus_all_enum_values;
  ElectronicParkBrakeStatus_all_enum_values.insert(ElectronicParkBrakeStatus::CLOSED);
  ElectronicParkBrakeStatus_all_enum_values.insert(ElectronicParkBrakeStatus::TRANSITION);
  ElectronicParkBrakeStatus_all_enum_values.insert(ElectronicParkBrakeStatus::OPEN);
  ElectronicParkBrakeStatus_all_enum_values.insert(ElectronicParkBrakeStatus::DRIVE_ACTIVE);
  ElectronicParkBrakeStatus_all_enum_values.insert(ElectronicParkBrakeStatus::FAULT);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter gps.
  //
  // See GPSData
  std::shared_ptr<ISchemaItem> gps_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::GPSData);

  // Function parameter speed.
  //
  // The vehicle speed in kilometers per hour
  std::shared_ptr<ISchemaItem> speed_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(700.0), TSchemaItemParameter<double>());

  // Function parameter rpm.
  //
  // The number of revolutions per minute of the engine
  std::shared_ptr<ISchemaItem> rpm_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(20000), TSchemaItemParameter<int32_t>());

  // Function parameter fuelLevel.
  //
  // The fuel level in the tank (percentage)
  std::shared_ptr<ISchemaItem> fuelLevel_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-6.0), TSchemaItemParameter<double>(106.0), TSchemaItemParameter<double>());

  // Function parameter fuelLevel_State.
  //
  // The fuel level state
  std::shared_ptr<ISchemaItem> fuelLevel_State_SchemaItem = TEnumSchemaItem<ComponentVolumeStatus::eType>::create(ComponentVolumeStatus_all_enum_values, TSchemaItemParameter<ComponentVolumeStatus::eType>());

  // Function parameter instantFuelConsumption.
  //
  // The instantaneous fuel consumption in microlitres
  std::shared_ptr<ISchemaItem> instantFuelConsumption_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(25575.0), TSchemaItemParameter<double>());

  // Function parameter fuelRange.
  //
  // The estimate range in KM the vehicle can travel based on fuel level and consumption
  std::shared_ptr<ISchemaItem> fuelRange_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::FuelRange), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));

  // Function parameter externalTemperature.
  //
  // The external temperature in degrees celsius
  std::shared_ptr<ISchemaItem> externalTemperature_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-40.0), TSchemaItemParameter<double>(100.0), TSchemaItemParameter<double>());

  // Function parameter turnSignal.
  //
  // See TurnSignal
  std::shared_ptr<ISchemaItem> turnSignal_SchemaItem = TEnumSchemaItem<TurnSignal::eType>::create(TurnSignal_all_enum_values, TSchemaItemParameter<TurnSignal::eType>());

  // Function parameter vin.
  //
  // Vehicle identification number
  std::shared_ptr<ISchemaItem> vin_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(17), TSchemaItemParameter<std::string>());

  // Function parameter prndl.
  //
  // See PRNDL
  std::shared_ptr<ISchemaItem> prndl_SchemaItem = TEnumSchemaItem<PRNDL::eType>::create(PRNDL_all_enum_values, TSchemaItemParameter<PRNDL::eType>());

  // Function parameter tirePressure.
  //
  // See TireStatus
  std::shared_ptr<ISchemaItem> tirePressure_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TireStatus);

  // Function parameter odometer.
  //
  // Odometer in km
  std::shared_ptr<ISchemaItem> odometer_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(17000000), TSchemaItemParameter<int32_t>());

  // Function parameter beltStatus.
  //
  // The status of the seat belts
  std::shared_ptr<ISchemaItem> beltStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::BeltStatus);

  // Function parameter bodyInformation.
  //
  // The body information including power modes
  std::shared_ptr<ISchemaItem> bodyInformation_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::BodyInformation);

  // Function parameter deviceStatus.
  //
  // The device status including signal and battery strength
  std::shared_ptr<ISchemaItem> deviceStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::DeviceStatus);

  // Function parameter driverBraking.
  //
  // The status of the brake pedal
  std::shared_ptr<ISchemaItem> driverBraking_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Function parameter wiperStatus.
  //
  // The status of the wipers
  std::shared_ptr<ISchemaItem> wiperStatus_SchemaItem = TEnumSchemaItem<WiperStatus::eType>::create(WiperStatus_all_enum_values, TSchemaItemParameter<WiperStatus::eType>());

  // Function parameter headLampStatus.
  //
  // Status of the head lamps
  std::shared_ptr<ISchemaItem> headLampStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::HeadLampStatus);

  // Function parameter engineTorque.
  //
  // Torque value for engine (in Nm) on non-diesel variants
  std::shared_ptr<ISchemaItem> engineTorque_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-1000.0), TSchemaItemParameter<double>(2000.0), TSchemaItemParameter<double>());

  // Function parameter accPedalPosition.
  //
  // Accelerator pedal position (percentage depressed)
  std::shared_ptr<ISchemaItem> accPedalPosition_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(100.0), TSchemaItemParameter<double>());

  // Function parameter steeringWheelAngle.
  //
  // Current angle of the steering wheel (in deg)
  std::shared_ptr<ISchemaItem> steeringWheelAngle_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-2000.0), TSchemaItemParameter<double>(2000.0), TSchemaItemParameter<double>());

  // Function parameter engineOilLife.
  //
  // The estimated percentage of remaining oil life of the engine.
  std::shared_ptr<ISchemaItem> engineOilLife_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(100.0), TSchemaItemParameter<double>());

  // Function parameter electronicParkBrakeStatus.
  //
  // The status of the park brake as provided by Electric Park Brake (EPB) system.
  std::shared_ptr<ISchemaItem> electronicParkBrakeStatus_SchemaItem = TEnumSchemaItem<ElectronicParkBrakeStatus::eType>::create(ElectronicParkBrakeStatus_all_enum_values, TSchemaItemParameter<ElectronicParkBrakeStatus::eType>());

  // Function parameter cloudAppVehicleID.
  //
  // Parameter used by cloud apps to identify a head unit
  std::shared_ptr<ISchemaItem> cloudAppVehicleID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Function parameter eCallInfo.
  //
  // Emergency Call notification and confirmation data
  std::shared_ptr<ISchemaItem> eCallInfo_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ECallInfo);

  // Function parameter airbagStatus.
  //
  // The status of the air bags
  std::shared_ptr<ISchemaItem> airbagStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::AirbagStatus);

  // Function parameter emergencyEvent.
  //
  // Information related to an emergency event (and if it occurred)
  std::shared_ptr<ISchemaItem> emergencyEvent_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::EmergencyEvent);

  // Function parameter clusterModeStatus.
  //
  // The status modes of the cluster
  std::shared_ptr<ISchemaItem> clusterModeStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ClusterModeStatus);

  // Function parameter myKey.
  //
  // Information related to the MyKey feature
  std::shared_ptr<ISchemaItem> myKey_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::MyKey);CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["gps"] = CObjectSchemaItem::SMember(gps_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["speed"] = CObjectSchemaItem::SMember(speed_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["rpm"] = CObjectSchemaItem::SMember(rpm_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelLevel"] = CObjectSchemaItem::SMember(fuelLevel_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelLevel_State"] = CObjectSchemaItem::SMember(fuelLevel_State_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["instantFuelConsumption"] = CObjectSchemaItem::SMember(instantFuelConsumption_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelRange"] = CObjectSchemaItem::SMember(fuelRange_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["externalTemperature"] = CObjectSchemaItem::SMember(externalTemperature_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["turnSignal"] = CObjectSchemaItem::SMember(turnSignal_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["vin"] = CObjectSchemaItem::SMember(vin_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["prndl"] = CObjectSchemaItem::SMember(prndl_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["tirePressure"] = CObjectSchemaItem::SMember(tirePressure_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["odometer"] = CObjectSchemaItem::SMember(odometer_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["beltStatus"] = CObjectSchemaItem::SMember(beltStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["bodyInformation"] = CObjectSchemaItem::SMember(bodyInformation_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["deviceStatus"] = CObjectSchemaItem::SMember(deviceStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["driverBraking"] = CObjectSchemaItem::SMember(driverBraking_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["wiperStatus"] = CObjectSchemaItem::SMember(wiperStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["headLampStatus"] = CObjectSchemaItem::SMember(headLampStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["engineTorque"] = CObjectSchemaItem::SMember(engineTorque_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["accPedalPosition"] = CObjectSchemaItem::SMember(accPedalPosition_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["steeringWheelAngle"] = CObjectSchemaItem::SMember(steeringWheelAngle_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["engineOilLife"] = CObjectSchemaItem::SMember(engineOilLife_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["electronicParkBrakeStatus"] = CObjectSchemaItem::SMember(electronicParkBrakeStatus_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["cloudAppVehicleID"] = CObjectSchemaItem::SMember(cloudAppVehicleID_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["eCallInfo"] = CObjectSchemaItem::SMember(eCallInfo_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["airbagStatus"] = CObjectSchemaItem::SMember(airbagStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["emergencyEvent"] = CObjectSchemaItem::SMember(emergencyEvent_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["clusterModeStatus"] = CObjectSchemaItem::SMember(clusterModeStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["myKey"] = CObjectSchemaItem::SMember(myKey_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_ReadDIDID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter ecuName.
  //
  // Name of ECU.
  std::shared_ptr<ISchemaItem> ecuName_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>());

  // Function parameter didLocation.
  //
  // Get raw data from vehicle data DID location(s)
  std::shared_ptr<ISchemaItem> didLocation_SchemaItem = CArraySchemaItem::create(TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000));CObjectSchemaItem::Members schema_members;

  schema_members["ecuName"] = CObjectSchemaItem::SMember(ecuName_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["didLocation"] = CObjectSchemaItem::SMember(didLocation_SchemaItem, true, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_ReadDIDID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::TRUNCATED_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::USER_DISALLOWED);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter didResult.
  //
  // Array of requested DID results (with data if available).
  std::shared_ptr<ISchemaItem> didResult_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::DIDResult), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(1000));CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["didResult"] = CObjectSchemaItem::SMember(didResult_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_GetDTCsID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter ecuName.
  //
  // Name of ECU.
  std::shared_ptr<ISchemaItem> ecuName_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>());

  // Function parameter dtcMask.
  //
  // DTC Mask Byte to be sent in diagnostic request to module .
  std::shared_ptr<ISchemaItem> dtcMask_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(255), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["ecuName"] = CObjectSchemaItem::SMember(ecuName_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["dtcMask"] = CObjectSchemaItem::SMember(dtcMask_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_GetDTCsID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::TRUNCATED_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::USER_DISALLOWED);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter ecuHeader.
  //
  // 2 byte ECU Header for DTC response (as defined in VHR_Layout_Specification_DTCs.pdf)
  std::shared_ptr<ISchemaItem> ecuHeader_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>());

  // Function parameter dtc.
  //
  // 
  //                 Array of all reported DTCs on module (ecuHeader contains information if list is truncated).
  //                 Each DTC is represented by 4 bytes (3 bytes of data and 1 byte status as defined in VHR_Layout_Specification_DTCs.pdf).
  //             
  std::shared_ptr<ISchemaItem> dtc_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(10), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(15));CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["ecuHeader"] = CObjectSchemaItem::SMember(ecuHeader_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["dtc"] = CObjectSchemaItem::SMember(dtc_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_DiagnosticMessageID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter targetID.
  //
  // Name of target ECU.
  std::shared_ptr<ISchemaItem> targetID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>());

  // Function parameter messageLength.
  //
  // Length of message (in bytes).
  std::shared_ptr<ISchemaItem> messageLength_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>());

  // Function parameter messageData.
  //
  // 
  //                 Array of bytes comprising CAN message.
  //             
  std::shared_ptr<ISchemaItem> messageData_SchemaItem = CArraySchemaItem::create(TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(255), TSchemaItemParameter<int32_t>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(65535));CObjectSchemaItem::Members schema_members;

  schema_members["targetID"] = CObjectSchemaItem::SMember(targetID_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["messageLength"] = CObjectSchemaItem::SMember(messageLength_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["messageData"] = CObjectSchemaItem::SMember(messageData_SchemaItem, true, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_DiagnosticMessageID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::TRUNCATED_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::USER_DISALLOWED);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter messageDataResult.
  //
  // 
  //                 Array of bytes comprising CAN message result.
  //             
  std::shared_ptr<ISchemaItem> messageDataResult_SchemaItem = CArraySchemaItem::create(TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(255), TSchemaItemParameter<int32_t>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(65535));CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["messageDataResult"] = CObjectSchemaItem::SMember(messageDataResult_SchemaItem, true, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_ScrollableMessageID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter scrollableMessageBody.
  //
  // Body of text that can include newlines and tabs.
  std::shared_ptr<ISchemaItem> scrollableMessageBody_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter timeout.
  //
  // App defined timeout.  Indicates how long of a timeout from the last action (i.e. scrolling message resets timeout).
  std::shared_ptr<ISchemaItem> timeout_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1000), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>(30000));

  // Function parameter softButtons.
  //
  // 
  //                 App defined SoftButtons.
  //                 If omitted on supported displays, only the system defined "Close" SoftButton will be displayed.
  //             
  std::shared_ptr<ISchemaItem> softButtons_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SoftButton), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(8));CObjectSchemaItem::Members schema_members;

  schema_members["scrollableMessageBody"] = CObjectSchemaItem::SMember(scrollableMessageBody_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["timeout"] = CObjectSchemaItem::SMember(timeout_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["softButtons"] = CObjectSchemaItem::SMember(softButtons_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_ScrollableMessageID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::CHAR_LIMIT_EXCEEDED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::ABORTED);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SliderID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter numTicks.
  //
  // Number of selectable items on a horizontal axis
  std::shared_ptr<ISchemaItem> numTicks_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(2), TSchemaItemParameter<int32_t>(26), TSchemaItemParameter<int32_t>());

  // Function parameter position.
  //
  // Initial position of slider control (cannot exceed numTicks)
  std::shared_ptr<ISchemaItem> position_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(26), TSchemaItemParameter<int32_t>());

  // Function parameter sliderHeader.
  //
  // Text header to display
  std::shared_ptr<ISchemaItem> sliderHeader_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter sliderFooter.
  //
  // 
  //                 Text footer to display (meant to display min/max threshold descriptors).
  //                 For a static text footer, only one footer string shall be provided in the array.
  //                 For a dynamic text footer, the number of footer text string in the array must match the numTicks value.
  //                 For a dynamic text footer, text array string should correlate with potential slider position index.
  //                 If omitted on supported displays, no footer text shall be displayed.
  //             
  std::shared_ptr<ISchemaItem> sliderFooter_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(26));

  // Function parameter timeout.
  //
  // 
  //                 App defined timeout.  Indicates how long of a timeout from the last action (i.e. sliding control resets timeout).
  //                 If omitted, the value is set to 10000.
  //             
  std::shared_ptr<ISchemaItem> timeout_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1000), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>(10000));CObjectSchemaItem::Members schema_members;

  schema_members["numTicks"] = CObjectSchemaItem::SMember(numTicks_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["position"] = CObjectSchemaItem::SMember(position_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["sliderHeader"] = CObjectSchemaItem::SMember(sliderHeader_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["sliderFooter"] = CObjectSchemaItem::SMember(sliderFooter_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["timeout"] = CObjectSchemaItem::SMember(timeout_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SliderID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::TIMED_OUT);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::ABORTED);
  resultCode_allowed_enum_subset_values.insert(Result::SAVED);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter sliderPosition.
  //
  // 
  //                 Current slider value returned when saved or canceled (aborted)
  //                 This value is only returned for resultCodes "SAVED" or "ABORTED"
  //             
  std::shared_ptr<ISchemaItem> sliderPosition_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(26), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["sliderPosition"] = CObjectSchemaItem::SMember(sliderPosition_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_ShowConstantTBTID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter navigationText1.
  std::shared_ptr<ISchemaItem> navigationText1_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter navigationText2.
  std::shared_ptr<ISchemaItem> navigationText2_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter eta.
  std::shared_ptr<ISchemaItem> eta_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter timeToDestination.
  std::shared_ptr<ISchemaItem> timeToDestination_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter totalDistance.
  std::shared_ptr<ISchemaItem> totalDistance_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter turnIcon.
  std::shared_ptr<ISchemaItem> turnIcon_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Image);

  // Function parameter nextTurnIcon.
  std::shared_ptr<ISchemaItem> nextTurnIcon_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Image);

  // Function parameter distanceToManeuver.
  //
  // 
  //                 Fraction of distance till next maneuver (starting from when AlertManeuver is triggered).
  //                 Used to calculate progress bar.
  //             
  std::shared_ptr<ISchemaItem> distanceToManeuver_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(1000000000.0), TSchemaItemParameter<double>());

  // Function parameter distanceToManeuverScale.
  //
  // 
  //                 Distance till next maneuver (starting from) from previous maneuver.
  //                 Used to calculate progress bar.
  //             
  std::shared_ptr<ISchemaItem> distanceToManeuverScale_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(1000000000.0), TSchemaItemParameter<double>());

  // Function parameter maneuverComplete.
  //
  // 
  //                 If and when a maneuver has completed while an AlertManeuver is active, the app must send this value set to TRUE in order to clear the AlertManeuver overlay.
  //                 If omitted the value will be assumed as FALSE.
  //             
  std::shared_ptr<ISchemaItem> maneuverComplete_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter softButtons.
  //
  // 
  //                 Three dynamic SoftButtons available (first SoftButton is fixed to "Turns").
  //                 If omitted on supported displays, the currently displayed SoftButton values will not change.
  //             
  std::shared_ptr<ISchemaItem> softButtons_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SoftButton), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(3));CObjectSchemaItem::Members schema_members;

  schema_members["navigationText1"] = CObjectSchemaItem::SMember(navigationText1_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["navigationText2"] = CObjectSchemaItem::SMember(navigationText2_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["eta"] = CObjectSchemaItem::SMember(eta_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["timeToDestination"] = CObjectSchemaItem::SMember(timeToDestination_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["totalDistance"] = CObjectSchemaItem::SMember(totalDistance_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["turnIcon"] = CObjectSchemaItem::SMember(turnIcon_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["nextTurnIcon"] = CObjectSchemaItem::SMember(nextTurnIcon_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["distanceToManeuver"] = CObjectSchemaItem::SMember(distanceToManeuver_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["distanceToManeuverScale"] = CObjectSchemaItem::SMember(distanceToManeuverScale_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["maneuverComplete"] = CObjectSchemaItem::SMember(maneuverComplete_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["softButtons"] = CObjectSchemaItem::SMember(softButtons_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_ShowConstantTBTID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_REQUEST);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_AlertManeuverID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter ttsChunks.
  //
  // An array of text chunks of type TTSChunk. See TTSChunk
  std::shared_ptr<ISchemaItem> ttsChunks_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TTSChunk), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter softButtons.
  //
  // If omitted on supported displays, only the system defined "Close" SoftButton shall be displayed.
  std::shared_ptr<ISchemaItem> softButtons_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SoftButton), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(3));CObjectSchemaItem::Members schema_members;

  schema_members["ttsChunks"] = CObjectSchemaItem::SMember(ttsChunks_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["softButtons"] = CObjectSchemaItem::SMember(softButtons_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_AlertManeuverID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::IGNORED);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::WARNINGS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_REQUEST);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::ABORTED);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_UpdateTurnListID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter turnList.
  std::shared_ptr<ISchemaItem> turnList_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Turn), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter softButtons.
  //
  // If omitted on supported displays, app-defined SoftButton will be left blank.
  std::shared_ptr<ISchemaItem> softButtons_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SoftButton), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(1));CObjectSchemaItem::Members schema_members;

  schema_members["turnList"] = CObjectSchemaItem::SMember(turnList_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["softButtons"] = CObjectSchemaItem::SMember(softButtons_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_UpdateTurnListID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_REQUEST);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_ChangeRegistrationID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Language::eType> Language_all_enum_values;
  Language_all_enum_values.insert(Language::EN_US);
  Language_all_enum_values.insert(Language::ES_MX);
  Language_all_enum_values.insert(Language::FR_CA);
  Language_all_enum_values.insert(Language::DE_DE);
  Language_all_enum_values.insert(Language::ES_ES);
  Language_all_enum_values.insert(Language::EN_GB);
  Language_all_enum_values.insert(Language::RU_RU);
  Language_all_enum_values.insert(Language::TR_TR);
  Language_all_enum_values.insert(Language::PL_PL);
  Language_all_enum_values.insert(Language::FR_FR);
  Language_all_enum_values.insert(Language::IT_IT);
  Language_all_enum_values.insert(Language::SV_SE);
  Language_all_enum_values.insert(Language::PT_PT);
  Language_all_enum_values.insert(Language::NL_NL);
  Language_all_enum_values.insert(Language::EN_AU);
  Language_all_enum_values.insert(Language::ZH_CN);
  Language_all_enum_values.insert(Language::ZH_TW);
  Language_all_enum_values.insert(Language::JA_JP);
  Language_all_enum_values.insert(Language::AR_SA);
  Language_all_enum_values.insert(Language::KO_KR);
  Language_all_enum_values.insert(Language::PT_BR);
  Language_all_enum_values.insert(Language::CS_CZ);
  Language_all_enum_values.insert(Language::DA_DK);
  Language_all_enum_values.insert(Language::NO_NO);
  Language_all_enum_values.insert(Language::NL_BE);
  Language_all_enum_values.insert(Language::EL_GR);
  Language_all_enum_values.insert(Language::HU_HU);
  Language_all_enum_values.insert(Language::FI_FI);
  Language_all_enum_values.insert(Language::SK_SK);
  Language_all_enum_values.insert(Language::EN_IN);
  Language_all_enum_values.insert(Language::TH_TH);
  Language_all_enum_values.insert(Language::EN_SA);
  Language_all_enum_values.insert(Language::HE_IL);
  Language_all_enum_values.insert(Language::RO_RO);
  Language_all_enum_values.insert(Language::UK_UA);
  Language_all_enum_values.insert(Language::ID_ID);
  Language_all_enum_values.insert(Language::VI_VN);
  Language_all_enum_values.insert(Language::MS_MY);
  Language_all_enum_values.insert(Language::HI_IN);

  std::map<Language::eType, std::vector<ElementSignature>> Language_element_signatures;
  Language_element_signatures[Language::DE_DE] = std::vector<ElementSignature>();
  Language_element_signatures[Language::ES_ES] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EN_GB] = std::vector<ElementSignature>();
  Language_element_signatures[Language::RU_RU] = std::vector<ElementSignature>();
  Language_element_signatures[Language::TR_TR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::PL_PL] = std::vector<ElementSignature>();
  Language_element_signatures[Language::FR_FR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::IT_IT] = std::vector<ElementSignature>();
  Language_element_signatures[Language::SV_SE] = std::vector<ElementSignature>();
  Language_element_signatures[Language::PT_PT] = std::vector<ElementSignature>();
  Language_element_signatures[Language::NL_NL] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EN_AU] = std::vector<ElementSignature>();
  Language_element_signatures[Language::ZH_CN] = std::vector<ElementSignature>();
  Language_element_signatures[Language::ZH_TW] = std::vector<ElementSignature>();
  Language_element_signatures[Language::JA_JP] = std::vector<ElementSignature>();
  Language_element_signatures[Language::AR_SA] = std::vector<ElementSignature>();
  Language_element_signatures[Language::KO_KR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::PT_BR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::CS_CZ] = std::vector<ElementSignature>();
  Language_element_signatures[Language::DA_DK] = std::vector<ElementSignature>();
  Language_element_signatures[Language::NO_NO] = std::vector<ElementSignature>();
  Language_element_signatures[Language::NL_BE] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EL_GR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::HU_HU] = std::vector<ElementSignature>();
  Language_element_signatures[Language::FI_FI] = std::vector<ElementSignature>();
  Language_element_signatures[Language::SK_SK] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EN_IN] = std::vector<ElementSignature>();
  Language_element_signatures[Language::TH_TH] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EN_SA] = std::vector<ElementSignature>();
  Language_element_signatures[Language::HE_IL] = std::vector<ElementSignature>();
  Language_element_signatures[Language::RO_RO] = std::vector<ElementSignature>();
  Language_element_signatures[Language::UK_UA] = std::vector<ElementSignature>();
  Language_element_signatures[Language::ID_ID] = std::vector<ElementSignature>();
  Language_element_signatures[Language::VI_VN] = std::vector<ElementSignature>();
  Language_element_signatures[Language::MS_MY] = std::vector<ElementSignature>();
  Language_element_signatures[Language::HI_IN] = std::vector<ElementSignature>();
  Language_element_signatures[Language::DE_DE].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::ES_ES].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::EN_GB].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::RU_RU].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::TR_TR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::PL_PL].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::FR_FR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::IT_IT].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::SV_SE].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::PT_PT].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::NL_NL].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::EN_AU].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::ZH_CN].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::ZH_TW].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::JA_JP].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::AR_SA].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::KO_KR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::PT_BR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::CS_CZ].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::DA_DK].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::NO_NO].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::NL_BE].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::EL_GR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::HU_HU].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::FI_FI].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::SK_SK].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::EN_IN].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::TH_TH].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::EN_SA].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::HE_IL].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::RO_RO].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::UK_UA].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::ID_ID].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::VI_VN].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::MS_MY].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::HI_IN].push_back(ElementSignature("4.5.0", "", false));

  // Function parameter language.
  //
  // Requested voice engine (VR+TTS) language registration
  std::shared_ptr<ISchemaItem> language_SchemaItem = TEnumSchemaItem<Language::eType>::createWithSignatures(Language_all_enum_values, Language_element_signatures, TSchemaItemParameter<Language::eType>());

  // Function parameter hmiDisplayLanguage.
  //
  // Request display language registration
  std::shared_ptr<ISchemaItem> hmiDisplayLanguage_SchemaItem = TEnumSchemaItem<Language::eType>::createWithSignatures(Language_all_enum_values, Language_element_signatures, TSchemaItemParameter<Language::eType>());

  // Function parameter appName.
  //
  // Request new app name registration
  std::shared_ptr<ISchemaItem> appName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Function parameter ttsName.
  //
  // Request new ttsName registration
  std::shared_ptr<ISchemaItem> ttsName_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TTSChunk), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter ngnMediaScreenAppName.
  //
  // Request new app short name registration
  std::shared_ptr<ISchemaItem> ngnMediaScreenAppName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Function parameter vrSynonyms.
  //
  // Request new VR synonyms registration
  std::shared_ptr<ISchemaItem> vrSynonyms_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(40), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["language"] = CObjectSchemaItem::SMember(language_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["hmiDisplayLanguage"] = CObjectSchemaItem::SMember(hmiDisplayLanguage_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["appName"] = CObjectSchemaItem::SMember(appName_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["ttsName"] = CObjectSchemaItem::SMember(ttsName_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["ngnMediaScreenAppName"] = CObjectSchemaItem::SMember(ngnMediaScreenAppName_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["vrSynonyms"] = CObjectSchemaItem::SMember(vrSynonyms_SchemaItem, false, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_ChangeRegistrationID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  // 
  //                 true, if successful
  //                 false, if failed
  //             
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_GenericResponseID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_PutFileID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<FileType::eType> FileType_all_enum_values;
  FileType_all_enum_values.insert(FileType::GRAPHIC_BMP);
  FileType_all_enum_values.insert(FileType::GRAPHIC_JPEG);
  FileType_all_enum_values.insert(FileType::GRAPHIC_PNG);
  FileType_all_enum_values.insert(FileType::AUDIO_WAVE);
  FileType_all_enum_values.insert(FileType::AUDIO_MP3);
  FileType_all_enum_values.insert(FileType::AUDIO_AAC);
  FileType_all_enum_values.insert(FileType::BINARY);
  FileType_all_enum_values.insert(FileType::JSON);

  // Function parameter syncFileName.
  //
  // File reference name.
  std::shared_ptr<ISchemaItem> syncFileName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(255), TSchemaItemParameter<std::string>());

  // Function parameter fileType.
  //
  // Selected file type.
  std::shared_ptr<ISchemaItem> fileType_SchemaItem = TEnumSchemaItem<FileType::eType>::create(FileType_all_enum_values, TSchemaItemParameter<FileType::eType>());

  // Function parameter persistentFile.
  //
  // 
  //                 Indicates if the file is meant to persist between sessions / ignition cycles.
  //                 If set to TRUE, then the system will aim to persist this file through session / cycles.
  //                 While files with this designation will have priority over others, they are subject to deletion by the system at any time.
  //                 In the event of automatic deletion by the system, the app will receive a rejection and have to resend the file.
  //                 If omitted, the value will be set to false.
  //             
  std::shared_ptr<ISchemaItem> persistentFile_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>(false));

  // Function parameter systemFile.
  //
  // 
  //                 Indicates if the file is meant to be passed thru core to elsewhere on the system.
  //                 If set to TRUE, then the system will instead pass the data thru as it arrives to a predetermined area outside of core.
  //                 If omitted, the value will be set to false.
  //             
  std::shared_ptr<ISchemaItem> systemFile_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>(false));

  // Function parameter offset.
  //
  // Optional offset in bytes for resuming partial data chunks
  std::shared_ptr<ISchemaItem> offset_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter length.
  //
  // 
  //                 Optional length in bytes for resuming partial data chunks
  //                 If offset is set to 0, then length is the total length of the file to be downloaded
  //             
  std::shared_ptr<ISchemaItem> length_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter crc.
  //
  //  Additional CRC32 checksum to protect data integrity up to 512 Mbits 
  std::shared_ptr<ISchemaItem> crc_SchemaItem = TNumberSchemaItem<int64_t>::create(TSchemaItemParameter<int64_t>(0), TSchemaItemParameter<int64_t>(4294967295LL), TSchemaItemParameter<int64_t>());CObjectSchemaItem::Members schema_members;

  schema_members["syncFileName"] = CObjectSchemaItem::SMember(syncFileName_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["fileType"] = CObjectSchemaItem::SMember(fileType_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["persistentFile"] = CObjectSchemaItem::SMember(persistentFile_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["systemFile"] = CObjectSchemaItem::SMember(systemFile_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["offset"] = CObjectSchemaItem::SMember(offset_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["length"] = CObjectSchemaItem::SMember(length_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["crc"] = CObjectSchemaItem::SMember(crc_SchemaItem, false, "5.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_PutFileID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_REQUEST);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::CORRUPTED_DATA);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter spaceAvailable.
  //
  // 
  //                 Provides the total local space available in SDL Core for the registered app.
  //                 If the transfer has systemFile enabled, then the value will be set to 0 automatically.
  //             
  std::shared_ptr<ISchemaItem> spaceAvailable_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter spaceAvailable_history_v1.
  std::shared_ptr<ISchemaItem> spaceAvailable_history_v1_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  std::vector<CObjectSchemaItem::SMember> spaceAvailable_history_vector;

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "3.0.0", "", false, false);
  spaceAvailable_history_vector.push_back(CObjectSchemaItem::SMember(spaceAvailable_history_v1_SchemaItem, true, "3.0.0", "5.0.0", false, false));
  schema_members["spaceAvailable"] = CObjectSchemaItem::SMember(spaceAvailable_SchemaItem, false, "5.0.0", "", false, false, spaceAvailable_history_vector);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_GetFileID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<FileType::eType> FileType_all_enum_values;
  FileType_all_enum_values.insert(FileType::GRAPHIC_BMP);
  FileType_all_enum_values.insert(FileType::GRAPHIC_JPEG);
  FileType_all_enum_values.insert(FileType::GRAPHIC_PNG);
  FileType_all_enum_values.insert(FileType::AUDIO_WAVE);
  FileType_all_enum_values.insert(FileType::AUDIO_MP3);
  FileType_all_enum_values.insert(FileType::AUDIO_AAC);
  FileType_all_enum_values.insert(FileType::BINARY);
  FileType_all_enum_values.insert(FileType::JSON);

  // Function parameter fileName.
  //
  // File name that should be retrieved
  std::shared_ptr<ISchemaItem> fileName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(255), TSchemaItemParameter<std::string>());

  // Function parameter appServiceId.
  //
  // ID of the service that should have uploaded the requested file.
  std::shared_ptr<ISchemaItem> appServiceId_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Function parameter fileType.
  //
  // Selected file type.
  std::shared_ptr<ISchemaItem> fileType_SchemaItem = TEnumSchemaItem<FileType::eType>::create(FileType_all_enum_values, TSchemaItemParameter<FileType::eType>());

  // Function parameter offset.
  //
  // Optional offset in bytes for resuming partial data chunks
  std::shared_ptr<ISchemaItem> offset_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter length.
  //
  // 
  //                 Optional length in bytes for resuming partial data chunks
  //                 If offset is set to 0, then length is the total length of the file to be retrieved
  //             
  std::shared_ptr<ISchemaItem> length_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["fileName"] = CObjectSchemaItem::SMember(fileName_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["appServiceId"] = CObjectSchemaItem::SMember(appServiceId_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["fileType"] = CObjectSchemaItem::SMember(fileType_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["offset"] = CObjectSchemaItem::SMember(offset_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["length"] = CObjectSchemaItem::SMember(length_SchemaItem, false, "5.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_GetFileID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);
  resultCode_allowed_enum_subset_values.insert(Result::FILE_NOT_FOUND);

  std::set<FileType::eType> FileType_all_enum_values;
  FileType_all_enum_values.insert(FileType::GRAPHIC_BMP);
  FileType_all_enum_values.insert(FileType::GRAPHIC_JPEG);
  FileType_all_enum_values.insert(FileType::GRAPHIC_PNG);
  FileType_all_enum_values.insert(FileType::AUDIO_WAVE);
  FileType_all_enum_values.insert(FileType::AUDIO_MP3);
  FileType_all_enum_values.insert(FileType::AUDIO_AAC);
  FileType_all_enum_values.insert(FileType::BINARY);
  FileType_all_enum_values.insert(FileType::JSON);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter offset.
  //
  // Optional offset in bytes for resuming partial data chunks
  std::shared_ptr<ISchemaItem> offset_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter length.
  //
  // Optional length in bytes for resuming partial data chunks if offset is set to 0, then length is the total length of the file to be downloaded
  std::shared_ptr<ISchemaItem> length_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter fileType.
  //
  // File type that is being sent in response.
  std::shared_ptr<ISchemaItem> fileType_SchemaItem = TEnumSchemaItem<FileType::eType>::create(FileType_all_enum_values, TSchemaItemParameter<FileType::eType>());

  // Function parameter crc.
  //
  // Additional CRC32 checksum to protect data integrity up to 512 Mbits
  std::shared_ptr<ISchemaItem> crc_SchemaItem = TNumberSchemaItem<int64_t>::create(TSchemaItemParameter<int64_t>(0), TSchemaItemParameter<int64_t>(4294967295LL), TSchemaItemParameter<int64_t>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["offset"] = CObjectSchemaItem::SMember(offset_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["length"] = CObjectSchemaItem::SMember(length_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["fileType"] = CObjectSchemaItem::SMember(fileType_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["crc"] = CObjectSchemaItem::SMember(crc_SchemaItem, false, "5.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_DeleteFileID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter syncFileName.
  //
  // File reference name.
  std::shared_ptr<ISchemaItem> syncFileName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["syncFileName"] = CObjectSchemaItem::SMember(syncFileName_SchemaItem, true, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_DeleteFileID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_REQUEST);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter spaceAvailable.
  //
  // Provides the total local space available on the module for the registered app.
  std::shared_ptr<ISchemaItem> spaceAvailable_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter spaceAvailable_history_v1.
  std::shared_ptr<ISchemaItem> spaceAvailable_history_v1_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  std::vector<CObjectSchemaItem::SMember> spaceAvailable_history_vector;

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "3.0.0", "", false, false);
  spaceAvailable_history_vector.push_back(CObjectSchemaItem::SMember(spaceAvailable_history_v1_SchemaItem, true, "3.0.0", "5.0.0", false, false));
  schema_members["spaceAvailable"] = CObjectSchemaItem::SMember(spaceAvailable_SchemaItem, false, "5.0.0", "", false, false, spaceAvailable_history_vector);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_ListFilesID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_ListFilesID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_REQUEST);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter filenames.
  //
  // 
  //                 An array of all filenames resident on the module for the given registered app.
  //                 If omitted, then no files currently reside on the system.
  //             
  std::shared_ptr<ISchemaItem> filenames_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(1000));

  // Function parameter spaceAvailable.
  //
  // Provides the total local space available on the module for the registered app.
  std::shared_ptr<ISchemaItem> spaceAvailable_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter spaceAvailable_history_v1.
  std::shared_ptr<ISchemaItem> spaceAvailable_history_v1_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  std::vector<CObjectSchemaItem::SMember> spaceAvailable_history_vector;

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["filenames"] = CObjectSchemaItem::SMember(filenames_SchemaItem, false, "3.0.0", "", false, false);
  spaceAvailable_history_vector.push_back(CObjectSchemaItem::SMember(spaceAvailable_history_v1_SchemaItem, true, "3.0.0", "5.0.0", false, false));
  schema_members["spaceAvailable"] = CObjectSchemaItem::SMember(spaceAvailable_SchemaItem, false, "5.0.0", "", false, false, spaceAvailable_history_vector);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SetAppIconID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter syncFileName.
  //
  // File reference name.
  std::shared_ptr<ISchemaItem> syncFileName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["syncFileName"] = CObjectSchemaItem::SMember(syncFileName_SchemaItem, true, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SetAppIconID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_REQUEST);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SetDisplayLayoutID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter displayLayout.
  //
  // 
  //                 Predefined or dynamically created screen layout.
  //                 Currently only predefined screen layouts are defined.
  //             
  std::shared_ptr<ISchemaItem> displayLayout_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter dayColorScheme.
  std::shared_ptr<ISchemaItem> dayColorScheme_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TemplateColorScheme);

  // Function parameter nightColorScheme.
  std::shared_ptr<ISchemaItem> nightColorScheme_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TemplateColorScheme);CObjectSchemaItem::Members schema_members;

  schema_members["displayLayout"] = CObjectSchemaItem::SMember(displayLayout_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["dayColorScheme"] = CObjectSchemaItem::SMember(dayColorScheme_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["nightColorScheme"] = CObjectSchemaItem::SMember(nightColorScheme_SchemaItem, false, "5.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SetDisplayLayoutID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_REQUEST);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter displayCapabilities.
  //
  // See DisplayCapabilities
  std::shared_ptr<ISchemaItem> displayCapabilities_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::DisplayCapabilities);

  // Function parameter buttonCapabilities.
  //
  // See ButtonCapabilities
  std::shared_ptr<ISchemaItem> buttonCapabilities_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ButtonCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter softButtonCapabilities.
  //
  // If returned, the platform supports on-screen SoftButtons; see SoftButtonCapabilities.
  std::shared_ptr<ISchemaItem> softButtonCapabilities_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SoftButtonCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter presetBankCapabilities.
  //
  // If returned, the platform supports custom on-screen Presets; see PresetBankCapabilities.
  std::shared_ptr<ISchemaItem> presetBankCapabilities_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::PresetBankCapabilities);

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["displayCapabilities"] = CObjectSchemaItem::SMember(displayCapabilities_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["buttonCapabilities"] = CObjectSchemaItem::SMember(buttonCapabilities_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["softButtonCapabilities"] = CObjectSchemaItem::SMember(softButtonCapabilities_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["presetBankCapabilities"] = CObjectSchemaItem::SMember(presetBankCapabilities_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SystemRequestID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<RequestType::eType> RequestType_all_enum_values;
  RequestType_all_enum_values.insert(RequestType::HTTP);
  RequestType_all_enum_values.insert(RequestType::FILE_RESUME);
  RequestType_all_enum_values.insert(RequestType::AUTH_REQUEST);
  RequestType_all_enum_values.insert(RequestType::AUTH_CHALLENGE);
  RequestType_all_enum_values.insert(RequestType::AUTH_ACK);
  RequestType_all_enum_values.insert(RequestType::PROPRIETARY);
  RequestType_all_enum_values.insert(RequestType::QUERY_APPS);
  RequestType_all_enum_values.insert(RequestType::LAUNCH_APP);
  RequestType_all_enum_values.insert(RequestType::LOCK_SCREEN_ICON_URL);
  RequestType_all_enum_values.insert(RequestType::TRAFFIC_MESSAGE_CHANNEL);
  RequestType_all_enum_values.insert(RequestType::DRIVER_PROFILE);
  RequestType_all_enum_values.insert(RequestType::VOICE_SEARCH);
  RequestType_all_enum_values.insert(RequestType::NAVIGATION);
  RequestType_all_enum_values.insert(RequestType::PHONE);
  RequestType_all_enum_values.insert(RequestType::CLIMATE);
  RequestType_all_enum_values.insert(RequestType::SETTINGS);
  RequestType_all_enum_values.insert(RequestType::VEHICLE_DIAGNOSTICS);
  RequestType_all_enum_values.insert(RequestType::EMERGENCY);
  RequestType_all_enum_values.insert(RequestType::MEDIA);
  RequestType_all_enum_values.insert(RequestType::FOTA);
  RequestType_all_enum_values.insert(RequestType::OEM_SPECIFIC);
  RequestType_all_enum_values.insert(RequestType::ICON_URL);

  std::map<RequestType::eType, std::vector<ElementSignature>> RequestType_element_signatures;
  RequestType_element_signatures[RequestType::OEM_SPECIFIC] = std::vector<ElementSignature>();
  RequestType_element_signatures[RequestType::ICON_URL] = std::vector<ElementSignature>();
  RequestType_element_signatures[RequestType::OEM_SPECIFIC].push_back(ElementSignature("5.0.0", "", false));
  RequestType_element_signatures[RequestType::ICON_URL].push_back(ElementSignature("5.1.0", "", false));

  // Function parameter requestType.
  //
  // 
  //                 The type of system request.
  //                 Note that Proprietary requests should forward the binary data to the known proprietary module on the system.
  //             
  std::shared_ptr<ISchemaItem> requestType_SchemaItem = TEnumSchemaItem<RequestType::eType>::createWithSignatures(RequestType_all_enum_values, RequestType_element_signatures, TSchemaItemParameter<RequestType::eType>());

  // Function parameter requestSubType.
  //
  // 
  //                 This parameter is filled for supporting OEM proprietary data exchanges.
  //             
  std::shared_ptr<ISchemaItem> requestSubType_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(255), TSchemaItemParameter<std::string>());

  // Function parameter fileName.
  //
  // 
  //                 Filename of HTTP data to store in predefined system staging area.
  //                 Mandatory if requestType is HTTP.
  //                 PROPRIETARY requestType should ignore this parameter.
  //             
  std::shared_ptr<ISchemaItem> fileName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(255), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["requestType"] = CObjectSchemaItem::SMember(requestType_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["requestSubType"] = CObjectSchemaItem::SMember(requestSubType_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["fileName"] = CObjectSchemaItem::SMember(fileName_SchemaItem, false, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SystemRequestID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::EXPIRED_CERT);
  resultCode_allowed_enum_subset_values.insert(Result::IGNORED);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_CERT);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_REQUEST);
  resultCode_allowed_enum_subset_values.insert(Result::WARNINGS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::TIMED_OUT);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::ABORTED);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SendLocationID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<DeliveryMode::eType> DeliveryMode_all_enum_values;
  DeliveryMode_all_enum_values.insert(DeliveryMode::PROMPT);
  DeliveryMode_all_enum_values.insert(DeliveryMode::DESTINATION);
  DeliveryMode_all_enum_values.insert(DeliveryMode::QUEUE);

  // Function parameter longitudeDegrees.
  std::shared_ptr<ISchemaItem> longitudeDegrees_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-180.0), TSchemaItemParameter<double>(180.0), TSchemaItemParameter<double>());

  // Function parameter latitudeDegrees.
  std::shared_ptr<ISchemaItem> latitudeDegrees_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-90.0), TSchemaItemParameter<double>(90.0), TSchemaItemParameter<double>());

  // Function parameter locationName.
  //
  // 
  //                 Name / title of intended location
  //             
  std::shared_ptr<ISchemaItem> locationName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter locationDescription.
  //
  // 
  //                 Description intended location / establishment (if applicable)
  //             
  std::shared_ptr<ISchemaItem> locationDescription_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter addressLines.
  //
  // 
  //                 Location address (if applicable)
  //             
  std::shared_ptr<ISchemaItem> addressLines_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(4));

  // Function parameter phoneNumber.
  //
  // 
  //                 Phone number of intended location / establishment (if applicable)
  //             
  std::shared_ptr<ISchemaItem> phoneNumber_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Function parameter locationImage.
  //
  // 
  //                 Image / icon of intended location (if applicable and supported)
  //             
  std::shared_ptr<ISchemaItem> locationImage_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Image);

  // Function parameter timeStamp.
  //
  // 
  //                 timestamp in ISO 8601 format
  //             
  std::shared_ptr<ISchemaItem> timeStamp_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::DateTime);

  // Function parameter address.
  //
  // Address to be used for setting destination
  std::shared_ptr<ISchemaItem> address_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::OASISAddress);

  // Function parameter deliveryMode.
  //
  // Defines the mode of prompt for user
  std::shared_ptr<ISchemaItem> deliveryMode_SchemaItem = TEnumSchemaItem<DeliveryMode::eType>::create(DeliveryMode_all_enum_values, TSchemaItemParameter<DeliveryMode::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["longitudeDegrees"] = CObjectSchemaItem::SMember(longitudeDegrees_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["latitudeDegrees"] = CObjectSchemaItem::SMember(latitudeDegrees_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["locationName"] = CObjectSchemaItem::SMember(locationName_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["locationDescription"] = CObjectSchemaItem::SMember(locationDescription_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["addressLines"] = CObjectSchemaItem::SMember(addressLines_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["phoneNumber"] = CObjectSchemaItem::SMember(phoneNumber_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["locationImage"] = CObjectSchemaItem::SMember(locationImage_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["timeStamp"] = CObjectSchemaItem::SMember(timeStamp_SchemaItem, false, "4.1.0", "", false, false);
  schema_members["address"] = CObjectSchemaItem::SMember(address_SchemaItem, false, "4.1.0", "", false, false);
  schema_members["deliveryMode"] = CObjectSchemaItem::SMember(deliveryMode_SchemaItem, false, "4.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SendLocationID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_DialNumberID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter number.
  //
  // 
  //                 Phone number is a string, which can be up to 40 chars.
  //                 All characters shall be stripped from string except digits 0-9 and * # , ; +
  //             
  std::shared_ptr<ISchemaItem> number_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(40), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["number"] = CObjectSchemaItem::SMember(number_SchemaItem, true, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_DialNumberID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);

  // Function parameter success.
  //
  // true, if successful
  // false, if failed
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_ButtonPressID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<ModuleType::eType> ModuleType_all_enum_values;
  ModuleType_all_enum_values.insert(ModuleType::CLIMATE);
  ModuleType_all_enum_values.insert(ModuleType::RADIO);
  ModuleType_all_enum_values.insert(ModuleType::SEAT);
  ModuleType_all_enum_values.insert(ModuleType::AUDIO);
  ModuleType_all_enum_values.insert(ModuleType::LIGHT);
  ModuleType_all_enum_values.insert(ModuleType::HMI_SETTINGS);

  std::map<ModuleType::eType, std::vector<ElementSignature>> ModuleType_element_signatures;
  ModuleType_element_signatures[ModuleType::SEAT] = std::vector<ElementSignature>();
  ModuleType_element_signatures[ModuleType::AUDIO] = std::vector<ElementSignature>();
  ModuleType_element_signatures[ModuleType::LIGHT] = std::vector<ElementSignature>();
  ModuleType_element_signatures[ModuleType::HMI_SETTINGS] = std::vector<ElementSignature>();
  ModuleType_element_signatures[ModuleType::SEAT].push_back(ElementSignature("5.0.0", "", false));
  ModuleType_element_signatures[ModuleType::AUDIO].push_back(ElementSignature("5.0.0", "", false));
  ModuleType_element_signatures[ModuleType::LIGHT].push_back(ElementSignature("5.0.0", "", false));
  ModuleType_element_signatures[ModuleType::HMI_SETTINGS].push_back(ElementSignature("5.0.0", "", false));

  std::set<ButtonName::eType> ButtonName_all_enum_values;
  ButtonName_all_enum_values.insert(ButtonName::OK);
  ButtonName_all_enum_values.insert(ButtonName::PLAY_PAUSE);
  ButtonName_all_enum_values.insert(ButtonName::SEEKLEFT);
  ButtonName_all_enum_values.insert(ButtonName::SEEKRIGHT);
  ButtonName_all_enum_values.insert(ButtonName::TUNEUP);
  ButtonName_all_enum_values.insert(ButtonName::TUNEDOWN);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_0);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_1);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_2);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_3);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_4);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_5);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_6);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_7);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_8);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_9);
  ButtonName_all_enum_values.insert(ButtonName::CUSTOM_BUTTON);
  ButtonName_all_enum_values.insert(ButtonName::SEARCH);
  ButtonName_all_enum_values.insert(ButtonName::AC_MAX);
  ButtonName_all_enum_values.insert(ButtonName::AC);
  ButtonName_all_enum_values.insert(ButtonName::RECIRCULATE);
  ButtonName_all_enum_values.insert(ButtonName::FAN_UP);
  ButtonName_all_enum_values.insert(ButtonName::FAN_DOWN);
  ButtonName_all_enum_values.insert(ButtonName::TEMP_UP);
  ButtonName_all_enum_values.insert(ButtonName::TEMP_DOWN);
  ButtonName_all_enum_values.insert(ButtonName::DEFROST_MAX);
  ButtonName_all_enum_values.insert(ButtonName::DEFROST);
  ButtonName_all_enum_values.insert(ButtonName::DEFROST_REAR);
  ButtonName_all_enum_values.insert(ButtonName::UPPER_VENT);
  ButtonName_all_enum_values.insert(ButtonName::LOWER_VENT);
  ButtonName_all_enum_values.insert(ButtonName::VOLUME_UP);
  ButtonName_all_enum_values.insert(ButtonName::VOLUME_DOWN);
  ButtonName_all_enum_values.insert(ButtonName::EJECT);
  ButtonName_all_enum_values.insert(ButtonName::SOURCE);
  ButtonName_all_enum_values.insert(ButtonName::SHUFFLE);
  ButtonName_all_enum_values.insert(ButtonName::REPEAT);

  std::map<ButtonName::eType, std::vector<ElementSignature>> ButtonName_element_signatures;
  ButtonName_element_signatures[ButtonName::PLAY_PAUSE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::AC_MAX] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::AC] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::RECIRCULATE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::FAN_UP] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::FAN_DOWN] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::TEMP_UP] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::TEMP_DOWN] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::DEFROST_MAX] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::DEFROST] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::DEFROST_REAR] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::UPPER_VENT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::LOWER_VENT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::VOLUME_UP] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::VOLUME_DOWN] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::EJECT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::SOURCE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::SHUFFLE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::REPEAT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::PLAY_PAUSE].push_back(ElementSignature("5.0.0", "", false));
  ButtonName_element_signatures[ButtonName::AC_MAX].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::AC].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::RECIRCULATE].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::FAN_UP].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::FAN_DOWN].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::TEMP_UP].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::TEMP_DOWN].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::DEFROST_MAX].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::DEFROST].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::DEFROST_REAR].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::UPPER_VENT].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::LOWER_VENT].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::VOLUME_UP].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::VOLUME_DOWN].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::EJECT].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::SOURCE].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::SHUFFLE].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::REPEAT].push_back(ElementSignature("4.5.0", "", false));

  std::set<ButtonPressMode::eType> ButtonPressMode_all_enum_values;
  ButtonPressMode_all_enum_values.insert(ButtonPressMode::LONG);
  ButtonPressMode_all_enum_values.insert(ButtonPressMode::SHORT);

  // Function parameter moduleType.
  //
  // The module where the button should be pressed
  std::shared_ptr<ISchemaItem> moduleType_SchemaItem = TEnumSchemaItem<ModuleType::eType>::createWithSignatures(ModuleType_all_enum_values, ModuleType_element_signatures, TSchemaItemParameter<ModuleType::eType>());

  // Function parameter buttonName.
  //
  // The name of supported RC climate or radio button.
  std::shared_ptr<ISchemaItem> buttonName_SchemaItem = TEnumSchemaItem<ButtonName::eType>::createWithSignatures(ButtonName_all_enum_values, ButtonName_element_signatures, TSchemaItemParameter<ButtonName::eType>());

  // Function parameter buttonPressMode.
  //
  // Indicates whether this is a LONG or SHORT button press event.
  std::shared_ptr<ISchemaItem> buttonPressMode_SchemaItem = TEnumSchemaItem<ButtonPressMode::eType>::create(ButtonPressMode_all_enum_values, TSchemaItemParameter<ButtonPressMode::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["moduleType"] = CObjectSchemaItem::SMember(moduleType_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["buttonName"] = CObjectSchemaItem::SMember(buttonName_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["buttonPressMode"] = CObjectSchemaItem::SMember(buttonPressMode_SchemaItem, true, "4.5.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_ButtonPressID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::IGNORED);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::IN_USE);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::USER_DISALLOWED);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "4.5.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_GetInteriorVehicleDataID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<ModuleType::eType> ModuleType_all_enum_values;
  ModuleType_all_enum_values.insert(ModuleType::CLIMATE);
  ModuleType_all_enum_values.insert(ModuleType::RADIO);
  ModuleType_all_enum_values.insert(ModuleType::SEAT);
  ModuleType_all_enum_values.insert(ModuleType::AUDIO);
  ModuleType_all_enum_values.insert(ModuleType::LIGHT);
  ModuleType_all_enum_values.insert(ModuleType::HMI_SETTINGS);

  std::map<ModuleType::eType, std::vector<ElementSignature>> ModuleType_element_signatures;
  ModuleType_element_signatures[ModuleType::SEAT] = std::vector<ElementSignature>();
  ModuleType_element_signatures[ModuleType::AUDIO] = std::vector<ElementSignature>();
  ModuleType_element_signatures[ModuleType::LIGHT] = std::vector<ElementSignature>();
  ModuleType_element_signatures[ModuleType::HMI_SETTINGS] = std::vector<ElementSignature>();
  ModuleType_element_signatures[ModuleType::SEAT].push_back(ElementSignature("5.0.0", "", false));
  ModuleType_element_signatures[ModuleType::AUDIO].push_back(ElementSignature("5.0.0", "", false));
  ModuleType_element_signatures[ModuleType::LIGHT].push_back(ElementSignature("5.0.0", "", false));
  ModuleType_element_signatures[ModuleType::HMI_SETTINGS].push_back(ElementSignature("5.0.0", "", false));

  // Function parameter moduleType.
  //
  // 
  //                 The type of a RC module to retrieve module data from the vehicle.
  //                 In the future, this should be the Identification of a module.
  //             
  std::shared_ptr<ISchemaItem> moduleType_SchemaItem = TEnumSchemaItem<ModuleType::eType>::createWithSignatures(ModuleType_all_enum_values, ModuleType_element_signatures, TSchemaItemParameter<ModuleType::eType>());

  // Function parameter subscribe.
  //
  // 
  //                 If subscribe is true, the head unit will register OnInteriorVehicleData notifications for the requested moduleType.
  //                 If subscribe is false, the head unit will unregister OnInteriorVehicleData notifications for the requested moduleType.
  //                 If subscribe is not included, the subscription status of the app for the requested moduleType will remain unchanged.
  //             
  std::shared_ptr<ISchemaItem> subscribe_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter subscribe_history_v1.
  std::shared_ptr<ISchemaItem> subscribe_history_v1_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>(false));

  std::vector<CObjectSchemaItem::SMember> subscribe_history_vector;CObjectSchemaItem::Members schema_members;

  schema_members["moduleType"] = CObjectSchemaItem::SMember(moduleType_SchemaItem, true, "4.5.0", "", false, false);
  subscribe_history_vector.push_back(CObjectSchemaItem::SMember(subscribe_history_v1_SchemaItem, false, "4.5.0", "4.5.1", false, false));
  schema_members["subscribe"] = CObjectSchemaItem::SMember(subscribe_SchemaItem, false, "4.5.1", "", false, false, subscribe_history_vector);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_GetInteriorVehicleDataID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::IGNORED);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::USER_DISALLOWED);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter moduleData.
  std::shared_ptr<ISchemaItem> moduleData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ModuleData);

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter isSubscribed.
  //
  // 
  //                 It is a conditional-mandatory parameter: must be returned in case "subscribe" parameter was present in the related request.
  //                 if "true" - the "moduleType" from request is successfully subscribed and the head unit will send onInteriorVehicleData notifications for the moduleType.
  //                 if "false" - the "moduleType" from request is either unsubscribed or failed to subscribe.
  //             
  std::shared_ptr<ISchemaItem> isSubscribed_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["moduleData"] = CObjectSchemaItem::SMember(moduleData_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["isSubscribed"] = CObjectSchemaItem::SMember(isSubscribed_SchemaItem, false, "4.5.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SetInteriorVehicleDataID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter moduleData.
  //
  // The module data to set for the requested RC module.
  std::shared_ptr<ISchemaItem> moduleData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ModuleData);CObjectSchemaItem::Members schema_members;

  schema_members["moduleData"] = CObjectSchemaItem::SMember(moduleData_SchemaItem, true, "4.5.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SetInteriorVehicleDataID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::READ_ONLY);
  resultCode_allowed_enum_subset_values.insert(Result::IGNORED);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::IN_USE);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::USER_DISALLOWED);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter moduleData.
  std::shared_ptr<ISchemaItem> moduleData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ModuleData);

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["moduleData"] = CObjectSchemaItem::SMember(moduleData_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "4.5.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SubscribeWayPointsID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SubscribeWayPointsID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::IGNORED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "4.1.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "4.1.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "4.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_GetWayPointsID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<WayPointType::eType> WayPointType_all_enum_values;
  WayPointType_all_enum_values.insert(WayPointType::ALL);
  WayPointType_all_enum_values.insert(WayPointType::DESTINATION);

  // Function parameter wayPointType.
  //
  // To request for either the destination only or for all waypoints including destination
  std::shared_ptr<ISchemaItem> wayPointType_SchemaItem = TEnumSchemaItem<WayPointType::eType>::create(WayPointType_all_enum_values, TSchemaItemParameter<WayPointType::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["wayPointType"] = CObjectSchemaItem::SMember(wayPointType_SchemaItem, true, "4.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_GetWayPointsID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::IGNORED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::IN_USE);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::TIMED_OUT);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter wayPoints.
  //
  // See LocationDetails
  std::shared_ptr<ISchemaItem> wayPoints_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::LocationDetails), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(10));CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "4.1.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "4.1.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "4.1.0", "", false, false);
  schema_members["wayPoints"] = CObjectSchemaItem::SMember(wayPoints_SchemaItem, false, "4.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_UnsubscribeWayPointsID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_UnsubscribeWayPointsID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::IGNORED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter wayPoints.
  //
  // See LocationDetails
  std::shared_ptr<ISchemaItem> wayPoints_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::LocationDetails), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(10));CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "4.1.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "4.1.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "4.1.0", "", false, false);
  schema_members["wayPoints"] = CObjectSchemaItem::SMember(wayPoints_SchemaItem, false, "4.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_GetSystemCapabilityID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<SystemCapabilityType::eType> SystemCapabilityType_all_enum_values;
  SystemCapabilityType_all_enum_values.insert(SystemCapabilityType::NAVIGATION);
  SystemCapabilityType_all_enum_values.insert(SystemCapabilityType::PHONE_CALL);
  SystemCapabilityType_all_enum_values.insert(SystemCapabilityType::VIDEO_STREAMING);
  SystemCapabilityType_all_enum_values.insert(SystemCapabilityType::REMOTE_CONTROL);
  SystemCapabilityType_all_enum_values.insert(SystemCapabilityType::APP_SERVICES);

  std::map<SystemCapabilityType::eType, std::vector<ElementSignature>> SystemCapabilityType_element_signatures;
  SystemCapabilityType_element_signatures[SystemCapabilityType::APP_SERVICES] = std::vector<ElementSignature>();
  SystemCapabilityType_element_signatures[SystemCapabilityType::APP_SERVICES].push_back(ElementSignature("5.1.0", "", false));

  // Function parameter systemCapabilityType.
  //
  // The type of system capability to get more information on
  std::shared_ptr<ISchemaItem> systemCapabilityType_SchemaItem = TEnumSchemaItem<SystemCapabilityType::eType>::createWithSignatures(SystemCapabilityType_all_enum_values, SystemCapabilityType_element_signatures, TSchemaItemParameter<SystemCapabilityType::eType>());

  // Function parameter subscribe.
  //
  // Flag to subscribe to updates of the supplied service capability type. If true, the requester will be subscribed. If false, the requester will not be subscribed and be removed as a subscriber if it was previously subscribed.
  std::shared_ptr<ISchemaItem> subscribe_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["systemCapabilityType"] = CObjectSchemaItem::SMember(systemCapabilityType_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["subscribe"] = CObjectSchemaItem::SMember(subscribe_SchemaItem, false, "5.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_GetSystemCapabilityID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::IGNORED);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::UNSUPPORTED_RESOURCE);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::USER_DISALLOWED);
  resultCode_allowed_enum_subset_values.insert(Result::DATA_NOT_AVAILABLE);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter systemCapability.
  std::shared_ptr<ISchemaItem> systemCapability_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SystemCapability);

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["systemCapability"] = CObjectSchemaItem::SMember(systemCapability_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "4.5.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SendHapticDataID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter hapticRectData.
  //
  // Array of spatial data structures that represent the locations of all user controls present on the HMI. This data should be updated if/when the application presents a new screen. When a request is sent, if successful, it will replace all spatial data previously sent through RPC. If an empty array is sent, the existing spatial data will be cleared
  std::shared_ptr<ISchemaItem> hapticRectData_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::HapticRect), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(1000));CObjectSchemaItem::Members schema_members;

  schema_members["hapticRectData"] = CObjectSchemaItem::SMember(hapticRectData_SchemaItem, false, "4.5.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SendHapticDataID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);

  // Function parameter success.
  //
  //  true if successful; false if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "4.5.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SetCloudAppPropertiesID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter properties.
  //
  //  The new cloud application properties 
  std::shared_ptr<ISchemaItem> properties_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::CloudAppProperties);CObjectSchemaItem::Members schema_members;

  schema_members["properties"] = CObjectSchemaItem::SMember(properties_SchemaItem, true, "5.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_SetCloudAppPropertiesID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::WARNINGS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true if successful; false if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "5.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_GetCloudAppPropertiesID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter appID.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true, "5.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_GetCloudAppPropertiesID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::WARNINGS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter properties.
  //
  //  The requested cloud application properties 
  std::shared_ptr<ISchemaItem> properties_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::CloudAppProperties);

  // Function parameter success.
  //
  //  true if successful; false if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["properties"] = CObjectSchemaItem::SMember(properties_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "5.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_PublishAppServiceID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter appServiceManifest.
  //
  //  The manifest of the service that wishes to be published.
  std::shared_ptr<ISchemaItem> appServiceManifest_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::AppServiceManifest);CObjectSchemaItem::Members schema_members;

  schema_members["appServiceManifest"] = CObjectSchemaItem::SMember(appServiceManifest_SchemaItem, true, "5.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_PublishAppServiceID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter appServiceRecord.
  //
  //  If the request was successful, this object will be the current status of the service record for the published service. This will include the Core supplied service ID.
  std::shared_ptr<ISchemaItem> appServiceRecord_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::AppServiceRecord);CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["appServiceRecord"] = CObjectSchemaItem::SMember(appServiceRecord_SchemaItem, false, "5.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_GetAppServiceDataID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter serviceType.
  //
  // The type of service that is to be offered by this app. See AppServiceType for known enum equivalent types. Parameter is a string to allow for new service types to be used by apps on older versions of SDL Core.
  std::shared_ptr<ISchemaItem> serviceType_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Function parameter subscribe.
  //
  //  If true, the consumer is requesting to subscribe to all future updates from the service publisher. If false, the consumer doesn't wish to subscribe and should be unsubscribed if it was previously subscribed.
  std::shared_ptr<ISchemaItem> subscribe_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["serviceType"] = CObjectSchemaItem::SMember(serviceType_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["subscribe"] = CObjectSchemaItem::SMember(subscribe_SchemaItem, false, "5.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_GetAppServiceDataID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter serviceData.
  std::shared_ptr<ISchemaItem> serviceData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::AppServiceData);CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["serviceData"] = CObjectSchemaItem::SMember(serviceData_SchemaItem, false, "5.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_PerformAppServiceInteractionID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter serviceUri.
  //
  // Fully qualified URI based on a predetermined scheme provided by the app service. SDL makes no guarantee that this URI is correct.
  std::shared_ptr<ISchemaItem> serviceUri_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Function parameter serviceID.
  //
  // The service ID that the app consumer wishes to send this URI.
  std::shared_ptr<ISchemaItem> serviceID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Function parameter originApp.
  //
  // This string is the appID of the app requesting the app service provider take the specific action.
  std::shared_ptr<ISchemaItem> originApp_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Function parameter requestServiceActive.
  //
  // This flag signals the requesting consumer would like this service to become the active primary service of the destination's type.
  std::shared_ptr<ISchemaItem> requestServiceActive_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["serviceUri"] = CObjectSchemaItem::SMember(serviceUri_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["serviceID"] = CObjectSchemaItem::SMember(serviceID_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["originApp"] = CObjectSchemaItem::SMember(originApp_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["requestServiceActive"] = CObjectSchemaItem::SMember(requestServiceActive_SchemaItem, false, "5.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_PerformAppServiceInteractionID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> Result_all_enum_values;
  Result_all_enum_values.insert(Result::SUCCESS);
  Result_all_enum_values.insert(Result::UNSUPPORTED_REQUEST);
  Result_all_enum_values.insert(Result::UNSUPPORTED_RESOURCE);
  Result_all_enum_values.insert(Result::DISALLOWED);
  Result_all_enum_values.insert(Result::REJECTED);
  Result_all_enum_values.insert(Result::ABORTED);
  Result_all_enum_values.insert(Result::IGNORED);
  Result_all_enum_values.insert(Result::RETRY);
  Result_all_enum_values.insert(Result::IN_USE);
  Result_all_enum_values.insert(Result::VEHICLE_DATA_NOT_AVAILABLE);
  Result_all_enum_values.insert(Result::TIMED_OUT);
  Result_all_enum_values.insert(Result::INVALID_DATA);
  Result_all_enum_values.insert(Result::CHAR_LIMIT_EXCEEDED);
  Result_all_enum_values.insert(Result::INVALID_ID);
  Result_all_enum_values.insert(Result::DUPLICATE_NAME);
  Result_all_enum_values.insert(Result::APPLICATION_NOT_REGISTERED);
  Result_all_enum_values.insert(Result::WRONG_LANGUAGE);
  Result_all_enum_values.insert(Result::OUT_OF_MEMORY);
  Result_all_enum_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  Result_all_enum_values.insert(Result::TOO_MANY_APPLICATIONS);
  Result_all_enum_values.insert(Result::APPLICATION_REGISTERED_ALREADY);
  Result_all_enum_values.insert(Result::WARNINGS);
  Result_all_enum_values.insert(Result::GENERIC_ERROR);
  Result_all_enum_values.insert(Result::USER_DISALLOWED);
  Result_all_enum_values.insert(Result::TRUNCATED_DATA);
  Result_all_enum_values.insert(Result::UNSUPPORTED_VERSION);
  Result_all_enum_values.insert(Result::VEHICLE_DATA_NOT_ALLOWED);
  Result_all_enum_values.insert(Result::FILE_NOT_FOUND);
  Result_all_enum_values.insert(Result::CANCEL_ROUTE);
  Result_all_enum_values.insert(Result::SAVED);
  Result_all_enum_values.insert(Result::INVALID_CERT);
  Result_all_enum_values.insert(Result::EXPIRED_CERT);
  Result_all_enum_values.insert(Result::RESUME_FAILED);
  Result_all_enum_values.insert(Result::DATA_NOT_AVAILABLE);
  Result_all_enum_values.insert(Result::READ_ONLY);
  Result_all_enum_values.insert(Result::CORRUPTED_DATA);

  std::map<Result::eType, std::vector<ElementSignature>> Result_element_signatures;
  Result_element_signatures[Result::VEHICLE_DATA_NOT_AVAILABLE] = std::vector<ElementSignature>();
  Result_element_signatures[Result::USER_DISALLOWED] = std::vector<ElementSignature>();
  Result_element_signatures[Result::UNSUPPORTED_VERSION] = std::vector<ElementSignature>();
  Result_element_signatures[Result::VEHICLE_DATA_NOT_ALLOWED] = std::vector<ElementSignature>();
  Result_element_signatures[Result::FILE_NOT_FOUND] = std::vector<ElementSignature>();
  Result_element_signatures[Result::SAVED] = std::vector<ElementSignature>();
  Result_element_signatures[Result::INVALID_CERT] = std::vector<ElementSignature>();
  Result_element_signatures[Result::EXPIRED_CERT] = std::vector<ElementSignature>();
  Result_element_signatures[Result::RESUME_FAILED] = std::vector<ElementSignature>();
  Result_element_signatures[Result::DATA_NOT_AVAILABLE] = std::vector<ElementSignature>();
  Result_element_signatures[Result::READ_ONLY] = std::vector<ElementSignature>();
  Result_element_signatures[Result::CORRUPTED_DATA] = std::vector<ElementSignature>();
  Result_element_signatures[Result::VEHICLE_DATA_NOT_AVAILABLE].push_back(ElementSignature("2.0.0", "", false));
  Result_element_signatures[Result::USER_DISALLOWED].push_back(ElementSignature("2.0.0", "", false));
  Result_element_signatures[Result::UNSUPPORTED_VERSION].push_back(ElementSignature("2.0.0", "", false));
  Result_element_signatures[Result::VEHICLE_DATA_NOT_ALLOWED].push_back(ElementSignature("2.0.0", "", false));
  Result_element_signatures[Result::FILE_NOT_FOUND].push_back(ElementSignature("3.0.0", "", false));
  Result_element_signatures[Result::SAVED].push_back(ElementSignature("2.0.0", "", false));
  Result_element_signatures[Result::INVALID_CERT].push_back(ElementSignature("3.0.0", "", false));
  Result_element_signatures[Result::EXPIRED_CERT].push_back(ElementSignature("3.0.0", "", false));
  Result_element_signatures[Result::RESUME_FAILED].push_back(ElementSignature("3.0.0", "", false));
  Result_element_signatures[Result::DATA_NOT_AVAILABLE].push_back(ElementSignature("4.5.0", "", false));
  Result_element_signatures[Result::READ_ONLY].push_back(ElementSignature("4.5.0", "", false));
  Result_element_signatures[Result::CORRUPTED_DATA].push_back(ElementSignature("5.0.0", "", false));

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result. All results will be available for this response.
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::createWithSignatures(Result_all_enum_values, Result_element_signatures, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter serviceSpecificResult.
  //
  // The service can provide specific result strings to the consumer through this param.
  std::shared_ptr<ISchemaItem> serviceSpecificResult_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["serviceSpecificResult"] = CObjectSchemaItem::SMember(serviceSpecificResult_SchemaItem, false, "5.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_CloseApplicationID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_CloseApplicationID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::IGNORED);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);
  resultCode_allowed_enum_subset_values.insert(Result::DISALLOWED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);

  // Function parameter success.
  //
  //  true if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "6.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "6.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "6.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnHMIStatusID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<HMILevel::eType> HMILevel_all_enum_values;
  HMILevel_all_enum_values.insert(HMILevel::HMI_FULL);
  HMILevel_all_enum_values.insert(HMILevel::HMI_LIMITED);
  HMILevel_all_enum_values.insert(HMILevel::HMI_BACKGROUND);
  HMILevel_all_enum_values.insert(HMILevel::HMI_NONE);

  std::set<AudioStreamingState::eType> AudioStreamingState_all_enum_values;
  AudioStreamingState_all_enum_values.insert(AudioStreamingState::AUDIBLE);
  AudioStreamingState_all_enum_values.insert(AudioStreamingState::ATTENUATED);
  AudioStreamingState_all_enum_values.insert(AudioStreamingState::NOT_AUDIBLE);

  std::set<SystemContext::eType> SystemContext_all_enum_values;
  SystemContext_all_enum_values.insert(SystemContext::SYSCTXT_MAIN);
  SystemContext_all_enum_values.insert(SystemContext::SYSCTXT_VRSESSION);
  SystemContext_all_enum_values.insert(SystemContext::SYSCTXT_MENU);
  SystemContext_all_enum_values.insert(SystemContext::SYSCTXT_HMI_OBSCURED);
  SystemContext_all_enum_values.insert(SystemContext::SYSCTXT_ALERT);

  std::set<VideoStreamingState::eType> VideoStreamingState_all_enum_values;
  VideoStreamingState_all_enum_values.insert(VideoStreamingState::STREAMABLE);
  VideoStreamingState_all_enum_values.insert(VideoStreamingState::NOT_STREAMABLE);

  // Function parameter hmiLevel.
  //
  // See HMILevel
  std::shared_ptr<ISchemaItem> hmiLevel_SchemaItem = TEnumSchemaItem<HMILevel::eType>::create(HMILevel_all_enum_values, TSchemaItemParameter<HMILevel::eType>());

  // Function parameter audioStreamingState.
  //
  // See AudioStreamingState
  std::shared_ptr<ISchemaItem> audioStreamingState_SchemaItem = TEnumSchemaItem<AudioStreamingState::eType>::create(AudioStreamingState_all_enum_values, TSchemaItemParameter<AudioStreamingState::eType>());

  // Function parameter systemContext.
  //
  // See SystemContext
  std::shared_ptr<ISchemaItem> systemContext_SchemaItem = TEnumSchemaItem<SystemContext::eType>::create(SystemContext_all_enum_values, TSchemaItemParameter<SystemContext::eType>());

  // Function parameter videoStreamingState.
  //
  // 
  //                 See VideoStreamingState. 
  //                 If it is NOT_STREAMABLE, the app must stop streaming video to SDL Core(stop service).
  //             
  std::shared_ptr<ISchemaItem> videoStreamingState_SchemaItem = TEnumSchemaItem<VideoStreamingState::eType>::create(VideoStreamingState_all_enum_values, TSchemaItemParameter<VideoStreamingState::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["hmiLevel"] = CObjectSchemaItem::SMember(hmiLevel_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["audioStreamingState"] = CObjectSchemaItem::SMember(audioStreamingState_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["systemContext"] = CObjectSchemaItem::SMember(systemContext_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["videoStreamingState"] = CObjectSchemaItem::SMember(videoStreamingState_SchemaItem, false, "5.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnAppInterfaceUnregisteredID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<AppInterfaceUnregisteredReason::eType> AppInterfaceUnregisteredReason_all_enum_values;
  AppInterfaceUnregisteredReason_all_enum_values.insert(AppInterfaceUnregisteredReason::IGNITION_OFF);
  AppInterfaceUnregisteredReason_all_enum_values.insert(AppInterfaceUnregisteredReason::BLUETOOTH_OFF);
  AppInterfaceUnregisteredReason_all_enum_values.insert(AppInterfaceUnregisteredReason::USB_DISCONNECTED);
  AppInterfaceUnregisteredReason_all_enum_values.insert(AppInterfaceUnregisteredReason::REQUEST_WHILE_IN_NONE_HMI_LEVEL);
  AppInterfaceUnregisteredReason_all_enum_values.insert(AppInterfaceUnregisteredReason::TOO_MANY_REQUESTS);
  AppInterfaceUnregisteredReason_all_enum_values.insert(AppInterfaceUnregisteredReason::DRIVER_DISTRACTION_VIOLATION);
  AppInterfaceUnregisteredReason_all_enum_values.insert(AppInterfaceUnregisteredReason::LANGUAGE_CHANGE);
  AppInterfaceUnregisteredReason_all_enum_values.insert(AppInterfaceUnregisteredReason::MASTER_RESET);
  AppInterfaceUnregisteredReason_all_enum_values.insert(AppInterfaceUnregisteredReason::FACTORY_DEFAULTS);
  AppInterfaceUnregisteredReason_all_enum_values.insert(AppInterfaceUnregisteredReason::APP_UNAUTHORIZED);
  AppInterfaceUnregisteredReason_all_enum_values.insert(AppInterfaceUnregisteredReason::PROTOCOL_VIOLATION);
  AppInterfaceUnregisteredReason_all_enum_values.insert(AppInterfaceUnregisteredReason::UNSUPPORTED_HMI_RESOURCE);

  std::map<AppInterfaceUnregisteredReason::eType, std::vector<ElementSignature>> AppInterfaceUnregisteredReason_element_signatures;
  AppInterfaceUnregisteredReason_element_signatures[AppInterfaceUnregisteredReason::APP_UNAUTHORIZED] = std::vector<ElementSignature>();
  AppInterfaceUnregisteredReason_element_signatures[AppInterfaceUnregisteredReason::PROTOCOL_VIOLATION] = std::vector<ElementSignature>();
  AppInterfaceUnregisteredReason_element_signatures[AppInterfaceUnregisteredReason::UNSUPPORTED_HMI_RESOURCE] = std::vector<ElementSignature>();
  AppInterfaceUnregisteredReason_element_signatures[AppInterfaceUnregisteredReason::APP_UNAUTHORIZED].push_back(ElementSignature("2.0.0", "", false));
  AppInterfaceUnregisteredReason_element_signatures[AppInterfaceUnregisteredReason::PROTOCOL_VIOLATION].push_back(ElementSignature("4.0.0", "", false));
  AppInterfaceUnregisteredReason_element_signatures[AppInterfaceUnregisteredReason::UNSUPPORTED_HMI_RESOURCE].push_back(ElementSignature("4.1.0", "", false));

  // Function parameter reason.
  //
  // See AppInterfaceUnregisteredReason
  std::shared_ptr<ISchemaItem> reason_SchemaItem = TEnumSchemaItem<AppInterfaceUnregisteredReason::eType>::createWithSignatures(AppInterfaceUnregisteredReason_all_enum_values, AppInterfaceUnregisteredReason_element_signatures, TSchemaItemParameter<AppInterfaceUnregisteredReason::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["reason"] = CObjectSchemaItem::SMember(reason_SchemaItem, true, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnButtonEventID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<ButtonName::eType> ButtonName_all_enum_values;
  ButtonName_all_enum_values.insert(ButtonName::OK);
  ButtonName_all_enum_values.insert(ButtonName::PLAY_PAUSE);
  ButtonName_all_enum_values.insert(ButtonName::SEEKLEFT);
  ButtonName_all_enum_values.insert(ButtonName::SEEKRIGHT);
  ButtonName_all_enum_values.insert(ButtonName::TUNEUP);
  ButtonName_all_enum_values.insert(ButtonName::TUNEDOWN);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_0);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_1);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_2);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_3);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_4);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_5);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_6);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_7);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_8);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_9);
  ButtonName_all_enum_values.insert(ButtonName::CUSTOM_BUTTON);
  ButtonName_all_enum_values.insert(ButtonName::SEARCH);
  ButtonName_all_enum_values.insert(ButtonName::AC_MAX);
  ButtonName_all_enum_values.insert(ButtonName::AC);
  ButtonName_all_enum_values.insert(ButtonName::RECIRCULATE);
  ButtonName_all_enum_values.insert(ButtonName::FAN_UP);
  ButtonName_all_enum_values.insert(ButtonName::FAN_DOWN);
  ButtonName_all_enum_values.insert(ButtonName::TEMP_UP);
  ButtonName_all_enum_values.insert(ButtonName::TEMP_DOWN);
  ButtonName_all_enum_values.insert(ButtonName::DEFROST_MAX);
  ButtonName_all_enum_values.insert(ButtonName::DEFROST);
  ButtonName_all_enum_values.insert(ButtonName::DEFROST_REAR);
  ButtonName_all_enum_values.insert(ButtonName::UPPER_VENT);
  ButtonName_all_enum_values.insert(ButtonName::LOWER_VENT);
  ButtonName_all_enum_values.insert(ButtonName::VOLUME_UP);
  ButtonName_all_enum_values.insert(ButtonName::VOLUME_DOWN);
  ButtonName_all_enum_values.insert(ButtonName::EJECT);
  ButtonName_all_enum_values.insert(ButtonName::SOURCE);
  ButtonName_all_enum_values.insert(ButtonName::SHUFFLE);
  ButtonName_all_enum_values.insert(ButtonName::REPEAT);

  std::map<ButtonName::eType, std::vector<ElementSignature>> ButtonName_element_signatures;
  ButtonName_element_signatures[ButtonName::PLAY_PAUSE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::AC_MAX] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::AC] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::RECIRCULATE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::FAN_UP] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::FAN_DOWN] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::TEMP_UP] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::TEMP_DOWN] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::DEFROST_MAX] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::DEFROST] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::DEFROST_REAR] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::UPPER_VENT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::LOWER_VENT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::VOLUME_UP] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::VOLUME_DOWN] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::EJECT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::SOURCE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::SHUFFLE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::REPEAT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::PLAY_PAUSE].push_back(ElementSignature("5.0.0", "", false));
  ButtonName_element_signatures[ButtonName::AC_MAX].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::AC].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::RECIRCULATE].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::FAN_UP].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::FAN_DOWN].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::TEMP_UP].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::TEMP_DOWN].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::DEFROST_MAX].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::DEFROST].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::DEFROST_REAR].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::UPPER_VENT].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::LOWER_VENT].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::VOLUME_UP].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::VOLUME_DOWN].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::EJECT].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::SOURCE].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::SHUFFLE].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::REPEAT].push_back(ElementSignature("4.5.0", "", false));

  std::set<ButtonEventMode::eType> ButtonEventMode_all_enum_values;
  ButtonEventMode_all_enum_values.insert(ButtonEventMode::BUTTONUP);
  ButtonEventMode_all_enum_values.insert(ButtonEventMode::BUTTONDOWN);

  // Function parameter buttonName.
  std::shared_ptr<ISchemaItem> buttonName_SchemaItem = TEnumSchemaItem<ButtonName::eType>::createWithSignatures(ButtonName_all_enum_values, ButtonName_element_signatures, TSchemaItemParameter<ButtonName::eType>());

  // Function parameter buttonEventMode.
  //
  // Indicates whether this is an UP or DOWN event.
  std::shared_ptr<ISchemaItem> buttonEventMode_SchemaItem = TEnumSchemaItem<ButtonEventMode::eType>::create(ButtonEventMode_all_enum_values, TSchemaItemParameter<ButtonEventMode::eType>());

  // Function parameter customButtonID.
  //
  // If ButtonName is "CUSTOM_BUTTON", this references the integer ID passed by a custom button. (e.g. softButton ID)
  std::shared_ptr<ISchemaItem> customButtonID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65536), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["buttonName"] = CObjectSchemaItem::SMember(buttonName_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["buttonEventMode"] = CObjectSchemaItem::SMember(buttonEventMode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["customButtonID"] = CObjectSchemaItem::SMember(customButtonID_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnButtonPressID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<ButtonName::eType> ButtonName_all_enum_values;
  ButtonName_all_enum_values.insert(ButtonName::OK);
  ButtonName_all_enum_values.insert(ButtonName::PLAY_PAUSE);
  ButtonName_all_enum_values.insert(ButtonName::SEEKLEFT);
  ButtonName_all_enum_values.insert(ButtonName::SEEKRIGHT);
  ButtonName_all_enum_values.insert(ButtonName::TUNEUP);
  ButtonName_all_enum_values.insert(ButtonName::TUNEDOWN);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_0);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_1);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_2);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_3);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_4);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_5);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_6);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_7);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_8);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_9);
  ButtonName_all_enum_values.insert(ButtonName::CUSTOM_BUTTON);
  ButtonName_all_enum_values.insert(ButtonName::SEARCH);
  ButtonName_all_enum_values.insert(ButtonName::AC_MAX);
  ButtonName_all_enum_values.insert(ButtonName::AC);
  ButtonName_all_enum_values.insert(ButtonName::RECIRCULATE);
  ButtonName_all_enum_values.insert(ButtonName::FAN_UP);
  ButtonName_all_enum_values.insert(ButtonName::FAN_DOWN);
  ButtonName_all_enum_values.insert(ButtonName::TEMP_UP);
  ButtonName_all_enum_values.insert(ButtonName::TEMP_DOWN);
  ButtonName_all_enum_values.insert(ButtonName::DEFROST_MAX);
  ButtonName_all_enum_values.insert(ButtonName::DEFROST);
  ButtonName_all_enum_values.insert(ButtonName::DEFROST_REAR);
  ButtonName_all_enum_values.insert(ButtonName::UPPER_VENT);
  ButtonName_all_enum_values.insert(ButtonName::LOWER_VENT);
  ButtonName_all_enum_values.insert(ButtonName::VOLUME_UP);
  ButtonName_all_enum_values.insert(ButtonName::VOLUME_DOWN);
  ButtonName_all_enum_values.insert(ButtonName::EJECT);
  ButtonName_all_enum_values.insert(ButtonName::SOURCE);
  ButtonName_all_enum_values.insert(ButtonName::SHUFFLE);
  ButtonName_all_enum_values.insert(ButtonName::REPEAT);

  std::map<ButtonName::eType, std::vector<ElementSignature>> ButtonName_element_signatures;
  ButtonName_element_signatures[ButtonName::PLAY_PAUSE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::AC_MAX] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::AC] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::RECIRCULATE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::FAN_UP] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::FAN_DOWN] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::TEMP_UP] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::TEMP_DOWN] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::DEFROST_MAX] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::DEFROST] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::DEFROST_REAR] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::UPPER_VENT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::LOWER_VENT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::VOLUME_UP] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::VOLUME_DOWN] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::EJECT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::SOURCE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::SHUFFLE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::REPEAT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::PLAY_PAUSE].push_back(ElementSignature("5.0.0", "", false));
  ButtonName_element_signatures[ButtonName::AC_MAX].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::AC].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::RECIRCULATE].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::FAN_UP].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::FAN_DOWN].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::TEMP_UP].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::TEMP_DOWN].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::DEFROST_MAX].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::DEFROST].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::DEFROST_REAR].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::UPPER_VENT].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::LOWER_VENT].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::VOLUME_UP].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::VOLUME_DOWN].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::EJECT].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::SOURCE].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::SHUFFLE].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::REPEAT].push_back(ElementSignature("4.5.0", "", false));

  std::set<ButtonPressMode::eType> ButtonPressMode_all_enum_values;
  ButtonPressMode_all_enum_values.insert(ButtonPressMode::LONG);
  ButtonPressMode_all_enum_values.insert(ButtonPressMode::SHORT);

  // Function parameter buttonName.
  std::shared_ptr<ISchemaItem> buttonName_SchemaItem = TEnumSchemaItem<ButtonName::eType>::createWithSignatures(ButtonName_all_enum_values, ButtonName_element_signatures, TSchemaItemParameter<ButtonName::eType>());

  // Function parameter buttonPressMode.
  //
  // Indicates whether this is a LONG or SHORT button press event.
  std::shared_ptr<ISchemaItem> buttonPressMode_SchemaItem = TEnumSchemaItem<ButtonPressMode::eType>::create(ButtonPressMode_all_enum_values, TSchemaItemParameter<ButtonPressMode::eType>());

  // Function parameter customButtonID.
  //
  // If ButtonName is "CUSTOM_BUTTON", this references the integer ID passed by a custom button. (e.g. softButton ID)
  std::shared_ptr<ISchemaItem> customButtonID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65536), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["buttonName"] = CObjectSchemaItem::SMember(buttonName_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["buttonPressMode"] = CObjectSchemaItem::SMember(buttonPressMode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["customButtonID"] = CObjectSchemaItem::SMember(customButtonID_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnVehicleDataID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<ComponentVolumeStatus::eType> ComponentVolumeStatus_all_enum_values;
  ComponentVolumeStatus_all_enum_values.insert(ComponentVolumeStatus::CVS_UNKNOWN);
  ComponentVolumeStatus_all_enum_values.insert(ComponentVolumeStatus::CVS_NORMAL);
  ComponentVolumeStatus_all_enum_values.insert(ComponentVolumeStatus::CVS_LOW);
  ComponentVolumeStatus_all_enum_values.insert(ComponentVolumeStatus::CVS_FAULT);
  ComponentVolumeStatus_all_enum_values.insert(ComponentVolumeStatus::CVS_ALERT);
  ComponentVolumeStatus_all_enum_values.insert(ComponentVolumeStatus::CVS_NOT_SUPPORTED);

  std::set<TurnSignal::eType> TurnSignal_all_enum_values;
  TurnSignal_all_enum_values.insert(TurnSignal::OFF);
  TurnSignal_all_enum_values.insert(TurnSignal::LEFT);
  TurnSignal_all_enum_values.insert(TurnSignal::RIGHT);
  TurnSignal_all_enum_values.insert(TurnSignal::BOTH);

  std::set<PRNDL::eType> PRNDL_all_enum_values;
  PRNDL_all_enum_values.insert(PRNDL::PARK);
  PRNDL_all_enum_values.insert(PRNDL::REVERSE);
  PRNDL_all_enum_values.insert(PRNDL::NEUTRAL);
  PRNDL_all_enum_values.insert(PRNDL::DRIVE);
  PRNDL_all_enum_values.insert(PRNDL::SPORT);
  PRNDL_all_enum_values.insert(PRNDL::LOWGEAR);
  PRNDL_all_enum_values.insert(PRNDL::FIRST);
  PRNDL_all_enum_values.insert(PRNDL::SECOND);
  PRNDL_all_enum_values.insert(PRNDL::THIRD);
  PRNDL_all_enum_values.insert(PRNDL::FOURTH);
  PRNDL_all_enum_values.insert(PRNDL::FIFTH);
  PRNDL_all_enum_values.insert(PRNDL::SIXTH);
  PRNDL_all_enum_values.insert(PRNDL::SEVENTH);
  PRNDL_all_enum_values.insert(PRNDL::EIGHTH);
  PRNDL_all_enum_values.insert(PRNDL::UNKNOWN);
  PRNDL_all_enum_values.insert(PRNDL::FAULT);

  std::set<VehicleDataEventStatus::eType> VehicleDataEventStatus_all_enum_values;
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_NO_EVENT);
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_NO);
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_YES);
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_NOT_SUPPORTED);
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_FAULT);

  std::set<WiperStatus::eType> WiperStatus_all_enum_values;
  WiperStatus_all_enum_values.insert(WiperStatus::OFF);
  WiperStatus_all_enum_values.insert(WiperStatus::AUTO_OFF);
  WiperStatus_all_enum_values.insert(WiperStatus::OFF_MOVING);
  WiperStatus_all_enum_values.insert(WiperStatus::MAN_INT_OFF);
  WiperStatus_all_enum_values.insert(WiperStatus::MAN_INT_ON);
  WiperStatus_all_enum_values.insert(WiperStatus::MAN_LOW);
  WiperStatus_all_enum_values.insert(WiperStatus::MAN_HIGH);
  WiperStatus_all_enum_values.insert(WiperStatus::MAN_FLICK);
  WiperStatus_all_enum_values.insert(WiperStatus::WASH);
  WiperStatus_all_enum_values.insert(WiperStatus::AUTO_LOW);
  WiperStatus_all_enum_values.insert(WiperStatus::AUTO_HIGH);
  WiperStatus_all_enum_values.insert(WiperStatus::COURTESYWIPE);
  WiperStatus_all_enum_values.insert(WiperStatus::AUTO_ADJUST);
  WiperStatus_all_enum_values.insert(WiperStatus::STALLED);
  WiperStatus_all_enum_values.insert(WiperStatus::NO_DATA_EXISTS);

  std::set<ElectronicParkBrakeStatus::eType> ElectronicParkBrakeStatus_all_enum_values;
  ElectronicParkBrakeStatus_all_enum_values.insert(ElectronicParkBrakeStatus::CLOSED);
  ElectronicParkBrakeStatus_all_enum_values.insert(ElectronicParkBrakeStatus::TRANSITION);
  ElectronicParkBrakeStatus_all_enum_values.insert(ElectronicParkBrakeStatus::OPEN);
  ElectronicParkBrakeStatus_all_enum_values.insert(ElectronicParkBrakeStatus::DRIVE_ACTIVE);
  ElectronicParkBrakeStatus_all_enum_values.insert(ElectronicParkBrakeStatus::FAULT);

  // Function parameter gps.
  //
  // See GPSData
  std::shared_ptr<ISchemaItem> gps_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::GPSData);

  // Function parameter speed.
  //
  // The vehicle speed in kilometers per hour
  std::shared_ptr<ISchemaItem> speed_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(700.0), TSchemaItemParameter<double>());

  // Function parameter rpm.
  //
  // The number of revolutions per minute of the engine
  std::shared_ptr<ISchemaItem> rpm_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(20000), TSchemaItemParameter<int32_t>());

  // Function parameter fuelLevel.
  //
  // The fuel level in the tank (percentage)
  std::shared_ptr<ISchemaItem> fuelLevel_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-6.0), TSchemaItemParameter<double>(106.0), TSchemaItemParameter<double>());

  // Function parameter fuelLevel_State.
  //
  // The fuel level state
  std::shared_ptr<ISchemaItem> fuelLevel_State_SchemaItem = TEnumSchemaItem<ComponentVolumeStatus::eType>::create(ComponentVolumeStatus_all_enum_values, TSchemaItemParameter<ComponentVolumeStatus::eType>());

  // Function parameter instantFuelConsumption.
  //
  // The instantaneous fuel consumption in microlitres
  std::shared_ptr<ISchemaItem> instantFuelConsumption_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(25575.0), TSchemaItemParameter<double>());

  // Function parameter fuelRange.
  //
  // The estimate range in KM the vehicle can travel based on fuel level and consumption
  std::shared_ptr<ISchemaItem> fuelRange_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::FuelRange), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));

  // Function parameter externalTemperature.
  //
  // The external temperature in degrees celsius
  std::shared_ptr<ISchemaItem> externalTemperature_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-40.0), TSchemaItemParameter<double>(100.0), TSchemaItemParameter<double>());

  // Function parameter turnSignal.
  //
  // See TurnSignal
  std::shared_ptr<ISchemaItem> turnSignal_SchemaItem = TEnumSchemaItem<TurnSignal::eType>::create(TurnSignal_all_enum_values, TSchemaItemParameter<TurnSignal::eType>());

  // Function parameter vin.
  //
  // Vehicle identification number.
  std::shared_ptr<ISchemaItem> vin_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(17), TSchemaItemParameter<std::string>());

  // Function parameter prndl.
  //
  // See PRNDL
  std::shared_ptr<ISchemaItem> prndl_SchemaItem = TEnumSchemaItem<PRNDL::eType>::create(PRNDL_all_enum_values, TSchemaItemParameter<PRNDL::eType>());

  // Function parameter tirePressure.
  //
  // See TireStatus
  std::shared_ptr<ISchemaItem> tirePressure_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TireStatus);

  // Function parameter odometer.
  //
  // Odometer in km
  std::shared_ptr<ISchemaItem> odometer_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(17000000), TSchemaItemParameter<int32_t>());

  // Function parameter beltStatus.
  //
  // The status of the seat belts
  std::shared_ptr<ISchemaItem> beltStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::BeltStatus);

  // Function parameter bodyInformation.
  //
  // The body information including power modes
  std::shared_ptr<ISchemaItem> bodyInformation_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::BodyInformation);

  // Function parameter deviceStatus.
  //
  // The device status including signal and battery strength
  std::shared_ptr<ISchemaItem> deviceStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::DeviceStatus);

  // Function parameter driverBraking.
  //
  // The status of the brake pedal
  std::shared_ptr<ISchemaItem> driverBraking_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Function parameter wiperStatus.
  //
  // The status of the wipers
  std::shared_ptr<ISchemaItem> wiperStatus_SchemaItem = TEnumSchemaItem<WiperStatus::eType>::create(WiperStatus_all_enum_values, TSchemaItemParameter<WiperStatus::eType>());

  // Function parameter headLampStatus.
  //
  // Status of the head lamps
  std::shared_ptr<ISchemaItem> headLampStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::HeadLampStatus);

  // Function parameter engineTorque.
  //
  // Torque value for engine (in Nm) on non-diesel variants
  std::shared_ptr<ISchemaItem> engineTorque_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-1000.0), TSchemaItemParameter<double>(2000.0), TSchemaItemParameter<double>());

  // Function parameter accPedalPosition.
  //
  // Accelerator pedal position (percentage depressed)
  std::shared_ptr<ISchemaItem> accPedalPosition_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(100.0), TSchemaItemParameter<double>());

  // Function parameter steeringWheelAngle.
  //
  // Current angle of the steering wheel (in deg)
  std::shared_ptr<ISchemaItem> steeringWheelAngle_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-2000.0), TSchemaItemParameter<double>(2000.0), TSchemaItemParameter<double>());

  // Function parameter engineOilLife.
  //
  // The estimated percentage of remaining oil life of the engine.
  std::shared_ptr<ISchemaItem> engineOilLife_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(100.0), TSchemaItemParameter<double>());

  // Function parameter electronicParkBrakeStatus.
  //
  // The status of the park brake as provided by Electric Park Brake (EPB) system.
  std::shared_ptr<ISchemaItem> electronicParkBrakeStatus_SchemaItem = TEnumSchemaItem<ElectronicParkBrakeStatus::eType>::create(ElectronicParkBrakeStatus_all_enum_values, TSchemaItemParameter<ElectronicParkBrakeStatus::eType>());

  // Function parameter cloudAppVehicleID.
  //
  // Parameter used by cloud apps to identify a head unit
  std::shared_ptr<ISchemaItem> cloudAppVehicleID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Function parameter eCallInfo.
  //
  // Emergency Call notification and confirmation data
  std::shared_ptr<ISchemaItem> eCallInfo_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ECallInfo);

  // Function parameter airbagStatus.
  //
  // The status of the air bags
  std::shared_ptr<ISchemaItem> airbagStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::AirbagStatus);

  // Function parameter emergencyEvent.
  //
  // Information related to an emergency event (and if it occurred)
  std::shared_ptr<ISchemaItem> emergencyEvent_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::EmergencyEvent);

  // Function parameter clusterModeStatus.
  //
  // The status modes of the cluster
  std::shared_ptr<ISchemaItem> clusterModeStatus_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ClusterModeStatus);

  // Function parameter myKey.
  //
  // Information related to the MyKey feature
  std::shared_ptr<ISchemaItem> myKey_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::MyKey);CObjectSchemaItem::Members schema_members;

  schema_members["gps"] = CObjectSchemaItem::SMember(gps_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["speed"] = CObjectSchemaItem::SMember(speed_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["rpm"] = CObjectSchemaItem::SMember(rpm_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelLevel"] = CObjectSchemaItem::SMember(fuelLevel_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelLevel_State"] = CObjectSchemaItem::SMember(fuelLevel_State_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["instantFuelConsumption"] = CObjectSchemaItem::SMember(instantFuelConsumption_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["fuelRange"] = CObjectSchemaItem::SMember(fuelRange_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["externalTemperature"] = CObjectSchemaItem::SMember(externalTemperature_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["turnSignal"] = CObjectSchemaItem::SMember(turnSignal_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["vin"] = CObjectSchemaItem::SMember(vin_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["prndl"] = CObjectSchemaItem::SMember(prndl_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["tirePressure"] = CObjectSchemaItem::SMember(tirePressure_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["odometer"] = CObjectSchemaItem::SMember(odometer_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["beltStatus"] = CObjectSchemaItem::SMember(beltStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["bodyInformation"] = CObjectSchemaItem::SMember(bodyInformation_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["deviceStatus"] = CObjectSchemaItem::SMember(deviceStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["driverBraking"] = CObjectSchemaItem::SMember(driverBraking_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["wiperStatus"] = CObjectSchemaItem::SMember(wiperStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["headLampStatus"] = CObjectSchemaItem::SMember(headLampStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["engineTorque"] = CObjectSchemaItem::SMember(engineTorque_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["accPedalPosition"] = CObjectSchemaItem::SMember(accPedalPosition_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["steeringWheelAngle"] = CObjectSchemaItem::SMember(steeringWheelAngle_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["engineOilLife"] = CObjectSchemaItem::SMember(engineOilLife_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["electronicParkBrakeStatus"] = CObjectSchemaItem::SMember(electronicParkBrakeStatus_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["cloudAppVehicleID"] = CObjectSchemaItem::SMember(cloudAppVehicleID_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["eCallInfo"] = CObjectSchemaItem::SMember(eCallInfo_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["airbagStatus"] = CObjectSchemaItem::SMember(airbagStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["emergencyEvent"] = CObjectSchemaItem::SMember(emergencyEvent_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["clusterModeStatus"] = CObjectSchemaItem::SMember(clusterModeStatus_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["myKey"] = CObjectSchemaItem::SMember(myKey_SchemaItem, false, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnCommandID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<TriggerSource::eType> TriggerSource_all_enum_values;
  TriggerSource_all_enum_values.insert(TriggerSource::TS_MENU);
  TriggerSource_all_enum_values.insert(TriggerSource::TS_VR);
  TriggerSource_all_enum_values.insert(TriggerSource::TS_KEYBOARD);

  std::map<TriggerSource::eType, std::vector<ElementSignature>> TriggerSource_element_signatures;
  TriggerSource_element_signatures[TriggerSource::TS_KEYBOARD] = std::vector<ElementSignature>();
  TriggerSource_element_signatures[TriggerSource::TS_KEYBOARD].push_back(ElementSignature("3.0.0", "", false));

  // Function parameter cmdID.
  //
  // Command ID, which is related to a specific menu entry
  std::shared_ptr<ISchemaItem> cmdID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter triggerSource.
  //
  // See TriggerSource
  std::shared_ptr<ISchemaItem> triggerSource_SchemaItem = TEnumSchemaItem<TriggerSource::eType>::createWithSignatures(TriggerSource_all_enum_values, TriggerSource_element_signatures, TSchemaItemParameter<TriggerSource::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["cmdID"] = CObjectSchemaItem::SMember(cmdID_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["triggerSource"] = CObjectSchemaItem::SMember(triggerSource_SchemaItem, true, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnTBTClientStateID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<TBTState::eType> TBTState_all_enum_values;
  TBTState_all_enum_values.insert(TBTState::ROUTE_UPDATE_REQUEST);
  TBTState_all_enum_values.insert(TBTState::ROUTE_ACCEPTED);
  TBTState_all_enum_values.insert(TBTState::ROUTE_REFUSED);
  TBTState_all_enum_values.insert(TBTState::ROUTE_CANCELLED);
  TBTState_all_enum_values.insert(TBTState::ETA_REQUEST);
  TBTState_all_enum_values.insert(TBTState::NEXT_TURN_REQUEST);
  TBTState_all_enum_values.insert(TBTState::ROUTE_STATUS_REQUEST);
  TBTState_all_enum_values.insert(TBTState::ROUTE_SUMMARY_REQUEST);
  TBTState_all_enum_values.insert(TBTState::TRIP_STATUS_REQUEST);
  TBTState_all_enum_values.insert(TBTState::ROUTE_UPDATE_REQUEST_TIMEOUT);

  // Function parameter state.
  //
  // Current State of TBT client
  std::shared_ptr<ISchemaItem> state_SchemaItem = TEnumSchemaItem<TBTState::eType>::create(TBTState_all_enum_values, TSchemaItemParameter<TBTState::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["state"] = CObjectSchemaItem::SMember(state_SchemaItem, true, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnDriverDistractionID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<DriverDistractionState::eType> DriverDistractionState_all_enum_values;
  DriverDistractionState_all_enum_values.insert(DriverDistractionState::DD_ON);
  DriverDistractionState_all_enum_values.insert(DriverDistractionState::DD_OFF);

  // Function parameter state.
  //
  // Current State of Driver Distraction
  std::shared_ptr<ISchemaItem> state_SchemaItem = TEnumSchemaItem<DriverDistractionState::eType>::create(DriverDistractionState_all_enum_values, TSchemaItemParameter<DriverDistractionState::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["state"] = CObjectSchemaItem::SMember(state_SchemaItem, true, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnPermissionsChangeID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter permissionItem.
  //
  // Change in permissions for a given set of RPCs
  std::shared_ptr<ISchemaItem> permissionItem_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::PermissionItem), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500));CObjectSchemaItem::Members schema_members;

  schema_members["permissionItem"] = CObjectSchemaItem::SMember(permissionItem_SchemaItem, true, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnAudioPassThruID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  CObjectSchemaItem::Members schema_members;

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnLanguageChangeID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Language::eType> Language_all_enum_values;
  Language_all_enum_values.insert(Language::EN_US);
  Language_all_enum_values.insert(Language::ES_MX);
  Language_all_enum_values.insert(Language::FR_CA);
  Language_all_enum_values.insert(Language::DE_DE);
  Language_all_enum_values.insert(Language::ES_ES);
  Language_all_enum_values.insert(Language::EN_GB);
  Language_all_enum_values.insert(Language::RU_RU);
  Language_all_enum_values.insert(Language::TR_TR);
  Language_all_enum_values.insert(Language::PL_PL);
  Language_all_enum_values.insert(Language::FR_FR);
  Language_all_enum_values.insert(Language::IT_IT);
  Language_all_enum_values.insert(Language::SV_SE);
  Language_all_enum_values.insert(Language::PT_PT);
  Language_all_enum_values.insert(Language::NL_NL);
  Language_all_enum_values.insert(Language::EN_AU);
  Language_all_enum_values.insert(Language::ZH_CN);
  Language_all_enum_values.insert(Language::ZH_TW);
  Language_all_enum_values.insert(Language::JA_JP);
  Language_all_enum_values.insert(Language::AR_SA);
  Language_all_enum_values.insert(Language::KO_KR);
  Language_all_enum_values.insert(Language::PT_BR);
  Language_all_enum_values.insert(Language::CS_CZ);
  Language_all_enum_values.insert(Language::DA_DK);
  Language_all_enum_values.insert(Language::NO_NO);
  Language_all_enum_values.insert(Language::NL_BE);
  Language_all_enum_values.insert(Language::EL_GR);
  Language_all_enum_values.insert(Language::HU_HU);
  Language_all_enum_values.insert(Language::FI_FI);
  Language_all_enum_values.insert(Language::SK_SK);
  Language_all_enum_values.insert(Language::EN_IN);
  Language_all_enum_values.insert(Language::TH_TH);
  Language_all_enum_values.insert(Language::EN_SA);
  Language_all_enum_values.insert(Language::HE_IL);
  Language_all_enum_values.insert(Language::RO_RO);
  Language_all_enum_values.insert(Language::UK_UA);
  Language_all_enum_values.insert(Language::ID_ID);
  Language_all_enum_values.insert(Language::VI_VN);
  Language_all_enum_values.insert(Language::MS_MY);
  Language_all_enum_values.insert(Language::HI_IN);

  std::map<Language::eType, std::vector<ElementSignature>> Language_element_signatures;
  Language_element_signatures[Language::DE_DE] = std::vector<ElementSignature>();
  Language_element_signatures[Language::ES_ES] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EN_GB] = std::vector<ElementSignature>();
  Language_element_signatures[Language::RU_RU] = std::vector<ElementSignature>();
  Language_element_signatures[Language::TR_TR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::PL_PL] = std::vector<ElementSignature>();
  Language_element_signatures[Language::FR_FR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::IT_IT] = std::vector<ElementSignature>();
  Language_element_signatures[Language::SV_SE] = std::vector<ElementSignature>();
  Language_element_signatures[Language::PT_PT] = std::vector<ElementSignature>();
  Language_element_signatures[Language::NL_NL] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EN_AU] = std::vector<ElementSignature>();
  Language_element_signatures[Language::ZH_CN] = std::vector<ElementSignature>();
  Language_element_signatures[Language::ZH_TW] = std::vector<ElementSignature>();
  Language_element_signatures[Language::JA_JP] = std::vector<ElementSignature>();
  Language_element_signatures[Language::AR_SA] = std::vector<ElementSignature>();
  Language_element_signatures[Language::KO_KR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::PT_BR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::CS_CZ] = std::vector<ElementSignature>();
  Language_element_signatures[Language::DA_DK] = std::vector<ElementSignature>();
  Language_element_signatures[Language::NO_NO] = std::vector<ElementSignature>();
  Language_element_signatures[Language::NL_BE] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EL_GR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::HU_HU] = std::vector<ElementSignature>();
  Language_element_signatures[Language::FI_FI] = std::vector<ElementSignature>();
  Language_element_signatures[Language::SK_SK] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EN_IN] = std::vector<ElementSignature>();
  Language_element_signatures[Language::TH_TH] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EN_SA] = std::vector<ElementSignature>();
  Language_element_signatures[Language::HE_IL] = std::vector<ElementSignature>();
  Language_element_signatures[Language::RO_RO] = std::vector<ElementSignature>();
  Language_element_signatures[Language::UK_UA] = std::vector<ElementSignature>();
  Language_element_signatures[Language::ID_ID] = std::vector<ElementSignature>();
  Language_element_signatures[Language::VI_VN] = std::vector<ElementSignature>();
  Language_element_signatures[Language::MS_MY] = std::vector<ElementSignature>();
  Language_element_signatures[Language::HI_IN] = std::vector<ElementSignature>();
  Language_element_signatures[Language::DE_DE].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::ES_ES].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::EN_GB].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::RU_RU].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::TR_TR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::PL_PL].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::FR_FR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::IT_IT].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::SV_SE].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::PT_PT].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::NL_NL].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::EN_AU].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::ZH_CN].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::ZH_TW].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::JA_JP].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::AR_SA].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::KO_KR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::PT_BR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::CS_CZ].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::DA_DK].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::NO_NO].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::NL_BE].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::EL_GR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::HU_HU].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::FI_FI].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::SK_SK].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::EN_IN].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::TH_TH].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::EN_SA].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::HE_IL].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::RO_RO].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::UK_UA].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::ID_ID].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::VI_VN].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::MS_MY].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::HI_IN].push_back(ElementSignature("4.5.0", "", false));

  // Function parameter language.
  //
  // Current SDL voice engine (VR+TTS) language
  std::shared_ptr<ISchemaItem> language_SchemaItem = TEnumSchemaItem<Language::eType>::createWithSignatures(Language_all_enum_values, Language_element_signatures, TSchemaItemParameter<Language::eType>());

  // Function parameter hmiDisplayLanguage.
  //
  // Current display language
  std::shared_ptr<ISchemaItem> hmiDisplayLanguage_SchemaItem = TEnumSchemaItem<Language::eType>::createWithSignatures(Language_all_enum_values, Language_element_signatures, TSchemaItemParameter<Language::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["language"] = CObjectSchemaItem::SMember(language_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["hmiDisplayLanguage"] = CObjectSchemaItem::SMember(hmiDisplayLanguage_SchemaItem, true, "2.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnKeyboardInputID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<KeyboardEvent::eType> KeyboardEvent_all_enum_values;
  KeyboardEvent_all_enum_values.insert(KeyboardEvent::KEYPRESS);
  KeyboardEvent_all_enum_values.insert(KeyboardEvent::ENTRY_SUBMITTED);
  KeyboardEvent_all_enum_values.insert(KeyboardEvent::ENTRY_VOICE);
  KeyboardEvent_all_enum_values.insert(KeyboardEvent::ENTRY_CANCELLED);
  KeyboardEvent_all_enum_values.insert(KeyboardEvent::ENTRY_ABORTED);

  // Function parameter event.
  //
  // On-screen keyboard input data.
  std::shared_ptr<ISchemaItem> event_SchemaItem = TEnumSchemaItem<KeyboardEvent::eType>::create(KeyboardEvent_all_enum_values, TSchemaItemParameter<KeyboardEvent::eType>());

  // Function parameter data.
  //
  // On-screen keyboard input data.
  // For dynamic keypress events, this will be the current compounded string of entry text.
  // For entry submission events, this will be the full text entry (this will always return regardless of the mode).
  // For entry cancelled and entry aborted events, this data param will be omitted.
  std::shared_ptr<ISchemaItem> data_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["event"] = CObjectSchemaItem::SMember(event_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["data"] = CObjectSchemaItem::SMember(data_SchemaItem, false, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnTouchEventID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<TouchType::eType> TouchType_all_enum_values;
  TouchType_all_enum_values.insert(TouchType::BEGIN);
  TouchType_all_enum_values.insert(TouchType::MOVE);
  TouchType_all_enum_values.insert(TouchType::END);
  TouchType_all_enum_values.insert(TouchType::CANCEL);

  std::map<TouchType::eType, std::vector<ElementSignature>> TouchType_element_signatures;
  TouchType_element_signatures[TouchType::CANCEL] = std::vector<ElementSignature>();
  TouchType_element_signatures[TouchType::CANCEL].push_back(ElementSignature("4.5.0", "", false));

  // Function parameter type.
  //
  // The type of touch event.
  std::shared_ptr<ISchemaItem> type_SchemaItem = TEnumSchemaItem<TouchType::eType>::createWithSignatures(TouchType_all_enum_values, TouchType_element_signatures, TSchemaItemParameter<TouchType::eType>());

  // Function parameter event.
  //
  // List of all individual touches involved in this event.
  std::shared_ptr<ISchemaItem> event_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TouchEvent), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(10));CObjectSchemaItem::Members schema_members;

  schema_members["type"] = CObjectSchemaItem::SMember(type_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["event"] = CObjectSchemaItem::SMember(event_SchemaItem, true, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnSystemRequestID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<RequestType::eType> RequestType_all_enum_values;
  RequestType_all_enum_values.insert(RequestType::HTTP);
  RequestType_all_enum_values.insert(RequestType::FILE_RESUME);
  RequestType_all_enum_values.insert(RequestType::AUTH_REQUEST);
  RequestType_all_enum_values.insert(RequestType::AUTH_CHALLENGE);
  RequestType_all_enum_values.insert(RequestType::AUTH_ACK);
  RequestType_all_enum_values.insert(RequestType::PROPRIETARY);
  RequestType_all_enum_values.insert(RequestType::QUERY_APPS);
  RequestType_all_enum_values.insert(RequestType::LAUNCH_APP);
  RequestType_all_enum_values.insert(RequestType::LOCK_SCREEN_ICON_URL);
  RequestType_all_enum_values.insert(RequestType::TRAFFIC_MESSAGE_CHANNEL);
  RequestType_all_enum_values.insert(RequestType::DRIVER_PROFILE);
  RequestType_all_enum_values.insert(RequestType::VOICE_SEARCH);
  RequestType_all_enum_values.insert(RequestType::NAVIGATION);
  RequestType_all_enum_values.insert(RequestType::PHONE);
  RequestType_all_enum_values.insert(RequestType::CLIMATE);
  RequestType_all_enum_values.insert(RequestType::SETTINGS);
  RequestType_all_enum_values.insert(RequestType::VEHICLE_DIAGNOSTICS);
  RequestType_all_enum_values.insert(RequestType::EMERGENCY);
  RequestType_all_enum_values.insert(RequestType::MEDIA);
  RequestType_all_enum_values.insert(RequestType::FOTA);
  RequestType_all_enum_values.insert(RequestType::OEM_SPECIFIC);
  RequestType_all_enum_values.insert(RequestType::ICON_URL);

  std::map<RequestType::eType, std::vector<ElementSignature>> RequestType_element_signatures;
  RequestType_element_signatures[RequestType::OEM_SPECIFIC] = std::vector<ElementSignature>();
  RequestType_element_signatures[RequestType::ICON_URL] = std::vector<ElementSignature>();
  RequestType_element_signatures[RequestType::OEM_SPECIFIC].push_back(ElementSignature("5.0.0", "", false));
  RequestType_element_signatures[RequestType::ICON_URL].push_back(ElementSignature("5.1.0", "", false));

  std::set<FileType::eType> FileType_all_enum_values;
  FileType_all_enum_values.insert(FileType::GRAPHIC_BMP);
  FileType_all_enum_values.insert(FileType::GRAPHIC_JPEG);
  FileType_all_enum_values.insert(FileType::GRAPHIC_PNG);
  FileType_all_enum_values.insert(FileType::AUDIO_WAVE);
  FileType_all_enum_values.insert(FileType::AUDIO_MP3);
  FileType_all_enum_values.insert(FileType::AUDIO_AAC);
  FileType_all_enum_values.insert(FileType::BINARY);
  FileType_all_enum_values.insert(FileType::JSON);

  // Function parameter requestType.
  //
  // The type of system request.
  std::shared_ptr<ISchemaItem> requestType_SchemaItem = TEnumSchemaItem<RequestType::eType>::createWithSignatures(RequestType_all_enum_values, RequestType_element_signatures, TSchemaItemParameter<RequestType::eType>());

  // Function parameter requestSubType.
  //
  // 
  //                 This parameter is filled for supporting OEM proprietary data exchanges.
  //             
  std::shared_ptr<ISchemaItem> requestSubType_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(255), TSchemaItemParameter<std::string>());

  // Function parameter url.
  //
  // 
  //                 Optional URL for HTTP requests.
  //                 If blank, the binary data shall be forwarded to the app.
  //                 If not blank, the binary data shall be forwarded to the url with a provided timeout in seconds.
  //             
  std::shared_ptr<ISchemaItem> url_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter timeout.
  //
  // 
  //                 Optional timeout for HTTP requests
  //                 Required if a URL is provided
  //             
  std::shared_ptr<ISchemaItem> timeout_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Function parameter fileType.
  //
  // Optional file type (meant for HTTP file requests).
  std::shared_ptr<ISchemaItem> fileType_SchemaItem = TEnumSchemaItem<FileType::eType>::create(FileType_all_enum_values, TSchemaItemParameter<FileType::eType>());

  // Function parameter offset.
  //
  // Optional offset in bytes for resuming partial data chunks
  std::shared_ptr<ISchemaItem> offset_SchemaItem = TNumberSchemaItem<int64_t>::create(TSchemaItemParameter<int64_t>(0), TSchemaItemParameter<int64_t>(100000000000LL), TSchemaItemParameter<int64_t>());

  // Function parameter length.
  //
  // Optional length in bytes for resuming partial data chunks
  std::shared_ptr<ISchemaItem> length_SchemaItem = TNumberSchemaItem<int64_t>::create(TSchemaItemParameter<int64_t>(0), TSchemaItemParameter<int64_t>(100000000000LL), TSchemaItemParameter<int64_t>());CObjectSchemaItem::Members schema_members;

  schema_members["requestType"] = CObjectSchemaItem::SMember(requestType_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["requestSubType"] = CObjectSchemaItem::SMember(requestSubType_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["url"] = CObjectSchemaItem::SMember(url_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["timeout"] = CObjectSchemaItem::SMember(timeout_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["fileType"] = CObjectSchemaItem::SMember(fileType_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["offset"] = CObjectSchemaItem::SMember(offset_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["length"] = CObjectSchemaItem::SMember(length_SchemaItem, false, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnHashChangeID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter hashID.
  //
  // Calculated hash ID to be referenced during RegisterAppInterface.
  std::shared_ptr<ISchemaItem> hashID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["hashID"] = CObjectSchemaItem::SMember(hashID_SchemaItem, true, "3.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnWayPointChangeID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter wayPoints.
  //
  // See LocationDetails
  std::shared_ptr<ISchemaItem> wayPoints_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::LocationDetails), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(10));CObjectSchemaItem::Members schema_members;

  schema_members["wayPoints"] = CObjectSchemaItem::SMember(wayPoints_SchemaItem, true, "4.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnInteriorVehicleDataID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter moduleData.
  std::shared_ptr<ISchemaItem> moduleData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ModuleData);CObjectSchemaItem::Members schema_members;

  schema_members["moduleData"] = CObjectSchemaItem::SMember(moduleData_SchemaItem, true, "4.5.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnRCStatusID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter allowed.
  //
  // If "true" - RC is allowed; if "false" - RC is disallowed.
  std::shared_ptr<ISchemaItem> allowed_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter allocatedModules.
  //
  // Contains a list (zero or more) of module types that are allocated to the application.
  std::shared_ptr<ISchemaItem> allocatedModules_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ModuleData), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));

  // Function parameter freeModules.
  //
  // Contains a list (zero or more) of module types that are free to access for the application.
  std::shared_ptr<ISchemaItem> freeModules_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ModuleData), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["allowed"] = CObjectSchemaItem::SMember(allowed_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["allocatedModules"] = CObjectSchemaItem::SMember(allocatedModules_SchemaItem, true, "5.0.0", "", false, false);
  schema_members["freeModules"] = CObjectSchemaItem::SMember(freeModules_SchemaItem, true, "5.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnAppServiceDataID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter serviceData.
  std::shared_ptr<ISchemaItem> serviceData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::AppServiceData);CObjectSchemaItem::Members schema_members;

  schema_members["serviceData"] = CObjectSchemaItem::SMember(serviceData_SchemaItem, true, "5.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnSystemCapabilityUpdatedID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter systemCapability.
  //
  // The system capability that has been updated
  std::shared_ptr<ISchemaItem> systemCapability_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SystemCapability);CObjectSchemaItem::Members schema_members;

  schema_members["systemCapability"] = CObjectSchemaItem::SMember(systemCapability_SchemaItem, true, "5.1.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_EncodedSyncPDataID_request(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter data.
  //
  // Contains base64 encoded string of SyncP packets.
  //
  // ToDo: What is the maxlength?
  std::shared_ptr<ISchemaItem> data_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000000), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["data"] = CObjectSchemaItem::SMember(data_SchemaItem, true, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_EncodedSyncPDataID_response(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  std::set<Result::eType> resultCode_allowed_enum_subset_values;
  resultCode_allowed_enum_subset_values.insert(Result::APPLICATION_NOT_REGISTERED);
  resultCode_allowed_enum_subset_values.insert(Result::SUCCESS);
  resultCode_allowed_enum_subset_values.insert(Result::TOO_MANY_PENDING_REQUESTS);
  resultCode_allowed_enum_subset_values.insert(Result::REJECTED);
  resultCode_allowed_enum_subset_values.insert(Result::INVALID_DATA);
  resultCode_allowed_enum_subset_values.insert(Result::OUT_OF_MEMORY);
  resultCode_allowed_enum_subset_values.insert(Result::GENERIC_ERROR);

  // Function parameter success.
  //
  //  true, if successful; false, if failed 
  std::shared_ptr<ISchemaItem> success_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter resultCode.
  //
  // See Result
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<Result::eType>::create(resultCode_allowed_enum_subset_values, TSchemaItemParameter<Result::eType>());

  // Function parameter info.
  //
  // Provides additional human readable info regarding the result.
  std::shared_ptr<ISchemaItem> info_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["success"] = CObjectSchemaItem::SMember(success_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["info"] = CObjectSchemaItem::SMember(info_SchemaItem, false, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_CORRELATION_ID] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

CSmartSchema mobile_apis::MOBILE_API::InitFunction_OnEncodedSyncPDataID_notification(
    const TStructsSchemaItems &struct_schema_items,
    const std::set<FunctionID::eType> &function_id_items,
    const std::set<messageType::eType> &message_type_items) {
  // Function parameter data.
  //
  // Contains base64 encoded string of SyncP packets.
  std::shared_ptr<ISchemaItem> data_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000000), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter URL.
  //
  // 
  //                 If blank, the SyncP data shall be forwarded to the app.
  //                 If not blank, the SyncP data shall be forwarded to the provided URL.
  //             
  std::shared_ptr<ISchemaItem> URL_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());

  // Function parameter Timeout.
  //
  // 
  //                 If blank, the SyncP data shall be forwarded to the app.
  //                 If not blank, the SyncP data shall be forwarded with the provided timeout in seconds.
  //             
  std::shared_ptr<ISchemaItem> Timeout_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["data"] = CObjectSchemaItem::SMember(data_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["URL"] = CObjectSchemaItem::SMember(URL_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["Timeout"] = CObjectSchemaItem::SMember(Timeout_SchemaItem, false, "1.0.0", "", false, false);

  CObjectSchemaItem::Members params_members;
  params_members[ns_smart_device_link::ns_json_handler::strings::S_FUNCTION_ID] = CObjectSchemaItem::SMember(TEnumSchemaItem<FunctionID::eType>::create(function_id_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_MESSAGE_TYPE] = CObjectSchemaItem::SMember(TEnumSchemaItem<messageType::eType>::create(message_type_items), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_VERSION] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);
  params_members[ns_smart_device_link::ns_json_handler::strings::S_PROTOCOL_TYPE] = CObjectSchemaItem::SMember(TNumberSchemaItem<int>::create(), true);

  CObjectSchemaItem::Members root_members_map;
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_MSG_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(schema_members), true);
  root_members_map[ns_smart_device_link::ns_json_handler::strings::S_PARAMS] = CObjectSchemaItem::SMember(CObjectSchemaItem::create(params_members), true);

  return CSmartSchema(CObjectSchemaItem::create(root_members_map));
}

//----------- Structs schema items initialization ------------

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_AudioPassThruCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<SamplingRate::eType> SamplingRate_all_enum_values;
  SamplingRate_all_enum_values.insert(SamplingRate::SamplingRate_8KHZ);
  SamplingRate_all_enum_values.insert(SamplingRate::SamplingRate_16KHZ);
  SamplingRate_all_enum_values.insert(SamplingRate::SamplingRate_22KHZ);
  SamplingRate_all_enum_values.insert(SamplingRate::SamplingRate_44KHZ);

  std::set<BitsPerSample::eType> BitsPerSample_all_enum_values;
  BitsPerSample_all_enum_values.insert(BitsPerSample::BitsPerSample_8_BIT);
  BitsPerSample_all_enum_values.insert(BitsPerSample::BitsPerSample_16_BIT);

  std::set<AudioType::eType> AudioType_all_enum_values;
  AudioType_all_enum_values.insert(AudioType::PCM);

  // Struct member samplingRate.
  std::shared_ptr<ISchemaItem> samplingRate_SchemaItem = TEnumSchemaItem<SamplingRate::eType>::create(SamplingRate_all_enum_values, TSchemaItemParameter<SamplingRate::eType>());

  // Struct member bitsPerSample.
  std::shared_ptr<ISchemaItem> bitsPerSample_SchemaItem = TEnumSchemaItem<BitsPerSample::eType>::create(BitsPerSample_all_enum_values, TSchemaItemParameter<BitsPerSample::eType>());

  // Struct member audioType.
  std::shared_ptr<ISchemaItem> audioType_SchemaItem = TEnumSchemaItem<AudioType::eType>::create(AudioType_all_enum_values, TSchemaItemParameter<AudioType::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["samplingRate"] = CObjectSchemaItem::SMember(samplingRate_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["bitsPerSample"] = CObjectSchemaItem::SMember(bitsPerSample_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["audioType"] = CObjectSchemaItem::SMember(audioType_SchemaItem, true, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_CloudAppProperties(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<HybridAppPreference::eType> HybridAppPreference_all_enum_values;
  HybridAppPreference_all_enum_values.insert(HybridAppPreference::MOBILE);
  HybridAppPreference_all_enum_values.insert(HybridAppPreference::CLOUD);
  HybridAppPreference_all_enum_values.insert(HybridAppPreference::BOTH);

  // Struct member nicknames.
  //
  // An array of app names a cloud app is allowed to register with. If included in a SetCloudAppProperties request, this value will overwrite the existing "nicknames" field in the app policies section of the policy table.
  std::shared_ptr<ISchemaItem> nicknames_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));

  // Struct member appID.
  std::shared_ptr<ISchemaItem> appID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Struct member enabled.
  //
  // If true, cloud app will be included in HMI RPC UpdateAppList
  std::shared_ptr<ISchemaItem> enabled_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member authToken.
  //
  // Used to authenticate websocket connection on app activation
  std::shared_ptr<ISchemaItem> authToken_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(65535), TSchemaItemParameter<std::string>());

  // Struct member cloudTransportType.
  //
  // Specifies the connection type Core should use
  std::shared_ptr<ISchemaItem> cloudTransportType_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Struct member hybridAppPreference.
  //
  // Specifies the user preference to use the cloud app version or mobile app version when both are available
  std::shared_ptr<ISchemaItem> hybridAppPreference_SchemaItem = TEnumSchemaItem<HybridAppPreference::eType>::create(HybridAppPreference_all_enum_values, TSchemaItemParameter<HybridAppPreference::eType>());

  // Struct member endpoint.
  //
  // Specifies the endpoint which Core will attempt to connect to when this app is selected
  std::shared_ptr<ISchemaItem> endpoint_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(65535), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["nicknames"] = CObjectSchemaItem::SMember(nicknames_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["appID"] = CObjectSchemaItem::SMember(appID_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["enabled"] = CObjectSchemaItem::SMember(enabled_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["authToken"] = CObjectSchemaItem::SMember(authToken_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["cloudTransportType"] = CObjectSchemaItem::SMember(cloudTransportType_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["hybridAppPreference"] = CObjectSchemaItem::SMember(hybridAppPreference_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["endpoint"] = CObjectSchemaItem::SMember(endpoint_SchemaItem, false, "5.1.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_Image(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<ImageType::eType> ImageType_all_enum_values;
  ImageType_all_enum_values.insert(ImageType::STATIC);
  ImageType_all_enum_values.insert(ImageType::DYNAMIC);

  // Struct member value.
  //
  // Either the static hex icon value or the binary image file name identifier (sent by PutFile).
  std::shared_ptr<ISchemaItem> value_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(65535), TSchemaItemParameter<std::string>());

  // Struct member imageType.
  //
  // Describes, whether it is a static or dynamic image.
  std::shared_ptr<ISchemaItem> imageType_SchemaItem = TEnumSchemaItem<ImageType::eType>::create(ImageType_all_enum_values, TSchemaItemParameter<ImageType::eType>());

  // Struct member isTemplate.
  //
  // If true, the image is a template image and can be recolored by the HMI
  std::shared_ptr<ISchemaItem> isTemplate_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["value"] = CObjectSchemaItem::SMember(value_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["imageType"] = CObjectSchemaItem::SMember(imageType_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["isTemplate"] = CObjectSchemaItem::SMember(isTemplate_SchemaItem, false, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_SoftButton(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<SoftButtonType::eType> SoftButtonType_all_enum_values;
  SoftButtonType_all_enum_values.insert(SoftButtonType::SBT_TEXT);
  SoftButtonType_all_enum_values.insert(SoftButtonType::SBT_IMAGE);
  SoftButtonType_all_enum_values.insert(SoftButtonType::SBT_BOTH);

  std::set<SystemAction::eType> SystemAction_all_enum_values;
  SystemAction_all_enum_values.insert(SystemAction::DEFAULT_ACTION);
  SystemAction_all_enum_values.insert(SystemAction::STEAL_FOCUS);
  SystemAction_all_enum_values.insert(SystemAction::KEEP_CONTEXT);

  // Struct member type.
  //
  // Describes, whether it is text, highlighted text, icon, or dynamic image. See softButtonType
  std::shared_ptr<ISchemaItem> type_SchemaItem = TEnumSchemaItem<SoftButtonType::eType>::create(SoftButtonType_all_enum_values, TSchemaItemParameter<SoftButtonType::eType>());

  // Struct member text.
  //
  // Optional text to display (if defined as TEXT or BOTH)
  std::shared_ptr<ISchemaItem> text_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member image.
  //
  // Optional image struct for SoftButton (if defined as IMAGE or BOTH)
  std::shared_ptr<ISchemaItem> image_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Image);

  // Struct member isHighlighted.
  //
  // 
  //                 True, if highlighted
  //                 False, if not highlighted
  //             
  std::shared_ptr<ISchemaItem> isHighlighted_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>(false));

  // Struct member softButtonID.
  //
  // Value which is returned via OnButtonPress / OnButtonEvent
  std::shared_ptr<ISchemaItem> softButtonID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>());

  // Struct member systemAction.
  //
  // Parameter indicating whether selecting a SoftButton shall call a specific system action.  This is intended to allow Notifications to bring the callee into full / focus; or in the case of persistent overlays, the overlay can persist when a SoftButton is pressed.
  std::shared_ptr<ISchemaItem> systemAction_SchemaItem = TEnumSchemaItem<SystemAction::eType>::create(SystemAction_all_enum_values, TSchemaItemParameter<SystemAction::eType>(SystemAction::DEFAULT_ACTION));CObjectSchemaItem::Members schema_members;

  schema_members["type"] = CObjectSchemaItem::SMember(type_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["text"] = CObjectSchemaItem::SMember(text_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["image"] = CObjectSchemaItem::SMember(image_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["isHighlighted"] = CObjectSchemaItem::SMember(isHighlighted_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["softButtonID"] = CObjectSchemaItem::SMember(softButtonID_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["systemAction"] = CObjectSchemaItem::SMember(systemAction_SchemaItem, false, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_Choice(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member choiceID.
  std::shared_ptr<ISchemaItem> choiceID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>());

  // Struct member menuName.
  std::shared_ptr<ISchemaItem> menuName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member vrCommands.
  std::shared_ptr<ISchemaItem> vrCommands_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(99), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Function parameter vrCommands_history_v1.
  std::shared_ptr<ISchemaItem> vrCommands_history_v1_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(99), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  std::vector<CObjectSchemaItem::SMember> vrCommands_history_vector;

  // Struct member image.
  std::shared_ptr<ISchemaItem> image_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Image);

  // Struct member secondaryText.
  //
  // Optional secondary text to display; e.g. address of POI in a search result entry
  std::shared_ptr<ISchemaItem> secondaryText_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member tertiaryText.
  //
  // Optional tertiary text to display; e.g. distance to POI for a search result entry
  std::shared_ptr<ISchemaItem> tertiaryText_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member secondaryImage.
  //
  // Optional secondary image struct for choice
  std::shared_ptr<ISchemaItem> secondaryImage_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Image);CObjectSchemaItem::Members schema_members;

  schema_members["choiceID"] = CObjectSchemaItem::SMember(choiceID_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["menuName"] = CObjectSchemaItem::SMember(menuName_SchemaItem, true, "1.0.0", "", false, false);
  vrCommands_history_vector.push_back(CObjectSchemaItem::SMember(vrCommands_history_v1_SchemaItem, true, "1.0.0", "5.0.0", false, false));
  schema_members["vrCommands"] = CObjectSchemaItem::SMember(vrCommands_SchemaItem, false, "5.0.0", "", false, false, vrCommands_history_vector);
  schema_members["image"] = CObjectSchemaItem::SMember(image_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["secondaryText"] = CObjectSchemaItem::SMember(secondaryText_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["tertiaryText"] = CObjectSchemaItem::SMember(tertiaryText_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["secondaryImage"] = CObjectSchemaItem::SMember(secondaryImage_SchemaItem, false, "3.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_VrHelpItem(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member text.
  //
  // Text to display for VR Help item
  std::shared_ptr<ISchemaItem> text_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member image.
  //
  // Image struct for VR Help item
  std::shared_ptr<ISchemaItem> image_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Image);

  // Struct member position.
  //
  // Position to display item in VR Help list
  std::shared_ptr<ISchemaItem> position_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["text"] = CObjectSchemaItem::SMember(text_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["image"] = CObjectSchemaItem::SMember(image_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["position"] = CObjectSchemaItem::SMember(position_SchemaItem, true, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_SyncMsgVersion(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member majorVersion.
  //
  // The major version indicates versions that is not-compatible to previous versions.
  std::shared_ptr<ISchemaItem> majorVersion_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(10), TSchemaItemParameter<int32_t>());

  // Struct member minorVersion.
  //
  // The minor version indicates a change to a previous version that should still allow to be run on an older version (with limited functionality)
  std::shared_ptr<ISchemaItem> minorVersion_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(1000), TSchemaItemParameter<int32_t>());

  // Struct member patchVersion.
  //
  // The patch version indicates a fix to existing functionality in a previous version that should still be able to be run on an older version 
  std::shared_ptr<ISchemaItem> patchVersion_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(1000), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["majorVersion"] = CObjectSchemaItem::SMember(majorVersion_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["minorVersion"] = CObjectSchemaItem::SMember(minorVersion_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["patchVersion"] = CObjectSchemaItem::SMember(patchVersion_SchemaItem, false, "4.3.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_FuelRange(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<FuelType::eType> FuelType_all_enum_values;
  FuelType_all_enum_values.insert(FuelType::GASOLINE);
  FuelType_all_enum_values.insert(FuelType::DIESEL);
  FuelType_all_enum_values.insert(FuelType::CNG);
  FuelType_all_enum_values.insert(FuelType::LPG);
  FuelType_all_enum_values.insert(FuelType::HYDROGEN);
  FuelType_all_enum_values.insert(FuelType::BATTERY);

  // Struct member type.
  std::shared_ptr<ISchemaItem> type_SchemaItem = TEnumSchemaItem<FuelType::eType>::create(FuelType_all_enum_values, TSchemaItemParameter<FuelType::eType>());

  // Struct member range.
  //
  // 
  //                 The estimate range in KM the vehicle can travel based on fuel level and consumption.
  //             
  std::shared_ptr<ISchemaItem> range_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(10000.0), TSchemaItemParameter<double>());CObjectSchemaItem::Members schema_members;

  schema_members["type"] = CObjectSchemaItem::SMember(type_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["range"] = CObjectSchemaItem::SMember(range_SchemaItem, false, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_SingleTireStatus(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<ComponentVolumeStatus::eType> ComponentVolumeStatus_all_enum_values;
  ComponentVolumeStatus_all_enum_values.insert(ComponentVolumeStatus::CVS_UNKNOWN);
  ComponentVolumeStatus_all_enum_values.insert(ComponentVolumeStatus::CVS_NORMAL);
  ComponentVolumeStatus_all_enum_values.insert(ComponentVolumeStatus::CVS_LOW);
  ComponentVolumeStatus_all_enum_values.insert(ComponentVolumeStatus::CVS_FAULT);
  ComponentVolumeStatus_all_enum_values.insert(ComponentVolumeStatus::CVS_ALERT);
  ComponentVolumeStatus_all_enum_values.insert(ComponentVolumeStatus::CVS_NOT_SUPPORTED);

  std::set<TPMS::eType> TPMS_all_enum_values;
  TPMS_all_enum_values.insert(TPMS::UNKNOWN);
  TPMS_all_enum_values.insert(TPMS::SYSTEM_FAULT);
  TPMS_all_enum_values.insert(TPMS::SENSOR_FAULT);
  TPMS_all_enum_values.insert(TPMS::LOW);
  TPMS_all_enum_values.insert(TPMS::SYSTEM_ACTIVE);
  TPMS_all_enum_values.insert(TPMS::TRAIN);
  TPMS_all_enum_values.insert(TPMS::TRAINING_COMPLETE);
  TPMS_all_enum_values.insert(TPMS::NOT_TRAINED);

  // Struct member status.
  //
  // See ComponentVolumeStatus.
  std::shared_ptr<ISchemaItem> status_SchemaItem = TEnumSchemaItem<ComponentVolumeStatus::eType>::create(ComponentVolumeStatus_all_enum_values, TSchemaItemParameter<ComponentVolumeStatus::eType>());

  // Struct member tpms.
  //
  // 
  //                 The status of TPMS according to the particular tire.
  //             
  std::shared_ptr<ISchemaItem> tpms_SchemaItem = TEnumSchemaItem<TPMS::eType>::create(TPMS_all_enum_values, TSchemaItemParameter<TPMS::eType>());

  // Struct member pressure.
  //
  // The pressure value of the particular tire in kilo pascal.
  std::shared_ptr<ISchemaItem> pressure_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(2000.0), TSchemaItemParameter<double>());CObjectSchemaItem::Members schema_members;

  schema_members["status"] = CObjectSchemaItem::SMember(status_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["tpms"] = CObjectSchemaItem::SMember(tpms_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["pressure"] = CObjectSchemaItem::SMember(pressure_SchemaItem, false, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_BeltStatus(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<VehicleDataEventStatus::eType> VehicleDataEventStatus_all_enum_values;
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_NO_EVENT);
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_NO);
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_YES);
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_NOT_SUPPORTED);
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_FAULT);

  // Struct member driverBeltDeployed.
  //
  // References signal "VedsDrvBelt_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> driverBeltDeployed_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member passengerBeltDeployed.
  //
  // References signal "VedsPasBelt_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> passengerBeltDeployed_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member passengerBuckleBelted.
  //
  // References signal "VedsRw1PasBckl_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> passengerBuckleBelted_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member driverBuckleBelted.
  //
  // References signal "VedsRw1DrvBckl_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> driverBuckleBelted_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member leftRow2BuckleBelted.
  //
  // References signal "VedsRw2lBckl_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> leftRow2BuckleBelted_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member passengerChildDetected.
  //
  // References signal "VedsRw1PasChld_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> passengerChildDetected_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member rightRow2BuckleBelted.
  //
  // References signal "VedsRw2rBckl_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> rightRow2BuckleBelted_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member middleRow2BuckleBelted.
  //
  // References signal "VedsRw2mBckl_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> middleRow2BuckleBelted_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member middleRow3BuckleBelted.
  //
  // References signal "VedsRw3mBckl_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> middleRow3BuckleBelted_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member leftRow3BuckleBelted.
  //
  // References signal "VedsRw3lBckl_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> leftRow3BuckleBelted_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member rightRow3BuckleBelted.
  //
  // References signal "VedsRw3rBckl_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> rightRow3BuckleBelted_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member leftRearInflatableBelted.
  //
  // References signal "VedsRw2lRib_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> leftRearInflatableBelted_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member rightRearInflatableBelted.
  //
  // References signal "VedsRw2rRib_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> rightRearInflatableBelted_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member middleRow1BeltDeployed.
  //
  // References signal "VedsRw1mBelt_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> middleRow1BeltDeployed_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member middleRow1BuckleBelted.
  //
  // References signal "VedsRw1mBckl_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> middleRow1BuckleBelted_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["driverBeltDeployed"] = CObjectSchemaItem::SMember(driverBeltDeployed_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["passengerBeltDeployed"] = CObjectSchemaItem::SMember(passengerBeltDeployed_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["passengerBuckleBelted"] = CObjectSchemaItem::SMember(passengerBuckleBelted_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["driverBuckleBelted"] = CObjectSchemaItem::SMember(driverBuckleBelted_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["leftRow2BuckleBelted"] = CObjectSchemaItem::SMember(leftRow2BuckleBelted_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["passengerChildDetected"] = CObjectSchemaItem::SMember(passengerChildDetected_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["rightRow2BuckleBelted"] = CObjectSchemaItem::SMember(rightRow2BuckleBelted_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["middleRow2BuckleBelted"] = CObjectSchemaItem::SMember(middleRow2BuckleBelted_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["middleRow3BuckleBelted"] = CObjectSchemaItem::SMember(middleRow3BuckleBelted_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["leftRow3BuckleBelted"] = CObjectSchemaItem::SMember(leftRow3BuckleBelted_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["rightRow3BuckleBelted"] = CObjectSchemaItem::SMember(rightRow3BuckleBelted_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["leftRearInflatableBelted"] = CObjectSchemaItem::SMember(leftRearInflatableBelted_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["rightRearInflatableBelted"] = CObjectSchemaItem::SMember(rightRearInflatableBelted_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["middleRow1BeltDeployed"] = CObjectSchemaItem::SMember(middleRow1BeltDeployed_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["middleRow1BuckleBelted"] = CObjectSchemaItem::SMember(middleRow1BuckleBelted_SchemaItem, true, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_BodyInformation(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<IgnitionStableStatus::eType> IgnitionStableStatus_all_enum_values;
  IgnitionStableStatus_all_enum_values.insert(IgnitionStableStatus::IGNITION_SWITCH_NOT_STABLE);
  IgnitionStableStatus_all_enum_values.insert(IgnitionStableStatus::IGNITION_SWITCH_STABLE);
  IgnitionStableStatus_all_enum_values.insert(IgnitionStableStatus::MISSING_FROM_TRANSMITTER);

  std::set<IgnitionStatus::eType> IgnitionStatus_all_enum_values;
  IgnitionStatus_all_enum_values.insert(IgnitionStatus::IS_UNKNOWN);
  IgnitionStatus_all_enum_values.insert(IgnitionStatus::IS_OFF);
  IgnitionStatus_all_enum_values.insert(IgnitionStatus::IS_ACCESSORY);
  IgnitionStatus_all_enum_values.insert(IgnitionStatus::IS_RUN);
  IgnitionStatus_all_enum_values.insert(IgnitionStatus::IS_START);
  IgnitionStatus_all_enum_values.insert(IgnitionStatus::IS_INVALID);

  // Struct member parkBrakeActive.
  //
  // References signal "PrkBrkActv_B_Actl".
  std::shared_ptr<ISchemaItem> parkBrakeActive_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member ignitionStableStatus.
  //
  // References signal "Ignition_Switch_Stable". See IgnitionStableStatus.
  std::shared_ptr<ISchemaItem> ignitionStableStatus_SchemaItem = TEnumSchemaItem<IgnitionStableStatus::eType>::create(IgnitionStableStatus_all_enum_values, TSchemaItemParameter<IgnitionStableStatus::eType>());

  // Struct member ignitionStatus.
  //
  // References signal "Ignition_status". See IgnitionStatus.
  std::shared_ptr<ISchemaItem> ignitionStatus_SchemaItem = TEnumSchemaItem<IgnitionStatus::eType>::create(IgnitionStatus_all_enum_values, TSchemaItemParameter<IgnitionStatus::eType>());

  // Struct member driverDoorAjar.
  //
  // References signal "DrStatDrv_B_Actl".
  std::shared_ptr<ISchemaItem> driverDoorAjar_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member passengerDoorAjar.
  //
  // References signal "DrStatPsngr_B_Actl".
  std::shared_ptr<ISchemaItem> passengerDoorAjar_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member rearLeftDoorAjar.
  //
  // References signal "DrStatRl_B_Actl".
  std::shared_ptr<ISchemaItem> rearLeftDoorAjar_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member rearRightDoorAjar.
  //
  // References signal "DrStatRr_B_Actl".
  std::shared_ptr<ISchemaItem> rearRightDoorAjar_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["parkBrakeActive"] = CObjectSchemaItem::SMember(parkBrakeActive_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["ignitionStableStatus"] = CObjectSchemaItem::SMember(ignitionStableStatus_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["ignitionStatus"] = CObjectSchemaItem::SMember(ignitionStatus_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["driverDoorAjar"] = CObjectSchemaItem::SMember(driverDoorAjar_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["passengerDoorAjar"] = CObjectSchemaItem::SMember(passengerDoorAjar_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["rearLeftDoorAjar"] = CObjectSchemaItem::SMember(rearLeftDoorAjar_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["rearRightDoorAjar"] = CObjectSchemaItem::SMember(rearRightDoorAjar_SchemaItem, false, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_DeviceStatus(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<DeviceLevelStatus::eType> DeviceLevelStatus_all_enum_values;
  DeviceLevelStatus_all_enum_values.insert(DeviceLevelStatus::ZERO_LEVEL_BARS);
  DeviceLevelStatus_all_enum_values.insert(DeviceLevelStatus::ONE_LEVEL_BARS);
  DeviceLevelStatus_all_enum_values.insert(DeviceLevelStatus::TWO_LEVEL_BARS);
  DeviceLevelStatus_all_enum_values.insert(DeviceLevelStatus::THREE_LEVEL_BARS);
  DeviceLevelStatus_all_enum_values.insert(DeviceLevelStatus::FOUR_LEVEL_BARS);
  DeviceLevelStatus_all_enum_values.insert(DeviceLevelStatus::NOT_PROVIDED);

  std::set<PrimaryAudioSource::eType> PrimaryAudioSource_all_enum_values;
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::NO_SOURCE_SELECTED);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::CD);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::USB);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::USB2);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::BLUETOOTH_STEREO_BTST);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::LINE_IN);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::IPOD);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::MOBILE_APP);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::AM);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::FM);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::XM);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::DAB);

  std::map<PrimaryAudioSource::eType, std::vector<ElementSignature>> PrimaryAudioSource_element_signatures;
  PrimaryAudioSource_element_signatures[PrimaryAudioSource::CD] = std::vector<ElementSignature>();
  PrimaryAudioSource_element_signatures[PrimaryAudioSource::AM] = std::vector<ElementSignature>();
  PrimaryAudioSource_element_signatures[PrimaryAudioSource::FM] = std::vector<ElementSignature>();
  PrimaryAudioSource_element_signatures[PrimaryAudioSource::XM] = std::vector<ElementSignature>();
  PrimaryAudioSource_element_signatures[PrimaryAudioSource::DAB] = std::vector<ElementSignature>();
  PrimaryAudioSource_element_signatures[PrimaryAudioSource::CD].push_back(ElementSignature("5.0.0", "", false));
  PrimaryAudioSource_element_signatures[PrimaryAudioSource::AM].push_back(ElementSignature("5.0.0", "", false));
  PrimaryAudioSource_element_signatures[PrimaryAudioSource::FM].push_back(ElementSignature("5.0.0", "", false));
  PrimaryAudioSource_element_signatures[PrimaryAudioSource::XM].push_back(ElementSignature("5.0.0", "", false));
  PrimaryAudioSource_element_signatures[PrimaryAudioSource::DAB].push_back(ElementSignature("5.0.0", "", false));

  // Struct member voiceRecOn.
  //
  // References signal "CPM_VoiceRec_STAT".
  std::shared_ptr<ISchemaItem> voiceRecOn_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member btIconOn.
  //
  // References signal "BT_ICON".
  std::shared_ptr<ISchemaItem> btIconOn_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member callActive.
  //
  // References signal "CPM_Call_Active_STAT".
  std::shared_ptr<ISchemaItem> callActive_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member phoneRoaming.
  //
  // References signal "CPM_Phone_Roaming_STAT".
  std::shared_ptr<ISchemaItem> phoneRoaming_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member textMsgAvailable.
  //
  // References signal "CPM_TextMsg_AVAL".
  std::shared_ptr<ISchemaItem> textMsgAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member battLevelStatus.
  //
  // Device battery level status.  References signal "CPM_Batt_Level_STAT". See DeviceLevelStatus.
  std::shared_ptr<ISchemaItem> battLevelStatus_SchemaItem = TEnumSchemaItem<DeviceLevelStatus::eType>::create(DeviceLevelStatus_all_enum_values, TSchemaItemParameter<DeviceLevelStatus::eType>());

  // Struct member stereoAudioOutputMuted.
  //
  // References signal "CPM_Stereo_Audio_Output".
  std::shared_ptr<ISchemaItem> stereoAudioOutputMuted_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member monoAudioOutputMuted.
  //
  // References signal "CPM_Mono_Audio_Output".
  std::shared_ptr<ISchemaItem> monoAudioOutputMuted_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member signalLevelStatus.
  //
  // Device signal level status.  References signal "CPM_Signal_Strength_STAT". See DeviceLevelStatus.
  std::shared_ptr<ISchemaItem> signalLevelStatus_SchemaItem = TEnumSchemaItem<DeviceLevelStatus::eType>::create(DeviceLevelStatus_all_enum_values, TSchemaItemParameter<DeviceLevelStatus::eType>());

  // Struct member primaryAudioSource.
  //
  // References signal "CPM_Stereo_PAS_Source". See PrimaryAudioSource.
  std::shared_ptr<ISchemaItem> primaryAudioSource_SchemaItem = TEnumSchemaItem<PrimaryAudioSource::eType>::createWithSignatures(PrimaryAudioSource_all_enum_values, PrimaryAudioSource_element_signatures, TSchemaItemParameter<PrimaryAudioSource::eType>());

  // Struct member eCallEventActive.
  //
  // References signal "eCall_Event".
  std::shared_ptr<ISchemaItem> eCallEventActive_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["voiceRecOn"] = CObjectSchemaItem::SMember(voiceRecOn_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["btIconOn"] = CObjectSchemaItem::SMember(btIconOn_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["callActive"] = CObjectSchemaItem::SMember(callActive_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["phoneRoaming"] = CObjectSchemaItem::SMember(phoneRoaming_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["textMsgAvailable"] = CObjectSchemaItem::SMember(textMsgAvailable_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["battLevelStatus"] = CObjectSchemaItem::SMember(battLevelStatus_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["stereoAudioOutputMuted"] = CObjectSchemaItem::SMember(stereoAudioOutputMuted_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["monoAudioOutputMuted"] = CObjectSchemaItem::SMember(monoAudioOutputMuted_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["signalLevelStatus"] = CObjectSchemaItem::SMember(signalLevelStatus_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["primaryAudioSource"] = CObjectSchemaItem::SMember(primaryAudioSource_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["eCallEventActive"] = CObjectSchemaItem::SMember(eCallEventActive_SchemaItem, true, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_HeadLampStatus(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<AmbientLightStatus::eType> AmbientLightStatus_all_enum_values;
  AmbientLightStatus_all_enum_values.insert(AmbientLightStatus::NIGHT);
  AmbientLightStatus_all_enum_values.insert(AmbientLightStatus::TWILIGHT_1);
  AmbientLightStatus_all_enum_values.insert(AmbientLightStatus::TWILIGHT_2);
  AmbientLightStatus_all_enum_values.insert(AmbientLightStatus::TWILIGHT_3);
  AmbientLightStatus_all_enum_values.insert(AmbientLightStatus::TWILIGHT_4);
  AmbientLightStatus_all_enum_values.insert(AmbientLightStatus::DAY);
  AmbientLightStatus_all_enum_values.insert(AmbientLightStatus::ALS_UNKNOWN);
  AmbientLightStatus_all_enum_values.insert(AmbientLightStatus::INVALID);

  // Struct member lowBeamsOn.
  //
  // Status of the low beam lamps.  References signal "HeadLampLoActv_B_Stat".
  std::shared_ptr<ISchemaItem> lowBeamsOn_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member highBeamsOn.
  //
  // Status of the high beam lamps.  References signal "HeadLghtHiOn_B_Stat".
  std::shared_ptr<ISchemaItem> highBeamsOn_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member ambientLightSensorStatus.
  //
  // Status of the ambient light sensor.
  std::shared_ptr<ISchemaItem> ambientLightSensorStatus_SchemaItem = TEnumSchemaItem<AmbientLightStatus::eType>::create(AmbientLightStatus_all_enum_values, TSchemaItemParameter<AmbientLightStatus::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["lowBeamsOn"] = CObjectSchemaItem::SMember(lowBeamsOn_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["highBeamsOn"] = CObjectSchemaItem::SMember(highBeamsOn_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["ambientLightSensorStatus"] = CObjectSchemaItem::SMember(ambientLightSensorStatus_SchemaItem, false, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_AppInfo(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member appDisplayName.
  //
  // The name displayed for the mobile application on the mobile device (can differ from the app name set in the initial RAI request).
  std::shared_ptr<ISchemaItem> appDisplayName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Struct member appBundleID.
  //
  // The AppBundleID of an iOS application or package name of the Android application. This supports App Launch strategies for each platform.
  std::shared_ptr<ISchemaItem> appBundleID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(256), TSchemaItemParameter<std::string>());

  // Struct member appVersion.
  //
  // Represents the build version number of this particular mobile app.
  std::shared_ptr<ISchemaItem> appVersion_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(256), TSchemaItemParameter<std::string>());

  // Struct member appIcon.
  //
  // A file reference to the icon utilized by this app (simplifies the process of setting an app icon during app registration).
  std::shared_ptr<ISchemaItem> appIcon_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["appDisplayName"] = CObjectSchemaItem::SMember(appDisplayName_SchemaItem, true, "4.2.0", "", false, false);
  schema_members["appBundleID"] = CObjectSchemaItem::SMember(appBundleID_SchemaItem, true, "4.2.0", "", false, false);
  schema_members["appVersion"] = CObjectSchemaItem::SMember(appVersion_SchemaItem, true, "4.2.0", "", false, false);
  schema_members["appIcon"] = CObjectSchemaItem::SMember(appIcon_SchemaItem, false, "4.2.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_ECallInfo(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<VehicleDataNotificationStatus::eType> VehicleDataNotificationStatus_all_enum_values;
  VehicleDataNotificationStatus_all_enum_values.insert(VehicleDataNotificationStatus::VDNS_NOT_SUPPORTED);
  VehicleDataNotificationStatus_all_enum_values.insert(VehicleDataNotificationStatus::VDNS_NORMAL);
  VehicleDataNotificationStatus_all_enum_values.insert(VehicleDataNotificationStatus::VDNS_ACTIVE);
  VehicleDataNotificationStatus_all_enum_values.insert(VehicleDataNotificationStatus::VDNS_NOT_USED);

  std::set<ECallConfirmationStatus::eType> ECallConfirmationStatus_all_enum_values;
  ECallConfirmationStatus_all_enum_values.insert(ECallConfirmationStatus::ECCS_NORMAL);
  ECallConfirmationStatus_all_enum_values.insert(ECallConfirmationStatus::ECCS_CALL_IN_PROGRESS);
  ECallConfirmationStatus_all_enum_values.insert(ECallConfirmationStatus::ECCS_CALL_CANCELLED);
  ECallConfirmationStatus_all_enum_values.insert(ECallConfirmationStatus::CALL_COMPLETED);
  ECallConfirmationStatus_all_enum_values.insert(ECallConfirmationStatus::ECCS_CALL_UNSUCCESSFUL);
  ECallConfirmationStatus_all_enum_values.insert(ECallConfirmationStatus::ECCS_ECALL_CONFIGURED_OFF);
  ECallConfirmationStatus_all_enum_values.insert(ECallConfirmationStatus::ECCS_CALL_COMPLETE_DTMF_TIMEOUT);

  // Struct member eCallNotificationStatus.
  //
  // References signal "eCallNotification_4A". See VehicleDataNotificationStatus.
  std::shared_ptr<ISchemaItem> eCallNotificationStatus_SchemaItem = TEnumSchemaItem<VehicleDataNotificationStatus::eType>::create(VehicleDataNotificationStatus_all_enum_values, TSchemaItemParameter<VehicleDataNotificationStatus::eType>());

  // Struct member auxECallNotificationStatus.
  //
  // References signal "eCallNotification". See VehicleDataNotificationStatus.
  std::shared_ptr<ISchemaItem> auxECallNotificationStatus_SchemaItem = TEnumSchemaItem<VehicleDataNotificationStatus::eType>::create(VehicleDataNotificationStatus_all_enum_values, TSchemaItemParameter<VehicleDataNotificationStatus::eType>());

  // Struct member eCallConfirmationStatus.
  //
  // References signal "eCallConfirmation". See ECallConfirmationStatus.
  std::shared_ptr<ISchemaItem> eCallConfirmationStatus_SchemaItem = TEnumSchemaItem<ECallConfirmationStatus::eType>::create(ECallConfirmationStatus_all_enum_values, TSchemaItemParameter<ECallConfirmationStatus::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["eCallNotificationStatus"] = CObjectSchemaItem::SMember(eCallNotificationStatus_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["auxECallNotificationStatus"] = CObjectSchemaItem::SMember(auxECallNotificationStatus_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["eCallConfirmationStatus"] = CObjectSchemaItem::SMember(eCallConfirmationStatus_SchemaItem, true, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_AirbagStatus(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<VehicleDataEventStatus::eType> VehicleDataEventStatus_all_enum_values;
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_NO_EVENT);
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_NO);
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_YES);
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_NOT_SUPPORTED);
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_FAULT);

  // Struct member driverAirbagDeployed.
  //
  // References signal "VedsDrvBag_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> driverAirbagDeployed_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member driverSideAirbagDeployed.
  //
  // References signal "VedsDrvSideBag_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> driverSideAirbagDeployed_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member driverCurtainAirbagDeployed.
  //
  // References signal "VedsDrvCrtnBag_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> driverCurtainAirbagDeployed_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member passengerAirbagDeployed.
  //
  // References signal "VedsPasBag_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> passengerAirbagDeployed_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member passengerCurtainAirbagDeployed.
  //
  // References signal "VedsPasCrtnBag_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> passengerCurtainAirbagDeployed_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member driverKneeAirbagDeployed.
  //
  // References signal "VedsKneeDrvBag_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> driverKneeAirbagDeployed_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member passengerSideAirbagDeployed.
  //
  // References signal "VedsPasSideBag_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> passengerSideAirbagDeployed_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member passengerKneeAirbagDeployed.
  //
  // References signal "VedsKneePasBag_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> passengerKneeAirbagDeployed_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["driverAirbagDeployed"] = CObjectSchemaItem::SMember(driverAirbagDeployed_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["driverSideAirbagDeployed"] = CObjectSchemaItem::SMember(driverSideAirbagDeployed_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["driverCurtainAirbagDeployed"] = CObjectSchemaItem::SMember(driverCurtainAirbagDeployed_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["passengerAirbagDeployed"] = CObjectSchemaItem::SMember(passengerAirbagDeployed_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["passengerCurtainAirbagDeployed"] = CObjectSchemaItem::SMember(passengerCurtainAirbagDeployed_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["driverKneeAirbagDeployed"] = CObjectSchemaItem::SMember(driverKneeAirbagDeployed_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["passengerSideAirbagDeployed"] = CObjectSchemaItem::SMember(passengerSideAirbagDeployed_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["passengerKneeAirbagDeployed"] = CObjectSchemaItem::SMember(passengerKneeAirbagDeployed_SchemaItem, true, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_EmergencyEvent(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<EmergencyEventType::eType> EmergencyEventType_all_enum_values;
  EmergencyEventType_all_enum_values.insert(EmergencyEventType::EET_NO_EVENT);
  EmergencyEventType_all_enum_values.insert(EmergencyEventType::EET_FRONTAL);
  EmergencyEventType_all_enum_values.insert(EmergencyEventType::EET_SIDE);
  EmergencyEventType_all_enum_values.insert(EmergencyEventType::EET_REAR);
  EmergencyEventType_all_enum_values.insert(EmergencyEventType::EET_ROLLOVER);
  EmergencyEventType_all_enum_values.insert(EmergencyEventType::EET_NOT_SUPPORTED);
  EmergencyEventType_all_enum_values.insert(EmergencyEventType::EET_FAULT);

  std::set<FuelCutoffStatus::eType> FuelCutoffStatus_all_enum_values;
  FuelCutoffStatus_all_enum_values.insert(FuelCutoffStatus::FCS_TERMINATE_FUEL);
  FuelCutoffStatus_all_enum_values.insert(FuelCutoffStatus::FCS_NORMAL_OPERATION);
  FuelCutoffStatus_all_enum_values.insert(FuelCutoffStatus::FCS_FAULT);

  std::set<VehicleDataEventStatus::eType> VehicleDataEventStatus_all_enum_values;
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_NO_EVENT);
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_NO);
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_YES);
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_NOT_SUPPORTED);
  VehicleDataEventStatus_all_enum_values.insert(VehicleDataEventStatus::VDES_FAULT);

  // Struct member emergencyEventType.
  //
  // References signal "VedsEvntType_D_Ltchd". See EmergencyEventType.
  std::shared_ptr<ISchemaItem> emergencyEventType_SchemaItem = TEnumSchemaItem<EmergencyEventType::eType>::create(EmergencyEventType_all_enum_values, TSchemaItemParameter<EmergencyEventType::eType>());

  // Struct member fuelCutoffStatus.
  //
  // References signal "RCM_FuelCutoff". See FuelCutoffStatus.
  std::shared_ptr<ISchemaItem> fuelCutoffStatus_SchemaItem = TEnumSchemaItem<FuelCutoffStatus::eType>::create(FuelCutoffStatus_all_enum_values, TSchemaItemParameter<FuelCutoffStatus::eType>());

  // Struct member rolloverEvent.
  //
  // References signal "VedsEvntRoll_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> rolloverEvent_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());

  // Struct member maximumChangeVelocity.
  //
  // References signal "VedsMaxDeltaV_D_Ltchd". Change in velocity in KPH.  Additional reserved values:
  //                 0x00 No event
  //                 0xFE Not supported
  //                 0xFF Fault
  //             
  std::shared_ptr<ISchemaItem> maximumChangeVelocity_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(255), TSchemaItemParameter<int32_t>());

  // Struct member multipleEvents.
  //
  // References signal "VedsMultiEvnt_D_Ltchd". See VehicleDataEventStatus.
  std::shared_ptr<ISchemaItem> multipleEvents_SchemaItem = TEnumSchemaItem<VehicleDataEventStatus::eType>::create(VehicleDataEventStatus_all_enum_values, TSchemaItemParameter<VehicleDataEventStatus::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["emergencyEventType"] = CObjectSchemaItem::SMember(emergencyEventType_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["fuelCutoffStatus"] = CObjectSchemaItem::SMember(fuelCutoffStatus_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["rolloverEvent"] = CObjectSchemaItem::SMember(rolloverEvent_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["maximumChangeVelocity"] = CObjectSchemaItem::SMember(maximumChangeVelocity_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["multipleEvents"] = CObjectSchemaItem::SMember(multipleEvents_SchemaItem, true, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_ClusterModeStatus(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<PowerModeQualificationStatus::eType> PowerModeQualificationStatus_all_enum_values;
  PowerModeQualificationStatus_all_enum_values.insert(PowerModeQualificationStatus::POWER_MODE_UNDEFINED);
  PowerModeQualificationStatus_all_enum_values.insert(PowerModeQualificationStatus::POWER_MODE_EVALUATION_IN_PROGRESS);
  PowerModeQualificationStatus_all_enum_values.insert(PowerModeQualificationStatus::NOT_DEFINED);
  PowerModeQualificationStatus_all_enum_values.insert(PowerModeQualificationStatus::POWER_MODE_OK);

  std::set<CarModeStatus::eType> CarModeStatus_all_enum_values;
  CarModeStatus_all_enum_values.insert(CarModeStatus::CMS_NORMAL);
  CarModeStatus_all_enum_values.insert(CarModeStatus::CMS_FACTORY);
  CarModeStatus_all_enum_values.insert(CarModeStatus::CMS_TRANSPORT);
  CarModeStatus_all_enum_values.insert(CarModeStatus::CMS_CRASH);

  std::set<PowerModeStatus::eType> PowerModeStatus_all_enum_values;
  PowerModeStatus_all_enum_values.insert(PowerModeStatus::KEY_OUT);
  PowerModeStatus_all_enum_values.insert(PowerModeStatus::KEY_RECENTLY_OUT);
  PowerModeStatus_all_enum_values.insert(PowerModeStatus::KEY_APPROVED_0);
  PowerModeStatus_all_enum_values.insert(PowerModeStatus::POST_ACCESORY_0);
  PowerModeStatus_all_enum_values.insert(PowerModeStatus::ACCESORY_1);
  PowerModeStatus_all_enum_values.insert(PowerModeStatus::POST_IGNITION_1);
  PowerModeStatus_all_enum_values.insert(PowerModeStatus::IGNITION_ON_2);
  PowerModeStatus_all_enum_values.insert(PowerModeStatus::RUNNING_2);
  PowerModeStatus_all_enum_values.insert(PowerModeStatus::CRANK_3);

  // Struct member powerModeActive.
  //
  // References signal "PowerMode_UB".
  std::shared_ptr<ISchemaItem> powerModeActive_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member powerModeQualificationStatus.
  //
  // References signal "PowerModeQF". See PowerModeQualificationStatus.
  std::shared_ptr<ISchemaItem> powerModeQualificationStatus_SchemaItem = TEnumSchemaItem<PowerModeQualificationStatus::eType>::create(PowerModeQualificationStatus_all_enum_values, TSchemaItemParameter<PowerModeQualificationStatus::eType>());

  // Struct member carModeStatus.
  //
  // References signal "CarMode". See CarMode.
  std::shared_ptr<ISchemaItem> carModeStatus_SchemaItem = TEnumSchemaItem<CarModeStatus::eType>::create(CarModeStatus_all_enum_values, TSchemaItemParameter<CarModeStatus::eType>());

  // Struct member powerModeStatus.
  //
  // References signal "PowerMode". See PowerMode.
  std::shared_ptr<ISchemaItem> powerModeStatus_SchemaItem = TEnumSchemaItem<PowerModeStatus::eType>::create(PowerModeStatus_all_enum_values, TSchemaItemParameter<PowerModeStatus::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["powerModeActive"] = CObjectSchemaItem::SMember(powerModeActive_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["powerModeQualificationStatus"] = CObjectSchemaItem::SMember(powerModeQualificationStatus_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["carModeStatus"] = CObjectSchemaItem::SMember(carModeStatus_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["powerModeStatus"] = CObjectSchemaItem::SMember(powerModeStatus_SchemaItem, true, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_MyKey(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<VehicleDataStatus::eType> VehicleDataStatus_all_enum_values;
  VehicleDataStatus_all_enum_values.insert(VehicleDataStatus::VDS_NO_DATA_EXISTS);
  VehicleDataStatus_all_enum_values.insert(VehicleDataStatus::VDS_OFF);
  VehicleDataStatus_all_enum_values.insert(VehicleDataStatus::VDS_ON);

  // Struct member e911Override.
  //
  // Indicates whether e911 override is on.  References signal "MyKey_e911Override_St". See VehicleDataStatus.
  std::shared_ptr<ISchemaItem> e911Override_SchemaItem = TEnumSchemaItem<VehicleDataStatus::eType>::create(VehicleDataStatus_all_enum_values, TSchemaItemParameter<VehicleDataStatus::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["e911Override"] = CObjectSchemaItem::SMember(e911Override_SchemaItem, true, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_TireStatus(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<WarningLightStatus::eType> WarningLightStatus_all_enum_values;
  WarningLightStatus_all_enum_values.insert(WarningLightStatus::WLS_OFF);
  WarningLightStatus_all_enum_values.insert(WarningLightStatus::WLS_ON);
  WarningLightStatus_all_enum_values.insert(WarningLightStatus::WLS_FLASH);
  WarningLightStatus_all_enum_values.insert(WarningLightStatus::WLS_NOT_USED);

  // Struct member pressureTelltale.
  //
  // Status of the Tire Pressure Telltale. See WarningLightStatus.
  std::shared_ptr<ISchemaItem> pressureTelltale_SchemaItem = TEnumSchemaItem<WarningLightStatus::eType>::create(WarningLightStatus_all_enum_values, TSchemaItemParameter<WarningLightStatus::eType>());

  // Struct member leftFront.
  //
  // The status of the left front tire.
  std::shared_ptr<ISchemaItem> leftFront_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SingleTireStatus);

  // Struct member rightFront.
  //
  // The status of the right front tire.
  std::shared_ptr<ISchemaItem> rightFront_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SingleTireStatus);

  // Struct member leftRear.
  //
  // The status of the left rear tire.
  std::shared_ptr<ISchemaItem> leftRear_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SingleTireStatus);

  // Struct member rightRear.
  //
  // The status of the right rear tire.
  std::shared_ptr<ISchemaItem> rightRear_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SingleTireStatus);

  // Struct member innerLeftRear.
  //
  // The status of the inner left rear.
  std::shared_ptr<ISchemaItem> innerLeftRear_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SingleTireStatus);

  // Struct member innerRightRear.
  //
  // The status of the inner right rear.
  std::shared_ptr<ISchemaItem> innerRightRear_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SingleTireStatus);CObjectSchemaItem::Members schema_members;

  schema_members["pressureTelltale"] = CObjectSchemaItem::SMember(pressureTelltale_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["leftFront"] = CObjectSchemaItem::SMember(leftFront_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["rightFront"] = CObjectSchemaItem::SMember(rightFront_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["leftRear"] = CObjectSchemaItem::SMember(leftRear_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["rightRear"] = CObjectSchemaItem::SMember(rightRear_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["innerLeftRear"] = CObjectSchemaItem::SMember(innerLeftRear_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["innerRightRear"] = CObjectSchemaItem::SMember(innerRightRear_SchemaItem, true, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_GPSData(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<CompassDirection::eType> CompassDirection_all_enum_values;
  CompassDirection_all_enum_values.insert(CompassDirection::NORTH);
  CompassDirection_all_enum_values.insert(CompassDirection::NORTHWEST);
  CompassDirection_all_enum_values.insert(CompassDirection::WEST);
  CompassDirection_all_enum_values.insert(CompassDirection::SOUTHWEST);
  CompassDirection_all_enum_values.insert(CompassDirection::SOUTH);
  CompassDirection_all_enum_values.insert(CompassDirection::SOUTHEAST);
  CompassDirection_all_enum_values.insert(CompassDirection::EAST);
  CompassDirection_all_enum_values.insert(CompassDirection::NORTHEAST);

  std::set<Dimension::eType> Dimension_all_enum_values;
  Dimension_all_enum_values.insert(Dimension::Dimension_NO_FIX);
  Dimension_all_enum_values.insert(Dimension::Dimension_2D);
  Dimension_all_enum_values.insert(Dimension::Dimension_3D);

  // Struct member longitudeDegrees.
  std::shared_ptr<ISchemaItem> longitudeDegrees_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-180.0), TSchemaItemParameter<double>(180.0), TSchemaItemParameter<double>());

  // Struct member latitudeDegrees.
  std::shared_ptr<ISchemaItem> latitudeDegrees_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-90.0), TSchemaItemParameter<double>(90.0), TSchemaItemParameter<double>());

  // Struct member utcYear.
  //
  // The current UTC year.
  std::shared_ptr<ISchemaItem> utcYear_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(2010), TSchemaItemParameter<int32_t>(2100), TSchemaItemParameter<int32_t>());

  // Function parameter utcYear_history_v1.
  std::shared_ptr<ISchemaItem> utcYear_history_v1_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(2010), TSchemaItemParameter<int32_t>(2100), TSchemaItemParameter<int32_t>());

  std::vector<CObjectSchemaItem::SMember> utcYear_history_vector;

  // Struct member utcMonth.
  //
  // The current UTC month.
  std::shared_ptr<ISchemaItem> utcMonth_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(12), TSchemaItemParameter<int32_t>());

  // Function parameter utcMonth_history_v1.
  std::shared_ptr<ISchemaItem> utcMonth_history_v1_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(12), TSchemaItemParameter<int32_t>());

  std::vector<CObjectSchemaItem::SMember> utcMonth_history_vector;

  // Struct member utcDay.
  //
  // The current UTC day.
  std::shared_ptr<ISchemaItem> utcDay_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(31), TSchemaItemParameter<int32_t>());

  // Function parameter utcDay_history_v1.
  std::shared_ptr<ISchemaItem> utcDay_history_v1_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(31), TSchemaItemParameter<int32_t>());

  std::vector<CObjectSchemaItem::SMember> utcDay_history_vector;

  // Struct member utcHours.
  //
  // The current UTC hour.
  std::shared_ptr<ISchemaItem> utcHours_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(23), TSchemaItemParameter<int32_t>());

  // Function parameter utcHours_history_v1.
  std::shared_ptr<ISchemaItem> utcHours_history_v1_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(23), TSchemaItemParameter<int32_t>());

  std::vector<CObjectSchemaItem::SMember> utcHours_history_vector;

  // Struct member utcMinutes.
  //
  // The current UTC minute.
  std::shared_ptr<ISchemaItem> utcMinutes_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(59), TSchemaItemParameter<int32_t>());

  // Function parameter utcMinutes_history_v1.
  std::shared_ptr<ISchemaItem> utcMinutes_history_v1_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(59), TSchemaItemParameter<int32_t>());

  std::vector<CObjectSchemaItem::SMember> utcMinutes_history_vector;

  // Struct member utcSeconds.
  //
  // The current UTC second.
  std::shared_ptr<ISchemaItem> utcSeconds_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(59), TSchemaItemParameter<int32_t>());

  // Function parameter utcSeconds_history_v1.
  std::shared_ptr<ISchemaItem> utcSeconds_history_v1_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(59), TSchemaItemParameter<int32_t>());

  std::vector<CObjectSchemaItem::SMember> utcSeconds_history_vector;

  // Struct member compassDirection.
  //
  // See CompassDirection.
  std::shared_ptr<ISchemaItem> compassDirection_SchemaItem = TEnumSchemaItem<CompassDirection::eType>::create(CompassDirection_all_enum_values, TSchemaItemParameter<CompassDirection::eType>());

  // Function parameter compassDirection_history_v1.
  std::shared_ptr<ISchemaItem> compassDirection_history_v1_SchemaItem = TEnumSchemaItem<CompassDirection::eType>::create(CompassDirection_all_enum_values, TSchemaItemParameter<CompassDirection::eType>());

  std::vector<CObjectSchemaItem::SMember> compassDirection_history_vector;

  // Struct member pdop.
  //
  // PDOP.  If undefined or unavailable, then value shall be set to 0.
  std::shared_ptr<ISchemaItem> pdop_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(1000.0), TSchemaItemParameter<double>(0.0));

  // Function parameter pdop_history_v1.
  std::shared_ptr<ISchemaItem> pdop_history_v1_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(10.0), TSchemaItemParameter<double>(0.0));

  std::vector<CObjectSchemaItem::SMember> pdop_history_vector;

  // Struct member hdop.
  //
  // HDOP.  If value is unknown, value shall be set to 0.
  std::shared_ptr<ISchemaItem> hdop_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(1000.0), TSchemaItemParameter<double>(0.0));

  // Function parameter hdop_history_v1.
  std::shared_ptr<ISchemaItem> hdop_history_v1_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(10.0), TSchemaItemParameter<double>(0.0));

  std::vector<CObjectSchemaItem::SMember> hdop_history_vector;

  // Struct member vdop.
  //
  // VDOP.  If value is unknown, value shall be set to 0.
  std::shared_ptr<ISchemaItem> vdop_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(1000.0), TSchemaItemParameter<double>(0.0));

  // Function parameter vdop_history_v1.
  std::shared_ptr<ISchemaItem> vdop_history_v1_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(10.0), TSchemaItemParameter<double>(0.0));

  std::vector<CObjectSchemaItem::SMember> vdop_history_vector;

  // Struct member actual.
  //
  // 
  //                 True, if actual.
  //                 False, if inferred.
  //             
  std::shared_ptr<ISchemaItem> actual_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter actual_history_v1.
  std::shared_ptr<ISchemaItem> actual_history_v1_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  std::vector<CObjectSchemaItem::SMember> actual_history_vector;

  // Struct member satellites.
  //
  // Number of satellites in view
  std::shared_ptr<ISchemaItem> satellites_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(31), TSchemaItemParameter<int32_t>());

  // Function parameter satellites_history_v1.
  std::shared_ptr<ISchemaItem> satellites_history_v1_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(31), TSchemaItemParameter<int32_t>());

  std::vector<CObjectSchemaItem::SMember> satellites_history_vector;

  // Struct member dimension.
  //
  // See Dimension
  std::shared_ptr<ISchemaItem> dimension_SchemaItem = TEnumSchemaItem<Dimension::eType>::create(Dimension_all_enum_values, TSchemaItemParameter<Dimension::eType>());

  // Function parameter dimension_history_v1.
  std::shared_ptr<ISchemaItem> dimension_history_v1_SchemaItem = TEnumSchemaItem<Dimension::eType>::create(Dimension_all_enum_values, TSchemaItemParameter<Dimension::eType>());

  std::vector<CObjectSchemaItem::SMember> dimension_history_vector;

  // Struct member altitude.
  //
  // Altitude in meters
  std::shared_ptr<ISchemaItem> altitude_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-10000.0), TSchemaItemParameter<double>(10000.0), TSchemaItemParameter<double>());

  // Function parameter altitude_history_v1.
  std::shared_ptr<ISchemaItem> altitude_history_v1_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-10000.0), TSchemaItemParameter<double>(10000.0), TSchemaItemParameter<double>());

  std::vector<CObjectSchemaItem::SMember> altitude_history_vector;

  // Struct member heading.
  //
  // The heading. North is 0. Resolution is 0.01
  std::shared_ptr<ISchemaItem> heading_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(359.99), TSchemaItemParameter<double>());

  // Function parameter heading_history_v1.
  std::shared_ptr<ISchemaItem> heading_history_v1_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(359.99), TSchemaItemParameter<double>());

  std::vector<CObjectSchemaItem::SMember> heading_history_vector;

  // Struct member speed.
  //
  // The speed in KPH
  std::shared_ptr<ISchemaItem> speed_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(500.0), TSchemaItemParameter<double>());

  // Function parameter speed_history_v1.
  std::shared_ptr<ISchemaItem> speed_history_v1_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(500.0), TSchemaItemParameter<double>());

  std::vector<CObjectSchemaItem::SMember> speed_history_vector;

  // Struct member shifted.
  //
  // 
  //                 True, if GPS lat/long, time, and altitude have been purposefully shifted (requires a proprietary algorithm to unshift).
  //                 False, if the GPS data is raw and un-shifted.
  //                 If not provided, then value is assumed False.
  //             
  std::shared_ptr<ISchemaItem> shifted_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["longitudeDegrees"] = CObjectSchemaItem::SMember(longitudeDegrees_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["latitudeDegrees"] = CObjectSchemaItem::SMember(latitudeDegrees_SchemaItem, true, "2.0.0", "", false, false);
  utcYear_history_vector.push_back(CObjectSchemaItem::SMember(utcYear_history_v1_SchemaItem, true, "2.0.0", "5.0.0", false, false));
  schema_members["utcYear"] = CObjectSchemaItem::SMember(utcYear_SchemaItem, false, "5.0.0", "", false, false, utcYear_history_vector);
  utcMonth_history_vector.push_back(CObjectSchemaItem::SMember(utcMonth_history_v1_SchemaItem, true, "2.0.0", "5.0.0", false, false));
  schema_members["utcMonth"] = CObjectSchemaItem::SMember(utcMonth_SchemaItem, false, "5.0.0", "", false, false, utcMonth_history_vector);
  utcDay_history_vector.push_back(CObjectSchemaItem::SMember(utcDay_history_v1_SchemaItem, true, "2.0.0", "5.0.0", false, false));
  schema_members["utcDay"] = CObjectSchemaItem::SMember(utcDay_SchemaItem, false, "5.0.0", "", false, false, utcDay_history_vector);
  utcHours_history_vector.push_back(CObjectSchemaItem::SMember(utcHours_history_v1_SchemaItem, true, "2.0.0", "5.0.0", false, false));
  schema_members["utcHours"] = CObjectSchemaItem::SMember(utcHours_SchemaItem, false, "5.0.0", "", false, false, utcHours_history_vector);
  utcMinutes_history_vector.push_back(CObjectSchemaItem::SMember(utcMinutes_history_v1_SchemaItem, true, "2.0.0", "5.0.0", false, false));
  schema_members["utcMinutes"] = CObjectSchemaItem::SMember(utcMinutes_SchemaItem, false, "5.0.0", "", false, false, utcMinutes_history_vector);
  utcSeconds_history_vector.push_back(CObjectSchemaItem::SMember(utcSeconds_history_v1_SchemaItem, true, "2.0.0", "5.0.0", false, false));
  schema_members["utcSeconds"] = CObjectSchemaItem::SMember(utcSeconds_SchemaItem, false, "5.0.0", "", false, false, utcSeconds_history_vector);
  compassDirection_history_vector.push_back(CObjectSchemaItem::SMember(compassDirection_history_v1_SchemaItem, true, "2.0.0", "5.0.0", false, false));
  schema_members["compassDirection"] = CObjectSchemaItem::SMember(compassDirection_SchemaItem, false, "5.0.0", "", false, false, compassDirection_history_vector);
  pdop_history_vector.push_back(CObjectSchemaItem::SMember(pdop_history_v1_SchemaItem, true, "2.0.0", "5.0.0", false, false));
  schema_members["pdop"] = CObjectSchemaItem::SMember(pdop_SchemaItem, false, "5.0.0", "", false, false, pdop_history_vector);
  hdop_history_vector.push_back(CObjectSchemaItem::SMember(hdop_history_v1_SchemaItem, true, "2.0.0", "5.0.0", false, false));
  schema_members["hdop"] = CObjectSchemaItem::SMember(hdop_SchemaItem, false, "5.0.0", "", false, false, hdop_history_vector);
  vdop_history_vector.push_back(CObjectSchemaItem::SMember(vdop_history_v1_SchemaItem, true, "2.0.0", "5.0.0", false, false));
  schema_members["vdop"] = CObjectSchemaItem::SMember(vdop_SchemaItem, false, "5.0.0", "", false, false, vdop_history_vector);
  actual_history_vector.push_back(CObjectSchemaItem::SMember(actual_history_v1_SchemaItem, true, "2.0.0", "5.0.0", false, false));
  schema_members["actual"] = CObjectSchemaItem::SMember(actual_SchemaItem, false, "5.0.0", "", false, false, actual_history_vector);
  satellites_history_vector.push_back(CObjectSchemaItem::SMember(satellites_history_v1_SchemaItem, true, "2.0.0", "5.0.0", false, false));
  schema_members["satellites"] = CObjectSchemaItem::SMember(satellites_SchemaItem, false, "5.0.0", "", false, false, satellites_history_vector);
  dimension_history_vector.push_back(CObjectSchemaItem::SMember(dimension_history_v1_SchemaItem, true, "2.0.0", "5.0.0", false, false));
  schema_members["dimension"] = CObjectSchemaItem::SMember(dimension_SchemaItem, false, "5.0.0", "", false, false, dimension_history_vector);
  altitude_history_vector.push_back(CObjectSchemaItem::SMember(altitude_history_v1_SchemaItem, true, "2.0.0", "5.0.0", false, false));
  schema_members["altitude"] = CObjectSchemaItem::SMember(altitude_SchemaItem, false, "5.0.0", "", false, false, altitude_history_vector);
  heading_history_vector.push_back(CObjectSchemaItem::SMember(heading_history_v1_SchemaItem, true, "2.0.0", "5.0.0", false, false));
  schema_members["heading"] = CObjectSchemaItem::SMember(heading_SchemaItem, false, "5.0.0", "", false, false, heading_history_vector);
  speed_history_vector.push_back(CObjectSchemaItem::SMember(speed_history_v1_SchemaItem, true, "2.0.0", "5.0.0", false, false));
  schema_members["speed"] = CObjectSchemaItem::SMember(speed_SchemaItem, false, "5.0.0", "", false, false, speed_history_vector);
  schema_members["shifted"] = CObjectSchemaItem::SMember(shifted_SchemaItem, false, "6.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_VehicleDataResult(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<VehicleDataType::eType> VehicleDataType_all_enum_values;
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_GPS);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_SPEED);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_RPM);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_FUELLEVEL);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_FUELLEVEL_STATE);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_FUELCONSUMPTION);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_EXTERNTEMP);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_VIN);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_PRNDL);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_TIREPRESSURE);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_ODOMETER);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_BELTSTATUS);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_BODYINFO);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_DEVICESTATUS);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_ECALLINFO);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_AIRBAGSTATUS);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_EMERGENCYEVENT);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_CLUSTERMODESTATUS);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_MYKEY);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_BRAKING);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_WIPERSTATUS);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_HEADLAMPSTATUS);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_BATTVOLTAGE);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_ENGINETORQUE);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_ACCPEDAL);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_STEERINGWHEEL);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_TURNSIGNAL);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_FUELRANGE);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_ENGINEOILLIFE);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_ELECTRONICPARKBRAKESTATUS);
  VehicleDataType_all_enum_values.insert(VehicleDataType::VEHICLEDATA_CLOUDAPPVEHICLEID);

  std::map<VehicleDataType::eType, std::vector<ElementSignature>> VehicleDataType_element_signatures;
  VehicleDataType_element_signatures[VehicleDataType::VEHICLEDATA_TURNSIGNAL] = std::vector<ElementSignature>();
  VehicleDataType_element_signatures[VehicleDataType::VEHICLEDATA_FUELRANGE] = std::vector<ElementSignature>();
  VehicleDataType_element_signatures[VehicleDataType::VEHICLEDATA_ENGINEOILLIFE] = std::vector<ElementSignature>();
  VehicleDataType_element_signatures[VehicleDataType::VEHICLEDATA_ELECTRONICPARKBRAKESTATUS] = std::vector<ElementSignature>();
  VehicleDataType_element_signatures[VehicleDataType::VEHICLEDATA_CLOUDAPPVEHICLEID] = std::vector<ElementSignature>();
  VehicleDataType_element_signatures[VehicleDataType::VEHICLEDATA_TURNSIGNAL].push_back(ElementSignature("5.0.0", "", false));
  VehicleDataType_element_signatures[VehicleDataType::VEHICLEDATA_FUELRANGE].push_back(ElementSignature("5.0.0", "", false));
  VehicleDataType_element_signatures[VehicleDataType::VEHICLEDATA_ENGINEOILLIFE].push_back(ElementSignature("5.0.0", "", false));
  VehicleDataType_element_signatures[VehicleDataType::VEHICLEDATA_ELECTRONICPARKBRAKESTATUS].push_back(ElementSignature("5.0.0", "", false));
  VehicleDataType_element_signatures[VehicleDataType::VEHICLEDATA_CLOUDAPPVEHICLEID].push_back(ElementSignature("5.1.0", "", false));

  std::set<VehicleDataResultCode::eType> VehicleDataResultCode_all_enum_values;
  VehicleDataResultCode_all_enum_values.insert(VehicleDataResultCode::VDRC_SUCCESS);
  VehicleDataResultCode_all_enum_values.insert(VehicleDataResultCode::VDRC_TRUNCATED_DATA);
  VehicleDataResultCode_all_enum_values.insert(VehicleDataResultCode::VDRC_DISALLOWED);
  VehicleDataResultCode_all_enum_values.insert(VehicleDataResultCode::VDRC_USER_DISALLOWED);
  VehicleDataResultCode_all_enum_values.insert(VehicleDataResultCode::VDRC_INVALID_ID);
  VehicleDataResultCode_all_enum_values.insert(VehicleDataResultCode::VDRC_DATA_NOT_AVAILABLE);
  VehicleDataResultCode_all_enum_values.insert(VehicleDataResultCode::VDRC_DATA_ALREADY_SUBSCRIBED);
  VehicleDataResultCode_all_enum_values.insert(VehicleDataResultCode::VDRC_DATA_NOT_SUBSCRIBED);
  VehicleDataResultCode_all_enum_values.insert(VehicleDataResultCode::VDRC_IGNORED);

  // Struct member dataType.
  //
  // Defined published data element type.
  std::shared_ptr<ISchemaItem> dataType_SchemaItem = TEnumSchemaItem<VehicleDataType::eType>::createWithSignatures(VehicleDataType_all_enum_values, VehicleDataType_element_signatures, TSchemaItemParameter<VehicleDataType::eType>());

  // Struct member resultCode.
  //
  // Published data result code.
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<VehicleDataResultCode::eType>::create(VehicleDataResultCode_all_enum_values, TSchemaItemParameter<VehicleDataResultCode::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["dataType"] = CObjectSchemaItem::SMember(dataType_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_DIDResult(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<VehicleDataResultCode::eType> VehicleDataResultCode_all_enum_values;
  VehicleDataResultCode_all_enum_values.insert(VehicleDataResultCode::VDRC_SUCCESS);
  VehicleDataResultCode_all_enum_values.insert(VehicleDataResultCode::VDRC_TRUNCATED_DATA);
  VehicleDataResultCode_all_enum_values.insert(VehicleDataResultCode::VDRC_DISALLOWED);
  VehicleDataResultCode_all_enum_values.insert(VehicleDataResultCode::VDRC_USER_DISALLOWED);
  VehicleDataResultCode_all_enum_values.insert(VehicleDataResultCode::VDRC_INVALID_ID);
  VehicleDataResultCode_all_enum_values.insert(VehicleDataResultCode::VDRC_DATA_NOT_AVAILABLE);
  VehicleDataResultCode_all_enum_values.insert(VehicleDataResultCode::VDRC_DATA_ALREADY_SUBSCRIBED);
  VehicleDataResultCode_all_enum_values.insert(VehicleDataResultCode::VDRC_DATA_NOT_SUBSCRIBED);
  VehicleDataResultCode_all_enum_values.insert(VehicleDataResultCode::VDRC_IGNORED);

  // Struct member resultCode.
  //
  // Individual DID result code.
  std::shared_ptr<ISchemaItem> resultCode_SchemaItem = TEnumSchemaItem<VehicleDataResultCode::eType>::create(VehicleDataResultCode_all_enum_values, TSchemaItemParameter<VehicleDataResultCode::eType>());

  // Struct member didLocation.
  //
  // Location of raw data from vehicle data DID
  std::shared_ptr<ISchemaItem> didLocation_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(65535), TSchemaItemParameter<int32_t>());

  // Struct member data.
  //
  // Raw DID-based data returned for requested element.
  std::shared_ptr<ISchemaItem> data_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(5000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["resultCode"] = CObjectSchemaItem::SMember(resultCode_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["didLocation"] = CObjectSchemaItem::SMember(didLocation_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["data"] = CObjectSchemaItem::SMember(data_SchemaItem, false, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_StartTime(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member hours.
  //
  // 
  //                 The hour of the media clock.
  //                 Some radios only support a max of 19 hours. If out of range, it will be rejected.
  //             
  std::shared_ptr<ISchemaItem> hours_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(59), TSchemaItemParameter<int32_t>());

  // Struct member minutes.
  std::shared_ptr<ISchemaItem> minutes_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(59), TSchemaItemParameter<int32_t>());

  // Struct member seconds.
  std::shared_ptr<ISchemaItem> seconds_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(59), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["hours"] = CObjectSchemaItem::SMember(hours_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["minutes"] = CObjectSchemaItem::SMember(minutes_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["seconds"] = CObjectSchemaItem::SMember(seconds_SchemaItem, true, "1.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_TextField(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<TextFieldName::eType> TextFieldName_all_enum_values;
  TextFieldName_all_enum_values.insert(TextFieldName::mainField1);
  TextFieldName_all_enum_values.insert(TextFieldName::mainField2);
  TextFieldName_all_enum_values.insert(TextFieldName::mainField3);
  TextFieldName_all_enum_values.insert(TextFieldName::mainField4);
  TextFieldName_all_enum_values.insert(TextFieldName::statusBar);
  TextFieldName_all_enum_values.insert(TextFieldName::mediaClock);
  TextFieldName_all_enum_values.insert(TextFieldName::mediaTrack);
  TextFieldName_all_enum_values.insert(TextFieldName::alertText1);
  TextFieldName_all_enum_values.insert(TextFieldName::alertText2);
  TextFieldName_all_enum_values.insert(TextFieldName::alertText3);
  TextFieldName_all_enum_values.insert(TextFieldName::scrollableMessageBody);
  TextFieldName_all_enum_values.insert(TextFieldName::initialInteractionText);
  TextFieldName_all_enum_values.insert(TextFieldName::navigationText1);
  TextFieldName_all_enum_values.insert(TextFieldName::navigationText2);
  TextFieldName_all_enum_values.insert(TextFieldName::ETA);
  TextFieldName_all_enum_values.insert(TextFieldName::totalDistance);
  TextFieldName_all_enum_values.insert(TextFieldName::audioPassThruDisplayText1);
  TextFieldName_all_enum_values.insert(TextFieldName::audioPassThruDisplayText2);
  TextFieldName_all_enum_values.insert(TextFieldName::sliderHeader);
  TextFieldName_all_enum_values.insert(TextFieldName::sliderFooter);
  TextFieldName_all_enum_values.insert(TextFieldName::menuName);
  TextFieldName_all_enum_values.insert(TextFieldName::secondaryText);
  TextFieldName_all_enum_values.insert(TextFieldName::tertiaryText);
  TextFieldName_all_enum_values.insert(TextFieldName::menuTitle);
  TextFieldName_all_enum_values.insert(TextFieldName::locationName);
  TextFieldName_all_enum_values.insert(TextFieldName::locationDescription);
  TextFieldName_all_enum_values.insert(TextFieldName::addressLines);
  TextFieldName_all_enum_values.insert(TextFieldName::phoneNumber);

  std::map<TextFieldName::eType, std::vector<ElementSignature>> TextFieldName_element_signatures;
  TextFieldName_element_signatures[TextFieldName::alertText2] = std::vector<ElementSignature>();
  TextFieldName_element_signatures[TextFieldName::alertText3] = std::vector<ElementSignature>();
  TextFieldName_element_signatures[TextFieldName::scrollableMessageBody] = std::vector<ElementSignature>();
  TextFieldName_element_signatures[TextFieldName::initialInteractionText] = std::vector<ElementSignature>();
  TextFieldName_element_signatures[TextFieldName::navigationText1] = std::vector<ElementSignature>();
  TextFieldName_element_signatures[TextFieldName::navigationText2] = std::vector<ElementSignature>();
  TextFieldName_element_signatures[TextFieldName::ETA] = std::vector<ElementSignature>();
  TextFieldName_element_signatures[TextFieldName::totalDistance] = std::vector<ElementSignature>();
  TextFieldName_element_signatures[TextFieldName::audioPassThruDisplayText1] = std::vector<ElementSignature>();
  TextFieldName_element_signatures[TextFieldName::audioPassThruDisplayText2] = std::vector<ElementSignature>();
  TextFieldName_element_signatures[TextFieldName::sliderHeader] = std::vector<ElementSignature>();
  TextFieldName_element_signatures[TextFieldName::sliderFooter] = std::vector<ElementSignature>();
  TextFieldName_element_signatures[TextFieldName::locationName] = std::vector<ElementSignature>();
  TextFieldName_element_signatures[TextFieldName::locationDescription] = std::vector<ElementSignature>();
  TextFieldName_element_signatures[TextFieldName::addressLines] = std::vector<ElementSignature>();
  TextFieldName_element_signatures[TextFieldName::phoneNumber] = std::vector<ElementSignature>();
  TextFieldName_element_signatures[TextFieldName::alertText2].push_back(ElementSignature("2.0.0", "", false));
  TextFieldName_element_signatures[TextFieldName::alertText3].push_back(ElementSignature("2.0.0", "", false));
  TextFieldName_element_signatures[TextFieldName::scrollableMessageBody].push_back(ElementSignature("2.0.0", "", false));
  TextFieldName_element_signatures[TextFieldName::initialInteractionText].push_back(ElementSignature("2.0.0", "", false));
  TextFieldName_element_signatures[TextFieldName::navigationText1].push_back(ElementSignature("2.0.0", "", false));
  TextFieldName_element_signatures[TextFieldName::navigationText2].push_back(ElementSignature("2.0.0", "", false));
  TextFieldName_element_signatures[TextFieldName::ETA].push_back(ElementSignature("2.0.0", "", false));
  TextFieldName_element_signatures[TextFieldName::totalDistance].push_back(ElementSignature("2.0.0", "", false));
  TextFieldName_element_signatures[TextFieldName::audioPassThruDisplayText1].push_back(ElementSignature("2.0.0", "", false));
  TextFieldName_element_signatures[TextFieldName::audioPassThruDisplayText2].push_back(ElementSignature("2.0.0", "", false));
  TextFieldName_element_signatures[TextFieldName::sliderHeader].push_back(ElementSignature("2.0.0", "", false));
  TextFieldName_element_signatures[TextFieldName::sliderFooter].push_back(ElementSignature("2.0.0", "", false));
  TextFieldName_element_signatures[TextFieldName::locationName].push_back(ElementSignature("4.0.0", "", false));
  TextFieldName_element_signatures[TextFieldName::locationDescription].push_back(ElementSignature("4.0.0", "", false));
  TextFieldName_element_signatures[TextFieldName::addressLines].push_back(ElementSignature("4.0.0", "", false));
  TextFieldName_element_signatures[TextFieldName::phoneNumber].push_back(ElementSignature("4.0.0", "", false));

  std::set<CharacterSet::eType> CharacterSet_all_enum_values;
  CharacterSet_all_enum_values.insert(CharacterSet::TYPE2SET);
  CharacterSet_all_enum_values.insert(CharacterSet::TYPE5SET);
  CharacterSet_all_enum_values.insert(CharacterSet::CID1SET);
  CharacterSet_all_enum_values.insert(CharacterSet::CID2SET);

  // Struct member name.
  //
  // The name that identifies the field. See TextFieldName.
  std::shared_ptr<ISchemaItem> name_SchemaItem = TEnumSchemaItem<TextFieldName::eType>::createWithSignatures(TextFieldName_all_enum_values, TextFieldName_element_signatures, TSchemaItemParameter<TextFieldName::eType>());

  // Struct member characterSet.
  //
  // The character set that is supported in this field. See CharacterSet.
  std::shared_ptr<ISchemaItem> characterSet_SchemaItem = TEnumSchemaItem<CharacterSet::eType>::create(CharacterSet_all_enum_values, TSchemaItemParameter<CharacterSet::eType>());

  // Struct member width.
  //
  // The number of characters in one row of this field.
  std::shared_ptr<ISchemaItem> width_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(500), TSchemaItemParameter<int32_t>());

  // Struct member rows.
  //
  // The number of rows of this field.
  std::shared_ptr<ISchemaItem> rows_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(8), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["name"] = CObjectSchemaItem::SMember(name_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["characterSet"] = CObjectSchemaItem::SMember(characterSet_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["width"] = CObjectSchemaItem::SMember(width_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["rows"] = CObjectSchemaItem::SMember(rows_SchemaItem, true, "1.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_ImageResolution(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member resolutionWidth.
  //
  // The image resolution width.
  std::shared_ptr<ISchemaItem> resolutionWidth_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(10000), TSchemaItemParameter<int32_t>());

  // Struct member resolutionHeight.
  //
  // The image resolution height.
  std::shared_ptr<ISchemaItem> resolutionHeight_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(10000), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["resolutionWidth"] = CObjectSchemaItem::SMember(resolutionWidth_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["resolutionHeight"] = CObjectSchemaItem::SMember(resolutionHeight_SchemaItem, true, "3.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_ImageField(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<ImageFieldName::eType> ImageFieldName_all_enum_values;
  ImageFieldName_all_enum_values.insert(ImageFieldName::softButtonImage);
  ImageFieldName_all_enum_values.insert(ImageFieldName::choiceImage);
  ImageFieldName_all_enum_values.insert(ImageFieldName::choiceSecondaryImage);
  ImageFieldName_all_enum_values.insert(ImageFieldName::vrHelpItem);
  ImageFieldName_all_enum_values.insert(ImageFieldName::turnIcon);
  ImageFieldName_all_enum_values.insert(ImageFieldName::menuIcon);
  ImageFieldName_all_enum_values.insert(ImageFieldName::cmdIcon);
  ImageFieldName_all_enum_values.insert(ImageFieldName::appIcon);
  ImageFieldName_all_enum_values.insert(ImageFieldName::graphic);
  ImageFieldName_all_enum_values.insert(ImageFieldName::secondaryGraphic);
  ImageFieldName_all_enum_values.insert(ImageFieldName::showConstantTBTIcon);
  ImageFieldName_all_enum_values.insert(ImageFieldName::showConstantTBTNextTurnIcon);
  ImageFieldName_all_enum_values.insert(ImageFieldName::locationImage);

  std::map<ImageFieldName::eType, std::vector<ElementSignature>> ImageFieldName_element_signatures;
  ImageFieldName_element_signatures[ImageFieldName::secondaryGraphic] = std::vector<ElementSignature>();
  ImageFieldName_element_signatures[ImageFieldName::locationImage] = std::vector<ElementSignature>();
  ImageFieldName_element_signatures[ImageFieldName::secondaryGraphic].push_back(ElementSignature("5.0.0", "", false));
  ImageFieldName_element_signatures[ImageFieldName::locationImage].push_back(ElementSignature("4.0.0", "", false));

  std::set<FileType::eType> FileType_all_enum_values;
  FileType_all_enum_values.insert(FileType::GRAPHIC_BMP);
  FileType_all_enum_values.insert(FileType::GRAPHIC_JPEG);
  FileType_all_enum_values.insert(FileType::GRAPHIC_PNG);
  FileType_all_enum_values.insert(FileType::AUDIO_WAVE);
  FileType_all_enum_values.insert(FileType::AUDIO_MP3);
  FileType_all_enum_values.insert(FileType::AUDIO_AAC);
  FileType_all_enum_values.insert(FileType::BINARY);
  FileType_all_enum_values.insert(FileType::JSON);

  // Struct member name.
  //
  // The name that identifies the field. See ImageFieldName.
  std::shared_ptr<ISchemaItem> name_SchemaItem = TEnumSchemaItem<ImageFieldName::eType>::createWithSignatures(ImageFieldName_all_enum_values, ImageFieldName_element_signatures, TSchemaItemParameter<ImageFieldName::eType>());

  // Struct member imageTypeSupported.
  //
  // The image types that are supported in this field. See FileType.
  std::shared_ptr<ISchemaItem> imageTypeSupported_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<FileType::eType>::create(FileType_all_enum_values, TSchemaItemParameter<FileType::eType>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member imageResolution.
  //
  // The image resolution of this field.
  std::shared_ptr<ISchemaItem> imageResolution_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ImageResolution);CObjectSchemaItem::Members schema_members;

  schema_members["name"] = CObjectSchemaItem::SMember(name_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["imageTypeSupported"] = CObjectSchemaItem::SMember(imageTypeSupported_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["imageResolution"] = CObjectSchemaItem::SMember(imageResolution_SchemaItem, false, "3.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_TouchCoord(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member x.
  //
  // The x coordinate of the touch.
  std::shared_ptr<ISchemaItem> x_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(10000), TSchemaItemParameter<int32_t>());

  // Struct member y.
  //
  // The y coordinate of the touch.
  std::shared_ptr<ISchemaItem> y_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(10000), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["x"] = CObjectSchemaItem::SMember(x_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["y"] = CObjectSchemaItem::SMember(y_SchemaItem, true, "3.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_TouchEvent(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member id.
  //
  // 
  //                 A touch's unique identifier.  The application can track the current touch events by id.
  //                 If a touch event has type begin, the id should be added to the set of touches.
  //                 If a touch event has type end, the id should be removed from the set of touches.
  //             
  std::shared_ptr<ISchemaItem> id_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(9), TSchemaItemParameter<int32_t>());

  // Struct member ts.
  //
  // 
  //                 The time that the touch was recorded.  This number can the time since the beginning of the session or something else as long as the units are in milliseconds.
  //                 The timestamp is used to determined the rate of change of position of a touch.
  //                 The application also uses the time to verify whether two touches, with different ids, are part of a single action by the user.
  //                 If there is only a single timestamp in this array, it is the same for every coordinate in the coordinates array.
  //             
  std::shared_ptr<ISchemaItem> ts_SchemaItem = CArraySchemaItem::create(TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000));

  // Struct member c.
  std::shared_ptr<ISchemaItem> c_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TouchCoord), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000));CObjectSchemaItem::Members schema_members;

  schema_members["id"] = CObjectSchemaItem::SMember(id_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["ts"] = CObjectSchemaItem::SMember(ts_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["c"] = CObjectSchemaItem::SMember(c_SchemaItem, true, "3.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_TouchEventCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member pressAvailable.
  std::shared_ptr<ISchemaItem> pressAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member multiTouchAvailable.
  std::shared_ptr<ISchemaItem> multiTouchAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member doublePressAvailable.
  std::shared_ptr<ISchemaItem> doublePressAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["pressAvailable"] = CObjectSchemaItem::SMember(pressAvailable_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["multiTouchAvailable"] = CObjectSchemaItem::SMember(multiTouchAvailable_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["doublePressAvailable"] = CObjectSchemaItem::SMember(doublePressAvailable_SchemaItem, true, "3.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_ScreenParams(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member resolution.
  //
  // The resolution of the prescribed screen area.
  std::shared_ptr<ISchemaItem> resolution_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ImageResolution);

  // Struct member touchEventAvailable.
  //
  // Types of screen touch events available in screen area.
  std::shared_ptr<ISchemaItem> touchEventAvailable_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TouchEventCapabilities);CObjectSchemaItem::Members schema_members;

  schema_members["resolution"] = CObjectSchemaItem::SMember(resolution_SchemaItem, true, "3.0.0", "", false, false);
  schema_members["touchEventAvailable"] = CObjectSchemaItem::SMember(touchEventAvailable_SchemaItem, false, "3.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_HMIPermissions(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<HMILevel::eType> HMILevel_all_enum_values;
  HMILevel_all_enum_values.insert(HMILevel::HMI_FULL);
  HMILevel_all_enum_values.insert(HMILevel::HMI_LIMITED);
  HMILevel_all_enum_values.insert(HMILevel::HMI_BACKGROUND);
  HMILevel_all_enum_values.insert(HMILevel::HMI_NONE);

  // Struct member allowed.
  //
  // A set of all HMI levels that are permitted for this given RPC.
  std::shared_ptr<ISchemaItem> allowed_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<HMILevel::eType>::create(HMILevel_all_enum_values, TSchemaItemParameter<HMILevel::eType>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));

  // Struct member userDisallowed.
  //
  // A set of all HMI levels that are prohibited for this given RPC.
  std::shared_ptr<ISchemaItem> userDisallowed_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<HMILevel::eType>::create(HMILevel_all_enum_values, TSchemaItemParameter<HMILevel::eType>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["allowed"] = CObjectSchemaItem::SMember(allowed_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["userDisallowed"] = CObjectSchemaItem::SMember(userDisallowed_SchemaItem, true, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_ParameterPermissions(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member allowed.
  //
  // A set of all parameters that are permitted for this given RPC.
  std::shared_ptr<ISchemaItem> allowed_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));

  // Struct member userDisallowed.
  //
  // A set of all parameters that are prohibited for this given RPC.
  std::shared_ptr<ISchemaItem> userDisallowed_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["allowed"] = CObjectSchemaItem::SMember(allowed_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["userDisallowed"] = CObjectSchemaItem::SMember(userDisallowed_SchemaItem, true, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_PermissionItem(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member rpcName.
  //
  // Name of the individual RPC in the policy table.
  std::shared_ptr<ISchemaItem> rpcName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Struct member hmiPermissions.
  std::shared_ptr<ISchemaItem> hmiPermissions_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::HMIPermissions);

  // Struct member parameterPermissions.
  std::shared_ptr<ISchemaItem> parameterPermissions_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ParameterPermissions);CObjectSchemaItem::Members schema_members;

  schema_members["rpcName"] = CObjectSchemaItem::SMember(rpcName_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["hmiPermissions"] = CObjectSchemaItem::SMember(hmiPermissions_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["parameterPermissions"] = CObjectSchemaItem::SMember(parameterPermissions_SchemaItem, true, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_DisplayCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<DisplayType::eType> DisplayType_all_enum_values;
  DisplayType_all_enum_values.insert(DisplayType::CID);
  DisplayType_all_enum_values.insert(DisplayType::TYPE2);
  DisplayType_all_enum_values.insert(DisplayType::TYPE5);
  DisplayType_all_enum_values.insert(DisplayType::NGN);
  DisplayType_all_enum_values.insert(DisplayType::GEN2_8_DMA);
  DisplayType_all_enum_values.insert(DisplayType::GEN2_6_DMA);
  DisplayType_all_enum_values.insert(DisplayType::MFD3);
  DisplayType_all_enum_values.insert(DisplayType::MFD4);
  DisplayType_all_enum_values.insert(DisplayType::MFD5);
  DisplayType_all_enum_values.insert(DisplayType::GEN3_8_INCH);
  DisplayType_all_enum_values.insert(DisplayType::SDL_GENERIC);

  std::map<DisplayType::eType, std::vector<ElementSignature>> DisplayType_element_signatures;
  DisplayType_element_signatures[DisplayType::GEN2_8_DMA] = std::vector<ElementSignature>();
  DisplayType_element_signatures[DisplayType::GEN2_6_DMA] = std::vector<ElementSignature>();
  DisplayType_element_signatures[DisplayType::MFD3] = std::vector<ElementSignature>();
  DisplayType_element_signatures[DisplayType::MFD4] = std::vector<ElementSignature>();
  DisplayType_element_signatures[DisplayType::MFD5] = std::vector<ElementSignature>();
  DisplayType_element_signatures[DisplayType::GEN3_8_INCH] = std::vector<ElementSignature>();
  DisplayType_element_signatures[DisplayType::SDL_GENERIC] = std::vector<ElementSignature>();
  DisplayType_element_signatures[DisplayType::GEN2_8_DMA].push_back(ElementSignature("3.0.0", "", false));
  DisplayType_element_signatures[DisplayType::GEN2_6_DMA].push_back(ElementSignature("3.0.0", "", false));
  DisplayType_element_signatures[DisplayType::MFD3].push_back(ElementSignature("2.0.0", "", false));
  DisplayType_element_signatures[DisplayType::MFD4].push_back(ElementSignature("2.0.0", "", false));
  DisplayType_element_signatures[DisplayType::MFD5].push_back(ElementSignature("2.0.0", "", false));
  DisplayType_element_signatures[DisplayType::GEN3_8_INCH].push_back(ElementSignature("3.0.0", "", false));
  DisplayType_element_signatures[DisplayType::SDL_GENERIC].push_back(ElementSignature("4.0.0", "", false));

  std::set<MediaClockFormat::eType> MediaClockFormat_all_enum_values;
  MediaClockFormat_all_enum_values.insert(MediaClockFormat::CLOCK1);
  MediaClockFormat_all_enum_values.insert(MediaClockFormat::CLOCK2);
  MediaClockFormat_all_enum_values.insert(MediaClockFormat::CLOCK3);
  MediaClockFormat_all_enum_values.insert(MediaClockFormat::CLOCKTEXT1);
  MediaClockFormat_all_enum_values.insert(MediaClockFormat::CLOCKTEXT2);
  MediaClockFormat_all_enum_values.insert(MediaClockFormat::CLOCKTEXT3);
  MediaClockFormat_all_enum_values.insert(MediaClockFormat::CLOCKTEXT4);

  std::map<MediaClockFormat::eType, std::vector<ElementSignature>> MediaClockFormat_element_signatures;
  MediaClockFormat_element_signatures[MediaClockFormat::CLOCK3] = std::vector<ElementSignature>();
  MediaClockFormat_element_signatures[MediaClockFormat::CLOCKTEXT4] = std::vector<ElementSignature>();
  MediaClockFormat_element_signatures[MediaClockFormat::CLOCK3].push_back(ElementSignature("2.0.0", "", false));
  MediaClockFormat_element_signatures[MediaClockFormat::CLOCKTEXT4].push_back(ElementSignature("2.0.0", "", false));

  // Struct member displayType.
  //
  // The type of the display. See DisplayType
  std::shared_ptr<ISchemaItem> displayType_SchemaItem = TEnumSchemaItem<DisplayType::eType>::createWithSignatures(DisplayType_all_enum_values, DisplayType_element_signatures, TSchemaItemParameter<DisplayType::eType>());

  // Function parameter displayType_history_v1.
  std::shared_ptr<ISchemaItem> displayType_history_v1_SchemaItem = TEnumSchemaItem<DisplayType::eType>::createWithSignatures(DisplayType_all_enum_values, DisplayType_element_signatures, TSchemaItemParameter<DisplayType::eType>());

  std::vector<CObjectSchemaItem::SMember> displayType_history_vector;

  // Struct member displayName.
  //
  // The name of the display the app is connected to.
  std::shared_ptr<ISchemaItem> displayName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member textFields.
  //
  // A set of all fields that support text data. See TextField
  std::shared_ptr<ISchemaItem> textFields_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::TextField), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member imageFields.
  //
  // A set of all fields that support images. See ImageField
  std::shared_ptr<ISchemaItem> imageFields_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ImageField), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member mediaClockFormats.
  //
  // A set of all supported formats of the media clock. See MediaClockFormat
  std::shared_ptr<ISchemaItem> mediaClockFormats_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<MediaClockFormat::eType>::createWithSignatures(MediaClockFormat_all_enum_values, MediaClockFormat_element_signatures, TSchemaItemParameter<MediaClockFormat::eType>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));

  // Struct member graphicSupported.
  //
  // The display's persistent screen supports referencing a static or dynamic image.
  std::shared_ptr<ISchemaItem> graphicSupported_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member templatesAvailable.
  //
  // A set of all predefined persistent display templates available on headunit.  To be referenced in SetDisplayLayout.
  std::shared_ptr<ISchemaItem> templatesAvailable_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(100));

  // Struct member screenParams.
  //
  // A set of all parameters related to a prescribed screen area (e.g. for video / touch input).
  std::shared_ptr<ISchemaItem> screenParams_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ScreenParams);

  // Struct member numCustomPresetsAvailable.
  //
  // The number of on-screen custom presets available (if any); otherwise omitted.
  std::shared_ptr<ISchemaItem> numCustomPresetsAvailable_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  displayType_history_vector.push_back(CObjectSchemaItem::SMember(displayType_history_v1_SchemaItem, true, "1.0.0", "5.0.0", false, false));
  schema_members["displayType"] = CObjectSchemaItem::SMember(displayType_SchemaItem, true, "5.0.0", "", true, false, displayType_history_vector);
  schema_members["displayName"] = CObjectSchemaItem::SMember(displayName_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["textFields"] = CObjectSchemaItem::SMember(textFields_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["imageFields"] = CObjectSchemaItem::SMember(imageFields_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["mediaClockFormats"] = CObjectSchemaItem::SMember(mediaClockFormats_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["graphicSupported"] = CObjectSchemaItem::SMember(graphicSupported_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["templatesAvailable"] = CObjectSchemaItem::SMember(templatesAvailable_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["screenParams"] = CObjectSchemaItem::SMember(screenParams_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["numCustomPresetsAvailable"] = CObjectSchemaItem::SMember(numCustomPresetsAvailable_SchemaItem, false, "3.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_ButtonCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<ButtonName::eType> ButtonName_all_enum_values;
  ButtonName_all_enum_values.insert(ButtonName::OK);
  ButtonName_all_enum_values.insert(ButtonName::PLAY_PAUSE);
  ButtonName_all_enum_values.insert(ButtonName::SEEKLEFT);
  ButtonName_all_enum_values.insert(ButtonName::SEEKRIGHT);
  ButtonName_all_enum_values.insert(ButtonName::TUNEUP);
  ButtonName_all_enum_values.insert(ButtonName::TUNEDOWN);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_0);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_1);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_2);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_3);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_4);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_5);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_6);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_7);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_8);
  ButtonName_all_enum_values.insert(ButtonName::PRESET_9);
  ButtonName_all_enum_values.insert(ButtonName::CUSTOM_BUTTON);
  ButtonName_all_enum_values.insert(ButtonName::SEARCH);
  ButtonName_all_enum_values.insert(ButtonName::AC_MAX);
  ButtonName_all_enum_values.insert(ButtonName::AC);
  ButtonName_all_enum_values.insert(ButtonName::RECIRCULATE);
  ButtonName_all_enum_values.insert(ButtonName::FAN_UP);
  ButtonName_all_enum_values.insert(ButtonName::FAN_DOWN);
  ButtonName_all_enum_values.insert(ButtonName::TEMP_UP);
  ButtonName_all_enum_values.insert(ButtonName::TEMP_DOWN);
  ButtonName_all_enum_values.insert(ButtonName::DEFROST_MAX);
  ButtonName_all_enum_values.insert(ButtonName::DEFROST);
  ButtonName_all_enum_values.insert(ButtonName::DEFROST_REAR);
  ButtonName_all_enum_values.insert(ButtonName::UPPER_VENT);
  ButtonName_all_enum_values.insert(ButtonName::LOWER_VENT);
  ButtonName_all_enum_values.insert(ButtonName::VOLUME_UP);
  ButtonName_all_enum_values.insert(ButtonName::VOLUME_DOWN);
  ButtonName_all_enum_values.insert(ButtonName::EJECT);
  ButtonName_all_enum_values.insert(ButtonName::SOURCE);
  ButtonName_all_enum_values.insert(ButtonName::SHUFFLE);
  ButtonName_all_enum_values.insert(ButtonName::REPEAT);

  std::map<ButtonName::eType, std::vector<ElementSignature>> ButtonName_element_signatures;
  ButtonName_element_signatures[ButtonName::PLAY_PAUSE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::AC_MAX] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::AC] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::RECIRCULATE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::FAN_UP] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::FAN_DOWN] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::TEMP_UP] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::TEMP_DOWN] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::DEFROST_MAX] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::DEFROST] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::DEFROST_REAR] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::UPPER_VENT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::LOWER_VENT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::VOLUME_UP] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::VOLUME_DOWN] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::EJECT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::SOURCE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::SHUFFLE] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::REPEAT] = std::vector<ElementSignature>();
  ButtonName_element_signatures[ButtonName::PLAY_PAUSE].push_back(ElementSignature("5.0.0", "", false));
  ButtonName_element_signatures[ButtonName::AC_MAX].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::AC].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::RECIRCULATE].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::FAN_UP].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::FAN_DOWN].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::TEMP_UP].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::TEMP_DOWN].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::DEFROST_MAX].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::DEFROST].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::DEFROST_REAR].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::UPPER_VENT].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::LOWER_VENT].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::VOLUME_UP].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::VOLUME_DOWN].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::EJECT].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::SOURCE].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::SHUFFLE].push_back(ElementSignature("4.5.0", "", false));
  ButtonName_element_signatures[ButtonName::REPEAT].push_back(ElementSignature("4.5.0", "", false));

  // Struct member name.
  //
  // The name of the button. See ButtonName.
  std::shared_ptr<ISchemaItem> name_SchemaItem = TEnumSchemaItem<ButtonName::eType>::createWithSignatures(ButtonName_all_enum_values, ButtonName_element_signatures, TSchemaItemParameter<ButtonName::eType>());

  // Struct member shortPressAvailable.
  //
  // 
  //                 The button supports a short press.
  //                 Whenever the button is pressed short, onButtonPressed( SHORT) will be invoked.
  //             
  std::shared_ptr<ISchemaItem> shortPressAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member longPressAvailable.
  //
  // 
  //                 The button supports a LONG press.
  //                 Whenever the button is pressed long, onButtonPressed( LONG) will be invoked.
  //             
  std::shared_ptr<ISchemaItem> longPressAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member upDownAvailable.
  //
  // 
  //                 The button supports "button down" and "button up".
  //                 Whenever the button is pressed, onButtonEvent( DOWN) will be invoked.
  //                 Whenever the button is released, onButtonEvent( UP) will be invoked.
  //             
  std::shared_ptr<ISchemaItem> upDownAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["name"] = CObjectSchemaItem::SMember(name_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["shortPressAvailable"] = CObjectSchemaItem::SMember(shortPressAvailable_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["longPressAvailable"] = CObjectSchemaItem::SMember(longPressAvailable_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["upDownAvailable"] = CObjectSchemaItem::SMember(upDownAvailable_SchemaItem, true, "1.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_SoftButtonCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member shortPressAvailable.
  //
  // 
  //                 The button supports a short press.
  //                 Whenever the button is pressed short, onButtonPressed( SHORT) will be invoked.
  //             
  std::shared_ptr<ISchemaItem> shortPressAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member longPressAvailable.
  //
  // 
  //                 The button supports a LONG press.
  //                 Whenever the button is pressed long, onButtonPressed( LONG) will be invoked.
  //             
  std::shared_ptr<ISchemaItem> longPressAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member upDownAvailable.
  //
  // 
  //                 The button supports "button down" and "button up".
  //                 Whenever the button is pressed, onButtonEvent( DOWN) will be invoked.
  //                 Whenever the button is released, onButtonEvent( UP) will be invoked.
  //             
  std::shared_ptr<ISchemaItem> upDownAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member imageSupported.
  //
  // The button supports referencing a static or dynamic image.
  std::shared_ptr<ISchemaItem> imageSupported_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["shortPressAvailable"] = CObjectSchemaItem::SMember(shortPressAvailable_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["longPressAvailable"] = CObjectSchemaItem::SMember(longPressAvailable_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["upDownAvailable"] = CObjectSchemaItem::SMember(upDownAvailable_SchemaItem, true, "2.0.0", "", false, false);
  schema_members["imageSupported"] = CObjectSchemaItem::SMember(imageSupported_SchemaItem, true, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_PresetBankCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member onScreenPresetsAvailable.
  //
  // Onscreen custom presets are available.
  std::shared_ptr<ISchemaItem> onScreenPresetsAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["onScreenPresetsAvailable"] = CObjectSchemaItem::SMember(onScreenPresetsAvailable_SchemaItem, true, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_HMICapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member navigation.
  //
  // Availability of build in Nav. True: Available, False: Not Available
  std::shared_ptr<ISchemaItem> navigation_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member phoneCall.
  //
  // Availability of build in phone. True: Available, False: Not Available 
  std::shared_ptr<ISchemaItem> phoneCall_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member videoStreaming.
  //
  // Availability of video streaming. 
  std::shared_ptr<ISchemaItem> videoStreaming_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member remoteControl.
  //
  // Availability of remote control feature. True: Available, False: Not Available
  std::shared_ptr<ISchemaItem> remoteControl_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["navigation"] = CObjectSchemaItem::SMember(navigation_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["phoneCall"] = CObjectSchemaItem::SMember(phoneCall_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["videoStreaming"] = CObjectSchemaItem::SMember(videoStreaming_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["remoteControl"] = CObjectSchemaItem::SMember(remoteControl_SchemaItem, false, "4.5.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_MenuParams(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member parentID.
  //
  // 
  //                 unique ID of the sub menu, the command will be added to.
  //                 If not provided, it will be provided to the top level of the in application menu.
  //             
  std::shared_ptr<ISchemaItem> parentID_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>(0));

  // Struct member position.
  //
  // 
  //                 Position within the items that are are at top level of the in application menu.
  //                 0 will insert at the front.
  //                 1 will insert at the second position.
  //                 if position is greater or equal than the number of items on top level, the sub menu will be appended to the end.
  //                 If this param was omitted the entry will be added at the end.
  //             
  std::shared_ptr<ISchemaItem> position_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(1000), TSchemaItemParameter<int32_t>());

  // Struct member menuName.
  //
  // Text to show in the menu for this sub menu.
  std::shared_ptr<ISchemaItem> menuName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["parentID"] = CObjectSchemaItem::SMember(parentID_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["position"] = CObjectSchemaItem::SMember(position_SchemaItem, false, "1.0.0", "", false, false);
  schema_members["menuName"] = CObjectSchemaItem::SMember(menuName_SchemaItem, true, "1.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_TTSChunk(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<SpeechCapabilities::eType> SpeechCapabilities_all_enum_values;
  SpeechCapabilities_all_enum_values.insert(SpeechCapabilities::SC_TEXT);
  SpeechCapabilities_all_enum_values.insert(SpeechCapabilities::SAPI_PHONEMES);
  SpeechCapabilities_all_enum_values.insert(SpeechCapabilities::LHPLUS_PHONEMES);
  SpeechCapabilities_all_enum_values.insert(SpeechCapabilities::PRE_RECORDED);
  SpeechCapabilities_all_enum_values.insert(SpeechCapabilities::SILENCE);
  SpeechCapabilities_all_enum_values.insert(SpeechCapabilities::FILE);

  std::map<SpeechCapabilities::eType, std::vector<ElementSignature>> SpeechCapabilities_element_signatures;
  SpeechCapabilities_element_signatures[SpeechCapabilities::FILE] = std::vector<ElementSignature>();
  SpeechCapabilities_element_signatures[SpeechCapabilities::FILE].push_back(ElementSignature("5.0.0", "", false));

  // Struct member text.
  //
  // 
  //                 The text or phonemes to speak, or the name of the audio file to play.
  //                 May not be empty.
  //             
  std::shared_ptr<ISchemaItem> text_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member type.
  //
  // Describes whether the TTS chunk is plain text, a specific phoneme set, or an audio file. See SpeechCapabilities
  std::shared_ptr<ISchemaItem> type_SchemaItem = TEnumSchemaItem<SpeechCapabilities::eType>::createWithSignatures(SpeechCapabilities_all_enum_values, SpeechCapabilities_element_signatures, TSchemaItemParameter<SpeechCapabilities::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["text"] = CObjectSchemaItem::SMember(text_SchemaItem, true, "1.0.0", "", false, false);
  schema_members["type"] = CObjectSchemaItem::SMember(type_SchemaItem, true, "1.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_Turn(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member navigationText.
  //
  // Individual turn text.  Must provide at least text or icon for a given turn.
  std::shared_ptr<ISchemaItem> navigationText_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member turnIcon.
  //
  // Individual turn icon.  Must provide at least text or icon for a given turn.
  std::shared_ptr<ISchemaItem> turnIcon_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Image);CObjectSchemaItem::Members schema_members;

  schema_members["navigationText"] = CObjectSchemaItem::SMember(navigationText_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["turnIcon"] = CObjectSchemaItem::SMember(turnIcon_SchemaItem, false, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_VehicleType(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member make.
  //
  // Make of the vehicle, e.g. Ford
  std::shared_ptr<ISchemaItem> make_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member model.
  //
  // Model of the vehicle, e.g. Fiesta
  std::shared_ptr<ISchemaItem> model_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member modelYear.
  //
  // Model Year of the vehicle, e.g. 2013
  std::shared_ptr<ISchemaItem> modelYear_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member trim.
  //
  // Trim of the vehicle, e.g. SE
  std::shared_ptr<ISchemaItem> trim_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["make"] = CObjectSchemaItem::SMember(make_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["model"] = CObjectSchemaItem::SMember(model_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["modelYear"] = CObjectSchemaItem::SMember(modelYear_SchemaItem, false, "2.0.0", "", false, false);
  schema_members["trim"] = CObjectSchemaItem::SMember(trim_SchemaItem, false, "2.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_KeyboardProperties(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<Language::eType> Language_all_enum_values;
  Language_all_enum_values.insert(Language::EN_US);
  Language_all_enum_values.insert(Language::ES_MX);
  Language_all_enum_values.insert(Language::FR_CA);
  Language_all_enum_values.insert(Language::DE_DE);
  Language_all_enum_values.insert(Language::ES_ES);
  Language_all_enum_values.insert(Language::EN_GB);
  Language_all_enum_values.insert(Language::RU_RU);
  Language_all_enum_values.insert(Language::TR_TR);
  Language_all_enum_values.insert(Language::PL_PL);
  Language_all_enum_values.insert(Language::FR_FR);
  Language_all_enum_values.insert(Language::IT_IT);
  Language_all_enum_values.insert(Language::SV_SE);
  Language_all_enum_values.insert(Language::PT_PT);
  Language_all_enum_values.insert(Language::NL_NL);
  Language_all_enum_values.insert(Language::EN_AU);
  Language_all_enum_values.insert(Language::ZH_CN);
  Language_all_enum_values.insert(Language::ZH_TW);
  Language_all_enum_values.insert(Language::JA_JP);
  Language_all_enum_values.insert(Language::AR_SA);
  Language_all_enum_values.insert(Language::KO_KR);
  Language_all_enum_values.insert(Language::PT_BR);
  Language_all_enum_values.insert(Language::CS_CZ);
  Language_all_enum_values.insert(Language::DA_DK);
  Language_all_enum_values.insert(Language::NO_NO);
  Language_all_enum_values.insert(Language::NL_BE);
  Language_all_enum_values.insert(Language::EL_GR);
  Language_all_enum_values.insert(Language::HU_HU);
  Language_all_enum_values.insert(Language::FI_FI);
  Language_all_enum_values.insert(Language::SK_SK);
  Language_all_enum_values.insert(Language::EN_IN);
  Language_all_enum_values.insert(Language::TH_TH);
  Language_all_enum_values.insert(Language::EN_SA);
  Language_all_enum_values.insert(Language::HE_IL);
  Language_all_enum_values.insert(Language::RO_RO);
  Language_all_enum_values.insert(Language::UK_UA);
  Language_all_enum_values.insert(Language::ID_ID);
  Language_all_enum_values.insert(Language::VI_VN);
  Language_all_enum_values.insert(Language::MS_MY);
  Language_all_enum_values.insert(Language::HI_IN);

  std::map<Language::eType, std::vector<ElementSignature>> Language_element_signatures;
  Language_element_signatures[Language::DE_DE] = std::vector<ElementSignature>();
  Language_element_signatures[Language::ES_ES] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EN_GB] = std::vector<ElementSignature>();
  Language_element_signatures[Language::RU_RU] = std::vector<ElementSignature>();
  Language_element_signatures[Language::TR_TR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::PL_PL] = std::vector<ElementSignature>();
  Language_element_signatures[Language::FR_FR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::IT_IT] = std::vector<ElementSignature>();
  Language_element_signatures[Language::SV_SE] = std::vector<ElementSignature>();
  Language_element_signatures[Language::PT_PT] = std::vector<ElementSignature>();
  Language_element_signatures[Language::NL_NL] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EN_AU] = std::vector<ElementSignature>();
  Language_element_signatures[Language::ZH_CN] = std::vector<ElementSignature>();
  Language_element_signatures[Language::ZH_TW] = std::vector<ElementSignature>();
  Language_element_signatures[Language::JA_JP] = std::vector<ElementSignature>();
  Language_element_signatures[Language::AR_SA] = std::vector<ElementSignature>();
  Language_element_signatures[Language::KO_KR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::PT_BR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::CS_CZ] = std::vector<ElementSignature>();
  Language_element_signatures[Language::DA_DK] = std::vector<ElementSignature>();
  Language_element_signatures[Language::NO_NO] = std::vector<ElementSignature>();
  Language_element_signatures[Language::NL_BE] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EL_GR] = std::vector<ElementSignature>();
  Language_element_signatures[Language::HU_HU] = std::vector<ElementSignature>();
  Language_element_signatures[Language::FI_FI] = std::vector<ElementSignature>();
  Language_element_signatures[Language::SK_SK] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EN_IN] = std::vector<ElementSignature>();
  Language_element_signatures[Language::TH_TH] = std::vector<ElementSignature>();
  Language_element_signatures[Language::EN_SA] = std::vector<ElementSignature>();
  Language_element_signatures[Language::HE_IL] = std::vector<ElementSignature>();
  Language_element_signatures[Language::RO_RO] = std::vector<ElementSignature>();
  Language_element_signatures[Language::UK_UA] = std::vector<ElementSignature>();
  Language_element_signatures[Language::ID_ID] = std::vector<ElementSignature>();
  Language_element_signatures[Language::VI_VN] = std::vector<ElementSignature>();
  Language_element_signatures[Language::MS_MY] = std::vector<ElementSignature>();
  Language_element_signatures[Language::HI_IN] = std::vector<ElementSignature>();
  Language_element_signatures[Language::DE_DE].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::ES_ES].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::EN_GB].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::RU_RU].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::TR_TR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::PL_PL].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::FR_FR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::IT_IT].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::SV_SE].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::PT_PT].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::NL_NL].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::EN_AU].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::ZH_CN].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::ZH_TW].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::JA_JP].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::AR_SA].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::KO_KR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::PT_BR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::CS_CZ].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::DA_DK].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::NO_NO].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::NL_BE].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::EL_GR].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::HU_HU].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::FI_FI].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::SK_SK].push_back(ElementSignature("2.0.0", "", false));
  Language_element_signatures[Language::EN_IN].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::TH_TH].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::EN_SA].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::HE_IL].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::RO_RO].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::UK_UA].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::ID_ID].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::VI_VN].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::MS_MY].push_back(ElementSignature("4.5.0", "", false));
  Language_element_signatures[Language::HI_IN].push_back(ElementSignature("4.5.0", "", false));

  std::set<KeyboardLayout::eType> KeyboardLayout_all_enum_values;
  KeyboardLayout_all_enum_values.insert(KeyboardLayout::QWERTY);
  KeyboardLayout_all_enum_values.insert(KeyboardLayout::QWERTZ);
  KeyboardLayout_all_enum_values.insert(KeyboardLayout::AZERTY);

  std::set<KeypressMode::eType> KeypressMode_all_enum_values;
  KeypressMode_all_enum_values.insert(KeypressMode::SINGLE_KEYPRESS);
  KeypressMode_all_enum_values.insert(KeypressMode::QUEUE_KEYPRESSES);
  KeypressMode_all_enum_values.insert(KeypressMode::RESEND_CURRENT_ENTRY);

  // Struct member language.
  //
  // The keyboard language.
  std::shared_ptr<ISchemaItem> language_SchemaItem = TEnumSchemaItem<Language::eType>::createWithSignatures(Language_all_enum_values, Language_element_signatures, TSchemaItemParameter<Language::eType>());

  // Struct member keyboardLayout.
  //
  // Desired keyboard layout.
  std::shared_ptr<ISchemaItem> keyboardLayout_SchemaItem = TEnumSchemaItem<KeyboardLayout::eType>::create(KeyboardLayout_all_enum_values, TSchemaItemParameter<KeyboardLayout::eType>());

  // Struct member keypressMode.
  //
  // 
  //                 Desired keypress mode.
  //                 If omitted, this value will be set to RESEND_CURRENT_ENTRY.
  //             
  std::shared_ptr<ISchemaItem> keypressMode_SchemaItem = TEnumSchemaItem<KeypressMode::eType>::create(KeypressMode_all_enum_values, TSchemaItemParameter<KeypressMode::eType>());

  // Struct member limitedCharacterList.
  //
  // Array of keyboard characters to enable.
  // All omitted characters will be greyed out (disabled) on the keyboard.
  // If omitted, the entire keyboard will be enabled.
  std::shared_ptr<ISchemaItem> limitedCharacterList_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member autoCompleteText.
  //
  // Allows an app to prepopulate the text field with a suggested or completed entry as the user types
  std::shared_ptr<ISchemaItem> autoCompleteText_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(1000), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["language"] = CObjectSchemaItem::SMember(language_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["keyboardLayout"] = CObjectSchemaItem::SMember(keyboardLayout_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["keypressMode"] = CObjectSchemaItem::SMember(keypressMode_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["limitedCharacterList"] = CObjectSchemaItem::SMember(limitedCharacterList_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["autoCompleteText"] = CObjectSchemaItem::SMember(autoCompleteText_SchemaItem, false, "3.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_DeviceInfo(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member hardware.
  //
  // Device model
  std::shared_ptr<ISchemaItem> hardware_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member firmwareRev.
  //
  // Device firmware revision
  std::shared_ptr<ISchemaItem> firmwareRev_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member os.
  //
  // Device OS
  std::shared_ptr<ISchemaItem> os_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member osVersion.
  //
  // Device OS version
  std::shared_ptr<ISchemaItem> osVersion_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member carrier.
  //
  // Device mobile carrier (if applicable)
  std::shared_ptr<ISchemaItem> carrier_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member maxNumberRFCOMMPorts.
  //
  // Omitted if connected not via BT.
  std::shared_ptr<ISchemaItem> maxNumberRFCOMMPorts_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["hardware"] = CObjectSchemaItem::SMember(hardware_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["firmwareRev"] = CObjectSchemaItem::SMember(firmwareRev_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["os"] = CObjectSchemaItem::SMember(os_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["osVersion"] = CObjectSchemaItem::SMember(osVersion_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["carrier"] = CObjectSchemaItem::SMember(carrier_SchemaItem, false, "3.0.0", "", false, false);
  schema_members["maxNumberRFCOMMPorts"] = CObjectSchemaItem::SMember(maxNumberRFCOMMPorts_SchemaItem, false, "3.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_DateTime(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member millisecond.
  //
  // Milliseconds 
  std::shared_ptr<ISchemaItem> millisecond_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(999), TSchemaItemParameter<int32_t>());

  // Struct member second.
  //
  // Seconds part of time
  std::shared_ptr<ISchemaItem> second_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(60), TSchemaItemParameter<int32_t>());

  // Function parameter second_history_v1.
  std::shared_ptr<ISchemaItem> second_history_v1_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(60), TSchemaItemParameter<int32_t>());

  std::vector<CObjectSchemaItem::SMember> second_history_vector;

  // Struct member minute.
  //
  // Minutes part of time
  std::shared_ptr<ISchemaItem> minute_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(59), TSchemaItemParameter<int32_t>());

  // Function parameter minute_history_v1.
  std::shared_ptr<ISchemaItem> minute_history_v1_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(59), TSchemaItemParameter<int32_t>());

  std::vector<CObjectSchemaItem::SMember> minute_history_vector;

  // Struct member hour.
  //
  // Hours part of time. Note that this structure accepts time only in 24 Hr format
  std::shared_ptr<ISchemaItem> hour_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(23), TSchemaItemParameter<int32_t>());

  // Function parameter hour_history_v1.
  std::shared_ptr<ISchemaItem> hour_history_v1_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(23), TSchemaItemParameter<int32_t>());

  std::vector<CObjectSchemaItem::SMember> hour_history_vector;

  // Struct member day.
  //
  // Day of the month
  std::shared_ptr<ISchemaItem> day_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(31), TSchemaItemParameter<int32_t>());

  // Function parameter day_history_v1.
  std::shared_ptr<ISchemaItem> day_history_v1_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(31), TSchemaItemParameter<int32_t>());

  std::vector<CObjectSchemaItem::SMember> day_history_vector;

  // Struct member month.
  //
  // Month of the year
  std::shared_ptr<ISchemaItem> month_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(12), TSchemaItemParameter<int32_t>());

  // Function parameter month_history_v1.
  std::shared_ptr<ISchemaItem> month_history_v1_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(12), TSchemaItemParameter<int32_t>());

  std::vector<CObjectSchemaItem::SMember> month_history_vector;

  // Struct member year.
  //
  // The year in YYYY format
  std::shared_ptr<ISchemaItem> year_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(4095), TSchemaItemParameter<int32_t>());

  // Function parameter year_history_v1.
  std::shared_ptr<ISchemaItem> year_history_v1_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(4095), TSchemaItemParameter<int32_t>());

  std::vector<CObjectSchemaItem::SMember> year_history_vector;

  // Struct member tz_hour.
  //
  // Time zone offset in Hours wrt UTC.
  std::shared_ptr<ISchemaItem> tz_hour_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(-12), TSchemaItemParameter<int32_t>(14), TSchemaItemParameter<int32_t>(0));

  // Function parameter tz_hour_history_v1.
  std::shared_ptr<ISchemaItem> tz_hour_history_v1_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(-12), TSchemaItemParameter<int32_t>(14), TSchemaItemParameter<int32_t>(0));

  std::vector<CObjectSchemaItem::SMember> tz_hour_history_vector;

  // Struct member tz_minute.
  //
  // Time zone offset in Min wrt UTC.
  std::shared_ptr<ISchemaItem> tz_minute_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(59), TSchemaItemParameter<int32_t>(0));

  // Function parameter tz_minute_history_v1.
  std::shared_ptr<ISchemaItem> tz_minute_history_v1_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(59), TSchemaItemParameter<int32_t>(0));

  std::vector<CObjectSchemaItem::SMember> tz_minute_history_vector;CObjectSchemaItem::Members schema_members;

  schema_members["millisecond"] = CObjectSchemaItem::SMember(millisecond_SchemaItem, false, "4.2.2", "", false, false);
  second_history_vector.push_back(CObjectSchemaItem::SMember(second_history_v1_SchemaItem, true, "4.1.0", "4.2.1", false, false));
  schema_members["second"] = CObjectSchemaItem::SMember(second_SchemaItem, false, "4.2.2", "", false, false, second_history_vector);
  minute_history_vector.push_back(CObjectSchemaItem::SMember(minute_history_v1_SchemaItem, true, "4.1.0", "4.2.1", false, false));
  schema_members["minute"] = CObjectSchemaItem::SMember(minute_SchemaItem, false, "4.2.2", "", false, false, minute_history_vector);
  hour_history_vector.push_back(CObjectSchemaItem::SMember(hour_history_v1_SchemaItem, true, "4.1.0", "4.2.1", false, false));
  schema_members["hour"] = CObjectSchemaItem::SMember(hour_SchemaItem, false, "4.2.2", "", false, false, hour_history_vector);
  day_history_vector.push_back(CObjectSchemaItem::SMember(day_history_v1_SchemaItem, true, "4.1.0", "4.2.1", false, false));
  schema_members["day"] = CObjectSchemaItem::SMember(day_SchemaItem, false, "4.2.2", "", false, false, day_history_vector);
  month_history_vector.push_back(CObjectSchemaItem::SMember(month_history_v1_SchemaItem, true, "4.1.0", "4.2.1", false, false));
  schema_members["month"] = CObjectSchemaItem::SMember(month_SchemaItem, false, "4.2.2", "", false, false, month_history_vector);
  year_history_vector.push_back(CObjectSchemaItem::SMember(year_history_v1_SchemaItem, true, "4.1.0", "4.2.1", false, false));
  schema_members["year"] = CObjectSchemaItem::SMember(year_SchemaItem, false, "4.2.2", "", false, false, year_history_vector);
  tz_hour_history_vector.push_back(CObjectSchemaItem::SMember(tz_hour_history_v1_SchemaItem, true, "4.1.0", "4.2.1", false, false));
  schema_members["tz_hour"] = CObjectSchemaItem::SMember(tz_hour_SchemaItem, false, "4.2.2", "", false, false, tz_hour_history_vector);
  tz_minute_history_vector.push_back(CObjectSchemaItem::SMember(tz_minute_history_v1_SchemaItem, true, "4.1.0", "4.2.1", false, false));
  schema_members["tz_minute"] = CObjectSchemaItem::SMember(tz_minute_SchemaItem, false, "4.2.2", "", false, false, tz_minute_history_vector);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_Coordinate(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member latitudeDegrees.
  //
  // Latitude of the location.
  std::shared_ptr<ISchemaItem> latitudeDegrees_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-90.0), TSchemaItemParameter<double>(90.0), TSchemaItemParameter<double>());

  // Struct member longitudeDegrees.
  //
  // Longitude of the location.
  std::shared_ptr<ISchemaItem> longitudeDegrees_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(-180.0), TSchemaItemParameter<double>(180.0), TSchemaItemParameter<double>());CObjectSchemaItem::Members schema_members;

  schema_members["latitudeDegrees"] = CObjectSchemaItem::SMember(latitudeDegrees_SchemaItem, true, "4.1.0", "", false, false);
  schema_members["longitudeDegrees"] = CObjectSchemaItem::SMember(longitudeDegrees_SchemaItem, true, "4.1.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_OASISAddress(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member countryName.
  //
  // Name of the country (localized)
  std::shared_ptr<ISchemaItem> countryName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(200), TSchemaItemParameter<std::string>());

  // Struct member countryCode.
  //
  // Name of country (ISO 3166-2)
  std::shared_ptr<ISchemaItem> countryCode_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(50), TSchemaItemParameter<std::string>());

  // Struct member postalCode.
  //
  // (PLZ, ZIP, PIN, CAP etc.)
  std::shared_ptr<ISchemaItem> postalCode_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(16), TSchemaItemParameter<std::string>());

  // Struct member administrativeArea.
  //
  // Portion of country (e.g. state)
  std::shared_ptr<ISchemaItem> administrativeArea_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(200), TSchemaItemParameter<std::string>());

  // Struct member subAdministrativeArea.
  //
  // Portion of e.g. state (e.g. county)
  std::shared_ptr<ISchemaItem> subAdministrativeArea_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(200), TSchemaItemParameter<std::string>());

  // Struct member locality.
  //
  // Hypernym for e.g. city/village
  std::shared_ptr<ISchemaItem> locality_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(200), TSchemaItemParameter<std::string>());

  // Struct member subLocality.
  //
  // Hypernym for e.g. district
  std::shared_ptr<ISchemaItem> subLocality_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(200), TSchemaItemParameter<std::string>());

  // Struct member thoroughfare.
  //
  // Hypernym for street, road etc.
  std::shared_ptr<ISchemaItem> thoroughfare_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(200), TSchemaItemParameter<std::string>());

  // Struct member subThoroughfare.
  //
  // Portion of thoroughfare e.g. house number
  std::shared_ptr<ISchemaItem> subThoroughfare_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(200), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["countryName"] = CObjectSchemaItem::SMember(countryName_SchemaItem, false, "4.1.0", "", false, false);
  schema_members["countryCode"] = CObjectSchemaItem::SMember(countryCode_SchemaItem, false, "4.1.0", "", false, false);
  schema_members["postalCode"] = CObjectSchemaItem::SMember(postalCode_SchemaItem, false, "4.1.0", "", false, false);
  schema_members["administrativeArea"] = CObjectSchemaItem::SMember(administrativeArea_SchemaItem, false, "4.1.0", "", false, false);
  schema_members["subAdministrativeArea"] = CObjectSchemaItem::SMember(subAdministrativeArea_SchemaItem, false, "4.1.0", "", false, false);
  schema_members["locality"] = CObjectSchemaItem::SMember(locality_SchemaItem, false, "4.1.0", "", false, false);
  schema_members["subLocality"] = CObjectSchemaItem::SMember(subLocality_SchemaItem, false, "4.1.0", "", false, false);
  schema_members["thoroughfare"] = CObjectSchemaItem::SMember(thoroughfare_SchemaItem, false, "4.1.0", "", false, false);
  schema_members["subThoroughfare"] = CObjectSchemaItem::SMember(subThoroughfare_SchemaItem, false, "4.1.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_LocationDetails(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member coordinate.
  //
  // Latitude/Longitude of the location.
  std::shared_ptr<ISchemaItem> coordinate_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Coordinate);

  // Struct member locationName.
  //
  // Name of location.
  std::shared_ptr<ISchemaItem> locationName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member addressLines.
  //
  // Location address for display purposes only
  std::shared_ptr<ISchemaItem> addressLines_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(4));

  // Struct member locationDescription.
  //
  // Description intended location / establishment (if applicable)
  std::shared_ptr<ISchemaItem> locationDescription_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member phoneNumber.
  //
  // Phone number of location / establishment.
  std::shared_ptr<ISchemaItem> phoneNumber_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(500), TSchemaItemParameter<std::string>());

  // Struct member locationImage.
  //
  // Image / icon of intended location.
  std::shared_ptr<ISchemaItem> locationImage_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Image);

  // Struct member searchAddress.
  //
  // Address to be used by navigation engines for search
  std::shared_ptr<ISchemaItem> searchAddress_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::OASISAddress);CObjectSchemaItem::Members schema_members;

  schema_members["coordinate"] = CObjectSchemaItem::SMember(coordinate_SchemaItem, false, "4.1.0", "", false, false);
  schema_members["locationName"] = CObjectSchemaItem::SMember(locationName_SchemaItem, false, "4.1.0", "", false, false);
  schema_members["addressLines"] = CObjectSchemaItem::SMember(addressLines_SchemaItem, false, "4.1.0", "", false, false);
  schema_members["locationDescription"] = CObjectSchemaItem::SMember(locationDescription_SchemaItem, false, "4.1.0", "", false, false);
  schema_members["phoneNumber"] = CObjectSchemaItem::SMember(phoneNumber_SchemaItem, false, "4.1.0", "", false, false);
  schema_members["locationImage"] = CObjectSchemaItem::SMember(locationImage_SchemaItem, false, "4.1.0", "", false, false);
  schema_members["searchAddress"] = CObjectSchemaItem::SMember(searchAddress_SchemaItem, false, "4.1.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_NavigationCapability(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member sendLocationEnabled.
  //
  // If the module has the ability to add locations to the onboard nav
  std::shared_ptr<ISchemaItem> sendLocationEnabled_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member getWayPointsEnabled.
  //
  // If the module has the ability to return way points from onboard nav
  std::shared_ptr<ISchemaItem> getWayPointsEnabled_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["sendLocationEnabled"] = CObjectSchemaItem::SMember(sendLocationEnabled_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["getWayPointsEnabled"] = CObjectSchemaItem::SMember(getWayPointsEnabled_SchemaItem, false, "4.5.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_PhoneCapability(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member dialNumberEnabled.
  //
  // If the module has the ability to perform dial number
  std::shared_ptr<ISchemaItem> dialNumberEnabled_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["dialNumberEnabled"] = CObjectSchemaItem::SMember(dialNumberEnabled_SchemaItem, false, "4.5.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_VideoStreamingFormat(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<VideoStreamingProtocol::eType> VideoStreamingProtocol_all_enum_values;
  VideoStreamingProtocol_all_enum_values.insert(VideoStreamingProtocol::RAW);
  VideoStreamingProtocol_all_enum_values.insert(VideoStreamingProtocol::RTP);
  VideoStreamingProtocol_all_enum_values.insert(VideoStreamingProtocol::RTSP);
  VideoStreamingProtocol_all_enum_values.insert(VideoStreamingProtocol::RTMP);
  VideoStreamingProtocol_all_enum_values.insert(VideoStreamingProtocol::WEBM);

  std::set<VideoStreamingCodec::eType> VideoStreamingCodec_all_enum_values;
  VideoStreamingCodec_all_enum_values.insert(VideoStreamingCodec::H264);
  VideoStreamingCodec_all_enum_values.insert(VideoStreamingCodec::H265);
  VideoStreamingCodec_all_enum_values.insert(VideoStreamingCodec::Theora);
  VideoStreamingCodec_all_enum_values.insert(VideoStreamingCodec::VP8);
  VideoStreamingCodec_all_enum_values.insert(VideoStreamingCodec::VP9);

  // Struct member protocol.
  //
  // Protocol type, see VideoStreamingProtocol
  std::shared_ptr<ISchemaItem> protocol_SchemaItem = TEnumSchemaItem<VideoStreamingProtocol::eType>::create(VideoStreamingProtocol_all_enum_values, TSchemaItemParameter<VideoStreamingProtocol::eType>());

  // Struct member codec.
  //
  // Codec type, see VideoStreamingCodec
  std::shared_ptr<ISchemaItem> codec_SchemaItem = TEnumSchemaItem<VideoStreamingCodec::eType>::create(VideoStreamingCodec_all_enum_values, TSchemaItemParameter<VideoStreamingCodec::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["protocol"] = CObjectSchemaItem::SMember(protocol_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["codec"] = CObjectSchemaItem::SMember(codec_SchemaItem, true, "4.5.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_VideoStreamingCapability(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member preferredResolution.
  //
  // The preferred resolution of a video stream for decoding and rendering on HMI.
  std::shared_ptr<ISchemaItem> preferredResolution_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ImageResolution);

  // Struct member maxBitrate.
  //
  // The maximum bitrate of video stream that is supported, in kbps.
  std::shared_ptr<ISchemaItem> maxBitrate_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2147483647), TSchemaItemParameter<int32_t>());

  // Struct member supportedFormats.
  //
  // Detailed information on each format supported by this system, in its preferred order (i.e. the first element in the array is most preferable to the system). Each object will contain a VideoStreamingFormat that describes what can be expected.
  std::shared_ptr<ISchemaItem> supportedFormats_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VideoStreamingFormat), TSchemaItemParameter<size_t>(), TSchemaItemParameter<size_t>());

  // Struct member hapticSpatialDataSupported.
  //
  // True if the system can utilize the haptic spatial data from the source being streamed. If not included, it can be assumed the module doesn't support haptic spatial data'. 
  std::shared_ptr<ISchemaItem> hapticSpatialDataSupported_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["preferredResolution"] = CObjectSchemaItem::SMember(preferredResolution_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["maxBitrate"] = CObjectSchemaItem::SMember(maxBitrate_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["supportedFormats"] = CObjectSchemaItem::SMember(supportedFormats_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["hapticSpatialDataSupported"] = CObjectSchemaItem::SMember(hapticSpatialDataSupported_SchemaItem, false, "4.5.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_RGBColor(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member red.
  std::shared_ptr<ISchemaItem> red_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(255), TSchemaItemParameter<int32_t>());

  // Struct member green.
  std::shared_ptr<ISchemaItem> green_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(255), TSchemaItemParameter<int32_t>());

  // Struct member blue.
  std::shared_ptr<ISchemaItem> blue_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(255), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["red"] = CObjectSchemaItem::SMember(red_SchemaItem, true, "5.0.0", "", false, false);
  schema_members["green"] = CObjectSchemaItem::SMember(green_SchemaItem, true, "5.0.0", "", false, false);
  schema_members["blue"] = CObjectSchemaItem::SMember(blue_SchemaItem, true, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_TemplateColorScheme(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member primaryColor.
  //
  // The primary "accent" color
  std::shared_ptr<ISchemaItem> primaryColor_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::RGBColor);

  // Struct member secondaryColor.
  //
  // The secondary "accent" color
  std::shared_ptr<ISchemaItem> secondaryColor_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::RGBColor);

  // Struct member backgroundColor.
  //
  // The color of the background
  std::shared_ptr<ISchemaItem> backgroundColor_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::RGBColor);CObjectSchemaItem::Members schema_members;

  schema_members["primaryColor"] = CObjectSchemaItem::SMember(primaryColor_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["secondaryColor"] = CObjectSchemaItem::SMember(secondaryColor_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["backgroundColor"] = CObjectSchemaItem::SMember(backgroundColor_SchemaItem, false, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_MassageModeData(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<MassageZone::eType> MassageZone_all_enum_values;
  MassageZone_all_enum_values.insert(MassageZone::LUMBAR);
  MassageZone_all_enum_values.insert(MassageZone::SEAT_CUSHION);

  std::set<MassageMode::eType> MassageMode_all_enum_values;
  MassageMode_all_enum_values.insert(MassageMode::OFF);
  MassageMode_all_enum_values.insert(MassageMode::LOW);
  MassageMode_all_enum_values.insert(MassageMode::HIGH);

  // Struct member massageZone.
  std::shared_ptr<ISchemaItem> massageZone_SchemaItem = TEnumSchemaItem<MassageZone::eType>::create(MassageZone_all_enum_values, TSchemaItemParameter<MassageZone::eType>());

  // Struct member massageMode.
  std::shared_ptr<ISchemaItem> massageMode_SchemaItem = TEnumSchemaItem<MassageMode::eType>::create(MassageMode_all_enum_values, TSchemaItemParameter<MassageMode::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["massageZone"] = CObjectSchemaItem::SMember(massageZone_SchemaItem, true, "5.0.0", "", false, false);
  schema_members["massageMode"] = CObjectSchemaItem::SMember(massageMode_SchemaItem, true, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_MassageCushionFirmness(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<MassageCushion::eType> MassageCushion_all_enum_values;
  MassageCushion_all_enum_values.insert(MassageCushion::TOP_LUMBAR);
  MassageCushion_all_enum_values.insert(MassageCushion::MIDDLE_LUMBAR);
  MassageCushion_all_enum_values.insert(MassageCushion::BOTTOM_LUMBAR);
  MassageCushion_all_enum_values.insert(MassageCushion::BACK_BOLSTERS);
  MassageCushion_all_enum_values.insert(MassageCushion::SEAT_BOLSTERS);

  // Struct member cushion.
  std::shared_ptr<ISchemaItem> cushion_SchemaItem = TEnumSchemaItem<MassageCushion::eType>::create(MassageCushion_all_enum_values, TSchemaItemParameter<MassageCushion::eType>());

  // Struct member firmness.
  std::shared_ptr<ISchemaItem> firmness_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["cushion"] = CObjectSchemaItem::SMember(cushion_SchemaItem, true, "5.0.0", "", false, false);
  schema_members["firmness"] = CObjectSchemaItem::SMember(firmness_SchemaItem, true, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_SeatMemoryAction(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<SeatMemoryActionType::eType> SeatMemoryActionType_all_enum_values;
  SeatMemoryActionType_all_enum_values.insert(SeatMemoryActionType::SAVE);
  SeatMemoryActionType_all_enum_values.insert(SeatMemoryActionType::RESTORE);
  SeatMemoryActionType_all_enum_values.insert(SeatMemoryActionType::NONE);

  // Struct member id.
  std::shared_ptr<ISchemaItem> id_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(10), TSchemaItemParameter<int32_t>());

  // Struct member label.
  std::shared_ptr<ISchemaItem> label_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Struct member action.
  std::shared_ptr<ISchemaItem> action_SchemaItem = TEnumSchemaItem<SeatMemoryActionType::eType>::create(SeatMemoryActionType_all_enum_values, TSchemaItemParameter<SeatMemoryActionType::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["id"] = CObjectSchemaItem::SMember(id_SchemaItem, true, "5.0.0", "", false, false);
  schema_members["label"] = CObjectSchemaItem::SMember(label_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["action"] = CObjectSchemaItem::SMember(action_SchemaItem, true, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_SeatControlData(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<SupportedSeat::eType> SupportedSeat_all_enum_values;
  SupportedSeat_all_enum_values.insert(SupportedSeat::DRIVER);
  SupportedSeat_all_enum_values.insert(SupportedSeat::FRONT_PASSENGER);

  // Struct member id.
  std::shared_ptr<ISchemaItem> id_SchemaItem = TEnumSchemaItem<SupportedSeat::eType>::create(SupportedSeat_all_enum_values, TSchemaItemParameter<SupportedSeat::eType>());

  // Struct member heatingEnabled.
  std::shared_ptr<ISchemaItem> heatingEnabled_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member coolingEnabled.
  std::shared_ptr<ISchemaItem> coolingEnabled_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member heatingLevel.
  std::shared_ptr<ISchemaItem> heatingLevel_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member coolingLevel.
  std::shared_ptr<ISchemaItem> coolingLevel_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member horizontalPosition.
  std::shared_ptr<ISchemaItem> horizontalPosition_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member verticalPosition.
  std::shared_ptr<ISchemaItem> verticalPosition_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member frontVerticalPosition.
  std::shared_ptr<ISchemaItem> frontVerticalPosition_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member backVerticalPosition.
  std::shared_ptr<ISchemaItem> backVerticalPosition_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member backTiltAngle.
  std::shared_ptr<ISchemaItem> backTiltAngle_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member headSupportHorizontalPosition.
  std::shared_ptr<ISchemaItem> headSupportHorizontalPosition_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member headSupportVerticalPosition.
  std::shared_ptr<ISchemaItem> headSupportVerticalPosition_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member massageEnabled.
  std::shared_ptr<ISchemaItem> massageEnabled_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member massageMode.
  std::shared_ptr<ISchemaItem> massageMode_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::MassageModeData), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(2));

  // Struct member massageCushionFirmness.
  std::shared_ptr<ISchemaItem> massageCushionFirmness_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::MassageCushionFirmness), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(5));

  // Struct member memory.
  std::shared_ptr<ISchemaItem> memory_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SeatMemoryAction);CObjectSchemaItem::Members schema_members;

  schema_members["id"] = CObjectSchemaItem::SMember(id_SchemaItem, true, "5.0.0", "", false, false);
  schema_members["heatingEnabled"] = CObjectSchemaItem::SMember(heatingEnabled_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["coolingEnabled"] = CObjectSchemaItem::SMember(coolingEnabled_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["heatingLevel"] = CObjectSchemaItem::SMember(heatingLevel_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["coolingLevel"] = CObjectSchemaItem::SMember(coolingLevel_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["horizontalPosition"] = CObjectSchemaItem::SMember(horizontalPosition_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["verticalPosition"] = CObjectSchemaItem::SMember(verticalPosition_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["frontVerticalPosition"] = CObjectSchemaItem::SMember(frontVerticalPosition_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["backVerticalPosition"] = CObjectSchemaItem::SMember(backVerticalPosition_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["backTiltAngle"] = CObjectSchemaItem::SMember(backTiltAngle_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["headSupportHorizontalPosition"] = CObjectSchemaItem::SMember(headSupportHorizontalPosition_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["headSupportVerticalPosition"] = CObjectSchemaItem::SMember(headSupportVerticalPosition_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["massageEnabled"] = CObjectSchemaItem::SMember(massageEnabled_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["massageMode"] = CObjectSchemaItem::SMember(massageMode_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["massageCushionFirmness"] = CObjectSchemaItem::SMember(massageCushionFirmness_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["memory"] = CObjectSchemaItem::SMember(memory_SchemaItem, false, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_SeatControlCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member moduleName.
  //
  // 
  //             The short friendly name of the light control module.
  //             It should not be used to identify a module by mobile application.
  //             
  std::shared_ptr<ISchemaItem> moduleName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Struct member heatingEnabledAvailable.
  std::shared_ptr<ISchemaItem> heatingEnabledAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member coolingEnabledAvailable.
  std::shared_ptr<ISchemaItem> coolingEnabledAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member heatingLevelAvailable.
  std::shared_ptr<ISchemaItem> heatingLevelAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member coolingLevelAvailable.
  std::shared_ptr<ISchemaItem> coolingLevelAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member horizontalPositionAvailable.
  std::shared_ptr<ISchemaItem> horizontalPositionAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member verticalPositionAvailable.
  std::shared_ptr<ISchemaItem> verticalPositionAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member frontVerticalPositionAvailable.
  std::shared_ptr<ISchemaItem> frontVerticalPositionAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member backVerticalPositionAvailable.
  std::shared_ptr<ISchemaItem> backVerticalPositionAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member backTiltAngleAvailable.
  std::shared_ptr<ISchemaItem> backTiltAngleAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member headSupportHorizontalPositionAvailable.
  std::shared_ptr<ISchemaItem> headSupportHorizontalPositionAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member headSupportVerticalPositionAvailable.
  std::shared_ptr<ISchemaItem> headSupportVerticalPositionAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member massageEnabledAvailable.
  std::shared_ptr<ISchemaItem> massageEnabledAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member massageModeAvailable.
  std::shared_ptr<ISchemaItem> massageModeAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member massageCushionFirmnessAvailable.
  std::shared_ptr<ISchemaItem> massageCushionFirmnessAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member memoryAvailable.
  std::shared_ptr<ISchemaItem> memoryAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["moduleName"] = CObjectSchemaItem::SMember(moduleName_SchemaItem, true, "5.0.0", "", false, false);
  schema_members["heatingEnabledAvailable"] = CObjectSchemaItem::SMember(heatingEnabledAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["coolingEnabledAvailable"] = CObjectSchemaItem::SMember(coolingEnabledAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["heatingLevelAvailable"] = CObjectSchemaItem::SMember(heatingLevelAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["coolingLevelAvailable"] = CObjectSchemaItem::SMember(coolingLevelAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["horizontalPositionAvailable"] = CObjectSchemaItem::SMember(horizontalPositionAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["verticalPositionAvailable"] = CObjectSchemaItem::SMember(verticalPositionAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["frontVerticalPositionAvailable"] = CObjectSchemaItem::SMember(frontVerticalPositionAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["backVerticalPositionAvailable"] = CObjectSchemaItem::SMember(backVerticalPositionAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["backTiltAngleAvailable"] = CObjectSchemaItem::SMember(backTiltAngleAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["headSupportHorizontalPositionAvailable"] = CObjectSchemaItem::SMember(headSupportHorizontalPositionAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["headSupportVerticalPositionAvailable"] = CObjectSchemaItem::SMember(headSupportVerticalPositionAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["massageEnabledAvailable"] = CObjectSchemaItem::SMember(massageEnabledAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["massageModeAvailable"] = CObjectSchemaItem::SMember(massageModeAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["massageCushionFirmnessAvailable"] = CObjectSchemaItem::SMember(massageCushionFirmnessAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["memoryAvailable"] = CObjectSchemaItem::SMember(memoryAvailable_SchemaItem, false, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_Temperature(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<TemperatureUnit::eType> TemperatureUnit_all_enum_values;
  TemperatureUnit_all_enum_values.insert(TemperatureUnit::FAHRENHEIT);
  TemperatureUnit_all_enum_values.insert(TemperatureUnit::CELSIUS);

  // Struct member unit.
  //
  // Temperature Unit
  std::shared_ptr<ISchemaItem> unit_SchemaItem = TEnumSchemaItem<TemperatureUnit::eType>::create(TemperatureUnit_all_enum_values, TSchemaItemParameter<TemperatureUnit::eType>());

  // Struct member value.
  //
  // Temperature Value in TemperatureUnit specified unit. Range depends on OEM and is not checked by SDL.
  std::shared_ptr<ISchemaItem> value_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());CObjectSchemaItem::Members schema_members;

  schema_members["unit"] = CObjectSchemaItem::SMember(unit_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["value"] = CObjectSchemaItem::SMember(value_SchemaItem, true, "4.5.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_RdsData(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member PS.
  //
  // Program Service Name
  std::shared_ptr<ISchemaItem> PS_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(8), TSchemaItemParameter<std::string>());

  // Struct member RT.
  //
  // Radio Text
  std::shared_ptr<ISchemaItem> RT_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(64), TSchemaItemParameter<std::string>());

  // Struct member CT.
  //
  // The clock text in UTC format as YYYY-MM-DDThh:mm:ss.sTZD
  std::shared_ptr<ISchemaItem> CT_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(24), TSchemaItemParameter<size_t>(24), TSchemaItemParameter<std::string>());

  // Struct member PI.
  //
  // Program Identification - the call sign for the radio station
  std::shared_ptr<ISchemaItem> PI_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(6), TSchemaItemParameter<std::string>());

  // Struct member PTY.
  //
  // The program type - The region should be used to differentiate between EU and North America program types
  std::shared_ptr<ISchemaItem> PTY_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(31), TSchemaItemParameter<int32_t>());

  // Struct member TP.
  //
  // Traffic Program Identification - Identifies a station that offers traffic
  std::shared_ptr<ISchemaItem> TP_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member TA.
  //
  // Traffic Announcement Identification - Indicates an ongoing traffic announcement
  std::shared_ptr<ISchemaItem> TA_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member REG.
  //
  // Region
  std::shared_ptr<ISchemaItem> REG_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["PS"] = CObjectSchemaItem::SMember(PS_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["RT"] = CObjectSchemaItem::SMember(RT_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["CT"] = CObjectSchemaItem::SMember(CT_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["PI"] = CObjectSchemaItem::SMember(PI_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["PTY"] = CObjectSchemaItem::SMember(PTY_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["TP"] = CObjectSchemaItem::SMember(TP_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["TA"] = CObjectSchemaItem::SMember(TA_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["REG"] = CObjectSchemaItem::SMember(REG_SchemaItem, false, "4.5.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_StationIDNumber(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member countryCode.
  //
  // Binary Representation of ITU Country Code. USA Code is 001.
  std::shared_ptr<ISchemaItem> countryCode_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(999), TSchemaItemParameter<int32_t>());

  // Struct member fccFacilityId.
  //
  // Binary representation  of unique facility ID assigned by the FCC; FCC controlled for U.S. territory
  std::shared_ptr<ISchemaItem> fccFacilityId_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(999999), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["countryCode"] = CObjectSchemaItem::SMember(countryCode_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["fccFacilityId"] = CObjectSchemaItem::SMember(fccFacilityId_SchemaItem, false, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_SisData(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member stationShortName.
  //
  // Identifies the 4-alpha-character station call sign plus an optional (-FM) extension
  std::shared_ptr<ISchemaItem> stationShortName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(4), TSchemaItemParameter<size_t>(7), TSchemaItemParameter<std::string>());

  // Struct member stationIDNumber.
  //
  // Used for network Application. Consists of Country Code and FCC Facility ID.
  std::shared_ptr<ISchemaItem> stationIDNumber_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::StationIDNumber);

  // Struct member stationLongName.
  //
  // Identifies the station call sign or other identifying information in the long format.
  std::shared_ptr<ISchemaItem> stationLongName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(56), TSchemaItemParameter<std::string>());

  // Struct member stationLocation.
  //
  // Provides the 3-dimensional geographic station location.
  std::shared_ptr<ISchemaItem> stationLocation_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::GPSData);

  // Struct member stationMessage.
  //
  // May be used to convey textual information of general interest to the consumer such as weather forecasts or public service announcements. Includes a high priority delivery feature to convey emergencies that may be in the listening area.
  std::shared_ptr<ISchemaItem> stationMessage_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(56), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["stationShortName"] = CObjectSchemaItem::SMember(stationShortName_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["stationIDNumber"] = CObjectSchemaItem::SMember(stationIDNumber_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["stationLongName"] = CObjectSchemaItem::SMember(stationLongName_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["stationLocation"] = CObjectSchemaItem::SMember(stationLocation_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["stationMessage"] = CObjectSchemaItem::SMember(stationMessage_SchemaItem, false, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_RadioControlData(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<RadioBand::eType> RadioBand_all_enum_values;
  RadioBand_all_enum_values.insert(RadioBand::AM);
  RadioBand_all_enum_values.insert(RadioBand::FM);
  RadioBand_all_enum_values.insert(RadioBand::XM);

  std::set<RadioState::eType> RadioState_all_enum_values;
  RadioState_all_enum_values.insert(RadioState::ACQUIRING);
  RadioState_all_enum_values.insert(RadioState::ACQUIRED);
  RadioState_all_enum_values.insert(RadioState::MULTICAST);
  RadioState_all_enum_values.insert(RadioState::NOT_FOUND);

  // Struct member frequencyInteger.
  //
  // The integer part of the frequency ie for 101.7 this value should be 101
  std::shared_ptr<ISchemaItem> frequencyInteger_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(1710), TSchemaItemParameter<int32_t>());

  // Struct member frequencyFraction.
  //
  // The fractional part of the frequency for 101.7 is 7
  std::shared_ptr<ISchemaItem> frequencyFraction_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(9), TSchemaItemParameter<int32_t>());

  // Struct member band.
  std::shared_ptr<ISchemaItem> band_SchemaItem = TEnumSchemaItem<RadioBand::eType>::create(RadioBand_all_enum_values, TSchemaItemParameter<RadioBand::eType>());

  // Struct member rdsData.
  std::shared_ptr<ISchemaItem> rdsData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::RdsData);

  // Struct member hdRadioEnable.
  //
  //  True if the hd radio is on, false if the radio is off
  std::shared_ptr<ISchemaItem> hdRadioEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member availableHDs.
  //
  // Number of HD sub-channels if available
  std::shared_ptr<ISchemaItem> availableHDs_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(7), TSchemaItemParameter<int32_t>());

  // Function parameter availableHDs_history_v2.
  std::shared_ptr<ISchemaItem> availableHDs_history_v2_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(3), TSchemaItemParameter<int32_t>());

  // Function parameter availableHDs_history_v1.
  std::shared_ptr<ISchemaItem> availableHDs_history_v1_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(7), TSchemaItemParameter<int32_t>());

  std::vector<CObjectSchemaItem::SMember> availableHDs_history_vector;

  // Struct member availableHdChannels.
  //
  // The list of available HD sub-channel indexes. Empty list means no Hd channel is available. Read-only. 
  std::shared_ptr<ISchemaItem> availableHdChannels_SchemaItem = CArraySchemaItem::create(TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(7), TSchemaItemParameter<int32_t>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(8));

  // Struct member hdChannel.
  //
  // Current HD sub-channel if available
  std::shared_ptr<ISchemaItem> hdChannel_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(7), TSchemaItemParameter<int32_t>());

  // Function parameter hdChannel_history_v2.
  std::shared_ptr<ISchemaItem> hdChannel_history_v2_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(3), TSchemaItemParameter<int32_t>());

  // Function parameter hdChannel_history_v1.
  std::shared_ptr<ISchemaItem> hdChannel_history_v1_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(7), TSchemaItemParameter<int32_t>());

  std::vector<CObjectSchemaItem::SMember> hdChannel_history_vector;

  // Struct member signalStrength.
  std::shared_ptr<ISchemaItem> signalStrength_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member signalChangeThreshold.
  //
  // If the signal strength falls below the set value for this parameter, the radio will tune to an alternative frequency
  std::shared_ptr<ISchemaItem> signalChangeThreshold_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member radioEnable.
  //
  //  True if the radio is on, false if the radio is off. If set to false, no other data will be included.
  std::shared_ptr<ISchemaItem> radioEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member state.
  std::shared_ptr<ISchemaItem> state_SchemaItem = TEnumSchemaItem<RadioState::eType>::create(RadioState_all_enum_values, TSchemaItemParameter<RadioState::eType>());

  // Struct member sisData.
  //
  // Read-only Station Information Service (SIS) data provides basic information about the station such as call sign, as well as information not displayable to the consumer such as the station identification number
  std::shared_ptr<ISchemaItem> sisData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SisData);CObjectSchemaItem::Members schema_members;

  schema_members["frequencyInteger"] = CObjectSchemaItem::SMember(frequencyInteger_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["frequencyFraction"] = CObjectSchemaItem::SMember(frequencyFraction_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["band"] = CObjectSchemaItem::SMember(band_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["rdsData"] = CObjectSchemaItem::SMember(rdsData_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["hdRadioEnable"] = CObjectSchemaItem::SMember(hdRadioEnable_SchemaItem, false, "5.0.0", "", false, false);
  availableHDs_history_vector.push_back(CObjectSchemaItem::SMember(availableHDs_history_v2_SchemaItem, false, "4.5.0", "5.0.0", false, false));
  availableHDs_history_vector.push_back(CObjectSchemaItem::SMember(availableHDs_history_v1_SchemaItem, false, "5.0.0", "6.0.0", false, false));
  schema_members["availableHDs"] = CObjectSchemaItem::SMember(availableHDs_SchemaItem, false, "6.0.0", "", true, false, availableHDs_history_vector);
  schema_members["availableHdChannels"] = CObjectSchemaItem::SMember(availableHdChannels_SchemaItem, false, "6.0.0", "", false, false);
  hdChannel_history_vector.push_back(CObjectSchemaItem::SMember(hdChannel_history_v2_SchemaItem, false, "4.5.0", "5.0.0", false, false));
  hdChannel_history_vector.push_back(CObjectSchemaItem::SMember(hdChannel_history_v1_SchemaItem, false, "5.0.0", "6.0.0", false, false));
  schema_members["hdChannel"] = CObjectSchemaItem::SMember(hdChannel_SchemaItem, false, "6.0.0", "", false, false, hdChannel_history_vector);
  schema_members["signalStrength"] = CObjectSchemaItem::SMember(signalStrength_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["signalChangeThreshold"] = CObjectSchemaItem::SMember(signalChangeThreshold_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["radioEnable"] = CObjectSchemaItem::SMember(radioEnable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["state"] = CObjectSchemaItem::SMember(state_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["sisData"] = CObjectSchemaItem::SMember(sisData_SchemaItem, false, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_ClimateControlData(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<DefrostZone::eType> DefrostZone_all_enum_values;
  DefrostZone_all_enum_values.insert(DefrostZone::FRONT);
  DefrostZone_all_enum_values.insert(DefrostZone::REAR);
  DefrostZone_all_enum_values.insert(DefrostZone::ALL);
  DefrostZone_all_enum_values.insert(DefrostZone::NONE);

  std::set<VentilationMode::eType> VentilationMode_all_enum_values;
  VentilationMode_all_enum_values.insert(VentilationMode::UPPER);
  VentilationMode_all_enum_values.insert(VentilationMode::LOWER);
  VentilationMode_all_enum_values.insert(VentilationMode::BOTH);
  VentilationMode_all_enum_values.insert(VentilationMode::NONE);

  // Struct member fanSpeed.
  std::shared_ptr<ISchemaItem> fanSpeed_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member currentTemperature.
  std::shared_ptr<ISchemaItem> currentTemperature_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Temperature);

  // Struct member desiredTemperature.
  std::shared_ptr<ISchemaItem> desiredTemperature_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Temperature);

  // Struct member acEnable.
  std::shared_ptr<ISchemaItem> acEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member circulateAirEnable.
  std::shared_ptr<ISchemaItem> circulateAirEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member autoModeEnable.
  std::shared_ptr<ISchemaItem> autoModeEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member defrostZone.
  std::shared_ptr<ISchemaItem> defrostZone_SchemaItem = TEnumSchemaItem<DefrostZone::eType>::create(DefrostZone_all_enum_values, TSchemaItemParameter<DefrostZone::eType>());

  // Struct member dualModeEnable.
  std::shared_ptr<ISchemaItem> dualModeEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member acMaxEnable.
  std::shared_ptr<ISchemaItem> acMaxEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member ventilationMode.
  std::shared_ptr<ISchemaItem> ventilationMode_SchemaItem = TEnumSchemaItem<VentilationMode::eType>::create(VentilationMode_all_enum_values, TSchemaItemParameter<VentilationMode::eType>());

  // Struct member heatedSteeringWheelEnable.
  //
  // value false means disabled/turn off, value true means enabled/turn on.
  std::shared_ptr<ISchemaItem> heatedSteeringWheelEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member heatedWindshieldEnable.
  //
  // value false means disabled, value true means enabled.
  std::shared_ptr<ISchemaItem> heatedWindshieldEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member heatedRearWindowEnable.
  //
  // value false means disabled, value true means enabled.
  std::shared_ptr<ISchemaItem> heatedRearWindowEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member heatedMirrorsEnable.
  //
  // value false means disabled, value true means enabled.
  std::shared_ptr<ISchemaItem> heatedMirrorsEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member climateEnable.
  std::shared_ptr<ISchemaItem> climateEnable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["fanSpeed"] = CObjectSchemaItem::SMember(fanSpeed_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["currentTemperature"] = CObjectSchemaItem::SMember(currentTemperature_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["desiredTemperature"] = CObjectSchemaItem::SMember(desiredTemperature_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["acEnable"] = CObjectSchemaItem::SMember(acEnable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["circulateAirEnable"] = CObjectSchemaItem::SMember(circulateAirEnable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["autoModeEnable"] = CObjectSchemaItem::SMember(autoModeEnable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["defrostZone"] = CObjectSchemaItem::SMember(defrostZone_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["dualModeEnable"] = CObjectSchemaItem::SMember(dualModeEnable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["acMaxEnable"] = CObjectSchemaItem::SMember(acMaxEnable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["ventilationMode"] = CObjectSchemaItem::SMember(ventilationMode_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["heatedSteeringWheelEnable"] = CObjectSchemaItem::SMember(heatedSteeringWheelEnable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["heatedWindshieldEnable"] = CObjectSchemaItem::SMember(heatedWindshieldEnable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["heatedRearWindowEnable"] = CObjectSchemaItem::SMember(heatedRearWindowEnable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["heatedMirrorsEnable"] = CObjectSchemaItem::SMember(heatedMirrorsEnable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["climateEnable"] = CObjectSchemaItem::SMember(climateEnable_SchemaItem, false, "6.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_RadioControlCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member moduleName.
  //
  // 
  //                 The short friendly name of the climate control module.
  //                 It should not be used to identify a module by mobile application.
  //             
  std::shared_ptr<ISchemaItem> moduleName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Struct member radioEnableAvailable.
  //
  // 
  //                 Availability of the control of enable/disable radio.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> radioEnableAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member radioBandAvailable.
  //
  // 
  //                 Availability of the control of radio band.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> radioBandAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member radioFrequencyAvailable.
  //
  // 
  //                 Availability of the control of radio frequency.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> radioFrequencyAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member hdChannelAvailable.
  //
  // 
  //                 Availability of the control of HD radio channel.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> hdChannelAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member rdsDataAvailable.
  //
  // 
  //                 Availability of the getting Radio Data System (RDS) data.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> rdsDataAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member availableHDsAvailable.
  //
  // 
  //                 Availability of the getting the number of available HD channels.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> availableHDsAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Function parameter availableHDsAvailable_history_v1.
  std::shared_ptr<ISchemaItem> availableHDsAvailable_history_v1_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  std::vector<CObjectSchemaItem::SMember> availableHDsAvailable_history_vector;

  // Struct member availableHdChannelsAvailable.
  //
  // 
  //                 Availability of the list of available HD sub-channel indexes.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> availableHdChannelsAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member stateAvailable.
  //
  // 
  //                 Availability of the getting the Radio state.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> stateAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member signalStrengthAvailable.
  //
  // 
  //                 Availability of the getting the signal strength.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> signalStrengthAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member signalChangeThresholdAvailable.
  //
  // 
  //                 Availability of the getting the signal Change Threshold.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> signalChangeThresholdAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member sisDataAvailable.
  //
  // 
  //                 Availability of the getting HD radio Station Information Service (SIS) data.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> sisDataAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member hdRadioEnableAvailable.
  //
  // 
  //                 Availability of the control of enable/disable HD radio.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> hdRadioEnableAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member siriusxmRadioAvailable.
  //
  // 
  //                 Availability of sirius XM radio.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> siriusxmRadioAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["moduleName"] = CObjectSchemaItem::SMember(moduleName_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["radioEnableAvailable"] = CObjectSchemaItem::SMember(radioEnableAvailable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["radioBandAvailable"] = CObjectSchemaItem::SMember(radioBandAvailable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["radioFrequencyAvailable"] = CObjectSchemaItem::SMember(radioFrequencyAvailable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["hdChannelAvailable"] = CObjectSchemaItem::SMember(hdChannelAvailable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["rdsDataAvailable"] = CObjectSchemaItem::SMember(rdsDataAvailable_SchemaItem, false, "4.5.0", "", false, false);
  availableHDsAvailable_history_vector.push_back(CObjectSchemaItem::SMember(availableHDsAvailable_history_v1_SchemaItem, false, "4.5.0", "6.0.0", false, false));
  schema_members["availableHDsAvailable"] = CObjectSchemaItem::SMember(availableHDsAvailable_SchemaItem, false, "6.0.0", "", true, false, availableHDsAvailable_history_vector);
  schema_members["availableHdChannelsAvailable"] = CObjectSchemaItem::SMember(availableHdChannelsAvailable_SchemaItem, false, "6.0.0", "", false, false);
  schema_members["stateAvailable"] = CObjectSchemaItem::SMember(stateAvailable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["signalStrengthAvailable"] = CObjectSchemaItem::SMember(signalStrengthAvailable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["signalChangeThresholdAvailable"] = CObjectSchemaItem::SMember(signalChangeThresholdAvailable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["sisDataAvailable"] = CObjectSchemaItem::SMember(sisDataAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["hdRadioEnableAvailable"] = CObjectSchemaItem::SMember(hdRadioEnableAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["siriusxmRadioAvailable"] = CObjectSchemaItem::SMember(siriusxmRadioAvailable_SchemaItem, false, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_ClimateControlCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<DefrostZone::eType> DefrostZone_all_enum_values;
  DefrostZone_all_enum_values.insert(DefrostZone::FRONT);
  DefrostZone_all_enum_values.insert(DefrostZone::REAR);
  DefrostZone_all_enum_values.insert(DefrostZone::ALL);
  DefrostZone_all_enum_values.insert(DefrostZone::NONE);

  std::set<VentilationMode::eType> VentilationMode_all_enum_values;
  VentilationMode_all_enum_values.insert(VentilationMode::UPPER);
  VentilationMode_all_enum_values.insert(VentilationMode::LOWER);
  VentilationMode_all_enum_values.insert(VentilationMode::BOTH);
  VentilationMode_all_enum_values.insert(VentilationMode::NONE);

  // Struct member moduleName.
  //
  // The short friendly name of the climate control module.
  //                 It should not be used to identify a module by mobile application.
  std::shared_ptr<ISchemaItem> moduleName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Struct member currentTemperatureAvailable.
  //
  // 
  //                 Availability of the reading of current temperature.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> currentTemperatureAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member fanSpeedAvailable.
  //
  // 
  //                 Availability of the control of fan speed.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> fanSpeedAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member desiredTemperatureAvailable.
  //
  // 
  //                 Availability of the control of desired temperature.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> desiredTemperatureAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member acEnableAvailable.
  //
  // 
  //                 Availability of the control of turn on/off AC.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> acEnableAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member acMaxEnableAvailable.
  //
  // 
  //                 Availability of the control of enable/disable air conditioning is ON on the maximum level.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> acMaxEnableAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member circulateAirEnableAvailable.
  //
  // 
  //                 Availability of the control of enable/disable circulate Air mode.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> circulateAirEnableAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member autoModeEnableAvailable.
  //
  // 
  //                 Availability of the control of enable/disable auto mode.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> autoModeEnableAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member dualModeEnableAvailable.
  //
  // 
  //                 Availability of the control of enable/disable dual mode.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> dualModeEnableAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member defrostZoneAvailable.
  //
  // 
  //                 Availability of the control of defrost zones.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> defrostZoneAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member defrostZone.
  //
  // 
  //                 A set of all defrost zones that are controllable.
  //             
  std::shared_ptr<ISchemaItem> defrostZone_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<DefrostZone::eType>::create(DefrostZone_all_enum_values, TSchemaItemParameter<DefrostZone::eType>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member ventilationModeAvailable.
  //
  // 
  //                 Availability of the control of air ventilation mode.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> ventilationModeAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member ventilationMode.
  //
  // 
  //                 A set of all ventilation modes that are controllable.
  //             
  std::shared_ptr<ISchemaItem> ventilationMode_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<VentilationMode::eType>::create(VentilationMode_all_enum_values, TSchemaItemParameter<VentilationMode::eType>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member heatedSteeringWheelAvailable.
  //
  // 
  //                 Availability of the control (enable/disable) of heated Steering Wheel.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> heatedSteeringWheelAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member heatedWindshieldAvailable.
  //
  // 
  //                 Availability of the control (enable/disable) of heated Windshield.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> heatedWindshieldAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member heatedRearWindowAvailable.
  //
  // 
  //                 Availability of the control (enable/disable) of heated Rear Window.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> heatedRearWindowAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member heatedMirrorsAvailable.
  //
  // 
  //                 Availability of the control (enable/disable) of heated Mirrors.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> heatedMirrorsAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member climateEnableAvailable.
  //
  // 
  //                 Availability of the control of enable/disable climate control.
  //                 True: Available, False: Not Available, Not present: Not Available.
  //             
  std::shared_ptr<ISchemaItem> climateEnableAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["moduleName"] = CObjectSchemaItem::SMember(moduleName_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["currentTemperatureAvailable"] = CObjectSchemaItem::SMember(currentTemperatureAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["fanSpeedAvailable"] = CObjectSchemaItem::SMember(fanSpeedAvailable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["desiredTemperatureAvailable"] = CObjectSchemaItem::SMember(desiredTemperatureAvailable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["acEnableAvailable"] = CObjectSchemaItem::SMember(acEnableAvailable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["acMaxEnableAvailable"] = CObjectSchemaItem::SMember(acMaxEnableAvailable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["circulateAirEnableAvailable"] = CObjectSchemaItem::SMember(circulateAirEnableAvailable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["autoModeEnableAvailable"] = CObjectSchemaItem::SMember(autoModeEnableAvailable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["dualModeEnableAvailable"] = CObjectSchemaItem::SMember(dualModeEnableAvailable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["defrostZoneAvailable"] = CObjectSchemaItem::SMember(defrostZoneAvailable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["defrostZone"] = CObjectSchemaItem::SMember(defrostZone_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["ventilationModeAvailable"] = CObjectSchemaItem::SMember(ventilationModeAvailable_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["ventilationMode"] = CObjectSchemaItem::SMember(ventilationMode_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["heatedSteeringWheelAvailable"] = CObjectSchemaItem::SMember(heatedSteeringWheelAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["heatedWindshieldAvailable"] = CObjectSchemaItem::SMember(heatedWindshieldAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["heatedRearWindowAvailable"] = CObjectSchemaItem::SMember(heatedRearWindowAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["heatedMirrorsAvailable"] = CObjectSchemaItem::SMember(heatedMirrorsAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["climateEnableAvailable"] = CObjectSchemaItem::SMember(climateEnableAvailable_SchemaItem, false, "6.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_EqualizerSettings(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member channelId.
  std::shared_ptr<ISchemaItem> channelId_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member channelName.
  //
  // read-only channel / frequency name (e.i. "Treble, Midrange, Bass" or "125 Hz")
  std::shared_ptr<ISchemaItem> channelName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(50), TSchemaItemParameter<std::string>());

  // Struct member channelSetting.
  //
  // Reflects the setting, from 0%-100%.
  std::shared_ptr<ISchemaItem> channelSetting_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["channelId"] = CObjectSchemaItem::SMember(channelId_SchemaItem, true, "5.0.0", "", false, false);
  schema_members["channelName"] = CObjectSchemaItem::SMember(channelName_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["channelSetting"] = CObjectSchemaItem::SMember(channelSetting_SchemaItem, true, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_AudioControlData(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<PrimaryAudioSource::eType> PrimaryAudioSource_all_enum_values;
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::NO_SOURCE_SELECTED);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::CD);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::USB);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::USB2);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::BLUETOOTH_STEREO_BTST);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::LINE_IN);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::IPOD);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::MOBILE_APP);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::AM);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::FM);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::XM);
  PrimaryAudioSource_all_enum_values.insert(PrimaryAudioSource::DAB);

  std::map<PrimaryAudioSource::eType, std::vector<ElementSignature>> PrimaryAudioSource_element_signatures;
  PrimaryAudioSource_element_signatures[PrimaryAudioSource::CD] = std::vector<ElementSignature>();
  PrimaryAudioSource_element_signatures[PrimaryAudioSource::AM] = std::vector<ElementSignature>();
  PrimaryAudioSource_element_signatures[PrimaryAudioSource::FM] = std::vector<ElementSignature>();
  PrimaryAudioSource_element_signatures[PrimaryAudioSource::XM] = std::vector<ElementSignature>();
  PrimaryAudioSource_element_signatures[PrimaryAudioSource::DAB] = std::vector<ElementSignature>();
  PrimaryAudioSource_element_signatures[PrimaryAudioSource::CD].push_back(ElementSignature("5.0.0", "", false));
  PrimaryAudioSource_element_signatures[PrimaryAudioSource::AM].push_back(ElementSignature("5.0.0", "", false));
  PrimaryAudioSource_element_signatures[PrimaryAudioSource::FM].push_back(ElementSignature("5.0.0", "", false));
  PrimaryAudioSource_element_signatures[PrimaryAudioSource::XM].push_back(ElementSignature("5.0.0", "", false));
  PrimaryAudioSource_element_signatures[PrimaryAudioSource::DAB].push_back(ElementSignature("5.0.0", "", false));

  // Struct member source.
  //
  // 
  //                 In a getter response or a notification, it is the current primary audio source of the system.
  //                 In a setter request, it is the target audio source that the system shall switch to.
  //                 If the value is MOBILE_APP, the system shall switch to the mobile media app that issues the setter RPC.
  //             
  std::shared_ptr<ISchemaItem> source_SchemaItem = TEnumSchemaItem<PrimaryAudioSource::eType>::createWithSignatures(PrimaryAudioSource_all_enum_values, PrimaryAudioSource_element_signatures, TSchemaItemParameter<PrimaryAudioSource::eType>());

  // Struct member keepContext.
  //
  // 
  //                 This parameter shall not be present in any getter responses or notifications.
  //                 This parameter is optional in a setter request. The default value is false if it is not included.
  //                 If it is false, the system not only changes the audio source but also brings the default application or 
  //                 system UI associated with the audio source to foreground.
  //                 If it is true, the system only changes the audio source, but keeps the current application in foreground.
  //             
  std::shared_ptr<ISchemaItem> keepContext_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member volume.
  //
  // Reflects the volume of audio, from 0%-100%.
  std::shared_ptr<ISchemaItem> volume_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());

  // Struct member equalizerSettings.
  //
  // Defines the list of supported channels (band) and their current/desired settings on HMI
  std::shared_ptr<ISchemaItem> equalizerSettings_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::EqualizerSettings), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["source"] = CObjectSchemaItem::SMember(source_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["keepContext"] = CObjectSchemaItem::SMember(keepContext_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["volume"] = CObjectSchemaItem::SMember(volume_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["equalizerSettings"] = CObjectSchemaItem::SMember(equalizerSettings_SchemaItem, false, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_AudioControlCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member moduleName.
  //
  // 
  //                 The short friendly name of the light control module.
  //                 It should not be used to identify a module by mobile application.
  //             
  std::shared_ptr<ISchemaItem> moduleName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Struct member sourceAvailable.
  //
  // Availability of the control of audio source. 
  std::shared_ptr<ISchemaItem> sourceAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member keepContextAvailable.
  //
  // Availability of the keepContext parameter. 
  std::shared_ptr<ISchemaItem> keepContextAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member volumeAvailable.
  //
  // Availability of the control of audio volume.
  std::shared_ptr<ISchemaItem> volumeAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member equalizerAvailable.
  //
  // Availability of the control of Equalizer Settings.
  std::shared_ptr<ISchemaItem> equalizerAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member equalizerMaxChannelId.
  //
  // Must be included if equalizerAvailable=true, and assume all IDs starting from 1 to this value are valid
  std::shared_ptr<ISchemaItem> equalizerMaxChannelId_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(1), TSchemaItemParameter<int32_t>(100), TSchemaItemParameter<int32_t>());CObjectSchemaItem::Members schema_members;

  schema_members["moduleName"] = CObjectSchemaItem::SMember(moduleName_SchemaItem, true, "5.0.0", "", false, false);
  schema_members["sourceAvailable"] = CObjectSchemaItem::SMember(sourceAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["keepContextAvailable"] = CObjectSchemaItem::SMember(keepContextAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["volumeAvailable"] = CObjectSchemaItem::SMember(volumeAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["equalizerAvailable"] = CObjectSchemaItem::SMember(equalizerAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["equalizerMaxChannelId"] = CObjectSchemaItem::SMember(equalizerMaxChannelId_SchemaItem, false, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_LightCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<LightName::eType> LightName_all_enum_values;
  LightName_all_enum_values.insert(LightName::FRONT_LEFT_HIGH_BEAM);
  LightName_all_enum_values.insert(LightName::FRONT_RIGHT_HIGH_BEAM);
  LightName_all_enum_values.insert(LightName::FRONT_LEFT_LOW_BEAM);
  LightName_all_enum_values.insert(LightName::FRONT_RIGHT_LOW_BEAM);
  LightName_all_enum_values.insert(LightName::FRONT_LEFT_PARKING_LIGHT);
  LightName_all_enum_values.insert(LightName::FRONT_RIGHT_PARKING_LIGHT);
  LightName_all_enum_values.insert(LightName::FRONT_LEFT_FOG_LIGHT);
  LightName_all_enum_values.insert(LightName::FRONT_RIGHT_FOG_LIGHT);
  LightName_all_enum_values.insert(LightName::FRONT_LEFT_DAYTIME_RUNNING_LIGHT);
  LightName_all_enum_values.insert(LightName::FRONT_RIGHT_DAYTIME_RUNNING_LIGHT);
  LightName_all_enum_values.insert(LightName::FRONT_LEFT_TURN_LIGHT);
  LightName_all_enum_values.insert(LightName::FRONT_RIGHT_TURN_LIGHT);
  LightName_all_enum_values.insert(LightName::REAR_LEFT_FOG_LIGHT);
  LightName_all_enum_values.insert(LightName::REAR_RIGHT_FOG_LIGHT);
  LightName_all_enum_values.insert(LightName::REAR_LEFT_TAIL_LIGHT);
  LightName_all_enum_values.insert(LightName::REAR_RIGHT_TAIL_LIGHT);
  LightName_all_enum_values.insert(LightName::REAR_LEFT_BRAKE_LIGHT);
  LightName_all_enum_values.insert(LightName::REAR_RIGHT_BRAKE_LIGHT);
  LightName_all_enum_values.insert(LightName::REAR_LEFT_TURN_LIGHT);
  LightName_all_enum_values.insert(LightName::REAR_RIGHT_TURN_LIGHT);
  LightName_all_enum_values.insert(LightName::REAR_REGISTRATION_PLATE_LIGHT);
  LightName_all_enum_values.insert(LightName::HIGH_BEAMS);
  LightName_all_enum_values.insert(LightName::LOW_BEAMS);
  LightName_all_enum_values.insert(LightName::FOG_LIGHTS);
  LightName_all_enum_values.insert(LightName::RUNNING_LIGHTS);
  LightName_all_enum_values.insert(LightName::PARKING_LIGHTS);
  LightName_all_enum_values.insert(LightName::BRAKE_LIGHTS);
  LightName_all_enum_values.insert(LightName::REAR_REVERSING_LIGHTS);
  LightName_all_enum_values.insert(LightName::SIDE_MARKER_LIGHTS);
  LightName_all_enum_values.insert(LightName::LEFT_TURN_LIGHTS);
  LightName_all_enum_values.insert(LightName::RIGHT_TURN_LIGHTS);
  LightName_all_enum_values.insert(LightName::HAZARD_LIGHTS);
  LightName_all_enum_values.insert(LightName::REAR_CARGO_LIGHTS);
  LightName_all_enum_values.insert(LightName::REAR_TRUCK_BED_LIGHTS);
  LightName_all_enum_values.insert(LightName::REAR_TRAILER_LIGHTS);
  LightName_all_enum_values.insert(LightName::LEFT_SPOT_LIGHTS);
  LightName_all_enum_values.insert(LightName::RIGHT_SPOT_LIGHTS);
  LightName_all_enum_values.insert(LightName::LEFT_PUDDLE_LIGHTS);
  LightName_all_enum_values.insert(LightName::RIGHT_PUDDLE_LIGHTS);
  LightName_all_enum_values.insert(LightName::AMBIENT_LIGHTS);
  LightName_all_enum_values.insert(LightName::OVERHEAD_LIGHTS);
  LightName_all_enum_values.insert(LightName::READING_LIGHTS);
  LightName_all_enum_values.insert(LightName::TRUNK_LIGHTS);
  LightName_all_enum_values.insert(LightName::EXTERIOR_FRONT_LIGHTS);
  LightName_all_enum_values.insert(LightName::EXTERIOR_REAR_LIGHTS);
  LightName_all_enum_values.insert(LightName::EXTERIOR_LEFT_LIGHTS);
  LightName_all_enum_values.insert(LightName::EXTERIOR_RIGHT_LIGHTS);
  LightName_all_enum_values.insert(LightName::EXTERIOR_ALL_LIGHTS);

  // Struct member name.
  std::shared_ptr<ISchemaItem> name_SchemaItem = TEnumSchemaItem<LightName::eType>::create(LightName_all_enum_values, TSchemaItemParameter<LightName::eType>());

  // Struct member statusAvailable.
  //
  // 
  //             Indicates if the status (ON/OFF) can be set remotely. App shall not use read-only values (RAMP_UP/RAMP_DOWN/UNKNOWN/INVALID) in a setInteriorVehicleData request.
  //           
  std::shared_ptr<ISchemaItem> statusAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member densityAvailable.
  //
  // 
  //                 Indicates if the light's density can be set remotely (similar to a dimmer).
  //             
  std::shared_ptr<ISchemaItem> densityAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member rgbColorSpaceAvailable.
  //
  // 
  //                 Indicates if the light's color can be set remotely by using the sRGB color space.
  //             
  std::shared_ptr<ISchemaItem> rgbColorSpaceAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["name"] = CObjectSchemaItem::SMember(name_SchemaItem, true, "5.0.0", "", false, false);
  schema_members["statusAvailable"] = CObjectSchemaItem::SMember(statusAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["densityAvailable"] = CObjectSchemaItem::SMember(densityAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["rgbColorSpaceAvailable"] = CObjectSchemaItem::SMember(rgbColorSpaceAvailable_SchemaItem, false, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_LightControlCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member moduleName.
  //
  // 
  //                 The short friendly name of the light control module.
  //                 It should not be used to identify a module by mobile application.
  //             
  std::shared_ptr<ISchemaItem> moduleName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Struct member supportedLights.
  //
  //  An array of available LightCapabilities that are controllable. 
  std::shared_ptr<ISchemaItem> supportedLights_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::LightCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["moduleName"] = CObjectSchemaItem::SMember(moduleName_SchemaItem, true, "5.0.0", "", false, false);
  schema_members["supportedLights"] = CObjectSchemaItem::SMember(supportedLights_SchemaItem, true, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_LightState(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<LightName::eType> LightName_all_enum_values;
  LightName_all_enum_values.insert(LightName::FRONT_LEFT_HIGH_BEAM);
  LightName_all_enum_values.insert(LightName::FRONT_RIGHT_HIGH_BEAM);
  LightName_all_enum_values.insert(LightName::FRONT_LEFT_LOW_BEAM);
  LightName_all_enum_values.insert(LightName::FRONT_RIGHT_LOW_BEAM);
  LightName_all_enum_values.insert(LightName::FRONT_LEFT_PARKING_LIGHT);
  LightName_all_enum_values.insert(LightName::FRONT_RIGHT_PARKING_LIGHT);
  LightName_all_enum_values.insert(LightName::FRONT_LEFT_FOG_LIGHT);
  LightName_all_enum_values.insert(LightName::FRONT_RIGHT_FOG_LIGHT);
  LightName_all_enum_values.insert(LightName::FRONT_LEFT_DAYTIME_RUNNING_LIGHT);
  LightName_all_enum_values.insert(LightName::FRONT_RIGHT_DAYTIME_RUNNING_LIGHT);
  LightName_all_enum_values.insert(LightName::FRONT_LEFT_TURN_LIGHT);
  LightName_all_enum_values.insert(LightName::FRONT_RIGHT_TURN_LIGHT);
  LightName_all_enum_values.insert(LightName::REAR_LEFT_FOG_LIGHT);
  LightName_all_enum_values.insert(LightName::REAR_RIGHT_FOG_LIGHT);
  LightName_all_enum_values.insert(LightName::REAR_LEFT_TAIL_LIGHT);
  LightName_all_enum_values.insert(LightName::REAR_RIGHT_TAIL_LIGHT);
  LightName_all_enum_values.insert(LightName::REAR_LEFT_BRAKE_LIGHT);
  LightName_all_enum_values.insert(LightName::REAR_RIGHT_BRAKE_LIGHT);
  LightName_all_enum_values.insert(LightName::REAR_LEFT_TURN_LIGHT);
  LightName_all_enum_values.insert(LightName::REAR_RIGHT_TURN_LIGHT);
  LightName_all_enum_values.insert(LightName::REAR_REGISTRATION_PLATE_LIGHT);
  LightName_all_enum_values.insert(LightName::HIGH_BEAMS);
  LightName_all_enum_values.insert(LightName::LOW_BEAMS);
  LightName_all_enum_values.insert(LightName::FOG_LIGHTS);
  LightName_all_enum_values.insert(LightName::RUNNING_LIGHTS);
  LightName_all_enum_values.insert(LightName::PARKING_LIGHTS);
  LightName_all_enum_values.insert(LightName::BRAKE_LIGHTS);
  LightName_all_enum_values.insert(LightName::REAR_REVERSING_LIGHTS);
  LightName_all_enum_values.insert(LightName::SIDE_MARKER_LIGHTS);
  LightName_all_enum_values.insert(LightName::LEFT_TURN_LIGHTS);
  LightName_all_enum_values.insert(LightName::RIGHT_TURN_LIGHTS);
  LightName_all_enum_values.insert(LightName::HAZARD_LIGHTS);
  LightName_all_enum_values.insert(LightName::REAR_CARGO_LIGHTS);
  LightName_all_enum_values.insert(LightName::REAR_TRUCK_BED_LIGHTS);
  LightName_all_enum_values.insert(LightName::REAR_TRAILER_LIGHTS);
  LightName_all_enum_values.insert(LightName::LEFT_SPOT_LIGHTS);
  LightName_all_enum_values.insert(LightName::RIGHT_SPOT_LIGHTS);
  LightName_all_enum_values.insert(LightName::LEFT_PUDDLE_LIGHTS);
  LightName_all_enum_values.insert(LightName::RIGHT_PUDDLE_LIGHTS);
  LightName_all_enum_values.insert(LightName::AMBIENT_LIGHTS);
  LightName_all_enum_values.insert(LightName::OVERHEAD_LIGHTS);
  LightName_all_enum_values.insert(LightName::READING_LIGHTS);
  LightName_all_enum_values.insert(LightName::TRUNK_LIGHTS);
  LightName_all_enum_values.insert(LightName::EXTERIOR_FRONT_LIGHTS);
  LightName_all_enum_values.insert(LightName::EXTERIOR_REAR_LIGHTS);
  LightName_all_enum_values.insert(LightName::EXTERIOR_LEFT_LIGHTS);
  LightName_all_enum_values.insert(LightName::EXTERIOR_RIGHT_LIGHTS);
  LightName_all_enum_values.insert(LightName::EXTERIOR_ALL_LIGHTS);

  std::set<LightStatus::eType> LightStatus_all_enum_values;
  LightStatus_all_enum_values.insert(LightStatus::ON);
  LightStatus_all_enum_values.insert(LightStatus::OFF);
  LightStatus_all_enum_values.insert(LightStatus::RAMP_UP);
  LightStatus_all_enum_values.insert(LightStatus::RAMP_DOWN);
  LightStatus_all_enum_values.insert(LightStatus::UNKNOWN);
  LightStatus_all_enum_values.insert(LightStatus::INVALID);

  // Struct member id.
  //
  // The name of a light or a group of lights. 
  std::shared_ptr<ISchemaItem> id_SchemaItem = TEnumSchemaItem<LightName::eType>::create(LightName_all_enum_values, TSchemaItemParameter<LightName::eType>());

  // Struct member status.
  std::shared_ptr<ISchemaItem> status_SchemaItem = TEnumSchemaItem<LightStatus::eType>::create(LightStatus_all_enum_values, TSchemaItemParameter<LightStatus::eType>());

  // Struct member density.
  std::shared_ptr<ISchemaItem> density_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(1.0), TSchemaItemParameter<double>());

  // Struct member color.
  std::shared_ptr<ISchemaItem> color_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::RGBColor);CObjectSchemaItem::Members schema_members;

  schema_members["id"] = CObjectSchemaItem::SMember(id_SchemaItem, true, "5.0.0", "", false, false);
  schema_members["status"] = CObjectSchemaItem::SMember(status_SchemaItem, true, "5.0.0", "", false, false);
  schema_members["density"] = CObjectSchemaItem::SMember(density_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["color"] = CObjectSchemaItem::SMember(color_SchemaItem, false, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_LightControlData(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member lightState.
  //
  // An array of LightNames and their current or desired status. No change to the status of the LightNames that are not listed in the array.
  std::shared_ptr<ISchemaItem> lightState_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::LightState), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["lightState"] = CObjectSchemaItem::SMember(lightState_SchemaItem, true, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_HMISettingsControlData(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<DisplayMode::eType> DisplayMode_all_enum_values;
  DisplayMode_all_enum_values.insert(DisplayMode::DAY);
  DisplayMode_all_enum_values.insert(DisplayMode::NIGHT);
  DisplayMode_all_enum_values.insert(DisplayMode::AUTO);

  std::set<TemperatureUnit::eType> TemperatureUnit_all_enum_values;
  TemperatureUnit_all_enum_values.insert(TemperatureUnit::FAHRENHEIT);
  TemperatureUnit_all_enum_values.insert(TemperatureUnit::CELSIUS);

  std::set<DistanceUnit::eType> DistanceUnit_all_enum_values;
  DistanceUnit_all_enum_values.insert(DistanceUnit::MILES);
  DistanceUnit_all_enum_values.insert(DistanceUnit::KILOMETERS);

  // Struct member displayMode.
  std::shared_ptr<ISchemaItem> displayMode_SchemaItem = TEnumSchemaItem<DisplayMode::eType>::create(DisplayMode_all_enum_values, TSchemaItemParameter<DisplayMode::eType>());

  // Struct member temperatureUnit.
  std::shared_ptr<ISchemaItem> temperatureUnit_SchemaItem = TEnumSchemaItem<TemperatureUnit::eType>::create(TemperatureUnit_all_enum_values, TSchemaItemParameter<TemperatureUnit::eType>());

  // Struct member distanceUnit.
  std::shared_ptr<ISchemaItem> distanceUnit_SchemaItem = TEnumSchemaItem<DistanceUnit::eType>::create(DistanceUnit_all_enum_values, TSchemaItemParameter<DistanceUnit::eType>());CObjectSchemaItem::Members schema_members;

  schema_members["displayMode"] = CObjectSchemaItem::SMember(displayMode_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["temperatureUnit"] = CObjectSchemaItem::SMember(temperatureUnit_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["distanceUnit"] = CObjectSchemaItem::SMember(distanceUnit_SchemaItem, false, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_HMISettingsControlCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member moduleName.
  //
  // 
  //               The short friendly name of the hmi setting module.
  //               It should not be used to identify a module by mobile application.
  //             
  std::shared_ptr<ISchemaItem> moduleName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100), TSchemaItemParameter<std::string>());

  // Struct member distanceUnitAvailable.
  //
  // Availability of the control of distance unit. 
  std::shared_ptr<ISchemaItem> distanceUnitAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member temperatureUnitAvailable.
  //
  // Availability of the control of temperature unit. 
  std::shared_ptr<ISchemaItem> temperatureUnitAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member displayModeUnitAvailable.
  //
  // Availability of the control of HMI display mode. 
  std::shared_ptr<ISchemaItem> displayModeUnitAvailable_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["moduleName"] = CObjectSchemaItem::SMember(moduleName_SchemaItem, true, "5.0.0", "", false, false);
  schema_members["distanceUnitAvailable"] = CObjectSchemaItem::SMember(distanceUnitAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["temperatureUnitAvailable"] = CObjectSchemaItem::SMember(temperatureUnitAvailable_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["displayModeUnitAvailable"] = CObjectSchemaItem::SMember(displayModeUnitAvailable_SchemaItem, false, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_ModuleData(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<ModuleType::eType> ModuleType_all_enum_values;
  ModuleType_all_enum_values.insert(ModuleType::CLIMATE);
  ModuleType_all_enum_values.insert(ModuleType::RADIO);
  ModuleType_all_enum_values.insert(ModuleType::SEAT);
  ModuleType_all_enum_values.insert(ModuleType::AUDIO);
  ModuleType_all_enum_values.insert(ModuleType::LIGHT);
  ModuleType_all_enum_values.insert(ModuleType::HMI_SETTINGS);

  std::map<ModuleType::eType, std::vector<ElementSignature>> ModuleType_element_signatures;
  ModuleType_element_signatures[ModuleType::SEAT] = std::vector<ElementSignature>();
  ModuleType_element_signatures[ModuleType::AUDIO] = std::vector<ElementSignature>();
  ModuleType_element_signatures[ModuleType::LIGHT] = std::vector<ElementSignature>();
  ModuleType_element_signatures[ModuleType::HMI_SETTINGS] = std::vector<ElementSignature>();
  ModuleType_element_signatures[ModuleType::SEAT].push_back(ElementSignature("5.0.0", "", false));
  ModuleType_element_signatures[ModuleType::AUDIO].push_back(ElementSignature("5.0.0", "", false));
  ModuleType_element_signatures[ModuleType::LIGHT].push_back(ElementSignature("5.0.0", "", false));
  ModuleType_element_signatures[ModuleType::HMI_SETTINGS].push_back(ElementSignature("5.0.0", "", false));

  // Struct member moduleType.
  std::shared_ptr<ISchemaItem> moduleType_SchemaItem = TEnumSchemaItem<ModuleType::eType>::createWithSignatures(ModuleType_all_enum_values, ModuleType_element_signatures, TSchemaItemParameter<ModuleType::eType>());

  // Struct member radioControlData.
  std::shared_ptr<ISchemaItem> radioControlData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::RadioControlData);

  // Struct member climateControlData.
  std::shared_ptr<ISchemaItem> climateControlData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ClimateControlData);

  // Struct member seatControlData.
  std::shared_ptr<ISchemaItem> seatControlData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SeatControlData);

  // Struct member audioControlData.
  std::shared_ptr<ISchemaItem> audioControlData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::AudioControlData);

  // Struct member lightControlData.
  std::shared_ptr<ISchemaItem> lightControlData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::LightControlData);

  // Struct member hmiSettingsControlData.
  std::shared_ptr<ISchemaItem> hmiSettingsControlData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::HMISettingsControlData);CObjectSchemaItem::Members schema_members;

  schema_members["moduleType"] = CObjectSchemaItem::SMember(moduleType_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["radioControlData"] = CObjectSchemaItem::SMember(radioControlData_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["climateControlData"] = CObjectSchemaItem::SMember(climateControlData_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["seatControlData"] = CObjectSchemaItem::SMember(seatControlData_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["audioControlData"] = CObjectSchemaItem::SMember(audioControlData_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["lightControlData"] = CObjectSchemaItem::SMember(lightControlData_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["hmiSettingsControlData"] = CObjectSchemaItem::SMember(hmiSettingsControlData_SchemaItem, false, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_RemoteControlCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member climateControlCapabilities.
  //
  // If included, the platform supports RC climate controls. For this baseline version, maxsize=1. i.e. only one climate control module is supported.
  std::shared_ptr<ISchemaItem> climateControlCapabilities_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ClimateControlCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member radioControlCapabilities.
  //
  // If included, the platform supports RC radio controls.For this baseline version, maxsize=1. i.e. only one radio control module is supported.
  std::shared_ptr<ISchemaItem> radioControlCapabilities_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::RadioControlCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member buttonCapabilities.
  //
  // If included, the platform supports RC button controls with the included button names.
  std::shared_ptr<ISchemaItem> buttonCapabilities_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::ButtonCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member audioControlCapabilities.
  //
  // If included, the platform supports audio controls.
  std::shared_ptr<ISchemaItem> audioControlCapabilities_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::AudioControlCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));

  // Struct member hmiSettingsControlCapabilities.
  //
  // If included, the platform supports hmi setting controls.
  std::shared_ptr<ISchemaItem> hmiSettingsControlCapabilities_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::HMISettingsControlCapabilities);

  // Struct member lightControlCapabilities.
  //
  // If included, the platform supports light controls.
  std::shared_ptr<ISchemaItem> lightControlCapabilities_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::LightControlCapabilities);

  // Struct member seatControlCapabilities.
  //
  // If included, the platform supports seat controls.
  std::shared_ptr<ISchemaItem> seatControlCapabilities_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SeatControlCapabilities), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(100));CObjectSchemaItem::Members schema_members;

  schema_members["climateControlCapabilities"] = CObjectSchemaItem::SMember(climateControlCapabilities_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["radioControlCapabilities"] = CObjectSchemaItem::SMember(radioControlCapabilities_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["buttonCapabilities"] = CObjectSchemaItem::SMember(buttonCapabilities_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["audioControlCapabilities"] = CObjectSchemaItem::SMember(audioControlCapabilities_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["hmiSettingsControlCapabilities"] = CObjectSchemaItem::SMember(hmiSettingsControlCapabilities_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["lightControlCapabilities"] = CObjectSchemaItem::SMember(lightControlCapabilities_SchemaItem, false, "5.0.0", "", false, false);
  schema_members["seatControlCapabilities"] = CObjectSchemaItem::SMember(seatControlCapabilities_SchemaItem, false, "5.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_MetadataTags(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<MetadataType::eType> MetadataType_all_enum_values;
  MetadataType_all_enum_values.insert(MetadataType::mediaTitle);
  MetadataType_all_enum_values.insert(MetadataType::mediaArtist);
  MetadataType_all_enum_values.insert(MetadataType::mediaAlbum);
  MetadataType_all_enum_values.insert(MetadataType::mediaYear);
  MetadataType_all_enum_values.insert(MetadataType::mediaGenre);
  MetadataType_all_enum_values.insert(MetadataType::mediaStation);
  MetadataType_all_enum_values.insert(MetadataType::rating);
  MetadataType_all_enum_values.insert(MetadataType::currentTemperature);
  MetadataType_all_enum_values.insert(MetadataType::maximumTemperature);
  MetadataType_all_enum_values.insert(MetadataType::minimumTemperature);
  MetadataType_all_enum_values.insert(MetadataType::weatherTerm);
  MetadataType_all_enum_values.insert(MetadataType::humidity);

  // Struct member mainField1.
  //
  // The type of data contained in the "mainField1" text field.
  std::shared_ptr<ISchemaItem> mainField1_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<MetadataType::eType>::create(MetadataType_all_enum_values, TSchemaItemParameter<MetadataType::eType>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(5));

  // Struct member mainField2.
  //
  // The type of data contained in the "mainField2" text field.
  std::shared_ptr<ISchemaItem> mainField2_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<MetadataType::eType>::create(MetadataType_all_enum_values, TSchemaItemParameter<MetadataType::eType>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(5));

  // Struct member mainField3.
  //
  // The type of data contained in the "mainField3" text field.
  std::shared_ptr<ISchemaItem> mainField3_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<MetadataType::eType>::create(MetadataType_all_enum_values, TSchemaItemParameter<MetadataType::eType>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(5));

  // Struct member mainField4.
  //
  // The type of data contained in the "mainField4" text field.
  std::shared_ptr<ISchemaItem> mainField4_SchemaItem = CArraySchemaItem::create(TEnumSchemaItem<MetadataType::eType>::create(MetadataType_all_enum_values, TSchemaItemParameter<MetadataType::eType>()), TSchemaItemParameter<size_t>(0), TSchemaItemParameter<size_t>(5));CObjectSchemaItem::Members schema_members;

  schema_members["mainField1"] = CObjectSchemaItem::SMember(mainField1_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["mainField2"] = CObjectSchemaItem::SMember(mainField2_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["mainField3"] = CObjectSchemaItem::SMember(mainField3_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["mainField4"] = CObjectSchemaItem::SMember(mainField4_SchemaItem, false, "4.5.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_Rectangle(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member x.
  //
  // The upper left X-coordinate of the rectangle
  std::shared_ptr<ISchemaItem> x_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());

  // Struct member y.
  //
  // The upper left Y-coordinate of the rectangle
  std::shared_ptr<ISchemaItem> y_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());

  // Struct member width.
  //
  // The width of the rectangle
  std::shared_ptr<ISchemaItem> width_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());

  // Struct member height.
  //
  // The height of the rectangle
  std::shared_ptr<ISchemaItem> height_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());CObjectSchemaItem::Members schema_members;

  schema_members["x"] = CObjectSchemaItem::SMember(x_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["y"] = CObjectSchemaItem::SMember(y_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["width"] = CObjectSchemaItem::SMember(width_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["height"] = CObjectSchemaItem::SMember(height_SchemaItem, true, "4.5.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_HapticRect(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member id.
  //
  // A user control spatial identifier
  std::shared_ptr<ISchemaItem> id_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(2000000000), TSchemaItemParameter<int32_t>());

  // Struct member rect.
  //
  // The position of the haptic rectangle to be highlighted. The center of this rectangle will be "touched" when a press occurs.
  std::shared_ptr<ISchemaItem> rect_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Rectangle);CObjectSchemaItem::Members schema_members;

  schema_members["id"] = CObjectSchemaItem::SMember(id_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["rect"] = CObjectSchemaItem::SMember(rect_SchemaItem, true, "4.5.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_MediaServiceManifest(
    const TStructsSchemaItems &struct_schema_items) {
  CObjectSchemaItem::Members schema_members;

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_MediaServiceData(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<MediaType::eType> MediaType_all_enum_values;
  MediaType_all_enum_values.insert(MediaType::MUSIC);
  MediaType_all_enum_values.insert(MediaType::PODCAST);
  MediaType_all_enum_values.insert(MediaType::AUDIOBOOK);
  MediaType_all_enum_values.insert(MediaType::OTHER);

  // Struct member mediaType.
  //
  // The type of the currently playing or paused track.
  std::shared_ptr<ISchemaItem> mediaType_SchemaItem = TEnumSchemaItem<MediaType::eType>::create(MediaType_all_enum_values, TSchemaItemParameter<MediaType::eType>());

  // Struct member mediaTitle.
  //
  // 
  //                 Music: The name of the current track
  //                 Podcast: The name of the current episode
  //                 Audiobook: The name of the current chapter
  //             
  std::shared_ptr<ISchemaItem> mediaTitle_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member mediaArtist.
  //
  // 
  //                 Music: The name of the current album artist
  //                 Podcast: The provider of the podcast (hosts, network, company)
  //                 Audiobook: The book author's name
  //             
  std::shared_ptr<ISchemaItem> mediaArtist_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member mediaAlbum.
  //
  // 
  //                 Music: The name of the current album
  //                 Podcast: The name of the current podcast show
  //                 Audiobook: The name of the current book
  //             
  std::shared_ptr<ISchemaItem> mediaAlbum_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member playlistName.
  //
  // 
  //                 Music: The name of the playlist or radio station, if the user is playing from a playlist, otherwise, Null
  //                 Podcast: The name of the playlist, if the user is playing from a playlist, otherwise, Null
  //                 Audiobook: Likely not applicable, possibly a collection or "playlist" of books
  //             
  std::shared_ptr<ISchemaItem> playlistName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member isExplicit.
  //
  //  Whether or not the content currently playing (e.g. the track, episode, or book) contains explicit content
  std::shared_ptr<ISchemaItem> isExplicit_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member trackPlaybackProgress.
  //
  // 
  //                 Music: The current progress of the track in seconds
  //                 Podcast: The current progress of the episode in seconds
  //                 Audiobook: The current progress of the current segment (e.g. the chapter) in seconds
  //             
  std::shared_ptr<ISchemaItem> trackPlaybackProgress_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member trackPlaybackDuration.
  //
  // 
  //                 Music: The total duration of the track in seconds
  //                 Podcast: The total duration of the episode in seconds
  //                 Audiobook: The total duration of the current segment (e.g. the chapter) in seconds
  //             
  std::shared_ptr<ISchemaItem> trackPlaybackDuration_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member queuePlaybackProgress.
  //
  // 
  //                 Music: The current progress of the playback queue in seconds
  //                 Podcast: The current progress of the playback queue in seconds
  //                 Audiobook: The current progress of the playback queue (e.g. the book) in seconds
  //             
  std::shared_ptr<ISchemaItem> queuePlaybackProgress_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member queuePlaybackDuration.
  //
  // 
  //                 Music: The total duration of the playback queue in seconds
  //                 Podcast: The total duration of the playback queue in seconds
  //                 Audiobook: The total duration of the playback queue (e.g. the book) in seconds
  //             
  std::shared_ptr<ISchemaItem> queuePlaybackDuration_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member queueCurrentTrackNumber.
  //
  // 
  //                 Music: The current number (1 based) of the track in the playback queue
  //                 Podcast: The current number (1 based) of the episode in the playback queue
  //                 Audiobook: The current number (1 based) of the episode in the playback queue (e.g. the chapter number in the book)
  //             
  std::shared_ptr<ISchemaItem> queueCurrentTrackNumber_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member queueTotalTrackCount.
  //
  // 
  //                 Music: The total number of tracks in the playback queue
  //                 Podcast: The total number of episodes in the playback queue
  //                 Audiobook: The total number of sections in the playback queue (e.g. the number of chapters in the book)
  //             
  std::shared_ptr<ISchemaItem> queueTotalTrackCount_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member mediaImage.
  //
  // 
  //               Music: The album art of the current track
  //               Podcast: The podcast or chapter artwork of the current podcast episode
  //               Audiobook: The book or chapter artwork of the current audiobook
  //           
  std::shared_ptr<ISchemaItem> mediaImage_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Image);CObjectSchemaItem::Members schema_members;

  schema_members["mediaType"] = CObjectSchemaItem::SMember(mediaType_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["mediaTitle"] = CObjectSchemaItem::SMember(mediaTitle_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["mediaArtist"] = CObjectSchemaItem::SMember(mediaArtist_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["mediaAlbum"] = CObjectSchemaItem::SMember(mediaAlbum_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["playlistName"] = CObjectSchemaItem::SMember(playlistName_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["isExplicit"] = CObjectSchemaItem::SMember(isExplicit_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["trackPlaybackProgress"] = CObjectSchemaItem::SMember(trackPlaybackProgress_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["trackPlaybackDuration"] = CObjectSchemaItem::SMember(trackPlaybackDuration_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["queuePlaybackProgress"] = CObjectSchemaItem::SMember(queuePlaybackProgress_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["queuePlaybackDuration"] = CObjectSchemaItem::SMember(queuePlaybackDuration_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["queueCurrentTrackNumber"] = CObjectSchemaItem::SMember(queueCurrentTrackNumber_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["queueTotalTrackCount"] = CObjectSchemaItem::SMember(queueTotalTrackCount_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["mediaImage"] = CObjectSchemaItem::SMember(mediaImage_SchemaItem, false, "6.0.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_WeatherServiceManifest(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member currentForecastSupported.
  std::shared_ptr<ISchemaItem> currentForecastSupported_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member maxMultidayForecastAmount.
  std::shared_ptr<ISchemaItem> maxMultidayForecastAmount_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member maxHourlyForecastAmount.
  std::shared_ptr<ISchemaItem> maxHourlyForecastAmount_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member maxMinutelyForecastAmount.
  std::shared_ptr<ISchemaItem> maxMinutelyForecastAmount_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member weatherForLocationSupported.
  std::shared_ptr<ISchemaItem> weatherForLocationSupported_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["currentForecastSupported"] = CObjectSchemaItem::SMember(currentForecastSupported_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["maxMultidayForecastAmount"] = CObjectSchemaItem::SMember(maxMultidayForecastAmount_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["maxHourlyForecastAmount"] = CObjectSchemaItem::SMember(maxHourlyForecastAmount_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["maxMinutelyForecastAmount"] = CObjectSchemaItem::SMember(maxMinutelyForecastAmount_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["weatherForLocationSupported"] = CObjectSchemaItem::SMember(weatherForLocationSupported_SchemaItem, false, "5.1.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_WeatherAlert(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member title.
  std::shared_ptr<ISchemaItem> title_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member summary.
  std::shared_ptr<ISchemaItem> summary_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member expires.
  std::shared_ptr<ISchemaItem> expires_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::DateTime);

  // Struct member regions.
  std::shared_ptr<ISchemaItem> regions_SchemaItem = CArraySchemaItem::create(CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>()), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(99));

  // Struct member severity.
  std::shared_ptr<ISchemaItem> severity_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member timeIssued.
  std::shared_ptr<ISchemaItem> timeIssued_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::DateTime);CObjectSchemaItem::Members schema_members;

  schema_members["title"] = CObjectSchemaItem::SMember(title_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["summary"] = CObjectSchemaItem::SMember(summary_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["expires"] = CObjectSchemaItem::SMember(expires_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["regions"] = CObjectSchemaItem::SMember(regions_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["severity"] = CObjectSchemaItem::SMember(severity_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["timeIssued"] = CObjectSchemaItem::SMember(timeIssued_SchemaItem, false, "5.1.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_WeatherData(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member currentTemperature.
  std::shared_ptr<ISchemaItem> currentTemperature_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Temperature);

  // Struct member temperatureHigh.
  std::shared_ptr<ISchemaItem> temperatureHigh_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Temperature);

  // Struct member temperatureLow.
  std::shared_ptr<ISchemaItem> temperatureLow_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Temperature);

  // Struct member apparentTemperature.
  std::shared_ptr<ISchemaItem> apparentTemperature_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Temperature);

  // Struct member apparentTemperatureHigh.
  std::shared_ptr<ISchemaItem> apparentTemperatureHigh_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Temperature);

  // Struct member apparentTemperatureLow.
  std::shared_ptr<ISchemaItem> apparentTemperatureLow_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Temperature);

  // Struct member weatherSummary.
  std::shared_ptr<ISchemaItem> weatherSummary_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member time.
  std::shared_ptr<ISchemaItem> time_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::DateTime);

  // Struct member humidity.
  //
  //  0 to 1, percentage humidity 
  std::shared_ptr<ISchemaItem> humidity_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(1.0), TSchemaItemParameter<double>());

  // Struct member cloudCover.
  //
  //  0 to 1, percentage cloud cover 
  std::shared_ptr<ISchemaItem> cloudCover_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(1.0), TSchemaItemParameter<double>());

  // Struct member moonPhase.
  //
  //  0 to 1, percentage of the moon seen, e.g. 0 = no moon, 0.25 = quarter moon 
  std::shared_ptr<ISchemaItem> moonPhase_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(1.0), TSchemaItemParameter<double>());

  // Struct member windBearing.
  //
  //  In degrees, true north at 0 degrees 
  std::shared_ptr<ISchemaItem> windBearing_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member windGust.
  //
  //  km/hr 
  std::shared_ptr<ISchemaItem> windGust_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());

  // Struct member windSpeed.
  //
  //  km/hr 
  std::shared_ptr<ISchemaItem> windSpeed_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());

  // Struct member nearestStormBearing.
  //
  //  In degrees, true north at 0 degrees 
  std::shared_ptr<ISchemaItem> nearestStormBearing_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member nearestStormDistance.
  //
  //  In km 
  std::shared_ptr<ISchemaItem> nearestStormDistance_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>());

  // Struct member precipAccumulation.
  //
  //  cm 
  std::shared_ptr<ISchemaItem> precipAccumulation_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());

  // Struct member precipIntensity.
  //
  //  cm of water per hour 
  std::shared_ptr<ISchemaItem> precipIntensity_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());

  // Struct member precipProbability.
  //
  //  0 to 1, percentage chance 
  std::shared_ptr<ISchemaItem> precipProbability_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(0.0), TSchemaItemParameter<double>(1.0), TSchemaItemParameter<double>());

  // Struct member precipType.
  //
  //  e.g. "rain", "snow", "sleet", "hail" 
  std::shared_ptr<ISchemaItem> precipType_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member visibility.
  //
  //  In km 
  std::shared_ptr<ISchemaItem> visibility_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());

  // Struct member weatherIcon.
  std::shared_ptr<ISchemaItem> weatherIcon_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Image);CObjectSchemaItem::Members schema_members;

  schema_members["currentTemperature"] = CObjectSchemaItem::SMember(currentTemperature_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["temperatureHigh"] = CObjectSchemaItem::SMember(temperatureHigh_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["temperatureLow"] = CObjectSchemaItem::SMember(temperatureLow_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["apparentTemperature"] = CObjectSchemaItem::SMember(apparentTemperature_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["apparentTemperatureHigh"] = CObjectSchemaItem::SMember(apparentTemperatureHigh_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["apparentTemperatureLow"] = CObjectSchemaItem::SMember(apparentTemperatureLow_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["weatherSummary"] = CObjectSchemaItem::SMember(weatherSummary_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["time"] = CObjectSchemaItem::SMember(time_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["humidity"] = CObjectSchemaItem::SMember(humidity_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["cloudCover"] = CObjectSchemaItem::SMember(cloudCover_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["moonPhase"] = CObjectSchemaItem::SMember(moonPhase_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["windBearing"] = CObjectSchemaItem::SMember(windBearing_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["windGust"] = CObjectSchemaItem::SMember(windGust_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["windSpeed"] = CObjectSchemaItem::SMember(windSpeed_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["nearestStormBearing"] = CObjectSchemaItem::SMember(nearestStormBearing_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["nearestStormDistance"] = CObjectSchemaItem::SMember(nearestStormDistance_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["precipAccumulation"] = CObjectSchemaItem::SMember(precipAccumulation_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["precipIntensity"] = CObjectSchemaItem::SMember(precipIntensity_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["precipProbability"] = CObjectSchemaItem::SMember(precipProbability_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["precipType"] = CObjectSchemaItem::SMember(precipType_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["visibility"] = CObjectSchemaItem::SMember(visibility_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["weatherIcon"] = CObjectSchemaItem::SMember(weatherIcon_SchemaItem, false, "5.1.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_WeatherServiceData(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member location.
  std::shared_ptr<ISchemaItem> location_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::LocationDetails);

  // Struct member currentForecast.
  std::shared_ptr<ISchemaItem> currentForecast_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::WeatherData);

  // Struct member minuteForecast.
  std::shared_ptr<ISchemaItem> minuteForecast_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::WeatherData), TSchemaItemParameter<size_t>(15), TSchemaItemParameter<size_t>(60));

  // Struct member hourlyForecast.
  std::shared_ptr<ISchemaItem> hourlyForecast_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::WeatherData), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(96));

  // Struct member multidayForecast.
  std::shared_ptr<ISchemaItem> multidayForecast_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::WeatherData), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(30));

  // Struct member alerts.
  //
  //  This array should be ordered with the first object being the current day
  std::shared_ptr<ISchemaItem> alerts_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::WeatherAlert), TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(10));CObjectSchemaItem::Members schema_members;

  schema_members["location"] = CObjectSchemaItem::SMember(location_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["currentForecast"] = CObjectSchemaItem::SMember(currentForecast_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["minuteForecast"] = CObjectSchemaItem::SMember(minuteForecast_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["hourlyForecast"] = CObjectSchemaItem::SMember(hourlyForecast_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["multidayForecast"] = CObjectSchemaItem::SMember(multidayForecast_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["alerts"] = CObjectSchemaItem::SMember(alerts_SchemaItem, false, "5.1.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_NavigationServiceManifest(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member acceptsWayPoints.
  //
  //  Informs the subscriber if this service can actually accept way points. 
  std::shared_ptr<ISchemaItem> acceptsWayPoints_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["acceptsWayPoints"] = CObjectSchemaItem::SMember(acceptsWayPoints_SchemaItem, false, "5.1.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_NavigationInstruction(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<NavigationAction::eType> NavigationAction_all_enum_values;
  NavigationAction_all_enum_values.insert(NavigationAction::TURN);
  NavigationAction_all_enum_values.insert(NavigationAction::EXIT);
  NavigationAction_all_enum_values.insert(NavigationAction::STAY);
  NavigationAction_all_enum_values.insert(NavigationAction::MERGE);
  NavigationAction_all_enum_values.insert(NavigationAction::FERRY);
  NavigationAction_all_enum_values.insert(NavigationAction::CAR_SHUTTLE_TRAIN);
  NavigationAction_all_enum_values.insert(NavigationAction::WAYPOINT);

  std::set<NavigationJunction::eType> NavigationJunction_all_enum_values;
  NavigationJunction_all_enum_values.insert(NavigationJunction::REGULAR);
  NavigationJunction_all_enum_values.insert(NavigationJunction::BIFURCATION);
  NavigationJunction_all_enum_values.insert(NavigationJunction::MULTI_CARRIAGEWAY);
  NavigationJunction_all_enum_values.insert(NavigationJunction::ROUNDABOUT);
  NavigationJunction_all_enum_values.insert(NavigationJunction::TRAVERSABLE_ROUNDABOUT);
  NavigationJunction_all_enum_values.insert(NavigationJunction::JUGHANDLE);
  NavigationJunction_all_enum_values.insert(NavigationJunction::ALL_WAY_YIELD);
  NavigationJunction_all_enum_values.insert(NavigationJunction::TURN_AROUND);

  std::set<Direction::eType> Direction_all_enum_values;
  Direction_all_enum_values.insert(Direction::LEFT);
  Direction_all_enum_values.insert(Direction::RIGHT);

  // Struct member locationDetails.
  std::shared_ptr<ISchemaItem> locationDetails_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::LocationDetails);

  // Struct member action.
  std::shared_ptr<ISchemaItem> action_SchemaItem = TEnumSchemaItem<NavigationAction::eType>::create(NavigationAction_all_enum_values, TSchemaItemParameter<NavigationAction::eType>());

  // Struct member eta.
  std::shared_ptr<ISchemaItem> eta_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::DateTime);

  // Struct member bearing.
  //
  //  The angle at which this instruction takes place. For example, 0 would mean straight, less than 45 is bearing right, greater than 135 is sharp right, between 45 and 135 is a regular right, and 180 is a U-Turn, etc. 
  std::shared_ptr<ISchemaItem> bearing_SchemaItem = TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(0), TSchemaItemParameter<int32_t>(359), TSchemaItemParameter<int32_t>());

  // Struct member junctionType.
  std::shared_ptr<ISchemaItem> junctionType_SchemaItem = TEnumSchemaItem<NavigationJunction::eType>::create(NavigationJunction_all_enum_values, TSchemaItemParameter<NavigationJunction::eType>());

  // Struct member drivingSide.
  //
  //  Used to infer which side of the road this instruction takes place. For a U-Turn (action=TURN, bearing=180) this will determine which direction the turn should take place. 
  std::shared_ptr<ISchemaItem> drivingSide_SchemaItem = TEnumSchemaItem<Direction::eType>::create(Direction_all_enum_values, TSchemaItemParameter<Direction::eType>());

  // Struct member details.
  //
  //  This is a string representation of this instruction, used to display instructions to the users. This is not intended to be read aloud to the users, see the param prompt in NavigationServiceData for that. 
  std::shared_ptr<ISchemaItem> details_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member image.
  //
  //  An image representation of this instruction. 
  std::shared_ptr<ISchemaItem> image_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Image);CObjectSchemaItem::Members schema_members;

  schema_members["locationDetails"] = CObjectSchemaItem::SMember(locationDetails_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["action"] = CObjectSchemaItem::SMember(action_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["eta"] = CObjectSchemaItem::SMember(eta_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["bearing"] = CObjectSchemaItem::SMember(bearing_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["junctionType"] = CObjectSchemaItem::SMember(junctionType_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["drivingSide"] = CObjectSchemaItem::SMember(drivingSide_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["details"] = CObjectSchemaItem::SMember(details_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["image"] = CObjectSchemaItem::SMember(image_SchemaItem, false, "5.1.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_NavigationServiceData(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member timeStamp.
  //
  //  This is the timestamp of when the data was generated. This is to ensure any time or distance given in the data can accurately be adjusted if necessary. 
  std::shared_ptr<ISchemaItem> timeStamp_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::DateTime);

  // Struct member origin.
  std::shared_ptr<ISchemaItem> origin_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::LocationDetails);

  // Struct member destination.
  std::shared_ptr<ISchemaItem> destination_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::LocationDetails);

  // Struct member destinationETA.
  std::shared_ptr<ISchemaItem> destinationETA_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::DateTime);

  // Struct member instructions.
  //
  //  This array should be ordered with all remaining instructions. The start of this array should always contain the next instruction.
  std::shared_ptr<ISchemaItem> instructions_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::NavigationInstruction), TSchemaItemParameter<size_t>(), TSchemaItemParameter<size_t>());

  // Struct member nextInstructionETA.
  std::shared_ptr<ISchemaItem> nextInstructionETA_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::DateTime);

  // Struct member nextInstructionDistance.
  //
  // The distance to this instruction from current location. This should only be updated ever .1 unit of distance. For more accuracy the consumer can use the GPS location of itself and the next instruction. 
  std::shared_ptr<ISchemaItem> nextInstructionDistance_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());

  // Struct member nextInstructionDistanceScale.
  //
  // Distance till next maneuver (starting from) from previous maneuver.
  std::shared_ptr<ISchemaItem> nextInstructionDistanceScale_SchemaItem = TNumberSchemaItem<double>::create(TSchemaItemParameter<double>(), TSchemaItemParameter<double>(), TSchemaItemParameter<double>());

  // Struct member prompt.
  //
  // This is a prompt message that should be conveyed to the user through either display or voice (TTS). This param will change often as it should represent the following: approaching instruction, post instruction, alerts that affect the current navigation session, etc.
  std::shared_ptr<ISchemaItem> prompt_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());CObjectSchemaItem::Members schema_members;

  schema_members["timeStamp"] = CObjectSchemaItem::SMember(timeStamp_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["origin"] = CObjectSchemaItem::SMember(origin_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["destination"] = CObjectSchemaItem::SMember(destination_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["destinationETA"] = CObjectSchemaItem::SMember(destinationETA_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["instructions"] = CObjectSchemaItem::SMember(instructions_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["nextInstructionETA"] = CObjectSchemaItem::SMember(nextInstructionETA_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["nextInstructionDistance"] = CObjectSchemaItem::SMember(nextInstructionDistance_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["nextInstructionDistanceScale"] = CObjectSchemaItem::SMember(nextInstructionDistanceScale_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["prompt"] = CObjectSchemaItem::SMember(prompt_SchemaItem, false, "5.1.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_AppServiceManifest(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member serviceName.
  //
  //  Unique name of this service 
  std::shared_ptr<ISchemaItem> serviceName_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member serviceType.
  //
  //  The type of service that is to be offered by this app. See AppServiceType for known enum equivalent types. Parameter is a string to allow for new service types to be used by apps on older versions of SDL Core. 
  std::shared_ptr<ISchemaItem> serviceType_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member serviceIcon.
  //
  //  The icon to be associated with this service. Most likely the same as the appIcon.
  std::shared_ptr<ISchemaItem> serviceIcon_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::Image);

  // Struct member allowAppConsumers.
  //
  //  If true, app service consumers beyond the IVI system will be able to access this service. If false, only the IVI system will be able consume the service. If not provided, it is assumed to be false. 
  std::shared_ptr<ISchemaItem> allowAppConsumers_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>(false));

  // Struct member rpcSpecVersion.
  //
  //  This is the max RPC Spec version the app service understands. This is important during the RPC passthrough functionality. If not included, it is assumed the max version of the module is acceptable. 
  std::shared_ptr<ISchemaItem> rpcSpecVersion_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::SyncMsgVersion);

  // Struct member handledRPCs.
  //
  //  This field contains the Function IDs for the RPCs that this service intends to handle correctly. This means the service will provide meaningful responses. 
  std::shared_ptr<ISchemaItem> handledRPCs_SchemaItem = CArraySchemaItem::create(TNumberSchemaItem<int32_t>::create(TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>(), TSchemaItemParameter<int32_t>()), TSchemaItemParameter<size_t>(), TSchemaItemParameter<size_t>());

  // Struct member mediaServiceManifest.
  std::shared_ptr<ISchemaItem> mediaServiceManifest_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::MediaServiceManifest);

  // Struct member weatherServiceManifest.
  std::shared_ptr<ISchemaItem> weatherServiceManifest_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::WeatherServiceManifest);

  // Struct member navigationServiceManifest.
  std::shared_ptr<ISchemaItem> navigationServiceManifest_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::NavigationServiceManifest);CObjectSchemaItem::Members schema_members;

  schema_members["serviceName"] = CObjectSchemaItem::SMember(serviceName_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["serviceType"] = CObjectSchemaItem::SMember(serviceType_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["serviceIcon"] = CObjectSchemaItem::SMember(serviceIcon_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["allowAppConsumers"] = CObjectSchemaItem::SMember(allowAppConsumers_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["rpcSpecVersion"] = CObjectSchemaItem::SMember(rpcSpecVersion_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["handledRPCs"] = CObjectSchemaItem::SMember(handledRPCs_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["mediaServiceManifest"] = CObjectSchemaItem::SMember(mediaServiceManifest_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["weatherServiceManifest"] = CObjectSchemaItem::SMember(weatherServiceManifest_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["navigationServiceManifest"] = CObjectSchemaItem::SMember(navigationServiceManifest_SchemaItem, false, "5.1.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_AppServiceRecord(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member serviceID.
  //
  //  A unique ID tied to this specific service record. The ID is supplied by the module that services publish themselves. 
  std::shared_ptr<ISchemaItem> serviceID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member serviceManifest.
  //
  //  Manifest for the service that this record is for.
  std::shared_ptr<ISchemaItem> serviceManifest_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::AppServiceManifest);

  // Struct member servicePublished.
  //
  //  If true, the service is published and available. If false, the service has likely just been unpublished, and should be considered unavailable.
  std::shared_ptr<ISchemaItem> servicePublished_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());

  // Struct member serviceActive.
  //
  //  If true, the service is the active primary service of the supplied service type. It will receive all potential RPCs that are passed through to that service type. If false, it is not the primary service of the supplied type. See servicePublished for its availability. 
  std::shared_ptr<ISchemaItem> serviceActive_SchemaItem = CBoolSchemaItem::create(TSchemaItemParameter<bool>());CObjectSchemaItem::Members schema_members;

  schema_members["serviceID"] = CObjectSchemaItem::SMember(serviceID_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["serviceManifest"] = CObjectSchemaItem::SMember(serviceManifest_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["servicePublished"] = CObjectSchemaItem::SMember(servicePublished_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["serviceActive"] = CObjectSchemaItem::SMember(serviceActive_SchemaItem, true, "5.1.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_AppServiceData(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member serviceType.
  //
  // The type of service that is to be offered by this app. See AppServiceType for known enum equivalent types. Parameter is a string to allow for new service types to be used by apps on older versions of SDL Core.
  std::shared_ptr<ISchemaItem> serviceType_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member serviceID.
  std::shared_ptr<ISchemaItem> serviceID_SchemaItem = CStringSchemaItem::create(TSchemaItemParameter<size_t>(1), TSchemaItemParameter<size_t>(), TSchemaItemParameter<std::string>());

  // Struct member mediaServiceData.
  std::shared_ptr<ISchemaItem> mediaServiceData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::MediaServiceData);

  // Struct member weatherServiceData.
  std::shared_ptr<ISchemaItem> weatherServiceData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::WeatherServiceData);

  // Struct member navigationServiceData.
  std::shared_ptr<ISchemaItem> navigationServiceData_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::NavigationServiceData);CObjectSchemaItem::Members schema_members;

  schema_members["serviceType"] = CObjectSchemaItem::SMember(serviceType_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["serviceID"] = CObjectSchemaItem::SMember(serviceID_SchemaItem, true, "5.1.0", "", false, false);
  schema_members["mediaServiceData"] = CObjectSchemaItem::SMember(mediaServiceData_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["weatherServiceData"] = CObjectSchemaItem::SMember(weatherServiceData_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["navigationServiceData"] = CObjectSchemaItem::SMember(navigationServiceData_SchemaItem, false, "5.1.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_AppServiceCapability(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<ServiceUpdateReason::eType> ServiceUpdateReason_all_enum_values;
  ServiceUpdateReason_all_enum_values.insert(ServiceUpdateReason::PUBLISHED);
  ServiceUpdateReason_all_enum_values.insert(ServiceUpdateReason::REMOVED);
  ServiceUpdateReason_all_enum_values.insert(ServiceUpdateReason::ACTIVATED);
  ServiceUpdateReason_all_enum_values.insert(ServiceUpdateReason::DEACTIVATED);
  ServiceUpdateReason_all_enum_values.insert(ServiceUpdateReason::MANIFEST_UPDATE);

  // Struct member updateReason.
  //
  //  Only included in OnSystemCapabilityUpdated. Update reason for service record.
  std::shared_ptr<ISchemaItem> updateReason_SchemaItem = TEnumSchemaItem<ServiceUpdateReason::eType>::create(ServiceUpdateReason_all_enum_values, TSchemaItemParameter<ServiceUpdateReason::eType>());

  // Struct member updatedAppServiceRecord.
  //
  // Service record for a specific app service provider
  std::shared_ptr<ISchemaItem> updatedAppServiceRecord_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::AppServiceRecord);CObjectSchemaItem::Members schema_members;

  schema_members["updateReason"] = CObjectSchemaItem::SMember(updateReason_SchemaItem, false, "5.1.0", "", false, false);
  schema_members["updatedAppServiceRecord"] = CObjectSchemaItem::SMember(updatedAppServiceRecord_SchemaItem, true, "5.1.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_AppServicesCapabilities(
    const TStructsSchemaItems &struct_schema_items) {
  // Struct member appServices.
  //
  // An array of currently available services. If this is an update to the capability the affected services will include an update reason in that item
  std::shared_ptr<ISchemaItem> appServices_SchemaItem = CArraySchemaItem::create(ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::AppServiceCapability), TSchemaItemParameter<size_t>(), TSchemaItemParameter<size_t>());CObjectSchemaItem::Members schema_members;

  schema_members["appServices"] = CObjectSchemaItem::SMember(appServices_SchemaItem, false, "5.1.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

std::shared_ptr<ISchemaItem> mobile_apis::MOBILE_API::InitStructSchemaItem_SystemCapability(
    const TStructsSchemaItems &struct_schema_items) {
  std::set<SystemCapabilityType::eType> SystemCapabilityType_all_enum_values;
  SystemCapabilityType_all_enum_values.insert(SystemCapabilityType::NAVIGATION);
  SystemCapabilityType_all_enum_values.insert(SystemCapabilityType::PHONE_CALL);
  SystemCapabilityType_all_enum_values.insert(SystemCapabilityType::VIDEO_STREAMING);
  SystemCapabilityType_all_enum_values.insert(SystemCapabilityType::REMOTE_CONTROL);
  SystemCapabilityType_all_enum_values.insert(SystemCapabilityType::APP_SERVICES);

  std::map<SystemCapabilityType::eType, std::vector<ElementSignature>> SystemCapabilityType_element_signatures;
  SystemCapabilityType_element_signatures[SystemCapabilityType::APP_SERVICES] = std::vector<ElementSignature>();
  SystemCapabilityType_element_signatures[SystemCapabilityType::APP_SERVICES].push_back(ElementSignature("5.1.0", "", false));

  // Struct member systemCapabilityType.
  //
  // Used as a descriptor of what data to expect in this struct. The corresponding param to this enum should be included and the only other param included.
  std::shared_ptr<ISchemaItem> systemCapabilityType_SchemaItem = TEnumSchemaItem<SystemCapabilityType::eType>::createWithSignatures(SystemCapabilityType_all_enum_values, SystemCapabilityType_element_signatures, TSchemaItemParameter<SystemCapabilityType::eType>());

  // Struct member navigationCapability.
  //
  // Describes extended capabilities for onboard navigation system 
  std::shared_ptr<ISchemaItem> navigationCapability_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::NavigationCapability);

  // Struct member phoneCapability.
  //
  // Describes extended capabilities of the module's phone feature
  std::shared_ptr<ISchemaItem> phoneCapability_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::PhoneCapability);

  // Struct member videoStreamingCapability.
  //
  // Describes extended capabilities of the module's phone feature
  std::shared_ptr<ISchemaItem> videoStreamingCapability_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::VideoStreamingCapability);

  // Struct member remoteControlCapability.
  //
  // Describes extended capabilities of the module's phone feature
  std::shared_ptr<ISchemaItem> remoteControlCapability_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::RemoteControlCapabilities);

  // Struct member appServicesCapabilities.
  //
  // An array of currently available services. If this is an update to the capability the affected services will include an update reason in that item
  std::shared_ptr<ISchemaItem> appServicesCapabilities_SchemaItem = ProvideObjectSchemaItemForStruct(struct_schema_items, StructIdentifiers::AppServicesCapabilities);CObjectSchemaItem::Members schema_members;

  schema_members["systemCapabilityType"] = CObjectSchemaItem::SMember(systemCapabilityType_SchemaItem, true, "4.5.0", "", false, false);
  schema_members["navigationCapability"] = CObjectSchemaItem::SMember(navigationCapability_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["phoneCapability"] = CObjectSchemaItem::SMember(phoneCapability_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["videoStreamingCapability"] = CObjectSchemaItem::SMember(videoStreamingCapability_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["remoteControlCapability"] = CObjectSchemaItem::SMember(remoteControlCapability_SchemaItem, false, "4.5.0", "", false, false);
  schema_members["appServicesCapabilities"] = CObjectSchemaItem::SMember(appServicesCapabilities_SchemaItem, false, "5.1.0", "", false, false);

  return CObjectSchemaItem::create(schema_members);
}

//-------------- String to value enum mapping ----------------

namespace ns_smart_device_link {
namespace ns_smart_objects {

template<>
const EnumConversionHelper<mobile_apis::Result::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::Result::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::Result::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::Result::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::Result::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::Result::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::Result::eType>::cstring_values_[] = {
    "SUCCESS",
    "UNSUPPORTED_REQUEST",
    "UNSUPPORTED_RESOURCE",
    "DISALLOWED",
    "REJECTED",
    "ABORTED",
    "IGNORED",
    "RETRY",
    "IN_USE",
    "VEHICLE_DATA_NOT_AVAILABLE",
    "TIMED_OUT",
    "INVALID_DATA",
    "CHAR_LIMIT_EXCEEDED",
    "INVALID_ID",
    "DUPLICATE_NAME",
    "APPLICATION_NOT_REGISTERED",
    "WRONG_LANGUAGE",
    "OUT_OF_MEMORY",
    "TOO_MANY_PENDING_REQUESTS",
    "TOO_MANY_APPLICATIONS",
    "APPLICATION_REGISTERED_ALREADY",
    "WARNINGS",
    "GENERIC_ERROR",
    "USER_DISALLOWED",
    "TRUNCATED_DATA",
    "UNSUPPORTED_VERSION",
    "VEHICLE_DATA_NOT_ALLOWED",
    "FILE_NOT_FOUND",
    "CANCEL_ROUTE",
    "SAVED",
    "INVALID_CERT",
    "EXPIRED_CERT",
    "RESUME_FAILED",
    "DATA_NOT_AVAILABLE",
    "READ_ONLY",
    "CORRUPTED_DATA"
};

template<>
const mobile_apis::Result::eType
EnumConversionHelper<mobile_apis::Result::eType>::enum_values_[] = {
    mobile_apis::Result::SUCCESS,
    mobile_apis::Result::UNSUPPORTED_REQUEST,
    mobile_apis::Result::UNSUPPORTED_RESOURCE,
    mobile_apis::Result::DISALLOWED,
    mobile_apis::Result::REJECTED,
    mobile_apis::Result::ABORTED,
    mobile_apis::Result::IGNORED,
    mobile_apis::Result::RETRY,
    mobile_apis::Result::IN_USE,
    mobile_apis::Result::VEHICLE_DATA_NOT_AVAILABLE,
    mobile_apis::Result::TIMED_OUT,
    mobile_apis::Result::INVALID_DATA,
    mobile_apis::Result::CHAR_LIMIT_EXCEEDED,
    mobile_apis::Result::INVALID_ID,
    mobile_apis::Result::DUPLICATE_NAME,
    mobile_apis::Result::APPLICATION_NOT_REGISTERED,
    mobile_apis::Result::WRONG_LANGUAGE,
    mobile_apis::Result::OUT_OF_MEMORY,
    mobile_apis::Result::TOO_MANY_PENDING_REQUESTS,
    mobile_apis::Result::TOO_MANY_APPLICATIONS,
    mobile_apis::Result::APPLICATION_REGISTERED_ALREADY,
    mobile_apis::Result::WARNINGS,
    mobile_apis::Result::GENERIC_ERROR,
    mobile_apis::Result::USER_DISALLOWED,
    mobile_apis::Result::TRUNCATED_DATA,
    mobile_apis::Result::UNSUPPORTED_VERSION,
    mobile_apis::Result::VEHICLE_DATA_NOT_ALLOWED,
    mobile_apis::Result::FILE_NOT_FOUND,
    mobile_apis::Result::CANCEL_ROUTE,
    mobile_apis::Result::SAVED,
    mobile_apis::Result::INVALID_CERT,
    mobile_apis::Result::EXPIRED_CERT,
    mobile_apis::Result::RESUME_FAILED,
    mobile_apis::Result::DATA_NOT_AVAILABLE,
    mobile_apis::Result::READ_ONLY,
    mobile_apis::Result::CORRUPTED_DATA
};


template<>
const EnumConversionHelper<mobile_apis::ButtonPressMode::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::ButtonPressMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::ButtonPressMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::ButtonPressMode::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::ButtonPressMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::ButtonPressMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::ButtonPressMode::eType>::cstring_values_[] = {
    "LONG",
    "SHORT"
};

template<>
const mobile_apis::ButtonPressMode::eType
EnumConversionHelper<mobile_apis::ButtonPressMode::eType>::enum_values_[] = {
    mobile_apis::ButtonPressMode::LONG,
    mobile_apis::ButtonPressMode::SHORT
};


template<>
const EnumConversionHelper<mobile_apis::ButtonEventMode::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::ButtonEventMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::ButtonEventMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::ButtonEventMode::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::ButtonEventMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::ButtonEventMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::ButtonEventMode::eType>::cstring_values_[] = {
    "BUTTONUP",
    "BUTTONDOWN"
};

template<>
const mobile_apis::ButtonEventMode::eType
EnumConversionHelper<mobile_apis::ButtonEventMode::eType>::enum_values_[] = {
    mobile_apis::ButtonEventMode::BUTTONUP,
    mobile_apis::ButtonEventMode::BUTTONDOWN
};


template<>
const EnumConversionHelper<mobile_apis::Language::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::Language::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::Language::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::Language::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::Language::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::Language::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::Language::eType>::cstring_values_[] = {
    "EN-US",
    "ES-MX",
    "FR-CA",
    "DE-DE",
    "ES-ES",
    "EN-GB",
    "RU-RU",
    "TR-TR",
    "PL-PL",
    "FR-FR",
    "IT-IT",
    "SV-SE",
    "PT-PT",
    "NL-NL",
    "EN-AU",
    "ZH-CN",
    "ZH-TW",
    "JA-JP",
    "AR-SA",
    "KO-KR",
    "PT-BR",
    "CS-CZ",
    "DA-DK",
    "NO-NO",
    "NL-BE",
    "EL-GR",
    "HU-HU",
    "FI-FI",
    "SK-SK",
    "EN-IN",
    "TH-TH",
    "EN-SA",
    "HE-IL",
    "RO-RO",
    "UK-UA",
    "ID-ID",
    "VI-VN",
    "MS-MY",
    "HI-IN"
};

template<>
const mobile_apis::Language::eType
EnumConversionHelper<mobile_apis::Language::eType>::enum_values_[] = {
    mobile_apis::Language::EN_US,
    mobile_apis::Language::ES_MX,
    mobile_apis::Language::FR_CA,
    mobile_apis::Language::DE_DE,
    mobile_apis::Language::ES_ES,
    mobile_apis::Language::EN_GB,
    mobile_apis::Language::RU_RU,
    mobile_apis::Language::TR_TR,
    mobile_apis::Language::PL_PL,
    mobile_apis::Language::FR_FR,
    mobile_apis::Language::IT_IT,
    mobile_apis::Language::SV_SE,
    mobile_apis::Language::PT_PT,
    mobile_apis::Language::NL_NL,
    mobile_apis::Language::EN_AU,
    mobile_apis::Language::ZH_CN,
    mobile_apis::Language::ZH_TW,
    mobile_apis::Language::JA_JP,
    mobile_apis::Language::AR_SA,
    mobile_apis::Language::KO_KR,
    mobile_apis::Language::PT_BR,
    mobile_apis::Language::CS_CZ,
    mobile_apis::Language::DA_DK,
    mobile_apis::Language::NO_NO,
    mobile_apis::Language::NL_BE,
    mobile_apis::Language::EL_GR,
    mobile_apis::Language::HU_HU,
    mobile_apis::Language::FI_FI,
    mobile_apis::Language::SK_SK,
    mobile_apis::Language::EN_IN,
    mobile_apis::Language::TH_TH,
    mobile_apis::Language::EN_SA,
    mobile_apis::Language::HE_IL,
    mobile_apis::Language::RO_RO,
    mobile_apis::Language::UK_UA,
    mobile_apis::Language::ID_ID,
    mobile_apis::Language::VI_VN,
    mobile_apis::Language::MS_MY,
    mobile_apis::Language::HI_IN
};


template<>
const EnumConversionHelper<mobile_apis::UpdateMode::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::UpdateMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::UpdateMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::UpdateMode::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::UpdateMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::UpdateMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::UpdateMode::eType>::cstring_values_[] = {
    "COUNTUP",
    "COUNTDOWN",
    "PAUSE",
    "RESUME",
    "CLEAR"
};

template<>
const mobile_apis::UpdateMode::eType
EnumConversionHelper<mobile_apis::UpdateMode::eType>::enum_values_[] = {
    mobile_apis::UpdateMode::COUNTUP,
    mobile_apis::UpdateMode::COUNTDOWN,
    mobile_apis::UpdateMode::PAUSE,
    mobile_apis::UpdateMode::RESUME,
    mobile_apis::UpdateMode::CLEAR
};


template<>
const EnumConversionHelper<mobile_apis::TimerMode::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::TimerMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::TimerMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::TimerMode::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::TimerMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::TimerMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::TimerMode::eType>::cstring_values_[] = {
    "UP",
    "DOWN",
    "NONE"
};

template<>
const mobile_apis::TimerMode::eType
EnumConversionHelper<mobile_apis::TimerMode::eType>::enum_values_[] = {
    mobile_apis::TimerMode::UP,
    mobile_apis::TimerMode::DOWN,
    mobile_apis::TimerMode::NONE
};


template<>
const EnumConversionHelper<mobile_apis::InteractionMode::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::InteractionMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::InteractionMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::InteractionMode::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::InteractionMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::InteractionMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::InteractionMode::eType>::cstring_values_[] = {
    "MANUAL_ONLY",
    "VR_ONLY",
    "BOTH"
};

template<>
const mobile_apis::InteractionMode::eType
EnumConversionHelper<mobile_apis::InteractionMode::eType>::enum_values_[] = {
    mobile_apis::InteractionMode::MANUAL_ONLY,
    mobile_apis::InteractionMode::VR_ONLY,
    mobile_apis::InteractionMode::BOTH
};


template<>
const EnumConversionHelper<mobile_apis::LayoutMode::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::LayoutMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::LayoutMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::LayoutMode::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::LayoutMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::LayoutMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::LayoutMode::eType>::cstring_values_[] = {
    "ICON_ONLY",
    "ICON_WITH_SEARCH",
    "LIST_ONLY",
    "LIST_WITH_SEARCH",
    "KEYBOARD"
};

template<>
const mobile_apis::LayoutMode::eType
EnumConversionHelper<mobile_apis::LayoutMode::eType>::enum_values_[] = {
    mobile_apis::LayoutMode::ICON_ONLY,
    mobile_apis::LayoutMode::ICON_WITH_SEARCH,
    mobile_apis::LayoutMode::LIST_ONLY,
    mobile_apis::LayoutMode::LIST_WITH_SEARCH,
    mobile_apis::LayoutMode::KEYBOARD
};


template<>
const EnumConversionHelper<mobile_apis::HMILevel::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::HMILevel::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::HMILevel::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::HMILevel::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::HMILevel::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::HMILevel::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::HMILevel::eType>::cstring_values_[] = {
    "FULL",
    "LIMITED",
    "BACKGROUND",
    "NONE"
};

template<>
const mobile_apis::HMILevel::eType
EnumConversionHelper<mobile_apis::HMILevel::eType>::enum_values_[] = {
    mobile_apis::HMILevel::HMI_FULL,
    mobile_apis::HMILevel::HMI_LIMITED,
    mobile_apis::HMILevel::HMI_BACKGROUND,
    mobile_apis::HMILevel::HMI_NONE
};


template<>
const EnumConversionHelper<mobile_apis::AudioStreamingState::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::AudioStreamingState::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::AudioStreamingState::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::AudioStreamingState::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::AudioStreamingState::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::AudioStreamingState::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::AudioStreamingState::eType>::cstring_values_[] = {
    "AUDIBLE",
    "ATTENUATED",
    "NOT_AUDIBLE"
};

template<>
const mobile_apis::AudioStreamingState::eType
EnumConversionHelper<mobile_apis::AudioStreamingState::eType>::enum_values_[] = {
    mobile_apis::AudioStreamingState::AUDIBLE,
    mobile_apis::AudioStreamingState::ATTENUATED,
    mobile_apis::AudioStreamingState::NOT_AUDIBLE
};


template<>
const EnumConversionHelper<mobile_apis::SystemAction::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::SystemAction::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::SystemAction::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::SystemAction::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::SystemAction::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::SystemAction::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::SystemAction::eType>::cstring_values_[] = {
    "DEFAULT_ACTION",
    "STEAL_FOCUS",
    "KEEP_CONTEXT"
};

template<>
const mobile_apis::SystemAction::eType
EnumConversionHelper<mobile_apis::SystemAction::eType>::enum_values_[] = {
    mobile_apis::SystemAction::DEFAULT_ACTION,
    mobile_apis::SystemAction::STEAL_FOCUS,
    mobile_apis::SystemAction::KEEP_CONTEXT
};


template<>
const EnumConversionHelper<mobile_apis::SystemContext::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::SystemContext::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::SystemContext::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::SystemContext::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::SystemContext::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::SystemContext::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::SystemContext::eType>::cstring_values_[] = {
    "MAIN",
    "VRSESSION",
    "MENU",
    "HMI_OBSCURED",
    "ALERT"
};

template<>
const mobile_apis::SystemContext::eType
EnumConversionHelper<mobile_apis::SystemContext::eType>::enum_values_[] = {
    mobile_apis::SystemContext::SYSCTXT_MAIN,
    mobile_apis::SystemContext::SYSCTXT_VRSESSION,
    mobile_apis::SystemContext::SYSCTXT_MENU,
    mobile_apis::SystemContext::SYSCTXT_HMI_OBSCURED,
    mobile_apis::SystemContext::SYSCTXT_ALERT
};


template<>
const EnumConversionHelper<mobile_apis::VideoStreamingState::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::VideoStreamingState::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::VideoStreamingState::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::VideoStreamingState::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::VideoStreamingState::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::VideoStreamingState::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::VideoStreamingState::eType>::cstring_values_[] = {
    "STREAMABLE",
    "NOT_STREAMABLE"
};

template<>
const mobile_apis::VideoStreamingState::eType
EnumConversionHelper<mobile_apis::VideoStreamingState::eType>::enum_values_[] = {
    mobile_apis::VideoStreamingState::STREAMABLE,
    mobile_apis::VideoStreamingState::NOT_STREAMABLE
};


template<>
const EnumConversionHelper<mobile_apis::SoftButtonType::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::SoftButtonType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::SoftButtonType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::SoftButtonType::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::SoftButtonType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::SoftButtonType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::SoftButtonType::eType>::cstring_values_[] = {
    "TEXT",
    "IMAGE",
    "BOTH"
};

template<>
const mobile_apis::SoftButtonType::eType
EnumConversionHelper<mobile_apis::SoftButtonType::eType>::enum_values_[] = {
    mobile_apis::SoftButtonType::SBT_TEXT,
    mobile_apis::SoftButtonType::SBT_IMAGE,
    mobile_apis::SoftButtonType::SBT_BOTH
};


template<>
const EnumConversionHelper<mobile_apis::AppInterfaceUnregisteredReason::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::AppInterfaceUnregisteredReason::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::AppInterfaceUnregisteredReason::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::AppInterfaceUnregisteredReason::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::AppInterfaceUnregisteredReason::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::AppInterfaceUnregisteredReason::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::AppInterfaceUnregisteredReason::eType>::cstring_values_[] = {
    "IGNITION_OFF",
    "BLUETOOTH_OFF",
    "USB_DISCONNECTED",
    "REQUEST_WHILE_IN_NONE_HMI_LEVEL",
    "TOO_MANY_REQUESTS",
    "DRIVER_DISTRACTION_VIOLATION",
    "LANGUAGE_CHANGE",
    "MASTER_RESET",
    "FACTORY_DEFAULTS",
    "APP_UNAUTHORIZED",
    "PROTOCOL_VIOLATION",
    "UNSUPPORTED_HMI_RESOURCE"
};

template<>
const mobile_apis::AppInterfaceUnregisteredReason::eType
EnumConversionHelper<mobile_apis::AppInterfaceUnregisteredReason::eType>::enum_values_[] = {
    mobile_apis::AppInterfaceUnregisteredReason::IGNITION_OFF,
    mobile_apis::AppInterfaceUnregisteredReason::BLUETOOTH_OFF,
    mobile_apis::AppInterfaceUnregisteredReason::USB_DISCONNECTED,
    mobile_apis::AppInterfaceUnregisteredReason::REQUEST_WHILE_IN_NONE_HMI_LEVEL,
    mobile_apis::AppInterfaceUnregisteredReason::TOO_MANY_REQUESTS,
    mobile_apis::AppInterfaceUnregisteredReason::DRIVER_DISTRACTION_VIOLATION,
    mobile_apis::AppInterfaceUnregisteredReason::LANGUAGE_CHANGE,
    mobile_apis::AppInterfaceUnregisteredReason::MASTER_RESET,
    mobile_apis::AppInterfaceUnregisteredReason::FACTORY_DEFAULTS,
    mobile_apis::AppInterfaceUnregisteredReason::APP_UNAUTHORIZED,
    mobile_apis::AppInterfaceUnregisteredReason::PROTOCOL_VIOLATION,
    mobile_apis::AppInterfaceUnregisteredReason::UNSUPPORTED_HMI_RESOURCE
};


template<>
const EnumConversionHelper<mobile_apis::TriggerSource::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::TriggerSource::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::TriggerSource::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::TriggerSource::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::TriggerSource::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::TriggerSource::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::TriggerSource::eType>::cstring_values_[] = {
    "MENU",
    "VR",
    "KEYBOARD"
};

template<>
const mobile_apis::TriggerSource::eType
EnumConversionHelper<mobile_apis::TriggerSource::eType>::enum_values_[] = {
    mobile_apis::TriggerSource::TS_MENU,
    mobile_apis::TriggerSource::TS_VR,
    mobile_apis::TriggerSource::TS_KEYBOARD
};


template<>
const EnumConversionHelper<mobile_apis::HmiZoneCapabilities::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::HmiZoneCapabilities::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::HmiZoneCapabilities::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::HmiZoneCapabilities::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::HmiZoneCapabilities::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::HmiZoneCapabilities::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::HmiZoneCapabilities::eType>::cstring_values_[] = {
    "FRONT",
    "BACK"
};

template<>
const mobile_apis::HmiZoneCapabilities::eType
EnumConversionHelper<mobile_apis::HmiZoneCapabilities::eType>::enum_values_[] = {
    mobile_apis::HmiZoneCapabilities::FRONT,
    mobile_apis::HmiZoneCapabilities::BACK
};


template<>
const EnumConversionHelper<mobile_apis::SpeechCapabilities::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::SpeechCapabilities::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::SpeechCapabilities::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::SpeechCapabilities::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::SpeechCapabilities::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::SpeechCapabilities::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::SpeechCapabilities::eType>::cstring_values_[] = {
    "TEXT",
    "SAPI_PHONEMES",
    "LHPLUS_PHONEMES",
    "PRE_RECORDED",
    "SILENCE",
    "FILE"
};

template<>
const mobile_apis::SpeechCapabilities::eType
EnumConversionHelper<mobile_apis::SpeechCapabilities::eType>::enum_values_[] = {
    mobile_apis::SpeechCapabilities::SC_TEXT,
    mobile_apis::SpeechCapabilities::SAPI_PHONEMES,
    mobile_apis::SpeechCapabilities::LHPLUS_PHONEMES,
    mobile_apis::SpeechCapabilities::PRE_RECORDED,
    mobile_apis::SpeechCapabilities::SILENCE,
    mobile_apis::SpeechCapabilities::FILE
};


template<>
const EnumConversionHelper<mobile_apis::VrCapabilities::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::VrCapabilities::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::VrCapabilities::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::VrCapabilities::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::VrCapabilities::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::VrCapabilities::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::VrCapabilities::eType>::cstring_values_[] = {
    "TEXT"
};

template<>
const mobile_apis::VrCapabilities::eType
EnumConversionHelper<mobile_apis::VrCapabilities::eType>::enum_values_[] = {
    mobile_apis::VrCapabilities::VR_TEXT
};


template<>
const EnumConversionHelper<mobile_apis::PrerecordedSpeech::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::PrerecordedSpeech::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::PrerecordedSpeech::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::PrerecordedSpeech::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::PrerecordedSpeech::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::PrerecordedSpeech::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::PrerecordedSpeech::eType>::cstring_values_[] = {
    "HELP_JINGLE",
    "INITIAL_JINGLE",
    "LISTEN_JINGLE",
    "POSITIVE_JINGLE",
    "NEGATIVE_JINGLE"
};

template<>
const mobile_apis::PrerecordedSpeech::eType
EnumConversionHelper<mobile_apis::PrerecordedSpeech::eType>::enum_values_[] = {
    mobile_apis::PrerecordedSpeech::HELP_JINGLE,
    mobile_apis::PrerecordedSpeech::INITIAL_JINGLE,
    mobile_apis::PrerecordedSpeech::LISTEN_JINGLE,
    mobile_apis::PrerecordedSpeech::POSITIVE_JINGLE,
    mobile_apis::PrerecordedSpeech::NEGATIVE_JINGLE
};


template<>
const EnumConversionHelper<mobile_apis::SamplingRate::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::SamplingRate::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::SamplingRate::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::SamplingRate::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::SamplingRate::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::SamplingRate::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::SamplingRate::eType>::cstring_values_[] = {
    "8KHZ",
    "16KHZ",
    "22KHZ",
    "44KHZ"
};

template<>
const mobile_apis::SamplingRate::eType
EnumConversionHelper<mobile_apis::SamplingRate::eType>::enum_values_[] = {
    mobile_apis::SamplingRate::SamplingRate_8KHZ,
    mobile_apis::SamplingRate::SamplingRate_16KHZ,
    mobile_apis::SamplingRate::SamplingRate_22KHZ,
    mobile_apis::SamplingRate::SamplingRate_44KHZ
};


template<>
const EnumConversionHelper<mobile_apis::BitsPerSample::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::BitsPerSample::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::BitsPerSample::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::BitsPerSample::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::BitsPerSample::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::BitsPerSample::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::BitsPerSample::eType>::cstring_values_[] = {
    "8_BIT",
    "16_BIT"
};

template<>
const mobile_apis::BitsPerSample::eType
EnumConversionHelper<mobile_apis::BitsPerSample::eType>::enum_values_[] = {
    mobile_apis::BitsPerSample::BitsPerSample_8_BIT,
    mobile_apis::BitsPerSample::BitsPerSample_16_BIT
};


template<>
const EnumConversionHelper<mobile_apis::AudioType::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::AudioType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::AudioType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::AudioType::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::AudioType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::AudioType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::AudioType::eType>::cstring_values_[] = {
    "PCM"
};

template<>
const mobile_apis::AudioType::eType
EnumConversionHelper<mobile_apis::AudioType::eType>::enum_values_[] = {
    mobile_apis::AudioType::PCM
};


template<>
const EnumConversionHelper<mobile_apis::VehicleDataType::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::VehicleDataType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::VehicleDataType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::VehicleDataType::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::VehicleDataType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::VehicleDataType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::VehicleDataType::eType>::cstring_values_[] = {
    "VEHICLEDATA_GPS",
    "VEHICLEDATA_SPEED",
    "VEHICLEDATA_RPM",
    "VEHICLEDATA_FUELLEVEL",
    "VEHICLEDATA_FUELLEVEL_STATE",
    "VEHICLEDATA_FUELCONSUMPTION",
    "VEHICLEDATA_EXTERNTEMP",
    "VEHICLEDATA_VIN",
    "VEHICLEDATA_PRNDL",
    "VEHICLEDATA_TIREPRESSURE",
    "VEHICLEDATA_ODOMETER",
    "VEHICLEDATA_BELTSTATUS",
    "VEHICLEDATA_BODYINFO",
    "VEHICLEDATA_DEVICESTATUS",
    "VEHICLEDATA_ECALLINFO",
    "VEHICLEDATA_AIRBAGSTATUS",
    "VEHICLEDATA_EMERGENCYEVENT",
    "VEHICLEDATA_CLUSTERMODESTATUS",
    "VEHICLEDATA_MYKEY",
    "VEHICLEDATA_BRAKING",
    "VEHICLEDATA_WIPERSTATUS",
    "VEHICLEDATA_HEADLAMPSTATUS",
    "VEHICLEDATA_BATTVOLTAGE",
    "VEHICLEDATA_ENGINETORQUE",
    "VEHICLEDATA_ACCPEDAL",
    "VEHICLEDATA_STEERINGWHEEL",
    "VEHICLEDATA_TURNSIGNAL",
    "VEHICLEDATA_FUELRANGE",
    "VEHICLEDATA_ENGINEOILLIFE",
    "VEHICLEDATA_ELECTRONICPARKBRAKESTATUS",
    "VEHICLEDATA_CLOUDAPPVEHICLEID"
};

template<>
const mobile_apis::VehicleDataType::eType
EnumConversionHelper<mobile_apis::VehicleDataType::eType>::enum_values_[] = {
    mobile_apis::VehicleDataType::VEHICLEDATA_GPS,
    mobile_apis::VehicleDataType::VEHICLEDATA_SPEED,
    mobile_apis::VehicleDataType::VEHICLEDATA_RPM,
    mobile_apis::VehicleDataType::VEHICLEDATA_FUELLEVEL,
    mobile_apis::VehicleDataType::VEHICLEDATA_FUELLEVEL_STATE,
    mobile_apis::VehicleDataType::VEHICLEDATA_FUELCONSUMPTION,
    mobile_apis::VehicleDataType::VEHICLEDATA_EXTERNTEMP,
    mobile_apis::VehicleDataType::VEHICLEDATA_VIN,
    mobile_apis::VehicleDataType::VEHICLEDATA_PRNDL,
    mobile_apis::VehicleDataType::VEHICLEDATA_TIREPRESSURE,
    mobile_apis::VehicleDataType::VEHICLEDATA_ODOMETER,
    mobile_apis::VehicleDataType::VEHICLEDATA_BELTSTATUS,
    mobile_apis::VehicleDataType::VEHICLEDATA_BODYINFO,
    mobile_apis::VehicleDataType::VEHICLEDATA_DEVICESTATUS,
    mobile_apis::VehicleDataType::VEHICLEDATA_ECALLINFO,
    mobile_apis::VehicleDataType::VEHICLEDATA_AIRBAGSTATUS,
    mobile_apis::VehicleDataType::VEHICLEDATA_EMERGENCYEVENT,
    mobile_apis::VehicleDataType::VEHICLEDATA_CLUSTERMODESTATUS,
    mobile_apis::VehicleDataType::VEHICLEDATA_MYKEY,
    mobile_apis::VehicleDataType::VEHICLEDATA_BRAKING,
    mobile_apis::VehicleDataType::VEHICLEDATA_WIPERSTATUS,
    mobile_apis::VehicleDataType::VEHICLEDATA_HEADLAMPSTATUS,
    mobile_apis::VehicleDataType::VEHICLEDATA_BATTVOLTAGE,
    mobile_apis::VehicleDataType::VEHICLEDATA_ENGINETORQUE,
    mobile_apis::VehicleDataType::VEHICLEDATA_ACCPEDAL,
    mobile_apis::VehicleDataType::VEHICLEDATA_STEERINGWHEEL,
    mobile_apis::VehicleDataType::VEHICLEDATA_TURNSIGNAL,
    mobile_apis::VehicleDataType::VEHICLEDATA_FUELRANGE,
    mobile_apis::VehicleDataType::VEHICLEDATA_ENGINEOILLIFE,
    mobile_apis::VehicleDataType::VEHICLEDATA_ELECTRONICPARKBRAKESTATUS,
    mobile_apis::VehicleDataType::VEHICLEDATA_CLOUDAPPVEHICLEID
};


template<>
const EnumConversionHelper<mobile_apis::HybridAppPreference::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::HybridAppPreference::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::HybridAppPreference::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::HybridAppPreference::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::HybridAppPreference::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::HybridAppPreference::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::HybridAppPreference::eType>::cstring_values_[] = {
    "MOBILE",
    "CLOUD",
    "BOTH"
};

template<>
const mobile_apis::HybridAppPreference::eType
EnumConversionHelper<mobile_apis::HybridAppPreference::eType>::enum_values_[] = {
    mobile_apis::HybridAppPreference::MOBILE,
    mobile_apis::HybridAppPreference::CLOUD,
    mobile_apis::HybridAppPreference::BOTH
};


template<>
const EnumConversionHelper<mobile_apis::ButtonName::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::ButtonName::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::ButtonName::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::ButtonName::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::ButtonName::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::ButtonName::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::ButtonName::eType>::cstring_values_[] = {
    "OK",
    "PLAY_PAUSE",
    "SEEKLEFT",
    "SEEKRIGHT",
    "TUNEUP",
    "TUNEDOWN",
    "PRESET_0",
    "PRESET_1",
    "PRESET_2",
    "PRESET_3",
    "PRESET_4",
    "PRESET_5",
    "PRESET_6",
    "PRESET_7",
    "PRESET_8",
    "PRESET_9",
    "CUSTOM_BUTTON",
    "SEARCH",
    "AC_MAX",
    "AC",
    "RECIRCULATE",
    "FAN_UP",
    "FAN_DOWN",
    "TEMP_UP",
    "TEMP_DOWN",
    "DEFROST_MAX",
    "DEFROST",
    "DEFROST_REAR",
    "UPPER_VENT",
    "LOWER_VENT",
    "VOLUME_UP",
    "VOLUME_DOWN",
    "EJECT",
    "SOURCE",
    "SHUFFLE",
    "REPEAT"
};

template<>
const mobile_apis::ButtonName::eType
EnumConversionHelper<mobile_apis::ButtonName::eType>::enum_values_[] = {
    mobile_apis::ButtonName::OK,
    mobile_apis::ButtonName::PLAY_PAUSE,
    mobile_apis::ButtonName::SEEKLEFT,
    mobile_apis::ButtonName::SEEKRIGHT,
    mobile_apis::ButtonName::TUNEUP,
    mobile_apis::ButtonName::TUNEDOWN,
    mobile_apis::ButtonName::PRESET_0,
    mobile_apis::ButtonName::PRESET_1,
    mobile_apis::ButtonName::PRESET_2,
    mobile_apis::ButtonName::PRESET_3,
    mobile_apis::ButtonName::PRESET_4,
    mobile_apis::ButtonName::PRESET_5,
    mobile_apis::ButtonName::PRESET_6,
    mobile_apis::ButtonName::PRESET_7,
    mobile_apis::ButtonName::PRESET_8,
    mobile_apis::ButtonName::PRESET_9,
    mobile_apis::ButtonName::CUSTOM_BUTTON,
    mobile_apis::ButtonName::SEARCH,
    mobile_apis::ButtonName::AC_MAX,
    mobile_apis::ButtonName::AC,
    mobile_apis::ButtonName::RECIRCULATE,
    mobile_apis::ButtonName::FAN_UP,
    mobile_apis::ButtonName::FAN_DOWN,
    mobile_apis::ButtonName::TEMP_UP,
    mobile_apis::ButtonName::TEMP_DOWN,
    mobile_apis::ButtonName::DEFROST_MAX,
    mobile_apis::ButtonName::DEFROST,
    mobile_apis::ButtonName::DEFROST_REAR,
    mobile_apis::ButtonName::UPPER_VENT,
    mobile_apis::ButtonName::LOWER_VENT,
    mobile_apis::ButtonName::VOLUME_UP,
    mobile_apis::ButtonName::VOLUME_DOWN,
    mobile_apis::ButtonName::EJECT,
    mobile_apis::ButtonName::SOURCE,
    mobile_apis::ButtonName::SHUFFLE,
    mobile_apis::ButtonName::REPEAT
};


template<>
const EnumConversionHelper<mobile_apis::MediaClockFormat::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::MediaClockFormat::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::MediaClockFormat::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::MediaClockFormat::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::MediaClockFormat::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::MediaClockFormat::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::MediaClockFormat::eType>::cstring_values_[] = {
    "CLOCK1",
    "CLOCK2",
    "CLOCK3",
    "CLOCKTEXT1",
    "CLOCKTEXT2",
    "CLOCKTEXT3",
    "CLOCKTEXT4"
};

template<>
const mobile_apis::MediaClockFormat::eType
EnumConversionHelper<mobile_apis::MediaClockFormat::eType>::enum_values_[] = {
    mobile_apis::MediaClockFormat::CLOCK1,
    mobile_apis::MediaClockFormat::CLOCK2,
    mobile_apis::MediaClockFormat::CLOCK3,
    mobile_apis::MediaClockFormat::CLOCKTEXT1,
    mobile_apis::MediaClockFormat::CLOCKTEXT2,
    mobile_apis::MediaClockFormat::CLOCKTEXT3,
    mobile_apis::MediaClockFormat::CLOCKTEXT4
};


template<>
const EnumConversionHelper<mobile_apis::DisplayType::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::DisplayType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::DisplayType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::DisplayType::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::DisplayType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::DisplayType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::DisplayType::eType>::cstring_values_[] = {
    "CID",
    "TYPE2",
    "TYPE5",
    "NGN",
    "GEN2_8_DMA",
    "GEN2_6_DMA",
    "MFD3",
    "MFD4",
    "MFD5",
    "GEN3_8-INCH",
    "SDL_GENERIC"
};

template<>
const mobile_apis::DisplayType::eType
EnumConversionHelper<mobile_apis::DisplayType::eType>::enum_values_[] = {
    mobile_apis::DisplayType::CID,
    mobile_apis::DisplayType::TYPE2,
    mobile_apis::DisplayType::TYPE5,
    mobile_apis::DisplayType::NGN,
    mobile_apis::DisplayType::GEN2_8_DMA,
    mobile_apis::DisplayType::GEN2_6_DMA,
    mobile_apis::DisplayType::MFD3,
    mobile_apis::DisplayType::MFD4,
    mobile_apis::DisplayType::MFD5,
    mobile_apis::DisplayType::GEN3_8_INCH,
    mobile_apis::DisplayType::SDL_GENERIC
};


template<>
const EnumConversionHelper<mobile_apis::TextFieldName::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::TextFieldName::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::TextFieldName::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::TextFieldName::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::TextFieldName::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::TextFieldName::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::TextFieldName::eType>::cstring_values_[] = {
    "mainField1",
    "mainField2",
    "mainField3",
    "mainField4",
    "statusBar",
    "mediaClock",
    "mediaTrack",
    "alertText1",
    "alertText2",
    "alertText3",
    "scrollableMessageBody",
    "initialInteractionText",
    "navigationText1",
    "navigationText2",
    "ETA",
    "totalDistance",
    "audioPassThruDisplayText1",
    "audioPassThruDisplayText2",
    "sliderHeader",
    "sliderFooter",
    "menuName",
    "secondaryText",
    "tertiaryText",
    "menuTitle",
    "locationName",
    "locationDescription",
    "addressLines",
    "phoneNumber"
};

template<>
const mobile_apis::TextFieldName::eType
EnumConversionHelper<mobile_apis::TextFieldName::eType>::enum_values_[] = {
    mobile_apis::TextFieldName::mainField1,
    mobile_apis::TextFieldName::mainField2,
    mobile_apis::TextFieldName::mainField3,
    mobile_apis::TextFieldName::mainField4,
    mobile_apis::TextFieldName::statusBar,
    mobile_apis::TextFieldName::mediaClock,
    mobile_apis::TextFieldName::mediaTrack,
    mobile_apis::TextFieldName::alertText1,
    mobile_apis::TextFieldName::alertText2,
    mobile_apis::TextFieldName::alertText3,
    mobile_apis::TextFieldName::scrollableMessageBody,
    mobile_apis::TextFieldName::initialInteractionText,
    mobile_apis::TextFieldName::navigationText1,
    mobile_apis::TextFieldName::navigationText2,
    mobile_apis::TextFieldName::ETA,
    mobile_apis::TextFieldName::totalDistance,
    mobile_apis::TextFieldName::audioPassThruDisplayText1,
    mobile_apis::TextFieldName::audioPassThruDisplayText2,
    mobile_apis::TextFieldName::sliderHeader,
    mobile_apis::TextFieldName::sliderFooter,
    mobile_apis::TextFieldName::menuName,
    mobile_apis::TextFieldName::secondaryText,
    mobile_apis::TextFieldName::tertiaryText,
    mobile_apis::TextFieldName::menuTitle,
    mobile_apis::TextFieldName::locationName,
    mobile_apis::TextFieldName::locationDescription,
    mobile_apis::TextFieldName::addressLines,
    mobile_apis::TextFieldName::phoneNumber
};


template<>
const EnumConversionHelper<mobile_apis::ImageFieldName::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::ImageFieldName::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::ImageFieldName::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::ImageFieldName::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::ImageFieldName::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::ImageFieldName::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::ImageFieldName::eType>::cstring_values_[] = {
    "softButtonImage",
    "choiceImage",
    "choiceSecondaryImage",
    "vrHelpItem",
    "turnIcon",
    "menuIcon",
    "cmdIcon",
    "appIcon",
    "graphic",
    "secondaryGraphic",
    "showConstantTBTIcon",
    "showConstantTBTNextTurnIcon",
    "locationImage"
};

template<>
const mobile_apis::ImageFieldName::eType
EnumConversionHelper<mobile_apis::ImageFieldName::eType>::enum_values_[] = {
    mobile_apis::ImageFieldName::softButtonImage,
    mobile_apis::ImageFieldName::choiceImage,
    mobile_apis::ImageFieldName::choiceSecondaryImage,
    mobile_apis::ImageFieldName::vrHelpItem,
    mobile_apis::ImageFieldName::turnIcon,
    mobile_apis::ImageFieldName::menuIcon,
    mobile_apis::ImageFieldName::cmdIcon,
    mobile_apis::ImageFieldName::appIcon,
    mobile_apis::ImageFieldName::graphic,
    mobile_apis::ImageFieldName::secondaryGraphic,
    mobile_apis::ImageFieldName::showConstantTBTIcon,
    mobile_apis::ImageFieldName::showConstantTBTNextTurnIcon,
    mobile_apis::ImageFieldName::locationImage
};


template<>
const EnumConversionHelper<mobile_apis::CharacterSet::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::CharacterSet::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::CharacterSet::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::CharacterSet::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::CharacterSet::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::CharacterSet::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::CharacterSet::eType>::cstring_values_[] = {
    "TYPE2SET",
    "TYPE5SET",
    "CID1SET",
    "CID2SET"
};

template<>
const mobile_apis::CharacterSet::eType
EnumConversionHelper<mobile_apis::CharacterSet::eType>::enum_values_[] = {
    mobile_apis::CharacterSet::TYPE2SET,
    mobile_apis::CharacterSet::TYPE5SET,
    mobile_apis::CharacterSet::CID1SET,
    mobile_apis::CharacterSet::CID2SET
};


template<>
const EnumConversionHelper<mobile_apis::TextAlignment::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::TextAlignment::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::TextAlignment::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::TextAlignment::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::TextAlignment::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::TextAlignment::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::TextAlignment::eType>::cstring_values_[] = {
    "LEFT_ALIGNED",
    "RIGHT_ALIGNED",
    "CENTERED"
};

template<>
const mobile_apis::TextAlignment::eType
EnumConversionHelper<mobile_apis::TextAlignment::eType>::enum_values_[] = {
    mobile_apis::TextAlignment::LEFT_ALIGNED,
    mobile_apis::TextAlignment::RIGHT_ALIGNED,
    mobile_apis::TextAlignment::CENTERED
};


template<>
const EnumConversionHelper<mobile_apis::TBTState::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::TBTState::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::TBTState::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::TBTState::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::TBTState::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::TBTState::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::TBTState::eType>::cstring_values_[] = {
    "ROUTE_UPDATE_REQUEST",
    "ROUTE_ACCEPTED",
    "ROUTE_REFUSED",
    "ROUTE_CANCELLED",
    "ETA_REQUEST",
    "NEXT_TURN_REQUEST",
    "ROUTE_STATUS_REQUEST",
    "ROUTE_SUMMARY_REQUEST",
    "TRIP_STATUS_REQUEST",
    "ROUTE_UPDATE_REQUEST_TIMEOUT"
};

template<>
const mobile_apis::TBTState::eType
EnumConversionHelper<mobile_apis::TBTState::eType>::enum_values_[] = {
    mobile_apis::TBTState::ROUTE_UPDATE_REQUEST,
    mobile_apis::TBTState::ROUTE_ACCEPTED,
    mobile_apis::TBTState::ROUTE_REFUSED,
    mobile_apis::TBTState::ROUTE_CANCELLED,
    mobile_apis::TBTState::ETA_REQUEST,
    mobile_apis::TBTState::NEXT_TURN_REQUEST,
    mobile_apis::TBTState::ROUTE_STATUS_REQUEST,
    mobile_apis::TBTState::ROUTE_SUMMARY_REQUEST,
    mobile_apis::TBTState::TRIP_STATUS_REQUEST,
    mobile_apis::TBTState::ROUTE_UPDATE_REQUEST_TIMEOUT
};


template<>
const EnumConversionHelper<mobile_apis::DriverDistractionState::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::DriverDistractionState::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::DriverDistractionState::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::DriverDistractionState::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::DriverDistractionState::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::DriverDistractionState::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::DriverDistractionState::eType>::cstring_values_[] = {
    "DD_ON",
    "DD_OFF"
};

template<>
const mobile_apis::DriverDistractionState::eType
EnumConversionHelper<mobile_apis::DriverDistractionState::eType>::enum_values_[] = {
    mobile_apis::DriverDistractionState::DD_ON,
    mobile_apis::DriverDistractionState::DD_OFF
};


template<>
const EnumConversionHelper<mobile_apis::ImageType::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::ImageType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::ImageType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::ImageType::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::ImageType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::ImageType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::ImageType::eType>::cstring_values_[] = {
    "STATIC",
    "DYNAMIC"
};

template<>
const mobile_apis::ImageType::eType
EnumConversionHelper<mobile_apis::ImageType::eType>::enum_values_[] = {
    mobile_apis::ImageType::STATIC,
    mobile_apis::ImageType::DYNAMIC
};


template<>
const EnumConversionHelper<mobile_apis::DeliveryMode::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::DeliveryMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::DeliveryMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::DeliveryMode::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::DeliveryMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::DeliveryMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::DeliveryMode::eType>::cstring_values_[] = {
    "PROMPT",
    "DESTINATION",
    "QUEUE"
};

template<>
const mobile_apis::DeliveryMode::eType
EnumConversionHelper<mobile_apis::DeliveryMode::eType>::enum_values_[] = {
    mobile_apis::DeliveryMode::PROMPT,
    mobile_apis::DeliveryMode::DESTINATION,
    mobile_apis::DeliveryMode::QUEUE
};


template<>
const EnumConversionHelper<mobile_apis::VideoStreamingProtocol::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::VideoStreamingProtocol::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::VideoStreamingProtocol::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::VideoStreamingProtocol::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::VideoStreamingProtocol::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::VideoStreamingProtocol::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::VideoStreamingProtocol::eType>::cstring_values_[] = {
    "RAW",
    "RTP",
    "RTSP",
    "RTMP",
    "WEBM"
};

template<>
const mobile_apis::VideoStreamingProtocol::eType
EnumConversionHelper<mobile_apis::VideoStreamingProtocol::eType>::enum_values_[] = {
    mobile_apis::VideoStreamingProtocol::RAW,
    mobile_apis::VideoStreamingProtocol::RTP,
    mobile_apis::VideoStreamingProtocol::RTSP,
    mobile_apis::VideoStreamingProtocol::RTMP,
    mobile_apis::VideoStreamingProtocol::WEBM
};


template<>
const EnumConversionHelper<mobile_apis::VideoStreamingCodec::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::VideoStreamingCodec::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::VideoStreamingCodec::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::VideoStreamingCodec::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::VideoStreamingCodec::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::VideoStreamingCodec::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::VideoStreamingCodec::eType>::cstring_values_[] = {
    "H264",
    "H265",
    "Theora",
    "VP8",
    "VP9"
};

template<>
const mobile_apis::VideoStreamingCodec::eType
EnumConversionHelper<mobile_apis::VideoStreamingCodec::eType>::enum_values_[] = {
    mobile_apis::VideoStreamingCodec::H264,
    mobile_apis::VideoStreamingCodec::H265,
    mobile_apis::VideoStreamingCodec::Theora,
    mobile_apis::VideoStreamingCodec::VP8,
    mobile_apis::VideoStreamingCodec::VP9
};


template<>
const EnumConversionHelper<mobile_apis::AudioStreamingIndicator::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::AudioStreamingIndicator::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::AudioStreamingIndicator::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::AudioStreamingIndicator::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::AudioStreamingIndicator::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::AudioStreamingIndicator::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::AudioStreamingIndicator::eType>::cstring_values_[] = {
    "PLAY_PAUSE",
    "PLAY",
    "PAUSE",
    "STOP"
};

template<>
const mobile_apis::AudioStreamingIndicator::eType
EnumConversionHelper<mobile_apis::AudioStreamingIndicator::eType>::enum_values_[] = {
    mobile_apis::AudioStreamingIndicator::PLAY_PAUSE,
    mobile_apis::AudioStreamingIndicator::PLAY,
    mobile_apis::AudioStreamingIndicator::PAUSE,
    mobile_apis::AudioStreamingIndicator::STOP
};


template<>
const EnumConversionHelper<mobile_apis::GlobalProperty::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::GlobalProperty::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::GlobalProperty::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::GlobalProperty::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::GlobalProperty::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::GlobalProperty::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::GlobalProperty::eType>::cstring_values_[] = {
    "HELPPROMPT",
    "TIMEOUTPROMPT",
    "VRHELPTITLE",
    "VRHELPITEMS",
    "MENUNAME",
    "MENUICON",
    "KEYBOARDPROPERTIES"
};

template<>
const mobile_apis::GlobalProperty::eType
EnumConversionHelper<mobile_apis::GlobalProperty::eType>::enum_values_[] = {
    mobile_apis::GlobalProperty::HELPPROMPT,
    mobile_apis::GlobalProperty::TIMEOUTPROMPT,
    mobile_apis::GlobalProperty::VRHELPTITLE,
    mobile_apis::GlobalProperty::VRHELPITEMS,
    mobile_apis::GlobalProperty::MENUNAME,
    mobile_apis::GlobalProperty::MENUICON,
    mobile_apis::GlobalProperty::KEYBOARDPROPERTIES
};


template<>
const EnumConversionHelper<mobile_apis::CompassDirection::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::CompassDirection::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::CompassDirection::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::CompassDirection::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::CompassDirection::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::CompassDirection::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::CompassDirection::eType>::cstring_values_[] = {
    "NORTH",
    "NORTHWEST",
    "WEST",
    "SOUTHWEST",
    "SOUTH",
    "SOUTHEAST",
    "EAST",
    "NORTHEAST"
};

template<>
const mobile_apis::CompassDirection::eType
EnumConversionHelper<mobile_apis::CompassDirection::eType>::enum_values_[] = {
    mobile_apis::CompassDirection::NORTH,
    mobile_apis::CompassDirection::NORTHWEST,
    mobile_apis::CompassDirection::WEST,
    mobile_apis::CompassDirection::SOUTHWEST,
    mobile_apis::CompassDirection::SOUTH,
    mobile_apis::CompassDirection::SOUTHEAST,
    mobile_apis::CompassDirection::EAST,
    mobile_apis::CompassDirection::NORTHEAST
};


template<>
const EnumConversionHelper<mobile_apis::Dimension::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::Dimension::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::Dimension::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::Dimension::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::Dimension::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::Dimension::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::Dimension::eType>::cstring_values_[] = {
    "NO_FIX",
    "2D",
    "3D"
};

template<>
const mobile_apis::Dimension::eType
EnumConversionHelper<mobile_apis::Dimension::eType>::enum_values_[] = {
    mobile_apis::Dimension::Dimension_NO_FIX,
    mobile_apis::Dimension::Dimension_2D,
    mobile_apis::Dimension::Dimension_3D
};


template<>
const EnumConversionHelper<mobile_apis::PRNDL::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::PRNDL::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::PRNDL::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::PRNDL::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::PRNDL::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::PRNDL::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::PRNDL::eType>::cstring_values_[] = {
    "PARK",
    "REVERSE",
    "NEUTRAL",
    "DRIVE",
    "SPORT",
    "LOWGEAR",
    "FIRST",
    "SECOND",
    "THIRD",
    "FOURTH",
    "FIFTH",
    "SIXTH",
    "SEVENTH",
    "EIGHTH",
    "UNKNOWN",
    "FAULT"
};

template<>
const mobile_apis::PRNDL::eType
EnumConversionHelper<mobile_apis::PRNDL::eType>::enum_values_[] = {
    mobile_apis::PRNDL::PARK,
    mobile_apis::PRNDL::REVERSE,
    mobile_apis::PRNDL::NEUTRAL,
    mobile_apis::PRNDL::DRIVE,
    mobile_apis::PRNDL::SPORT,
    mobile_apis::PRNDL::LOWGEAR,
    mobile_apis::PRNDL::FIRST,
    mobile_apis::PRNDL::SECOND,
    mobile_apis::PRNDL::THIRD,
    mobile_apis::PRNDL::FOURTH,
    mobile_apis::PRNDL::FIFTH,
    mobile_apis::PRNDL::SIXTH,
    mobile_apis::PRNDL::SEVENTH,
    mobile_apis::PRNDL::EIGHTH,
    mobile_apis::PRNDL::UNKNOWN,
    mobile_apis::PRNDL::FAULT
};


template<>
const EnumConversionHelper<mobile_apis::ComponentVolumeStatus::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::ComponentVolumeStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::ComponentVolumeStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::ComponentVolumeStatus::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::ComponentVolumeStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::ComponentVolumeStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::ComponentVolumeStatus::eType>::cstring_values_[] = {
    "UNKNOWN",
    "NORMAL",
    "LOW",
    "FAULT",
    "ALERT",
    "NOT_SUPPORTED"
};

template<>
const mobile_apis::ComponentVolumeStatus::eType
EnumConversionHelper<mobile_apis::ComponentVolumeStatus::eType>::enum_values_[] = {
    mobile_apis::ComponentVolumeStatus::CVS_UNKNOWN,
    mobile_apis::ComponentVolumeStatus::CVS_NORMAL,
    mobile_apis::ComponentVolumeStatus::CVS_LOW,
    mobile_apis::ComponentVolumeStatus::CVS_FAULT,
    mobile_apis::ComponentVolumeStatus::CVS_ALERT,
    mobile_apis::ComponentVolumeStatus::CVS_NOT_SUPPORTED
};


template<>
const EnumConversionHelper<mobile_apis::TPMS::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::TPMS::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::TPMS::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::TPMS::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::TPMS::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::TPMS::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::TPMS::eType>::cstring_values_[] = {
    "UNKNOWN",
    "SYSTEM_FAULT",
    "SENSOR_FAULT",
    "LOW",
    "SYSTEM_ACTIVE",
    "TRAIN",
    "TRAINING_COMPLETE",
    "NOT_TRAINED"
};

template<>
const mobile_apis::TPMS::eType
EnumConversionHelper<mobile_apis::TPMS::eType>::enum_values_[] = {
    mobile_apis::TPMS::UNKNOWN,
    mobile_apis::TPMS::SYSTEM_FAULT,
    mobile_apis::TPMS::SENSOR_FAULT,
    mobile_apis::TPMS::LOW,
    mobile_apis::TPMS::SYSTEM_ACTIVE,
    mobile_apis::TPMS::TRAIN,
    mobile_apis::TPMS::TRAINING_COMPLETE,
    mobile_apis::TPMS::NOT_TRAINED
};


template<>
const EnumConversionHelper<mobile_apis::FuelType::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::FuelType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::FuelType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::FuelType::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::FuelType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::FuelType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::FuelType::eType>::cstring_values_[] = {
    "GASOLINE",
    "DIESEL",
    "CNG",
    "LPG",
    "HYDROGEN",
    "BATTERY"
};

template<>
const mobile_apis::FuelType::eType
EnumConversionHelper<mobile_apis::FuelType::eType>::enum_values_[] = {
    mobile_apis::FuelType::GASOLINE,
    mobile_apis::FuelType::DIESEL,
    mobile_apis::FuelType::CNG,
    mobile_apis::FuelType::LPG,
    mobile_apis::FuelType::HYDROGEN,
    mobile_apis::FuelType::BATTERY
};


template<>
const EnumConversionHelper<mobile_apis::ElectronicParkBrakeStatus::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::ElectronicParkBrakeStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::ElectronicParkBrakeStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::ElectronicParkBrakeStatus::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::ElectronicParkBrakeStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::ElectronicParkBrakeStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::ElectronicParkBrakeStatus::eType>::cstring_values_[] = {
    "CLOSED",
    "TRANSITION",
    "OPEN",
    "DRIVE_ACTIVE",
    "FAULT"
};

template<>
const mobile_apis::ElectronicParkBrakeStatus::eType
EnumConversionHelper<mobile_apis::ElectronicParkBrakeStatus::eType>::enum_values_[] = {
    mobile_apis::ElectronicParkBrakeStatus::CLOSED,
    mobile_apis::ElectronicParkBrakeStatus::TRANSITION,
    mobile_apis::ElectronicParkBrakeStatus::OPEN,
    mobile_apis::ElectronicParkBrakeStatus::DRIVE_ACTIVE,
    mobile_apis::ElectronicParkBrakeStatus::FAULT
};


template<>
const EnumConversionHelper<mobile_apis::WarningLightStatus::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::WarningLightStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::WarningLightStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::WarningLightStatus::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::WarningLightStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::WarningLightStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::WarningLightStatus::eType>::cstring_values_[] = {
    "OFF",
    "ON",
    "FLASH",
    "NOT_USED"
};

template<>
const mobile_apis::WarningLightStatus::eType
EnumConversionHelper<mobile_apis::WarningLightStatus::eType>::enum_values_[] = {
    mobile_apis::WarningLightStatus::WLS_OFF,
    mobile_apis::WarningLightStatus::WLS_ON,
    mobile_apis::WarningLightStatus::WLS_FLASH,
    mobile_apis::WarningLightStatus::WLS_NOT_USED
};


template<>
const EnumConversionHelper<mobile_apis::VehicleDataNotificationStatus::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::VehicleDataNotificationStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::VehicleDataNotificationStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::VehicleDataNotificationStatus::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::VehicleDataNotificationStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::VehicleDataNotificationStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::VehicleDataNotificationStatus::eType>::cstring_values_[] = {
    "NOT_SUPPORTED",
    "NORMAL",
    "ACTIVE",
    "NOT_USED"
};

template<>
const mobile_apis::VehicleDataNotificationStatus::eType
EnumConversionHelper<mobile_apis::VehicleDataNotificationStatus::eType>::enum_values_[] = {
    mobile_apis::VehicleDataNotificationStatus::VDNS_NOT_SUPPORTED,
    mobile_apis::VehicleDataNotificationStatus::VDNS_NORMAL,
    mobile_apis::VehicleDataNotificationStatus::VDNS_ACTIVE,
    mobile_apis::VehicleDataNotificationStatus::VDNS_NOT_USED
};


template<>
const EnumConversionHelper<mobile_apis::IgnitionStableStatus::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::IgnitionStableStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::IgnitionStableStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::IgnitionStableStatus::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::IgnitionStableStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::IgnitionStableStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::IgnitionStableStatus::eType>::cstring_values_[] = {
    "IGNITION_SWITCH_NOT_STABLE",
    "IGNITION_SWITCH_STABLE",
    "MISSING_FROM_TRANSMITTER"
};

template<>
const mobile_apis::IgnitionStableStatus::eType
EnumConversionHelper<mobile_apis::IgnitionStableStatus::eType>::enum_values_[] = {
    mobile_apis::IgnitionStableStatus::IGNITION_SWITCH_NOT_STABLE,
    mobile_apis::IgnitionStableStatus::IGNITION_SWITCH_STABLE,
    mobile_apis::IgnitionStableStatus::MISSING_FROM_TRANSMITTER
};


template<>
const EnumConversionHelper<mobile_apis::IgnitionStatus::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::IgnitionStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::IgnitionStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::IgnitionStatus::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::IgnitionStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::IgnitionStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::IgnitionStatus::eType>::cstring_values_[] = {
    "UNKNOWN",
    "OFF",
    "ACCESSORY",
    "RUN",
    "START",
    "INVALID"
};

template<>
const mobile_apis::IgnitionStatus::eType
EnumConversionHelper<mobile_apis::IgnitionStatus::eType>::enum_values_[] = {
    mobile_apis::IgnitionStatus::IS_UNKNOWN,
    mobile_apis::IgnitionStatus::IS_OFF,
    mobile_apis::IgnitionStatus::IS_ACCESSORY,
    mobile_apis::IgnitionStatus::IS_RUN,
    mobile_apis::IgnitionStatus::IS_START,
    mobile_apis::IgnitionStatus::IS_INVALID
};


template<>
const EnumConversionHelper<mobile_apis::VehicleDataEventStatus::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::VehicleDataEventStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::VehicleDataEventStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::VehicleDataEventStatus::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::VehicleDataEventStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::VehicleDataEventStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::VehicleDataEventStatus::eType>::cstring_values_[] = {
    "NO_EVENT",
    "NO",
    "YES",
    "NOT_SUPPORTED",
    "FAULT"
};

template<>
const mobile_apis::VehicleDataEventStatus::eType
EnumConversionHelper<mobile_apis::VehicleDataEventStatus::eType>::enum_values_[] = {
    mobile_apis::VehicleDataEventStatus::VDES_NO_EVENT,
    mobile_apis::VehicleDataEventStatus::VDES_NO,
    mobile_apis::VehicleDataEventStatus::VDES_YES,
    mobile_apis::VehicleDataEventStatus::VDES_NOT_SUPPORTED,
    mobile_apis::VehicleDataEventStatus::VDES_FAULT
};


template<>
const EnumConversionHelper<mobile_apis::DeviceLevelStatus::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::DeviceLevelStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::DeviceLevelStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::DeviceLevelStatus::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::DeviceLevelStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::DeviceLevelStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::DeviceLevelStatus::eType>::cstring_values_[] = {
    "ZERO_LEVEL_BARS",
    "ONE_LEVEL_BARS",
    "TWO_LEVEL_BARS",
    "THREE_LEVEL_BARS",
    "FOUR_LEVEL_BARS",
    "NOT_PROVIDED"
};

template<>
const mobile_apis::DeviceLevelStatus::eType
EnumConversionHelper<mobile_apis::DeviceLevelStatus::eType>::enum_values_[] = {
    mobile_apis::DeviceLevelStatus::ZERO_LEVEL_BARS,
    mobile_apis::DeviceLevelStatus::ONE_LEVEL_BARS,
    mobile_apis::DeviceLevelStatus::TWO_LEVEL_BARS,
    mobile_apis::DeviceLevelStatus::THREE_LEVEL_BARS,
    mobile_apis::DeviceLevelStatus::FOUR_LEVEL_BARS,
    mobile_apis::DeviceLevelStatus::NOT_PROVIDED
};


template<>
const EnumConversionHelper<mobile_apis::PrimaryAudioSource::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::PrimaryAudioSource::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::PrimaryAudioSource::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::PrimaryAudioSource::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::PrimaryAudioSource::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::PrimaryAudioSource::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::PrimaryAudioSource::eType>::cstring_values_[] = {
    "NO_SOURCE_SELECTED",
    "CD",
    "USB",
    "USB2",
    "BLUETOOTH_STEREO_BTST",
    "LINE_IN",
    "IPOD",
    "MOBILE_APP",
    "AM",
    "FM",
    "XM",
    "DAB"
};

template<>
const mobile_apis::PrimaryAudioSource::eType
EnumConversionHelper<mobile_apis::PrimaryAudioSource::eType>::enum_values_[] = {
    mobile_apis::PrimaryAudioSource::NO_SOURCE_SELECTED,
    mobile_apis::PrimaryAudioSource::CD,
    mobile_apis::PrimaryAudioSource::USB,
    mobile_apis::PrimaryAudioSource::USB2,
    mobile_apis::PrimaryAudioSource::BLUETOOTH_STEREO_BTST,
    mobile_apis::PrimaryAudioSource::LINE_IN,
    mobile_apis::PrimaryAudioSource::IPOD,
    mobile_apis::PrimaryAudioSource::MOBILE_APP,
    mobile_apis::PrimaryAudioSource::AM,
    mobile_apis::PrimaryAudioSource::FM,
    mobile_apis::PrimaryAudioSource::XM,
    mobile_apis::PrimaryAudioSource::DAB
};


template<>
const EnumConversionHelper<mobile_apis::WiperStatus::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::WiperStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::WiperStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::WiperStatus::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::WiperStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::WiperStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::WiperStatus::eType>::cstring_values_[] = {
    "OFF",
    "AUTO_OFF",
    "OFF_MOVING",
    "MAN_INT_OFF",
    "MAN_INT_ON",
    "MAN_LOW",
    "MAN_HIGH",
    "MAN_FLICK",
    "WASH",
    "AUTO_LOW",
    "AUTO_HIGH",
    "COURTESYWIPE",
    "AUTO_ADJUST",
    "STALLED",
    "NO_DATA_EXISTS"
};

template<>
const mobile_apis::WiperStatus::eType
EnumConversionHelper<mobile_apis::WiperStatus::eType>::enum_values_[] = {
    mobile_apis::WiperStatus::OFF,
    mobile_apis::WiperStatus::AUTO_OFF,
    mobile_apis::WiperStatus::OFF_MOVING,
    mobile_apis::WiperStatus::MAN_INT_OFF,
    mobile_apis::WiperStatus::MAN_INT_ON,
    mobile_apis::WiperStatus::MAN_LOW,
    mobile_apis::WiperStatus::MAN_HIGH,
    mobile_apis::WiperStatus::MAN_FLICK,
    mobile_apis::WiperStatus::WASH,
    mobile_apis::WiperStatus::AUTO_LOW,
    mobile_apis::WiperStatus::AUTO_HIGH,
    mobile_apis::WiperStatus::COURTESYWIPE,
    mobile_apis::WiperStatus::AUTO_ADJUST,
    mobile_apis::WiperStatus::STALLED,
    mobile_apis::WiperStatus::NO_DATA_EXISTS
};


template<>
const EnumConversionHelper<mobile_apis::VehicleDataStatus::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::VehicleDataStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::VehicleDataStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::VehicleDataStatus::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::VehicleDataStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::VehicleDataStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::VehicleDataStatus::eType>::cstring_values_[] = {
    "NO_DATA_EXISTS",
    "OFF",
    "ON"
};

template<>
const mobile_apis::VehicleDataStatus::eType
EnumConversionHelper<mobile_apis::VehicleDataStatus::eType>::enum_values_[] = {
    mobile_apis::VehicleDataStatus::VDS_NO_DATA_EXISTS,
    mobile_apis::VehicleDataStatus::VDS_OFF,
    mobile_apis::VehicleDataStatus::VDS_ON
};


template<>
const EnumConversionHelper<mobile_apis::MaintenanceModeStatus::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::MaintenanceModeStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::MaintenanceModeStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::MaintenanceModeStatus::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::MaintenanceModeStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::MaintenanceModeStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::MaintenanceModeStatus::eType>::cstring_values_[] = {
    "NORMAL",
    "NEAR",
    "ACTIVE",
    "FEATURE_NOT_PRESENT"
};

template<>
const mobile_apis::MaintenanceModeStatus::eType
EnumConversionHelper<mobile_apis::MaintenanceModeStatus::eType>::enum_values_[] = {
    mobile_apis::MaintenanceModeStatus::MMS_NORMAL,
    mobile_apis::MaintenanceModeStatus::MMS_NEAR,
    mobile_apis::MaintenanceModeStatus::MMS_ACTIVE,
    mobile_apis::MaintenanceModeStatus::MMS_FEATURE_NOT_PRESENT
};


template<>
const EnumConversionHelper<mobile_apis::VehicleDataActiveStatus::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::VehicleDataActiveStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::VehicleDataActiveStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::VehicleDataActiveStatus::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::VehicleDataActiveStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::VehicleDataActiveStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::VehicleDataActiveStatus::eType>::cstring_values_[] = {
    "INACTIVE_NOT_CONFIRMED",
    "INACTIVE_CONFIRMED",
    "ACTIVE_NOT_CONFIRMED",
    "ACTIVE_CONFIRMED",
    "FAULT"
};

template<>
const mobile_apis::VehicleDataActiveStatus::eType
EnumConversionHelper<mobile_apis::VehicleDataActiveStatus::eType>::enum_values_[] = {
    mobile_apis::VehicleDataActiveStatus::VDAS_INACTIVE_NOT_CONFIRMED,
    mobile_apis::VehicleDataActiveStatus::VDAS_INACTIVE_CONFIRMED,
    mobile_apis::VehicleDataActiveStatus::VDAS_ACTIVE_NOT_CONFIRMED,
    mobile_apis::VehicleDataActiveStatus::VDAS_ACTIVE_CONFIRMED,
    mobile_apis::VehicleDataActiveStatus::VDAS_FAULT
};


template<>
const EnumConversionHelper<mobile_apis::AmbientLightStatus::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::AmbientLightStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::AmbientLightStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::AmbientLightStatus::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::AmbientLightStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::AmbientLightStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::AmbientLightStatus::eType>::cstring_values_[] = {
    "NIGHT",
    "TWILIGHT_1",
    "TWILIGHT_2",
    "TWILIGHT_3",
    "TWILIGHT_4",
    "DAY",
    "UNKNOWN",
    "INVALID"
};

template<>
const mobile_apis::AmbientLightStatus::eType
EnumConversionHelper<mobile_apis::AmbientLightStatus::eType>::enum_values_[] = {
    mobile_apis::AmbientLightStatus::NIGHT,
    mobile_apis::AmbientLightStatus::TWILIGHT_1,
    mobile_apis::AmbientLightStatus::TWILIGHT_2,
    mobile_apis::AmbientLightStatus::TWILIGHT_3,
    mobile_apis::AmbientLightStatus::TWILIGHT_4,
    mobile_apis::AmbientLightStatus::DAY,
    mobile_apis::AmbientLightStatus::ALS_UNKNOWN,
    mobile_apis::AmbientLightStatus::INVALID
};


template<>
const EnumConversionHelper<mobile_apis::ModuleType::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::ModuleType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::ModuleType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::ModuleType::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::ModuleType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::ModuleType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::ModuleType::eType>::cstring_values_[] = {
    "CLIMATE",
    "RADIO",
    "SEAT",
    "AUDIO",
    "LIGHT",
    "HMI_SETTINGS"
};

template<>
const mobile_apis::ModuleType::eType
EnumConversionHelper<mobile_apis::ModuleType::eType>::enum_values_[] = {
    mobile_apis::ModuleType::CLIMATE,
    mobile_apis::ModuleType::RADIO,
    mobile_apis::ModuleType::SEAT,
    mobile_apis::ModuleType::AUDIO,
    mobile_apis::ModuleType::LIGHT,
    mobile_apis::ModuleType::HMI_SETTINGS
};


template<>
const EnumConversionHelper<mobile_apis::DefrostZone::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::DefrostZone::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::DefrostZone::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::DefrostZone::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::DefrostZone::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::DefrostZone::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::DefrostZone::eType>::cstring_values_[] = {
    "FRONT",
    "REAR",
    "ALL",
    "NONE"
};

template<>
const mobile_apis::DefrostZone::eType
EnumConversionHelper<mobile_apis::DefrostZone::eType>::enum_values_[] = {
    mobile_apis::DefrostZone::FRONT,
    mobile_apis::DefrostZone::REAR,
    mobile_apis::DefrostZone::ALL,
    mobile_apis::DefrostZone::NONE
};


template<>
const EnumConversionHelper<mobile_apis::VentilationMode::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::VentilationMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::VentilationMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::VentilationMode::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::VentilationMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::VentilationMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::VentilationMode::eType>::cstring_values_[] = {
    "UPPER",
    "LOWER",
    "BOTH",
    "NONE"
};

template<>
const mobile_apis::VentilationMode::eType
EnumConversionHelper<mobile_apis::VentilationMode::eType>::enum_values_[] = {
    mobile_apis::VentilationMode::UPPER,
    mobile_apis::VentilationMode::LOWER,
    mobile_apis::VentilationMode::BOTH,
    mobile_apis::VentilationMode::NONE
};


template<>
const EnumConversionHelper<mobile_apis::RadioBand::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::RadioBand::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::RadioBand::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::RadioBand::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::RadioBand::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::RadioBand::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::RadioBand::eType>::cstring_values_[] = {
    "AM",
    "FM",
    "XM"
};

template<>
const mobile_apis::RadioBand::eType
EnumConversionHelper<mobile_apis::RadioBand::eType>::enum_values_[] = {
    mobile_apis::RadioBand::AM,
    mobile_apis::RadioBand::FM,
    mobile_apis::RadioBand::XM
};


template<>
const EnumConversionHelper<mobile_apis::RadioState::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::RadioState::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::RadioState::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::RadioState::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::RadioState::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::RadioState::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::RadioState::eType>::cstring_values_[] = {
    "ACQUIRING",
    "ACQUIRED",
    "MULTICAST",
    "NOT_FOUND"
};

template<>
const mobile_apis::RadioState::eType
EnumConversionHelper<mobile_apis::RadioState::eType>::enum_values_[] = {
    mobile_apis::RadioState::ACQUIRING,
    mobile_apis::RadioState::ACQUIRED,
    mobile_apis::RadioState::MULTICAST,
    mobile_apis::RadioState::NOT_FOUND
};


template<>
const EnumConversionHelper<mobile_apis::TemperatureUnit::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::TemperatureUnit::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::TemperatureUnit::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::TemperatureUnit::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::TemperatureUnit::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::TemperatureUnit::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::TemperatureUnit::eType>::cstring_values_[] = {
    "FAHRENHEIT",
    "CELSIUS"
};

template<>
const mobile_apis::TemperatureUnit::eType
EnumConversionHelper<mobile_apis::TemperatureUnit::eType>::enum_values_[] = {
    mobile_apis::TemperatureUnit::FAHRENHEIT,
    mobile_apis::TemperatureUnit::CELSIUS
};


template<>
const EnumConversionHelper<mobile_apis::FileType::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::FileType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::FileType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::FileType::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::FileType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::FileType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::FileType::eType>::cstring_values_[] = {
    "GRAPHIC_BMP",
    "GRAPHIC_JPEG",
    "GRAPHIC_PNG",
    "AUDIO_WAVE",
    "AUDIO_MP3",
    "AUDIO_AAC",
    "BINARY",
    "JSON"
};

template<>
const mobile_apis::FileType::eType
EnumConversionHelper<mobile_apis::FileType::eType>::enum_values_[] = {
    mobile_apis::FileType::GRAPHIC_BMP,
    mobile_apis::FileType::GRAPHIC_JPEG,
    mobile_apis::FileType::GRAPHIC_PNG,
    mobile_apis::FileType::AUDIO_WAVE,
    mobile_apis::FileType::AUDIO_MP3,
    mobile_apis::FileType::AUDIO_AAC,
    mobile_apis::FileType::BINARY,
    mobile_apis::FileType::JSON
};


template<>
const EnumConversionHelper<mobile_apis::FuelCutoffStatus::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::FuelCutoffStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::FuelCutoffStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::FuelCutoffStatus::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::FuelCutoffStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::FuelCutoffStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::FuelCutoffStatus::eType>::cstring_values_[] = {
    "TERMINATE_FUEL",
    "NORMAL_OPERATION",
    "FAULT"
};

template<>
const mobile_apis::FuelCutoffStatus::eType
EnumConversionHelper<mobile_apis::FuelCutoffStatus::eType>::enum_values_[] = {
    mobile_apis::FuelCutoffStatus::FCS_TERMINATE_FUEL,
    mobile_apis::FuelCutoffStatus::FCS_NORMAL_OPERATION,
    mobile_apis::FuelCutoffStatus::FCS_FAULT
};


template<>
const EnumConversionHelper<mobile_apis::EmergencyEventType::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::EmergencyEventType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::EmergencyEventType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::EmergencyEventType::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::EmergencyEventType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::EmergencyEventType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::EmergencyEventType::eType>::cstring_values_[] = {
    "NO_EVENT",
    "FRONTAL",
    "SIDE",
    "REAR",
    "ROLLOVER",
    "NOT_SUPPORTED",
    "FAULT"
};

template<>
const mobile_apis::EmergencyEventType::eType
EnumConversionHelper<mobile_apis::EmergencyEventType::eType>::enum_values_[] = {
    mobile_apis::EmergencyEventType::EET_NO_EVENT,
    mobile_apis::EmergencyEventType::EET_FRONTAL,
    mobile_apis::EmergencyEventType::EET_SIDE,
    mobile_apis::EmergencyEventType::EET_REAR,
    mobile_apis::EmergencyEventType::EET_ROLLOVER,
    mobile_apis::EmergencyEventType::EET_NOT_SUPPORTED,
    mobile_apis::EmergencyEventType::EET_FAULT
};


template<>
const EnumConversionHelper<mobile_apis::ECallConfirmationStatus::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::ECallConfirmationStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::ECallConfirmationStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::ECallConfirmationStatus::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::ECallConfirmationStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::ECallConfirmationStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::ECallConfirmationStatus::eType>::cstring_values_[] = {
    "NORMAL",
    "CALL_IN_PROGRESS",
    "CALL_CANCELLED",
    "CALL_COMPLETED",
    "CALL_UNSUCCESSFUL",
    "ECALL_CONFIGURED_OFF",
    "CALL_COMPLETE_DTMF_TIMEOUT"
};

template<>
const mobile_apis::ECallConfirmationStatus::eType
EnumConversionHelper<mobile_apis::ECallConfirmationStatus::eType>::enum_values_[] = {
    mobile_apis::ECallConfirmationStatus::ECCS_NORMAL,
    mobile_apis::ECallConfirmationStatus::ECCS_CALL_IN_PROGRESS,
    mobile_apis::ECallConfirmationStatus::ECCS_CALL_CANCELLED,
    mobile_apis::ECallConfirmationStatus::CALL_COMPLETED,
    mobile_apis::ECallConfirmationStatus::ECCS_CALL_UNSUCCESSFUL,
    mobile_apis::ECallConfirmationStatus::ECCS_ECALL_CONFIGURED_OFF,
    mobile_apis::ECallConfirmationStatus::ECCS_CALL_COMPLETE_DTMF_TIMEOUT
};


template<>
const EnumConversionHelper<mobile_apis::PowerModeQualificationStatus::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::PowerModeQualificationStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::PowerModeQualificationStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::PowerModeQualificationStatus::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::PowerModeQualificationStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::PowerModeQualificationStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::PowerModeQualificationStatus::eType>::cstring_values_[] = {
    "POWER_MODE_UNDEFINED",
    "POWER_MODE_EVALUATION_IN_PROGRESS",
    "NOT_DEFINED",
    "POWER_MODE_OK"
};

template<>
const mobile_apis::PowerModeQualificationStatus::eType
EnumConversionHelper<mobile_apis::PowerModeQualificationStatus::eType>::enum_values_[] = {
    mobile_apis::PowerModeQualificationStatus::POWER_MODE_UNDEFINED,
    mobile_apis::PowerModeQualificationStatus::POWER_MODE_EVALUATION_IN_PROGRESS,
    mobile_apis::PowerModeQualificationStatus::NOT_DEFINED,
    mobile_apis::PowerModeQualificationStatus::POWER_MODE_OK
};


template<>
const EnumConversionHelper<mobile_apis::PowerModeStatus::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::PowerModeStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::PowerModeStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::PowerModeStatus::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::PowerModeStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::PowerModeStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::PowerModeStatus::eType>::cstring_values_[] = {
    "KEY_OUT",
    "KEY_RECENTLY_OUT",
    "KEY_APPROVED_0",
    "POST_ACCESORY_0",
    "ACCESORY_1",
    "POST_IGNITION_1",
    "IGNITION_ON_2",
    "RUNNING_2",
    "CRANK_3"
};

template<>
const mobile_apis::PowerModeStatus::eType
EnumConversionHelper<mobile_apis::PowerModeStatus::eType>::enum_values_[] = {
    mobile_apis::PowerModeStatus::KEY_OUT,
    mobile_apis::PowerModeStatus::KEY_RECENTLY_OUT,
    mobile_apis::PowerModeStatus::KEY_APPROVED_0,
    mobile_apis::PowerModeStatus::POST_ACCESORY_0,
    mobile_apis::PowerModeStatus::ACCESORY_1,
    mobile_apis::PowerModeStatus::POST_IGNITION_1,
    mobile_apis::PowerModeStatus::IGNITION_ON_2,
    mobile_apis::PowerModeStatus::RUNNING_2,
    mobile_apis::PowerModeStatus::CRANK_3
};


template<>
const EnumConversionHelper<mobile_apis::CarModeStatus::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::CarModeStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::CarModeStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::CarModeStatus::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::CarModeStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::CarModeStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::CarModeStatus::eType>::cstring_values_[] = {
    "NORMAL",
    "FACTORY",
    "TRANSPORT",
    "CRASH"
};

template<>
const mobile_apis::CarModeStatus::eType
EnumConversionHelper<mobile_apis::CarModeStatus::eType>::enum_values_[] = {
    mobile_apis::CarModeStatus::CMS_NORMAL,
    mobile_apis::CarModeStatus::CMS_FACTORY,
    mobile_apis::CarModeStatus::CMS_TRANSPORT,
    mobile_apis::CarModeStatus::CMS_CRASH
};


template<>
const EnumConversionHelper<mobile_apis::VehicleDataResultCode::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::VehicleDataResultCode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::VehicleDataResultCode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::VehicleDataResultCode::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::VehicleDataResultCode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::VehicleDataResultCode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::VehicleDataResultCode::eType>::cstring_values_[] = {
    "SUCCESS",
    "TRUNCATED_DATA",
    "DISALLOWED",
    "USER_DISALLOWED",
    "INVALID_ID",
    "VEHICLE_DATA_NOT_AVAILABLE",
    "DATA_ALREADY_SUBSCRIBED",
    "DATA_NOT_SUBSCRIBED",
    "IGNORED"
};

template<>
const mobile_apis::VehicleDataResultCode::eType
EnumConversionHelper<mobile_apis::VehicleDataResultCode::eType>::enum_values_[] = {
    mobile_apis::VehicleDataResultCode::VDRC_SUCCESS,
    mobile_apis::VehicleDataResultCode::VDRC_TRUNCATED_DATA,
    mobile_apis::VehicleDataResultCode::VDRC_DISALLOWED,
    mobile_apis::VehicleDataResultCode::VDRC_USER_DISALLOWED,
    mobile_apis::VehicleDataResultCode::VDRC_INVALID_ID,
    mobile_apis::VehicleDataResultCode::VDRC_DATA_NOT_AVAILABLE,
    mobile_apis::VehicleDataResultCode::VDRC_DATA_ALREADY_SUBSCRIBED,
    mobile_apis::VehicleDataResultCode::VDRC_DATA_NOT_SUBSCRIBED,
    mobile_apis::VehicleDataResultCode::VDRC_IGNORED
};


template<>
const EnumConversionHelper<mobile_apis::TurnSignal::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::TurnSignal::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::TurnSignal::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::TurnSignal::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::TurnSignal::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::TurnSignal::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::TurnSignal::eType>::cstring_values_[] = {
    "OFF",
    "LEFT",
    "RIGHT",
    "BOTH"
};

template<>
const mobile_apis::TurnSignal::eType
EnumConversionHelper<mobile_apis::TurnSignal::eType>::enum_values_[] = {
    mobile_apis::TurnSignal::OFF,
    mobile_apis::TurnSignal::LEFT,
    mobile_apis::TurnSignal::RIGHT,
    mobile_apis::TurnSignal::BOTH
};


template<>
const EnumConversionHelper<mobile_apis::TouchType::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::TouchType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::TouchType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::TouchType::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::TouchType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::TouchType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::TouchType::eType>::cstring_values_[] = {
    "BEGIN",
    "MOVE",
    "END",
    "CANCEL"
};

template<>
const mobile_apis::TouchType::eType
EnumConversionHelper<mobile_apis::TouchType::eType>::enum_values_[] = {
    mobile_apis::TouchType::BEGIN,
    mobile_apis::TouchType::MOVE,
    mobile_apis::TouchType::END,
    mobile_apis::TouchType::CANCEL
};


template<>
const EnumConversionHelper<mobile_apis::PermissionStatus::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::PermissionStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::PermissionStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::PermissionStatus::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::PermissionStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::PermissionStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::PermissionStatus::eType>::cstring_values_[] = {
    "ALLOWED",
    "DISALLOWED",
    "USER_DISALLOWED",
    "USER_CONSENT_PENDING"
};

template<>
const mobile_apis::PermissionStatus::eType
EnumConversionHelper<mobile_apis::PermissionStatus::eType>::enum_values_[] = {
    mobile_apis::PermissionStatus::PS_ALLOWED,
    mobile_apis::PermissionStatus::PS_DISALLOWED,
    mobile_apis::PermissionStatus::PS_USER_DISALLOWED,
    mobile_apis::PermissionStatus::PS_USER_CONSENT_PENDING
};


template<>
const EnumConversionHelper<mobile_apis::KeyboardLayout::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::KeyboardLayout::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::KeyboardLayout::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::KeyboardLayout::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::KeyboardLayout::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::KeyboardLayout::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::KeyboardLayout::eType>::cstring_values_[] = {
    "QWERTY",
    "QWERTZ",
    "AZERTY"
};

template<>
const mobile_apis::KeyboardLayout::eType
EnumConversionHelper<mobile_apis::KeyboardLayout::eType>::enum_values_[] = {
    mobile_apis::KeyboardLayout::QWERTY,
    mobile_apis::KeyboardLayout::QWERTZ,
    mobile_apis::KeyboardLayout::AZERTY
};


template<>
const EnumConversionHelper<mobile_apis::KeyboardEvent::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::KeyboardEvent::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::KeyboardEvent::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::KeyboardEvent::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::KeyboardEvent::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::KeyboardEvent::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::KeyboardEvent::eType>::cstring_values_[] = {
    "KEYPRESS",
    "ENTRY_SUBMITTED",
    "ENTRY_VOICE",
    "ENTRY_CANCELLED",
    "ENTRY_ABORTED"
};

template<>
const mobile_apis::KeyboardEvent::eType
EnumConversionHelper<mobile_apis::KeyboardEvent::eType>::enum_values_[] = {
    mobile_apis::KeyboardEvent::KEYPRESS,
    mobile_apis::KeyboardEvent::ENTRY_SUBMITTED,
    mobile_apis::KeyboardEvent::ENTRY_VOICE,
    mobile_apis::KeyboardEvent::ENTRY_CANCELLED,
    mobile_apis::KeyboardEvent::ENTRY_ABORTED
};


template<>
const EnumConversionHelper<mobile_apis::KeypressMode::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::KeypressMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::KeypressMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::KeypressMode::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::KeypressMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::KeypressMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::KeypressMode::eType>::cstring_values_[] = {
    "SINGLE_KEYPRESS",
    "QUEUE_KEYPRESSES",
    "RESEND_CURRENT_ENTRY"
};

template<>
const mobile_apis::KeypressMode::eType
EnumConversionHelper<mobile_apis::KeypressMode::eType>::enum_values_[] = {
    mobile_apis::KeypressMode::SINGLE_KEYPRESS,
    mobile_apis::KeypressMode::QUEUE_KEYPRESSES,
    mobile_apis::KeypressMode::RESEND_CURRENT_ENTRY
};


template<>
const EnumConversionHelper<mobile_apis::RequestType::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::RequestType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::RequestType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::RequestType::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::RequestType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::RequestType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::RequestType::eType>::cstring_values_[] = {
    "HTTP",
    "FILE_RESUME",
    "AUTH_REQUEST",
    "AUTH_CHALLENGE",
    "AUTH_ACK",
    "PROPRIETARY",
    "QUERY_APPS",
    "LAUNCH_APP",
    "LOCK_SCREEN_ICON_URL",
    "TRAFFIC_MESSAGE_CHANNEL",
    "DRIVER_PROFILE",
    "VOICE_SEARCH",
    "NAVIGATION",
    "PHONE",
    "CLIMATE",
    "SETTINGS",
    "VEHICLE_DIAGNOSTICS",
    "EMERGENCY",
    "MEDIA",
    "FOTA",
    "OEM_SPECIFIC",
    "ICON_URL"
};

template<>
const mobile_apis::RequestType::eType
EnumConversionHelper<mobile_apis::RequestType::eType>::enum_values_[] = {
    mobile_apis::RequestType::HTTP,
    mobile_apis::RequestType::FILE_RESUME,
    mobile_apis::RequestType::AUTH_REQUEST,
    mobile_apis::RequestType::AUTH_CHALLENGE,
    mobile_apis::RequestType::AUTH_ACK,
    mobile_apis::RequestType::PROPRIETARY,
    mobile_apis::RequestType::QUERY_APPS,
    mobile_apis::RequestType::LAUNCH_APP,
    mobile_apis::RequestType::LOCK_SCREEN_ICON_URL,
    mobile_apis::RequestType::TRAFFIC_MESSAGE_CHANNEL,
    mobile_apis::RequestType::DRIVER_PROFILE,
    mobile_apis::RequestType::VOICE_SEARCH,
    mobile_apis::RequestType::NAVIGATION,
    mobile_apis::RequestType::PHONE,
    mobile_apis::RequestType::CLIMATE,
    mobile_apis::RequestType::SETTINGS,
    mobile_apis::RequestType::VEHICLE_DIAGNOSTICS,
    mobile_apis::RequestType::EMERGENCY,
    mobile_apis::RequestType::MEDIA,
    mobile_apis::RequestType::FOTA,
    mobile_apis::RequestType::OEM_SPECIFIC,
    mobile_apis::RequestType::ICON_URL
};


template<>
const EnumConversionHelper<mobile_apis::AppHMIType::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::AppHMIType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::AppHMIType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::AppHMIType::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::AppHMIType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::AppHMIType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::AppHMIType::eType>::cstring_values_[] = {
    "DEFAULT",
    "COMMUNICATION",
    "MEDIA",
    "MESSAGING",
    "NAVIGATION",
    "INFORMATION",
    "SOCIAL",
    "BACKGROUND_PROCESS",
    "TESTING",
    "SYSTEM",
    "PROJECTION",
    "REMOTE_CONTROL"
};

template<>
const mobile_apis::AppHMIType::eType
EnumConversionHelper<mobile_apis::AppHMIType::eType>::enum_values_[] = {
    mobile_apis::AppHMIType::DEFAULT,
    mobile_apis::AppHMIType::COMMUNICATION,
    mobile_apis::AppHMIType::MEDIA,
    mobile_apis::AppHMIType::MESSAGING,
    mobile_apis::AppHMIType::NAVIGATION,
    mobile_apis::AppHMIType::INFORMATION,
    mobile_apis::AppHMIType::SOCIAL,
    mobile_apis::AppHMIType::BACKGROUND_PROCESS,
    mobile_apis::AppHMIType::TESTING,
    mobile_apis::AppHMIType::SYSTEM,
    mobile_apis::AppHMIType::PROJECTION,
    mobile_apis::AppHMIType::REMOTE_CONTROL
};


template<>
const EnumConversionHelper<mobile_apis::PredefinedLayout::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::PredefinedLayout::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::PredefinedLayout::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::PredefinedLayout::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::PredefinedLayout::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::PredefinedLayout::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::PredefinedLayout::eType>::cstring_values_[] = {
    "DEFAULT",
    "MEDIA",
    "NON-MEDIA",
    "ONSCREEN_PRESETS",
    "NAV_FULLSCREEN_MAP",
    "NAV_LIST",
    "NAV_KEYBOARD",
    "GRAPHIC_WITH_TEXT",
    "TEXT_WITH_GRAPHIC",
    "TILES_ONLY",
    "TEXTBUTTONS_ONLY",
    "GRAPHIC_WITH_TILES",
    "TILES_WITH_GRAPHIC",
    "GRAPHIC_WITH_TEXT_AND_SOFTBUTTONS",
    "TEXT_AND_SOFTBUTTONS_WITH_GRAPHIC",
    "GRAPHIC_WITH_TEXTBUTTONS",
    "TEXTBUTTONS_WITH_GRAPHIC",
    "LARGE_GRAPHIC_WITH_SOFTBUTTONS",
    "DOUBLE_GRAPHIC_WITH_SOFTBUTTONS",
    "LARGE_GRAPHIC_ONLY"
};

template<>
const mobile_apis::PredefinedLayout::eType
EnumConversionHelper<mobile_apis::PredefinedLayout::eType>::enum_values_[] = {
    mobile_apis::PredefinedLayout::DEFAULT,
    mobile_apis::PredefinedLayout::MEDIA,
    mobile_apis::PredefinedLayout::NON_MEDIA,
    mobile_apis::PredefinedLayout::ONSCREEN_PRESETS,
    mobile_apis::PredefinedLayout::NAV_FULLSCREEN_MAP,
    mobile_apis::PredefinedLayout::NAV_LIST,
    mobile_apis::PredefinedLayout::NAV_KEYBOARD,
    mobile_apis::PredefinedLayout::GRAPHIC_WITH_TEXT,
    mobile_apis::PredefinedLayout::TEXT_WITH_GRAPHIC,
    mobile_apis::PredefinedLayout::TILES_ONLY,
    mobile_apis::PredefinedLayout::TEXTBUTTONS_ONLY,
    mobile_apis::PredefinedLayout::GRAPHIC_WITH_TILES,
    mobile_apis::PredefinedLayout::TILES_WITH_GRAPHIC,
    mobile_apis::PredefinedLayout::GRAPHIC_WITH_TEXT_AND_SOFTBUTTONS,
    mobile_apis::PredefinedLayout::TEXT_AND_SOFTBUTTONS_WITH_GRAPHIC,
    mobile_apis::PredefinedLayout::GRAPHIC_WITH_TEXTBUTTONS,
    mobile_apis::PredefinedLayout::TEXTBUTTONS_WITH_GRAPHIC,
    mobile_apis::PredefinedLayout::LARGE_GRAPHIC_WITH_SOFTBUTTONS,
    mobile_apis::PredefinedLayout::DOUBLE_GRAPHIC_WITH_SOFTBUTTONS,
    mobile_apis::PredefinedLayout::LARGE_GRAPHIC_ONLY
};


template<>
const EnumConversionHelper<mobile_apis::FunctionID::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::FunctionID::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::FunctionID::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::FunctionID::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::FunctionID::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::FunctionID::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::FunctionID::eType>::cstring_values_[] = {
    "RESERVED",
    "RegisterAppInterfaceID",
    "UnregisterAppInterfaceID",
    "SetGlobalPropertiesID",
    "ResetGlobalPropertiesID",
    "AddCommandID",
    "DeleteCommandID",
    "AddSubMenuID",
    "DeleteSubMenuID",
    "CreateInteractionChoiceSetID",
    "PerformInteractionID",
    "DeleteInteractionChoiceSetID",
    "AlertID",
    "ShowID",
    "SpeakID",
    "SetMediaClockTimerID",
    "PerformAudioPassThruID",
    "EndAudioPassThruID",
    "SubscribeButtonID",
    "UnsubscribeButtonID",
    "SubscribeVehicleDataID",
    "UnsubscribeVehicleDataID",
    "GetVehicleDataID",
    "ReadDIDID",
    "GetDTCsID",
    "ScrollableMessageID",
    "SliderID",
    "ShowConstantTBTID",
    "AlertManeuverID",
    "UpdateTurnListID",
    "ChangeRegistrationID",
    "GenericResponseID",
    "PutFileID",
    "DeleteFileID",
    "ListFilesID",
    "SetAppIconID",
    "SetDisplayLayoutID",
    "DiagnosticMessageID",
    "SystemRequestID",
    "SendLocationID",
    "DialNumberID",
    "ButtonPressID",
    "GetInteriorVehicleDataID",
    "SetInteriorVehicleDataID",
    "GetWayPointsID",
    "SubscribeWayPointsID",
    "UnsubscribeWayPointsID",
    "GetSystemCapabilityID",
    "SendHapticDataID",
    "SetCloudAppPropertiesID",
    "GetCloudAppPropertiesID",
    "PublishAppServiceID",
    "GetAppServiceDataID",
    "GetFileID",
    "PerformAppServiceInteractionID",
    "CloseApplicationID",
    "OnHMIStatusID",
    "OnAppInterfaceUnregisteredID",
    "OnButtonEventID",
    "OnButtonPressID",
    "OnVehicleDataID",
    "OnCommandID",
    "OnTBTClientStateID",
    "OnDriverDistractionID",
    "OnPermissionsChangeID",
    "OnAudioPassThruID",
    "OnLanguageChangeID",
    "OnKeyboardInputID",
    "OnTouchEventID",
    "OnSystemRequestID",
    "OnHashChangeID",
    "OnInteriorVehicleDataID",
    "OnWayPointChangeID",
    "OnRCStatusID",
    "OnAppServiceDataID",
    "OnSystemCapabilityUpdatedID",
    "EncodedSyncPDataID",
    "SyncPDataID",
    "OnEncodedSyncPDataID",
    "OnSyncPDataID"
};

template<>
const mobile_apis::FunctionID::eType
EnumConversionHelper<mobile_apis::FunctionID::eType>::enum_values_[] = {
    mobile_apis::FunctionID::RESERVED,
    mobile_apis::FunctionID::RegisterAppInterfaceID,
    mobile_apis::FunctionID::UnregisterAppInterfaceID,
    mobile_apis::FunctionID::SetGlobalPropertiesID,
    mobile_apis::FunctionID::ResetGlobalPropertiesID,
    mobile_apis::FunctionID::AddCommandID,
    mobile_apis::FunctionID::DeleteCommandID,
    mobile_apis::FunctionID::AddSubMenuID,
    mobile_apis::FunctionID::DeleteSubMenuID,
    mobile_apis::FunctionID::CreateInteractionChoiceSetID,
    mobile_apis::FunctionID::PerformInteractionID,
    mobile_apis::FunctionID::DeleteInteractionChoiceSetID,
    mobile_apis::FunctionID::AlertID,
    mobile_apis::FunctionID::ShowID,
    mobile_apis::FunctionID::SpeakID,
    mobile_apis::FunctionID::SetMediaClockTimerID,
    mobile_apis::FunctionID::PerformAudioPassThruID,
    mobile_apis::FunctionID::EndAudioPassThruID,
    mobile_apis::FunctionID::SubscribeButtonID,
    mobile_apis::FunctionID::UnsubscribeButtonID,
    mobile_apis::FunctionID::SubscribeVehicleDataID,
    mobile_apis::FunctionID::UnsubscribeVehicleDataID,
    mobile_apis::FunctionID::GetVehicleDataID,
    mobile_apis::FunctionID::ReadDIDID,
    mobile_apis::FunctionID::GetDTCsID,
    mobile_apis::FunctionID::ScrollableMessageID,
    mobile_apis::FunctionID::SliderID,
    mobile_apis::FunctionID::ShowConstantTBTID,
    mobile_apis::FunctionID::AlertManeuverID,
    mobile_apis::FunctionID::UpdateTurnListID,
    mobile_apis::FunctionID::ChangeRegistrationID,
    mobile_apis::FunctionID::GenericResponseID,
    mobile_apis::FunctionID::PutFileID,
    mobile_apis::FunctionID::DeleteFileID,
    mobile_apis::FunctionID::ListFilesID,
    mobile_apis::FunctionID::SetAppIconID,
    mobile_apis::FunctionID::SetDisplayLayoutID,
    mobile_apis::FunctionID::DiagnosticMessageID,
    mobile_apis::FunctionID::SystemRequestID,
    mobile_apis::FunctionID::SendLocationID,
    mobile_apis::FunctionID::DialNumberID,
    mobile_apis::FunctionID::ButtonPressID,
    mobile_apis::FunctionID::GetInteriorVehicleDataID,
    mobile_apis::FunctionID::SetInteriorVehicleDataID,
    mobile_apis::FunctionID::GetWayPointsID,
    mobile_apis::FunctionID::SubscribeWayPointsID,
    mobile_apis::FunctionID::UnsubscribeWayPointsID,
    mobile_apis::FunctionID::GetSystemCapabilityID,
    mobile_apis::FunctionID::SendHapticDataID,
    mobile_apis::FunctionID::SetCloudAppPropertiesID,
    mobile_apis::FunctionID::GetCloudAppPropertiesID,
    mobile_apis::FunctionID::PublishAppServiceID,
    mobile_apis::FunctionID::GetAppServiceDataID,
    mobile_apis::FunctionID::GetFileID,
    mobile_apis::FunctionID::PerformAppServiceInteractionID,
    mobile_apis::FunctionID::CloseApplicationID,
    mobile_apis::FunctionID::OnHMIStatusID,
    mobile_apis::FunctionID::OnAppInterfaceUnregisteredID,
    mobile_apis::FunctionID::OnButtonEventID,
    mobile_apis::FunctionID::OnButtonPressID,
    mobile_apis::FunctionID::OnVehicleDataID,
    mobile_apis::FunctionID::OnCommandID,
    mobile_apis::FunctionID::OnTBTClientStateID,
    mobile_apis::FunctionID::OnDriverDistractionID,
    mobile_apis::FunctionID::OnPermissionsChangeID,
    mobile_apis::FunctionID::OnAudioPassThruID,
    mobile_apis::FunctionID::OnLanguageChangeID,
    mobile_apis::FunctionID::OnKeyboardInputID,
    mobile_apis::FunctionID::OnTouchEventID,
    mobile_apis::FunctionID::OnSystemRequestID,
    mobile_apis::FunctionID::OnHashChangeID,
    mobile_apis::FunctionID::OnInteriorVehicleDataID,
    mobile_apis::FunctionID::OnWayPointChangeID,
    mobile_apis::FunctionID::OnRCStatusID,
    mobile_apis::FunctionID::OnAppServiceDataID,
    mobile_apis::FunctionID::OnSystemCapabilityUpdatedID,
    mobile_apis::FunctionID::EncodedSyncPDataID,
    mobile_apis::FunctionID::SyncPDataID,
    mobile_apis::FunctionID::OnEncodedSyncPDataID,
    mobile_apis::FunctionID::OnSyncPDataID
};


template<>
const EnumConversionHelper<mobile_apis::messageType::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::messageType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::messageType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::messageType::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::messageType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::messageType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::messageType::eType>::cstring_values_[] = {
    "request",
    "response",
    "notification"
};

template<>
const mobile_apis::messageType::eType
EnumConversionHelper<mobile_apis::messageType::eType>::enum_values_[] = {
    mobile_apis::messageType::request,
    mobile_apis::messageType::response,
    mobile_apis::messageType::notification
};


template<>
const EnumConversionHelper<mobile_apis::WayPointType::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::WayPointType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::WayPointType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::WayPointType::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::WayPointType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::WayPointType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::WayPointType::eType>::cstring_values_[] = {
    "ALL",
    "DESTINATION"
};

template<>
const mobile_apis::WayPointType::eType
EnumConversionHelper<mobile_apis::WayPointType::eType>::enum_values_[] = {
    mobile_apis::WayPointType::ALL,
    mobile_apis::WayPointType::DESTINATION
};


template<>
const EnumConversionHelper<mobile_apis::SystemCapabilityType::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::SystemCapabilityType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::SystemCapabilityType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::SystemCapabilityType::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::SystemCapabilityType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::SystemCapabilityType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::SystemCapabilityType::eType>::cstring_values_[] = {
    "NAVIGATION",
    "PHONE_CALL",
    "VIDEO_STREAMING",
    "REMOTE_CONTROL",
    "APP_SERVICES"
};

template<>
const mobile_apis::SystemCapabilityType::eType
EnumConversionHelper<mobile_apis::SystemCapabilityType::eType>::enum_values_[] = {
    mobile_apis::SystemCapabilityType::NAVIGATION,
    mobile_apis::SystemCapabilityType::PHONE_CALL,
    mobile_apis::SystemCapabilityType::VIDEO_STREAMING,
    mobile_apis::SystemCapabilityType::REMOTE_CONTROL,
    mobile_apis::SystemCapabilityType::APP_SERVICES
};


template<>
const EnumConversionHelper<mobile_apis::MassageZone::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::MassageZone::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::MassageZone::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::MassageZone::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::MassageZone::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::MassageZone::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::MassageZone::eType>::cstring_values_[] = {
    "LUMBAR",
    "SEAT_CUSHION"
};

template<>
const mobile_apis::MassageZone::eType
EnumConversionHelper<mobile_apis::MassageZone::eType>::enum_values_[] = {
    mobile_apis::MassageZone::LUMBAR,
    mobile_apis::MassageZone::SEAT_CUSHION
};


template<>
const EnumConversionHelper<mobile_apis::MassageMode::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::MassageMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::MassageMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::MassageMode::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::MassageMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::MassageMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::MassageMode::eType>::cstring_values_[] = {
    "OFF",
    "LOW",
    "HIGH"
};

template<>
const mobile_apis::MassageMode::eType
EnumConversionHelper<mobile_apis::MassageMode::eType>::enum_values_[] = {
    mobile_apis::MassageMode::OFF,
    mobile_apis::MassageMode::LOW,
    mobile_apis::MassageMode::HIGH
};


template<>
const EnumConversionHelper<mobile_apis::MassageCushion::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::MassageCushion::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::MassageCushion::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::MassageCushion::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::MassageCushion::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::MassageCushion::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::MassageCushion::eType>::cstring_values_[] = {
    "TOP_LUMBAR",
    "MIDDLE_LUMBAR",
    "BOTTOM_LUMBAR",
    "BACK_BOLSTERS",
    "SEAT_BOLSTERS"
};

template<>
const mobile_apis::MassageCushion::eType
EnumConversionHelper<mobile_apis::MassageCushion::eType>::enum_values_[] = {
    mobile_apis::MassageCushion::TOP_LUMBAR,
    mobile_apis::MassageCushion::MIDDLE_LUMBAR,
    mobile_apis::MassageCushion::BOTTOM_LUMBAR,
    mobile_apis::MassageCushion::BACK_BOLSTERS,
    mobile_apis::MassageCushion::SEAT_BOLSTERS
};


template<>
const EnumConversionHelper<mobile_apis::SeatMemoryActionType::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::SeatMemoryActionType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::SeatMemoryActionType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::SeatMemoryActionType::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::SeatMemoryActionType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::SeatMemoryActionType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::SeatMemoryActionType::eType>::cstring_values_[] = {
    "SAVE",
    "RESTORE",
    "NONE"
};

template<>
const mobile_apis::SeatMemoryActionType::eType
EnumConversionHelper<mobile_apis::SeatMemoryActionType::eType>::enum_values_[] = {
    mobile_apis::SeatMemoryActionType::SAVE,
    mobile_apis::SeatMemoryActionType::RESTORE,
    mobile_apis::SeatMemoryActionType::NONE
};


template<>
const EnumConversionHelper<mobile_apis::SupportedSeat::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::SupportedSeat::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::SupportedSeat::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::SupportedSeat::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::SupportedSeat::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::SupportedSeat::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::SupportedSeat::eType>::cstring_values_[] = {
    "DRIVER",
    "FRONT_PASSENGER"
};

template<>
const mobile_apis::SupportedSeat::eType
EnumConversionHelper<mobile_apis::SupportedSeat::eType>::enum_values_[] = {
    mobile_apis::SupportedSeat::DRIVER,
    mobile_apis::SupportedSeat::FRONT_PASSENGER
};


template<>
const EnumConversionHelper<mobile_apis::LightName::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::LightName::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::LightName::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::LightName::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::LightName::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::LightName::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::LightName::eType>::cstring_values_[] = {
    "FRONT_LEFT_HIGH_BEAM",
    "FRONT_RIGHT_HIGH_BEAM",
    "FRONT_LEFT_LOW_BEAM",
    "FRONT_RIGHT_LOW_BEAM",
    "FRONT_LEFT_PARKING_LIGHT",
    "FRONT_RIGHT_PARKING_LIGHT",
    "FRONT_LEFT_FOG_LIGHT",
    "FRONT_RIGHT_FOG_LIGHT",
    "FRONT_LEFT_DAYTIME_RUNNING_LIGHT",
    "FRONT_RIGHT_DAYTIME_RUNNING_LIGHT",
    "FRONT_LEFT_TURN_LIGHT",
    "FRONT_RIGHT_TURN_LIGHT",
    "REAR_LEFT_FOG_LIGHT",
    "REAR_RIGHT_FOG_LIGHT",
    "REAR_LEFT_TAIL_LIGHT",
    "REAR_RIGHT_TAIL_LIGHT",
    "REAR_LEFT_BRAKE_LIGHT",
    "REAR_RIGHT_BRAKE_LIGHT",
    "REAR_LEFT_TURN_LIGHT",
    "REAR_RIGHT_TURN_LIGHT",
    "REAR_REGISTRATION_PLATE_LIGHT",
    "HIGH_BEAMS",
    "LOW_BEAMS",
    "FOG_LIGHTS",
    "RUNNING_LIGHTS",
    "PARKING_LIGHTS",
    "BRAKE_LIGHTS",
    "REAR_REVERSING_LIGHTS",
    "SIDE_MARKER_LIGHTS",
    "LEFT_TURN_LIGHTS",
    "RIGHT_TURN_LIGHTS",
    "HAZARD_LIGHTS",
    "REAR_CARGO_LIGHTS",
    "REAR_TRUCK_BED_LIGHTS",
    "REAR_TRAILER_LIGHTS",
    "LEFT_SPOT_LIGHTS",
    "RIGHT_SPOT_LIGHTS",
    "LEFT_PUDDLE_LIGHTS",
    "RIGHT_PUDDLE_LIGHTS",
    "AMBIENT_LIGHTS",
    "OVERHEAD_LIGHTS",
    "READING_LIGHTS",
    "TRUNK_LIGHTS",
    "EXTERIOR_FRONT_LIGHTS",
    "EXTERIOR_REAR_LIGHTS",
    "EXTERIOR_LEFT_LIGHTS",
    "EXTERIOR_RIGHT_LIGHTS",
    "EXTERIOR_ALL_LIGHTS"
};

template<>
const mobile_apis::LightName::eType
EnumConversionHelper<mobile_apis::LightName::eType>::enum_values_[] = {
    mobile_apis::LightName::FRONT_LEFT_HIGH_BEAM,
    mobile_apis::LightName::FRONT_RIGHT_HIGH_BEAM,
    mobile_apis::LightName::FRONT_LEFT_LOW_BEAM,
    mobile_apis::LightName::FRONT_RIGHT_LOW_BEAM,
    mobile_apis::LightName::FRONT_LEFT_PARKING_LIGHT,
    mobile_apis::LightName::FRONT_RIGHT_PARKING_LIGHT,
    mobile_apis::LightName::FRONT_LEFT_FOG_LIGHT,
    mobile_apis::LightName::FRONT_RIGHT_FOG_LIGHT,
    mobile_apis::LightName::FRONT_LEFT_DAYTIME_RUNNING_LIGHT,
    mobile_apis::LightName::FRONT_RIGHT_DAYTIME_RUNNING_LIGHT,
    mobile_apis::LightName::FRONT_LEFT_TURN_LIGHT,
    mobile_apis::LightName::FRONT_RIGHT_TURN_LIGHT,
    mobile_apis::LightName::REAR_LEFT_FOG_LIGHT,
    mobile_apis::LightName::REAR_RIGHT_FOG_LIGHT,
    mobile_apis::LightName::REAR_LEFT_TAIL_LIGHT,
    mobile_apis::LightName::REAR_RIGHT_TAIL_LIGHT,
    mobile_apis::LightName::REAR_LEFT_BRAKE_LIGHT,
    mobile_apis::LightName::REAR_RIGHT_BRAKE_LIGHT,
    mobile_apis::LightName::REAR_LEFT_TURN_LIGHT,
    mobile_apis::LightName::REAR_RIGHT_TURN_LIGHT,
    mobile_apis::LightName::REAR_REGISTRATION_PLATE_LIGHT,
    mobile_apis::LightName::HIGH_BEAMS,
    mobile_apis::LightName::LOW_BEAMS,
    mobile_apis::LightName::FOG_LIGHTS,
    mobile_apis::LightName::RUNNING_LIGHTS,
    mobile_apis::LightName::PARKING_LIGHTS,
    mobile_apis::LightName::BRAKE_LIGHTS,
    mobile_apis::LightName::REAR_REVERSING_LIGHTS,
    mobile_apis::LightName::SIDE_MARKER_LIGHTS,
    mobile_apis::LightName::LEFT_TURN_LIGHTS,
    mobile_apis::LightName::RIGHT_TURN_LIGHTS,
    mobile_apis::LightName::HAZARD_LIGHTS,
    mobile_apis::LightName::REAR_CARGO_LIGHTS,
    mobile_apis::LightName::REAR_TRUCK_BED_LIGHTS,
    mobile_apis::LightName::REAR_TRAILER_LIGHTS,
    mobile_apis::LightName::LEFT_SPOT_LIGHTS,
    mobile_apis::LightName::RIGHT_SPOT_LIGHTS,
    mobile_apis::LightName::LEFT_PUDDLE_LIGHTS,
    mobile_apis::LightName::RIGHT_PUDDLE_LIGHTS,
    mobile_apis::LightName::AMBIENT_LIGHTS,
    mobile_apis::LightName::OVERHEAD_LIGHTS,
    mobile_apis::LightName::READING_LIGHTS,
    mobile_apis::LightName::TRUNK_LIGHTS,
    mobile_apis::LightName::EXTERIOR_FRONT_LIGHTS,
    mobile_apis::LightName::EXTERIOR_REAR_LIGHTS,
    mobile_apis::LightName::EXTERIOR_LEFT_LIGHTS,
    mobile_apis::LightName::EXTERIOR_RIGHT_LIGHTS,
    mobile_apis::LightName::EXTERIOR_ALL_LIGHTS
};


template<>
const EnumConversionHelper<mobile_apis::LightStatus::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::LightStatus::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::LightStatus::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::LightStatus::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::LightStatus::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::LightStatus::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::LightStatus::eType>::cstring_values_[] = {
    "ON",
    "OFF",
    "RAMP_UP",
    "RAMP_DOWN",
    "UNKNOWN",
    "INVALID"
};

template<>
const mobile_apis::LightStatus::eType
EnumConversionHelper<mobile_apis::LightStatus::eType>::enum_values_[] = {
    mobile_apis::LightStatus::ON,
    mobile_apis::LightStatus::OFF,
    mobile_apis::LightStatus::RAMP_UP,
    mobile_apis::LightStatus::RAMP_DOWN,
    mobile_apis::LightStatus::UNKNOWN,
    mobile_apis::LightStatus::INVALID
};


template<>
const EnumConversionHelper<mobile_apis::DisplayMode::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::DisplayMode::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::DisplayMode::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::DisplayMode::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::DisplayMode::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::DisplayMode::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::DisplayMode::eType>::cstring_values_[] = {
    "DAY",
    "NIGHT",
    "AUTO"
};

template<>
const mobile_apis::DisplayMode::eType
EnumConversionHelper<mobile_apis::DisplayMode::eType>::enum_values_[] = {
    mobile_apis::DisplayMode::DAY,
    mobile_apis::DisplayMode::NIGHT,
    mobile_apis::DisplayMode::AUTO
};


template<>
const EnumConversionHelper<mobile_apis::DistanceUnit::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::DistanceUnit::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::DistanceUnit::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::DistanceUnit::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::DistanceUnit::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::DistanceUnit::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::DistanceUnit::eType>::cstring_values_[] = {
    "MILES",
    "KILOMETERS"
};

template<>
const mobile_apis::DistanceUnit::eType
EnumConversionHelper<mobile_apis::DistanceUnit::eType>::enum_values_[] = {
    mobile_apis::DistanceUnit::MILES,
    mobile_apis::DistanceUnit::KILOMETERS
};


template<>
const EnumConversionHelper<mobile_apis::MetadataType::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::MetadataType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::MetadataType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::MetadataType::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::MetadataType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::MetadataType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::MetadataType::eType>::cstring_values_[] = {
    "mediaTitle",
    "mediaArtist",
    "mediaAlbum",
    "mediaYear",
    "mediaGenre",
    "mediaStation",
    "rating",
    "currentTemperature",
    "maximumTemperature",
    "minimumTemperature",
    "weatherTerm",
    "humidity"
};

template<>
const mobile_apis::MetadataType::eType
EnumConversionHelper<mobile_apis::MetadataType::eType>::enum_values_[] = {
    mobile_apis::MetadataType::mediaTitle,
    mobile_apis::MetadataType::mediaArtist,
    mobile_apis::MetadataType::mediaAlbum,
    mobile_apis::MetadataType::mediaYear,
    mobile_apis::MetadataType::mediaGenre,
    mobile_apis::MetadataType::mediaStation,
    mobile_apis::MetadataType::rating,
    mobile_apis::MetadataType::currentTemperature,
    mobile_apis::MetadataType::maximumTemperature,
    mobile_apis::MetadataType::minimumTemperature,
    mobile_apis::MetadataType::weatherTerm,
    mobile_apis::MetadataType::humidity
};


template<>
const EnumConversionHelper<mobile_apis::AppServiceType::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::AppServiceType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::AppServiceType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::AppServiceType::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::AppServiceType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::AppServiceType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::AppServiceType::eType>::cstring_values_[] = {
    "MEDIA",
    "WEATHER",
    "NAVIGATION"
};

template<>
const mobile_apis::AppServiceType::eType
EnumConversionHelper<mobile_apis::AppServiceType::eType>::enum_values_[] = {
    mobile_apis::AppServiceType::MEDIA,
    mobile_apis::AppServiceType::WEATHER,
    mobile_apis::AppServiceType::NAVIGATION
};


template<>
const EnumConversionHelper<mobile_apis::MediaType::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::MediaType::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::MediaType::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::MediaType::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::MediaType::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::MediaType::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::MediaType::eType>::cstring_values_[] = {
    "MUSIC",
    "PODCAST",
    "AUDIOBOOK",
    "OTHER"
};

template<>
const mobile_apis::MediaType::eType
EnumConversionHelper<mobile_apis::MediaType::eType>::enum_values_[] = {
    mobile_apis::MediaType::MUSIC,
    mobile_apis::MediaType::PODCAST,
    mobile_apis::MediaType::AUDIOBOOK,
    mobile_apis::MediaType::OTHER
};


template<>
const EnumConversionHelper<mobile_apis::NavigationAction::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::NavigationAction::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::NavigationAction::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::NavigationAction::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::NavigationAction::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::NavigationAction::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::NavigationAction::eType>::cstring_values_[] = {
    "TURN",
    "EXIT",
    "STAY",
    "MERGE",
    "FERRY",
    "CAR_SHUTTLE_TRAIN",
    "WAYPOINT"
};

template<>
const mobile_apis::NavigationAction::eType
EnumConversionHelper<mobile_apis::NavigationAction::eType>::enum_values_[] = {
    mobile_apis::NavigationAction::TURN,
    mobile_apis::NavigationAction::EXIT,
    mobile_apis::NavigationAction::STAY,
    mobile_apis::NavigationAction::MERGE,
    mobile_apis::NavigationAction::FERRY,
    mobile_apis::NavigationAction::CAR_SHUTTLE_TRAIN,
    mobile_apis::NavigationAction::WAYPOINT
};


template<>
const EnumConversionHelper<mobile_apis::NavigationJunction::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::NavigationJunction::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::NavigationJunction::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::NavigationJunction::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::NavigationJunction::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::NavigationJunction::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::NavigationJunction::eType>::cstring_values_[] = {
    "REGULAR",
    "BIFURCATION",
    "MULTI_CARRIAGEWAY",
    "ROUNDABOUT",
    "TRAVERSABLE_ROUNDABOUT",
    "JUGHANDLE",
    "ALL_WAY_YIELD",
    "TURN_AROUND"
};

template<>
const mobile_apis::NavigationJunction::eType
EnumConversionHelper<mobile_apis::NavigationJunction::eType>::enum_values_[] = {
    mobile_apis::NavigationJunction::REGULAR,
    mobile_apis::NavigationJunction::BIFURCATION,
    mobile_apis::NavigationJunction::MULTI_CARRIAGEWAY,
    mobile_apis::NavigationJunction::ROUNDABOUT,
    mobile_apis::NavigationJunction::TRAVERSABLE_ROUNDABOUT,
    mobile_apis::NavigationJunction::JUGHANDLE,
    mobile_apis::NavigationJunction::ALL_WAY_YIELD,
    mobile_apis::NavigationJunction::TURN_AROUND
};


template<>
const EnumConversionHelper<mobile_apis::Direction::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::Direction::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::Direction::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::Direction::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::Direction::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::Direction::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::Direction::eType>::cstring_values_[] = {
    "LEFT",
    "RIGHT"
};

template<>
const mobile_apis::Direction::eType
EnumConversionHelper<mobile_apis::Direction::eType>::enum_values_[] = {
    mobile_apis::Direction::LEFT,
    mobile_apis::Direction::RIGHT
};


template<>
const EnumConversionHelper<mobile_apis::ServiceUpdateReason::eType>::EnumToCStringMap
EnumConversionHelper<mobile_apis::ServiceUpdateReason::eType>::enum_to_cstring_map_ =
  EnumConversionHelper<mobile_apis::ServiceUpdateReason::eType>::InitEnumToCStringMap();

template<>
const EnumConversionHelper<mobile_apis::ServiceUpdateReason::eType>::CStringToEnumMap
EnumConversionHelper<mobile_apis::ServiceUpdateReason::eType>::cstring_to_enum_map_ =
  EnumConversionHelper<mobile_apis::ServiceUpdateReason::eType>::InitCStringToEnumMap();

template<>
const char* const
EnumConversionHelper<mobile_apis::ServiceUpdateReason::eType>::cstring_values_[] = {
    "PUBLISHED",
    "REMOVED",
    "ACTIVATED",
    "DEACTIVATED",
    "MANIFEST_UPDATE"
};

template<>
const mobile_apis::ServiceUpdateReason::eType
EnumConversionHelper<mobile_apis::ServiceUpdateReason::eType>::enum_values_[] = {
    mobile_apis::ServiceUpdateReason::PUBLISHED,
    mobile_apis::ServiceUpdateReason::REMOVED,
    mobile_apis::ServiceUpdateReason::ACTIVATED,
    mobile_apis::ServiceUpdateReason::DEACTIVATED,
    mobile_apis::ServiceUpdateReason::MANIFEST_UPDATE
};


} // ns_smart_objects
} // ns_smart_device_link

